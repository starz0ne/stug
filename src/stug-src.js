//// ad.js
let ADSDKLOADED = false;
let ADSDK = 'adinplay';
try {
    if (window.location.pathname === '/cg.html') {
        if (game.inIframe()) {
            ADSDK = 'crazygames';
        } else {
            window.location = '/';
        }
    } else if (window.location.pathname === '/kg.html') {
        if (game.inIframe()) {
            ADSDK = 'kongregate';
        } else {
            window.location = '/';
        }
    }
} catch (e) {
    console.error('Failed to validate iframe location:', e);
}

if (isDesktopApp) {
    ADSDK = 'steam';
}

const GTAG_ID = 'G-XG3YMSH514';
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());

gtag('config', GTAG_ID);
loadScript('https://www.googletagmanager.com/gtag/js?id=G-XG3YMSH514', () => {});

console.info('Loading ad SDK:', ADSDK);
if (ADSDK === 'adinplay') {
    loadScript('https://api.adinplay.com/libs/aiptag/pub/RBZ/stug.io/tag.min.js', () => {
        ADSDKLOADED = true;
    });
} else if (ADSDK === 'crazygames') {
    loadScript('https://sdk.crazygames.com/crazygames-sdk-v1.js', () => {
        const crazysdk = window.CrazyGames.CrazySDK.getInstance();
        crazysdk.init();
        ADSDKLOADED = true;

        crazysdk.addEventListener('adStarted', () => {
            Howler.mute(true);
        });
        crazysdk.addEventListener('adError', () => {
            Howler.mute(false);
            alert('Ad could not be loaded.');
        });
        crazysdk.addEventListener('adFinished', () => {
            Howler.mute(false);
            game.itemRollComponent.showModal(true);
        });
    });
} else if (ADSDK === 'kongregate') {
    game.shouldRegisterKongregateUser = false;
    game.signInKongregate = function(shouldRegisterUser) {
        if (shouldRegisterUser) {
            game.shouldRegisterKongregateUser = true;
        }

        if (!game.services.user.isLoggedIn()) {
            if (kongregate.services.isGuest()) {
                if (game.shouldRegisterKongregateUser) {
                    kongregate.services.showRegistrationBox();
                } else {
                    game.services.user.removeTokenCookie();
                }
            } else {
                let kongregateToken = kongregate.services.getGameAuthToken();
                if (window.localStorage) {
                    window.localStorage.setItem('name', kongregate.services.getUsername().replace('_', ''));
                }
                game.services.user.login('kongregate', {
                    userId: kongregate.services.getUserId(),
                    token: kongregateToken,
                    register: game.shouldRegisterKongregateUser
                }, game.appComponent);
            }
        }
    }

    loadScript('https://cdn1.kongregate.com/javascripts/kongregate_api.js', () => {
        kongregateAPI.loadAPI(function(){
            window.kongregate = kongregateAPI.getAPI();
            console.info('Kongregate API loaded:', kongregate.services.getUsername());

            game.signInKongregate();
            kongregate.services.addEventListener('login', function(){
                game.signInKongregate();
            });

            kongregate.mtx.addEventListener('adCompleted', function() {
                game.itemRollComponent.showModal(true);
            });

            kongregate.mtx.addEventListener('adCompleted', function() {
                game.itemRollComponent.showModal(true);
            });

            kongregate.mtx.initializeIncentivizedAds();
        });
    });
} else if (ADSDK === 'steam') {
    ADSDKLOADED = true;
} else {
    console.error('Invalid ad SDK value:', ADSDK);
}

var adplayer = null;
var aiptag = aiptag || {};
aiptag.cmd = aiptag.cmd || [];
aiptag.cmd.player = aiptag.cmd.player || [];
aiptag.cmd.display = aiptag.cmd.display || [];
aiptag.gdprShowConsentTool = true;

aiptag.cmd.player.push(function() {
    aiptag.adplayer = new aipPlayer({
        AD_WIDTH: 960,
        AD_HEIGHT: 540,
        AD_FULLSCREEN: true,
        LOADING_TEXT: 'Loading Advertisement',
        AD_DISPLAY: 'default',
        TRUSTED: true,
        PREROLL_ELEM: function(){return document.getElementById('preroll')},
        AIP_COMPLETE: function ()  {
            $('#preroll').hide();
            game.videoComplete();
        },
        AIP_REMOVE: function ()  {

        },
        AIP_REWARDEDCOMPLETE: function (state)  {

        },
        AIP_REWARDEDGRANTED: function ()  {
            game.itemRollComponent.showModal(true);
        },
    });
});

(function() {
    if (ADSDK === 'adinplay') {
        game.services.ad = {
            checkShowVideoAd: function () {
                return false;

                let lastVidCheck = parseInt(window.localStorage.getItem('lastVidCheck'));
                if (!lastVidCheck) {
                    lastVidCheck = 0;
                }

                if (lastVidCheck >= 3) {
                    window.localStorage.setItem('lastVidCheck', 0);
                    $('#preroll-container').show();
                    if (typeof aiptag.adplayer !== 'undefined') {
                        aiptag.cmd.player.push(function () {
                            aiptag.adplayer.startPreRoll();
                        });
                    }
                    return true;
                } else {
                    window.localStorage.setItem('lastVidCheck', lastVidCheck + 1);
                }

                return false;
            },
            showBannerAd: function () {
                setTimeout(function () {
                    if (game.isPlayScreen) {
                        $('#ad-game').show();
                    } else {
                        $('#ad-menu').show();
                    }

                    let showAd = true;
                    if (game.isPlayScreen && isMobile) {
                        showAd = false;
                    }

                    if (showAd) {
                        aiptag.cmd.display.push(function () {
                            aipDisplayTag.display('stug-io_300x250');
                        });
                    }
                }, 5);
            },
            hideBannerAd: function () {
                if (window.location.pathname === '/play/') {
                    $('#ad-game').hide();
                } else {
                    $('#ad-menu').hide();
                }
            },
            showRewardedAd: function () {
                if (typeof aiptag.adplayer !== 'undefined' && aiptag.adplayer.startRewardedAd) {
                    aiptag.cmd.player.push(function () {
                        aiptag.adplayer.startRewardedAd({preload: false, showLoading: true});
                    });
                } else {
                    alert('Ad could not be loaded.');
                }
            }
        };
    } else if (ADSDK === 'crazygames') {
        game.services.ad = {
            checkShowVideoAd: function () {
                return false;
            },
            showBannerAd: function () {
                setTimeout(function () {
                    if (game.isPlayScreen) {
                        $('#ad-game').show();
                    } else {
                        $('#ad-menu').show();
                    }

                    let showAd = true;
                    if (game.isPlayScreen && isMobile) {
                        showAd = false;
                    }

                    if (showAd) {
                        const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                        crazysdk.requestBanner([
                            {
                                containerId: 'stug-io_300x250',
                                size: '300x250'
                            }
                        ]);
                    }
                }, 5);
            },
            hideBannerAd: function () {
                if (window.location.pathname === '/play/') {
                    $('#ad-game').hide();
                } else {
                    $('#ad-menu').hide();
                }
            },
            showRewardedAd: function () {
                try {
                    const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                    crazysdk.requestAd('rewarded');
                } catch (e) {
                    console.error('Failed to show rewarded ad:', e);
                    alert('Ad could not be loaded.');
                }
            }
        };
    } else if (ADSDK === 'kongregate') {
        game.services.ad = {
            checkShowVideoAd: function () {
                return false;
            },
            showBannerAd: function () {
                $('#ad-menu').hide();
                $('#ad-game').hide();
            },
            hideBannerAd: function () {
                $('#ad-game').hide();
                $('#ad-menu').hide();
            },
            showRewardedAd: function () {
                kongregate.mtx.showIncentivizedAd();
            }
        };
    } else if (ADSDK === 'steam') {
        game.services.ad = {
            checkShowVideoAd: function () {
                return false;
            },
            showBannerAd: function () {
                $('#ad-menu').hide();
                $('#ad-game').hide();
            },
            hideBannerAd: function () {
                $('#ad-game').hide();
                $('#ad-menu').hide();
            },
            showRewardedAd: function () {

            }
        };
    }

    game.services.ad.showBundle = function(bundle) {
        game.playSound('button_click');
        game.itemInfoModal.showModal('shop', window.gameServer.itemListMap[bundle], 'bundle');
    };

    game.services.ad.disablePromo = false;
    game.services.ad.checkShowPromo = async function() {
        if (game.services.ad.disablePromo) {
            game.services.ad.disablePromo = false;
            return;
        }
        if (!game.disableTutorialAsk) {
            return;
        }

        if (!game.isInMenu) {
            return;
        }

        if (!game.services.user.isLoggedIn()) {
            return;
        }

        let forceShowPromo = false;
        let promos = [];

        /*
        try {
            const currentTempPromo = 1;
            let tempPromo = parseInt(Cookies.get('tempPromo'));
            if (tempPromo !== currentTempPromo) {
                promos = [{
                    title: 'Panzerschland Update',
                    html: '<img src="/assets/promo/stug_email_splash.png">',
                    onClick: () => {
                        game.appComponent.changeState('state-research', {
                            tree: 'research_tree_germany'
                        });
                    }
                }];
                forceShowPromo = true;
                Cookies.set('tempPromo', currentTempPromo, game.services.user.getCookieData());
            }
        } catch (e) {}
        */

        if (!forceShowPromo) {
            try {
                let promoTime = Cookies.get('promoTime');
                if (!promoTime || Date.now() - parseInt(promoTime) >= 12 * 60 * 60 * 1000) {
                    Cookies.set('promoTime', Date.now(), game.services.user.getCookieData());
                } else {
                    return;
                }
            } catch (e) {
                return;
            }

            let inventorySlugs = {};
            try {
                let token = Cookies.get('token');
                if (token) {
                    let inventory = await axios.get(API_URL + '/inventory?token=' + token + '&category=bundle');
                    for (let i = 0; i<inventory.data.length; i++) {
                        let sku = inventory.data[i];
                        inventorySlugs[sku.skuSlug] = sku;
                    }
                }
            } catch (e) {
                console.error('Failed to get inventory for showing promo.', e);
            }

            if (game.services.user.currentUser && !inventorySlugs['bundle-starter']) {
                promos.push({
                    title: 'Purchase Starter Bundle',
                    html: `
                    <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.5); margin-bottom:50px;">
                        <img @mouseenter="bme" v-on:click="openGoldModal()" class="gold-image" src="/assets/promo/promo_starter_bundle.jpg">
                        <div class="bundle-overlay">
                            <button style="position:relative; top:-12px; left:-85px; transform:scale(0.7); font-size:30px; text-shadow: 2px 2px rgba(0,0,0,0.9);" class="app-btn app-btn-gold">
                                Starter Bundle
                            </button>
                            <div style="font-size:18px; position:relative; top:-25px; left:50px; text-align:left; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                <img class="bundle-icon" src="/assets/goldicon_shadow.png"> <span style="font-size:26px;">10,000 Gold</span><br>
                                <img class="bundle-icon-sm" src="/assets/booster1_thumbnail.png"> 20 x1.5 Boosters<br>
                                <img class="bundle-icon-sm" src="/assets/booster2_thumbnail.png"> 10 x2 Boosters<br>
                                <img class="bundle-icon-sm" src="/assets/booster3_thumbnail.png"> 5 x3 Booster
                            </div>
                        </div>
                    </div>
                    `,
                    onClick: (e, component) => {
                        game.goldComponent.showModal(true);
                    }
                });
            }

            if (game.services.user.currentUser && !inventorySlugs['bundle-scorched-earth']) {
                promos.push({
                    title: 'Purchase Scorched Earth Bundle',
                    html: `
                    <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.5); margin-bottom:50px;">
                        <img @mouseenter="bme" v-on:click="openGoldModal()" class="gold-image" src="/assets/promo/scorched_earth_bundle.gif">
                        <div class="bundle-overlay">
                            <button style="position:relative; top:-12px; left:-85px; transform:scale(0.7); font-size:30px; text-shadow: 2px 2px rgba(0,0,0,0.9);" class="app-btn app-btn-gold">
                                Scorched Earth
                            </button>
                            <div style="font-size:18px; position:relative; top:-25px; left:50px; text-align:left; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                <img class="bundle-icon" src="/assets/goldicon_shadow.png"> <span style="font-size:26px;">20,000 Gold</span><br>
                                P-34/85 - Renegade<br>
                                Pummeler II - Road Capt.<br>
                                <img class="bundle-icon-sm" src="/assets/booster3_thumbnail.png"> 10 x3 Booster
                            </div>
                        </div>
                    </div>
                    `,
                    onClick: (e, component) => {
                        game.goldComponent.showModal(true);
                    }
                });
            }

            /*
            if (game.services.user.currentUser && !inventorySlugs['bundle-aces-tank']) {
                promos.push({
                    title: 'Purchase Ace Bundle',
                    html: `
                    <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.5); margin-bottom:50px;">
                        <img @mouseenter="bme" v-on:click="openGoldModal()" class="gold-image" src="/assets/promo/aces_bundle.gif">
                        <div class="bundle-overlay">
                            <button style="position:relative; top:-12px; left:-85px; transform:scale(0.7); font-size:30px; text-shadow: 2px 2px rgba(0,0,0,0.9);" class="app-btn app-btn-gold app-btn-aces-bundle">
                                Aces Bundle
                            </button>
                            <div style="font-size:18px; position:relative; top:-25px; left:50px; text-align:left; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                <img class="bundle-icon" src="/assets/goldicon_shadow.png"> <span style="font-size:26px;">20,000 Gold</span><br>
                                Tigress I - Desert Ace<br>
                                Heckler - Bocage Ace<br>
                                <img class="bundle-icon-sm" src="/assets/booster3_thumbnail.png"> 25 x3 Booster
                            </div>
                        </div>
                    </div>
                    `,
                    onClick: (e, component) => {
                        game.goldComponent.showModal(true);
                    }
                });
            }
            */

            /*
            if (game.services.user.currentUser && !inventorySlugs['bundle-halloween1']) {
                promos.push({
                    title: 'Purchase Halloween Bundle',
                    html: `
                    <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.5); margin-bottom:50px;">
                        <img @mouseenter="bme" v-on:click="game.services.ad.showBundle('bundle-halloween1')" class="gold-image" src="/assets/promo/halloween_bundle_splash.gif">
                        <div class="bundle-overlay">
                            <div :set="daysLeft = Math.round((new Date('11/1/2022').getTime() - new Date().getTime()) / (1000 * 3600 * 24))" style="color:#f3ab0d; font-size:13px; position:relative; top:50px; margin-left:auto; margin-right:auto; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                LIMITED TIME OFFER
                            </div>
                        </div>
                    </div>
                    `,
                    onClick: (e, component) => {
                        game.services.ad.showBundle('bundle-halloween1');
                    }
                });
            }
            */

            if (game.inIframe() && game.services.user.isLoggedIn()) {
                promos.push({
                    title: 'Rate Us!',
                    image: '/assets/promo/promo_rating.jpg'
                });
            }
        }

        let displayPromo = promos[Math.floor(Math.random()*promos.length)];
        if (displayPromo) {
            game.promoComponent.showModal(true, displayPromo);

            game.services.api.recordEvent('showPromo', {
                event_category: 'Menu',
                event_label: displayPromo.title
            });
        }
    };
})();

//// api.js
game.services.api = {
   recordEvent: (eventName, parameters) => {
       try {
           if (window.gtag) {
               gtag('event', eventName, parameters);
           }
       } catch (e) {}
   },
   recordTiming: (eventName, value, parameters) => {
       try {
           if (window.gtag) {
               parameters.name = eventName;
               parameters.value = value;
               gtag('timing', 'timing_complete', parameters);
           }
       } catch (e) {}
   }
};

function loadScript(url, callback){ // handy function for adding a script with a callback
   let scriptTag = document.createElement('script');
   scriptTag.src = url;

   scriptTag.onload = callback;
   scriptTag.onreadystatechange = callback;

   document.head.appendChild(scriptTag);
}

let tempApiUrl = window.location.host; // current url you're on
let stripeClientKey = 'pk_test_0P7TNqrsKhReeOJbcgCSeiY1'; // default stripe client key
if (window.location.host === 'appassets.androidplatform.net') { // if you're on android?
   //tempApiUrl = 'api.stug.io';
   tempApiUrl = 'api.dev.stug.io';
} else if (tempApiUrl.indexOf('stug.io') !== -1) {
   tempApiUrl = 'api.' + tempApiUrl; // if you're in a development tab (api.stug.io)
   stripeClientKey = 'pk_live_0DjH3Q7yRROnuQjdrVOoHVPI'; // development stripe client key
}

let websocketProtocol = window.location.protocol;
if (websocketProtocol !== 'https:') {
   websocketProtocol = 'http:';
} // if you're not on https you're on http.

if (isDesktopApp) {
   websocketProtocol = 'https:'; // on the desktop app you're 100% on https.
   tempApiUrl = 'https://api.stug.io'; // current development api url
   //tempApiUrl = 'https://api.dev.stug.io'; old development urls

   //tempApiUrl = 'http://localhost:3000'; old development urls
   //websocketProtocol = 'http:';

   Cookies = {
       get: (key) => {
           return window.localStorage.getItem(key);
       },
       set: (key, value) => {
           window.localStorage.setItem(key, value);
       },
       remove: (key) => {
           window.localStorage.removeItem(key);
       }
   };
} else {
   tempApiUrl = window.location.protocol + '//' + tempApiUrl; // if you're not on desktop, it's just protocol://url
}

let shouldLoadStripe = true;
if (isDesktopApp) {
   shouldLoadStripe = false; // for some reason they don't load stripe on the desktop 
}

const API_URL = tempApiUrl;
let stripe = null;
if (shouldLoadStripe) {
   loadScript('https://js.stripe.com/v3/', () => {
       try {
           stripe = Stripe(stripeClientKey);
       } catch (e) {
           console.error('Failed to load stripe:', e);
       }
   });
}

//// app.js
const isProduction = window.location.host === 'stug.io';
const initialLoggedOutState = 'state-play';
const initialLoggedInState = 'state-garage';

if (isDesktopApp) {
    window.electronAPI.onDebugLog((data) => {
        console.info('DEBUG LOG', data);
    });
}

if (isMobile && !isPhoneApp) {
    console.info('Mobile is disabled for now.');
    game.showLoading(false);
    $('#mobile-disabled-message').show();
} else {
    if (isDesktopApp) {
        window.electronAPI.onJoinGameRequest((data) => {
            if (data && data.inviteCode) {
                if (!game.queryData) {
                    game.queryData = {};
                }
                game.queryData.i = data.inviteCode;

                if (game.isGameLoaded) {
                    setTimeout(() => {
                        game.play(null);
                    }, 250);
                }
            }
        });
    }

    let currentStateData = null;
    game.loadVueApp = function() {
        let vueApp = new Vue({
            el: '#app',
            mounted: function () {
                game.appComponent = this;

                this.updateIsPlayScreen();
                this.$root.$on('changeState', (newState) => {
                    if (newState && typeof newState === 'object' && !Array.isArray(newState)) {
                        this.changeState(newState.state, newState);
                    } else {
                        this.changeState(newState);
                    }
                });

                this.$root.$on('signIn', async () => {
                    this.currentUser = game.services.user.currentUser;
                    this.onlyShowMenuContent = false;

                    if (game.isInMenu && game.disableTutorialAsk) {
                        let token = Cookies.get('token');
                        if (token) {
                            let analyticsId = await game.services.user.getAnalyticsId();
                            axios.get(API_URL + '/shop/gold/canClaimGold?token=' + token + (analyticsId ? '&analyticsId=' + analyticsId : '')).then((res) => {
                                let data = res.data;
                                if (data.success) {
                                    this.canClaimGold = ADSDK !== 'steam' && ADSDK !== 'kongregate' && data.canClaim;
                                    if (data.loginReward) {
                                        game.services.ad.disablePromo = true;
                                        game.itemComponent.showModal(true, {
                                            name: data.loginReward.name,
                                            secondName: data.loginReward.secondName,
                                            image: data.loginReward.image,
                                            amount: data.loginReward.amount
                                        });
                                    }
                                } else {
                                    this.canClaimGold = false;
                                }
                            });
                        }
                    }
                });
            },
            data: function () {
                axios.get(API_URL + '/twitch').then((res) => {
                    let data = res.data;
                    if (data.success) {
                        let streams = [];
                        for (let i=0; i<data.data.length; i++) {
                            let stream = data.data[i];
                            stream.thumbnailUrl = stream.thumbnailUrl.replace('{width}', '100');
                            stream.thumbnailUrl = stream.thumbnailUrl.replace('{height}', '75');
                            streams.push(stream);
                        }
                        this.twitchStreams = streams;
                    }
                });

                setTimeout(() => {
                    try {
                        if (game.queryData && game.queryData.payment === 'completed') {
                            let purchaseInfo = Cookies.get('purchaseInfo');
                            if (purchaseInfo) {
                                Cookies.remove('purchaseInfo', {path: '/', domain: window.location.host});
                                purchaseInfo = JSON.parse(purchaseInfo);

                                game.itemComponent.showModal(true, purchaseInfo);
                            }
                        }
                    } catch (e) {}
                }, 1);

                let newShopItems = false;

                try {
                    if (window.localStorage) {
                        let shopRefresh = window.localStorage.getItem('shopRefresh');
                        if (shopRefresh) {
                            let timeUntilNextRefresh = Math.floor(parseInt(shopRefresh)-Date.now());
                            if (timeUntilNextRefresh <= 0) {
                                newShopItems = true;
                            }
                        } else {
                            newShopItems = true;
                        }
                    }
                } catch (e) {}

                let token = Cookies.get('token');
                return {
                    //currentReplay: Math.floor(Math.random()*game.menuBackgroundReplays.length),
                    currentReplay: 0,
                    chats: null,
                    isGameLoaded: false,
                    isPlayScreen: game.isPlayScreen,
                    isInMenu: game.isInMenu,
                    enableBackground: true,
                    disableInnerScrollbar: false,
                    currentState: null,
                    onlyShowMenuContent: false,
                    canClaimGold: !token,
                    playerSettings: {},
                    equippedData: {},
                    twitchStreams: [],
                    newShopItems: newShopItems,
                    currentUser: game.services.user.currentUser,
                    navStates: [
                        {
                            name: 'Shop',
                            state: 'state-shop',
                            class: 'app-nav-button-shop',
                            textStyle: {
                                top: '0',
                                left: '-2px'
                            }
                        },
                        {
                            name: 'Garage',
                            state: 'state-garage',
                            class: 'app-nav-button-garage'
                        },
                        {
                            name: 'Research',
                            state: 'state-research',
                            class: 'app-nav-button-research'
                        },
                        {
                            name: 'Friends',
                            state: 'state-friends',
                            class: 'app-nav-button-friends'
                        },
                        {
                            name: 'Leaderboard',
                            state: 'state-leaderboards',
                            class: 'app-nav-button-leaderboard'
                        }
                    ]
                };
            },
            methods: {
                playNextReplay: function () {
                    if (!game.watchingRecording && (!game.services.user.isLoggedIn() || this.currentState !== 'state-garage') && game.isRunning()) {
                        let replay = game.menuBackgroundReplays[this.currentReplay];
                        this.currentReplay++;
                        if (this.currentReplay >= game.menuBackgroundReplays.length) {
                            this.currentReplay = 0;
                        }
                        this.openReplay(replay);
                    }
                },
                openReplay: function (replay) {
                    replay = JSON.parse(JSON.stringify(replay));
                    for (let i = 0; i < replay.snapshots.length; i++) {
                        let snapshot = replay.snapshots[i];
                        snapshot.data = str2ab(snapshot.data);
                    }

                    game.startSingleplayer(false, false, false, true, true, replay.map);
                    setTimeout(() => {
                        game.lobbyComponent.showModal(false);
                        game.startWatchingRecording(replay, false, () => {
                            this.playNextReplay();
                        });
                    }, 1);
                },
                shopViewed: function() {
                    if (this.newShopItems) {
                        this.newShopItems = false;
                        try {
                            let nextRefreshTime = (Math.floor(Date.now() / window.gameServer.sharedConstants.SHOP_REFRESH_INTERVAL) * Math.floor(window.gameServer.sharedConstants.SHOP_REFRESH_INTERVAL)) + Math.floor(window.gameServer.sharedConstants.SHOP_REFRESH_INTERVAL);
                            window.localStorage.setItem('shopRefresh', nextRefreshTime);
                        } catch (e) {}
                    }
                },
                changeState: function (newState, stateData) {
                    if (this.currentState === newState && !stateData) {
                        return;
                    }

                    this.enableBackground = true;
                    this.disableInnerScrollbar = false;
                    currentStateData = stateData;
                    this.currentState = newState;
                    this.$refs.app.scrollTop = 0;

                    if (!game.showingLoadingScreen) {
                        game.playSound('button_click');
                    }

                    this.$root.$emit('stateChanged', this.currentState);

                    if (isDesktopApp) {
                        let status = '#Status_InMenu';
                        if (this.currentState === 'state-garage') {
                            status = '#Status_InGarage'
                        } else if (this.currentState === 'state-research') {
                            status = '#Status_InResearch'
                        }
                        window.electronAPI.steamSetRichPresence('steam_display', status);
                        window.electronAPI.steamSetRichPresence('connect', '');
                    }

                    this.playNextReplay();

                    game.services.api.recordEvent('changeState', {
                        event_category: 'Menu',
                        event_label: this.currentState
                    });
                },
                getCurrentStateData: function() {
                    return currentStateData ? currentStateData : {};
                },
                showClaimGold: function (show) {
                    this.canClaimGold = show;
                },
                updateIsPlayScreen: function (disableFullLoad) {
                    this.isPlayScreen = game.isPlayScreen;
                    this.isInMenu = game.isInMenu;
                    if (game.isPlayScreen && !game.isInMenu && !game.isSingleplayer) {
                        this.currentState = null;
                    }

                    if (game.isPlayScreen && !game.isInMenu && !isMobile && !game.isSingleplayer) {
                        this.chats = [];
                        let lobbyChat = {
                            name: 'Game Chat',
                            user: null,
                            messages: [],
                            light: true
                        };
                        this.chats.push(lobbyChat);
                        game.lobbyChat = lobbyChat;
                        this.currentState = null;
                    }

                    if (!disableFullLoad) {
                        if (!game.isPlayScreen) {
                            if (Cookies.get('token')) {
                                game.services.user.initUser(this).then(() => {
                                    this.loadInitialState();
                                }, () => {
                                    Cookies.remove('token');
                                    this.loadInitialState();
                                });
                            } else {
                                this.loadInitialState();
                            }
                        }
                    }
                    this.$forceUpdate();
                },
                loadInitialState: function () {
                    if (game.queryData && game.queryData.p) {
                        game.appComponent.changeState('state-' + game.queryData.p);
                    } else if (game.queryData && game.queryData.passwordReset) {
                        game.appComponent.changeState('state-forgot-password-complete', {
                            token: game.queryData.passwordReset
                        });
                    } else {
                        game.services.ad.showBannerAd();

                        if (game.services.user.isLoggedIn() && game.services.user.currentUser && game.services.user.currentUser.currentXp >= 1000) {
                            game.disableTutorialAsk = true;
                        }
                        if (isDesktopApp && game.services.user.isLoggedIn() && !game.disableTutorialAsk) {
                            this.changeState('state-play');
                        } else if (game.services.user.isLoggedIn()) {
                            this.onlyShowMenuContent = false;
                            this.changeState(initialLoggedInState);
                        } else {
                            if (isDesktopApp) {
                                this.onlyShowMenuContent = true;
                                this.changeState('state-signin-desktop');
                            } else {
                                this.changeState(initialLoggedOutState);
                            }
                        }
                    }
                },
                reloadMenu: function () {
                    if (game.isPlayScreen && !this.currentState) {
                        return;
                    }
                    if (isDesktopApp && game.services.user.isLoggedIn() && !game.disableTutorialAsk) {
                        return;
                    }

                    game.reloadSettings();

                    if (this.currentState === 'state-garage' || (!this.currentState && Cookies.get('token'))) {
                        game.startSingleplayer(false, true, true, true, null, null, () => {
                            if (game.garageComponent) {
                                game.garageComponent.refreshCurrentSlot();
                            }
                        });
                    } else {
                        game.startSingleplayer(false, true, false, true, true, null, () => {
                            this.playNextReplay();
                        });
                    }
                },
                gameLoaded: function () {
                    if (!game.isGameLoaded) {
                        game.isGameLoaded = true;

                        if (ADSDK === 'kongregate') {
                            try {
                                kongregate.stats.submit('initialized', 1);
                            } catch (e) {
                                console.error('Failed to submit Kongregate stats:', e);
                            }
                        }

                        axios.get(API_URL + '/version').then((res) => {
                            let data = res.data;
                            if (data.success) {
                                if (window.gameServer.sharedConstants.VERSION !== data.version) {
                                    let serverVersion = data.version.split('.');
                                    serverVersion[0] = parseInt(serverVersion[0]);
                                    serverVersion[1] = parseInt(serverVersion[1]);
                                    let clientVersion = window.gameServer.sharedConstants.VERSION.split('.');
                                    clientVersion[0] = parseInt(clientVersion[0]);
                                    clientVersion[1] = parseInt(clientVersion[1]);

                                    if (clientVersion[0] !== serverVersion[0]) {
                                        console.error('Game version major mismatch:', window.gameServer.sharedConstants.VERSION, data.version);
                                        game.showGrowl('Your game version appears outdated, please update your game.', {
                                            type: 'danger',
                                            align: 'center',
                                            width: 500,
                                            delay: 6000
                                        });
                                    } else {
                                        console.warn('Game version minor mismatch:', window.gameServer.sharedConstants.VERSION, data.version);
                                    }
                                }
                            }
                        }, (err) => {
                            console.error('Failed to get game version:', err);
                        });

                        if (game.queryData && game.queryData.i) {
                            game.services.api.recordEvent('joinInvite', {
                                event_category: 'Menu'
                            });

                            setTimeout(() => {
                                game.play(null);
                            }, 250);
                        } else {
                            if (!game.services.user.isLoggedIn()) {
                                this.reloadMenu();
                            }
                        }
                    }
                },
                updatePlayerSettings: function (settings) {
                    this.playerSettings = settings;

                    let player = game.getPlayer();
                    if (player && this.playerSettings) {
                        let skinItem = window.gameServer.skinListMap[this.playerSettings.skin];
                        if (skinItem) {
                            if (!player.netData) {
                                player.netData = {
                                    cosmetics: {}
                                };
                            }
                            player.netData.cosmetics.skin = {
                                texture: skinItem.texture,
                                offset: {
                                    x: this.playerSettings.skinData.offset.x,
                                    y: this.playerSettings.skinData.offset.y
                                },
                                scale: this.playerSettings.skinData.scale,
                                rotation: this.playerSettings.skinData.rotation
                            };
                        }

                        for (let i=0; i<2; i++) {
                            let decalKey = 'decal' + i;
                            let decalSlot = this.playerSettings.decals[decalKey];
                            if (decalSlot && decalSlot.decal) {
                                let decalItem = window.gameServer.decalListMap[decalSlot.decal];
                                if (decalItem) {
                                    player.netData.cosmetics[decalKey] = {
                                        texture: decalItem.texture,
                                        section: decalSlot.decalData.section,
                                        offset: {
                                            x: decalSlot.decalData.offset.x,
                                            y: decalSlot.decalData.offset.y
                                        },
                                        scale: decalSlot.decalData.scale,
                                        rotation: decalSlot.decalData.rotation
                                    };
                                }
                            }
                        }
                        player.updateTexture();
                    }
                },
                getPlayerSettings: function () {
                    return this.playerSettings;
                },
                showSettings: function() {
                    this.$root.$emit('changeState', 'state-settings');
                },
                showAccount: function() {
                    if (game.services.user.isLoggedIn()) {
                        this.$root.$emit('changeState', 'state-profile');
                    } else {
                        this.$root.$emit('changeState', 'state-signin');
                    }
                },
                showGold: function() {
                    this.bmc();
                    if (game.services.user.isLoggedIn()) {
                        game.goldComponent.showModal(true);
                    } else {
                        this.$root.$emit('changeState', 'state-signin');
                    }
                },
                clickNavButton: function (nav) {
                    this.changeState(nav.state);
                },
                claimFreeGold: function (nav) {
                    this.bmc();
                    if (game.services.user.isLoggedIn()) {
                        game.services.ad.showRewardedAd();
                    } else {
                        this.$root.$emit('changeState', 'state-signin');
                    }
                }
            },
            template: `
    <div ref="app">
        <app-game-matching></app-game-matching>
        <app-game-round-end></app-game-round-end>
                        
        <div v-if="isPlayScreen">
            <app-game-lobby></app-game-lobby>
            <app-game-game-menu></app-game-game-menu>
            <app-game-player-menu></app-game-player-menu>
            <app-game-game-sign-in></app-game-game-sign-in>
            <app-game-death-menu></app-game-death-menu>
        </div>
        
        <div v-if="game.isMapEditor">
            <iframe class="map-editor-iframe" src="/editor/index.html"></iframe>
        </div>
        
        <app-game-state-modal></app-game-state-modal>
        <app-game-vehicle-info v-show="isInMenu || !game.isSingleplayer"></app-game-vehicle-info>
        
        <div class="app" v-show="!isPlayScreen || isInMenu" v-bind:class="{'app-background': enableBackground}">
            <app-game-item-info></app-game-item-info>
            <app-game-gold></app-game-gold>
            <app-game-item></app-game-item>
            <app-game-promo></app-game-promo>
            <app-game-item-roll></app-game-item-roll>
            <app-game-vehicle-selection></app-game-vehicle-selection>

            <div class="app-nav" v-bind:class="{'app-nav-desktop-app': isDesktopApp}" v-show="!onlyShowMenuContent">
                <div class="menu-top-content">
                    <button class="menu-top-button" v-on:click="showSettings()" @mouseenter="bme">
                        <img src="/assets/menu/menu_top_settings.png">
                    </button>
                    <button class="menu-top-button" v-on:click="showAccount()" @mouseenter="bme">
                        <img src="/assets/menu/menu_top_account.png">
                    </button>
                </div>
                <div class="menu-top"></div>
                <button v-for="nav in navStates" :key="nav.state" class="app-nav-button" @mouseenter="bme"
                    type="button"
                    v-on:click="clickNavButton(nav)"
                    v-bind:class="nav.class"
                    v-bind:style="(currentState===nav.state)? {color:'#E98401 !important'} : null">
                    <img v-if="nav.state === 'state-shop' && newShopItems" alt="New!" class="app-new-icon" src="/assets/menu/newicon.png">
                    <i class="app-nav-button-icon fa" v-if="nav.icon" v-bind:class="[nav.icon]"></i>
                    <div v-if="!nav.icon" style="width:100%;height:100px;"><br></div>
                    <div class="app-nav-button-text" v-bind:style="nav.textStyle">{{nav.name}}</div>
                </button>
                <button v-if="isDesktopApp" class="app-exit-game-button" @mouseenter="bme" v-on:click="game.quitGame()" type="button">
                    <i class="fa fa-close"></i> Exit Game
                </button>
            </div>
            <div class="app-content-container">
                <div class="app-content">
                    <app-header v-show="!onlyShowMenuContent"></app-header>
                    <div class="app-content-inner " v-bind:class="{'disable-scrollbar': disableInnerScrollbar}">
                        <component v-bind:is="currentState"></component>
                    </div>
                </div>
            </div>
            <div class="app-right" v-show="!onlyShowMenuContent">
                <div class="menu-top-right" style="height:72px;" v-on:click="showGold()">
                    <div title="Gold" class="float-left text-center gold-color" style="font-size:32px; margin-top:14px; width:236px;">
                        <img style="margin-top:-5px;" src="/assets/goldicon.png"> <span>{{currentUser ? currentUser.goldCount : '0'}}</span>
                    </div>
                    <div class="float-right" style="margin-top:7px; margin-right:6px;">
                        <button class="app-btn app-btn-add-gold" @mouseenter="bme"></button>
                    </div>
                </div>
                <div id="claim-gold-advertisement" class="claim-gold" v-if="canClaimGold">
                    <button style="margin-top:155px; transform:scale(0.75); font-size:23px;" class="app-btn app-btn-gold" @mouseenter="bme" v-on:click="claimFreeGold()">
                        <i class="fa fa-video-camera"></i> CLAIM FREE GOLD
                    </button>
                </div>
                <div v-if="ADSDK !== 'steam' && ADSDK !== 'kongregate'" id="stug-io_300x250" class="app-card-solid" style="font-size:18px; height:262px;">
                    <div style="margin-top:55px;">
                        <br>
                        Please disable your ad blocker.
                        <br>
                        Servers are expensive! :)
                    </div>
                </div>
                <div class="app-card-solid" style="height:400px;">
                    <h2><span class="animate__animated animate__flash animate__slow animate__infinite"><i class="fa fa-circle" style="color:red;"></i></span> Streaming</h2>
                    <div v-if="twitchStreams && twitchStreams.length">
                        <div class="twitch-stream" v-for="(stream, index) in twitchStreams">
                            <a v-bind:href="'https://www.twitch.tv/' + stream.userDisplayName" target="_blank" rel="noreferrer" style="text-decoration:none !important;">
                                <div class="row">
                                    <div class="col-4"><img style="width:100px; height:75px;" v-bind:src="stream.thumbnailUrl"></div>
                                    <div class="col" style="overflow:hidden; white-space:nowrap; text-overflow:ellipsis;">
                                        <b>{{stream.userDisplayName}}</b><br>
                                        <div v-if="stream.title" style="width:98%;overflow:hidden; white-space:nowrap; text-overflow:ellipsis;">{{stream.title}}<br></div>
                                        {{stream.viewers}} Viewers            
                                    </div>
                                </div>
                            </a>
                        </div>
                    </div>
                    <div v-if="!twitchStreams || !twitchStreams.length">
                        <a href="https://www.twitch.tv/directory/game/Stug/videos/all" target="_blank" style="padding:6px; font-size:16px; text-decoration:underline;">
                            Stream STUG on Twitch to have your stream show up here!<br>
                            <br>
                            <img width="50%" src="/assets/twitch_logo.svg">
                        </a>
                        <br><br>
                    </div>
                </div>
            </div>
            <!--
            <div class="footer">
                <a href="#" onclick="event.preventDefault();" data-toggle="modal" data-target="#aboutModal">About</a>&nbsp;&nbsp;|&nbsp;&nbsp;
                <a href="https://bombsightgames.com/legal/tos" target="_blank">Terms of Service</a>&nbsp;&nbsp;|&nbsp;&nbsp;
                <a href="https://bombsightgames.com/legal/privacy_policy" target="_blank">Privacy Policy</a>&nbsp;&nbsp;|&nbsp;&nbsp;
                <a href="https://bombsightgames.com/legal/cookie_policy" target="_blank">Cookie Policy</a>
                <br>
                Copyright © 2023 <a href="https://bombsightgames.com/" target="_blank">Bombsight Games</a>. All Rights Reserved.
            </div>
            -->
        </div>
        
        <div class="app-chat" v-if="chats">
            <app-chat v-for="chat in chats" v-bind:chatData="chat"></app-chat>
        </div>
    </div>
    `
        });
    }
}

function cleanUri() {
    if (ADSDK === 'kongregate') {
        return;
    }

    let uri = window.location.toString();
    let clean_uri = uri;
    if (uri.indexOf('?') !== -1) {
        clean_uri = uri.substring(0, uri.indexOf('?'));
    }
    if (uri.indexOf('#') !== -1) {
        clean_uri = uri.substring(0, uri.indexOf('#'));
    }
    window.history.replaceState({}, document.title, clean_uri);
}

function startPlayScreen(isSingleplayer, isSandbox, isInMenu) {
    game.gameCoverVisible(true);
    $('#ad-menu').remove();

    if (!isInMenu) {
        try {
            if (ADSDK === 'crazygames') {
                const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                crazysdk.gameplayStart();
            }
        } catch (e) {}
    }

    if (!isInMenu) {
        if (game.sounds['theme_menu']) {
            game.sounds['theme_menu'].stop();
        }
    }

    game.isPlayScreen = true;
    game.isSingleplayer = isSingleplayer;
    game.isSandbox = isSandbox;
    game.isInMenu = !!isInMenu;
    game.resetZoom();
    if (isSingleplayer || (game.queryData && game.queryData.token)) {
        game.services.ad.hideBannerAd();
        cleanUri();
    }

    if (!game.isInMenu) {
        game.services.socket.disconnectMenuSocket();
    }

    game.appComponent.updateIsPlayScreen();

    onResize();

    game.reloadSettings();
}
game.startPlayScreen = startPlayScreen;

game.calculateRank = function(xp) {
    return Math.floor(window.gameServer.sharedConstants.RANK_CONSTANT * Math.sqrt(xp));
};

game.quitGame = function() {
    if (isDesktopApp) {
        window.electronAPI.quitGame();
    }
};

(function() {
    game.menuSocket = null;
    if (game.isPlayScreen) {
        startPlayScreen();
    } else {
        $('#ad-game').remove();

        if (game.queryData && (game.queryData.token || game.queryData.i)) {
            cleanUri();
        }

        if (isMobile || self !== top) {
            $('body').css({
                'overflow-y': 'auto'
            });
        }
    }
})();

//// challenges.js
Vue.component('app-game-challenges', {
   created: function() {
       this.updateTimer();
       this.timer = setInterval(this.updateTimer, 1000);
   },
   beforeDestroy: function() {
       clearInterval(this.timer);
   },
   data: function() {
       this.refresh();

       if (this.challenges?.list?.length) {
           this.challenges.list.sort((a, b) => {
               return a.xp - b.xp;
           });
       }

       return {
           refreshCount: 0,
           challengeData: this.challenges ? this.challenges : null,
           refreshTime: null,
           challengesExpired: false
       };
   },
   props: ['challenges'],
   methods: {
       updateTimer: function() {
           if (!this.challengeData || !this.challengeData.expires) {
               return;
           }
           let nextRefreshTime = new Date(this.challengeData.expires);
           let timeUntilNextRefresh = Math.floor(nextRefreshTime-Date.now());
           if (timeUntilNextRefresh <= 0) {
               this.refreshTime = '00:00:00';
               if (this.challenges) {
                   this.challengesExpired = true;
               }
           } else {
               this.challengesExpired = false;
               this.refreshTime = msToTime(timeUntilNextRefresh);
           }
           if (timeUntilNextRefresh <= 1000) {
               setTimeout(() => {
                   this.refresh();
               }, 1000);
           }
       },
       signIn: function() {
           if (game.isPlayScreen && !game.isInMenu) {
               this.bmc();
               game.gameSignInComponent.showModal(true);
           } else {
               this.$root.$emit('changeState', 'state-signin');
           }
       },
       refresh: function() {
           if (this.challenges) {
               //If challenges are passed to the component don't do anything.
               return;
           }
           if (this.refreshCount >= 2) {
               this.challengeData = null;
               return;
           }
           this.refreshCount++;
           let token = Cookies.get('token');
           if (token) {
               axios.get(API_URL + '/challenges?token=' + token).then((res) => {
                   let data = res.data;
                   if (data.success) {
                       this.challengeData = data.data;
                       this.challengeData.list.sort((a, b) => {
                           return a.xp - b.xp;
                       });
                       this.updateTimer();
                   }
               });
           }
       }
   },
   template: `
   <div v-if="!game.services.user.isLoggedIn() || (challengeData && challengeData.list && challengeData.list.length)" class="app-card challenges-container">
       <div v-if="!challengesExpired && challengeData && challengeData.list && challengeData.list.length">
           <h3 class="text-center" v-if="refreshTime">New Challenges in {{refreshTime}}</h3>
           <h3 class="text-center" v-else>Daily Challenges</h3>
           <div v-for="challenge in challengeData.list" :title="challenge.text">
               <div class="challenge-bar-text">
                   <i v-if="challenge.completed" class="fa fa-check" style="color:green;">&nbsp;</i>{{challenge.text}}
               </div>
               <div class="challenge-bar">
                   <div class="challenge-bar-inner-fill" :style="{width: Math.floor((challenge.value/challenge.req)*100) + '%'}"></div>
                   <div class="challenge-bar-inner">
                       {{challenge.value}}/{{challenge.req}}
                       <div class="float-right">{{challenge.xp.toLocaleString('en-US')}} XP</div>
                   </div>
               </div>
           </div>
       </div>
       <div v-if="!challengesExpired && !(challengeData && challengeData.list && challengeData.list.length) && !game.services.user.isLoggedIn()">
           <h3 class="text-center">Daily Challenges</h3>
           <br>
           <p class="text-center">Sign in to unlock daily challenges to complete and earn XP!</p>
           <br>
           <button type="button" class="app-btn app-btn-secondary" v-on:click="signIn()" @mouseenter="bme">
               <i class="fa fa-sign-in"></i> Sign In
           </button>
           <br><br><br><br><br><br>
       </div>
       <div v-if="challengesExpired">
           <h3 class="text-center">Daily Challenges</h3>
           <p class="text-center">Challenges expired, rejoin or wait until round end to get new challenges.</p>
           <br><br><br><br><br><br><br><br><br>
       </div>
   </div>
   `
});

//// chat.js
Vue.component('app-chat', {
   mounted: function() {
       this.chatData.component = this;
       this.open(true);
   },
   props: ['chatData'],
   data: function() {
       return {
           chatData: null,
           settings: game.settings,
           newMessages: 0,
           messagesSinceLastChatSent: 0,
           lastMessageTime: 0,
           chatMessage: '',
           isClosing: false,
           isOpen: false,
           currentUser: null,
           chattypefocus: false
       };
   },
   methods: {
       open: function(doNotFocus) {
           if (this.isClosing) {
               this.isOpen = false;
               game.tryGameFocus();
               this.isClosing = false;
           } else {
               this.isOpen = true;
               this.newMessages = 0;
               if (!doNotFocus) {
                   this.chattypefocus = true;
               }

               setTimeout(() => {
                   let messagesElement = this.$el.querySelector("#chat-messages");
                   messagesElement.scrollTop = messagesElement.scrollHeight;

                   if (!doNotFocus) {
                       let chatInputElement = this.$el.querySelector("#chat-input");
                       chatInputElement.focus();
                   }
               }, 5);
           }
       },
       close: function(forceClose) {
           if (forceClose) {
               this.chatMessage = '';
               game.tryGameFocus(true);
           } else {
               this.isClosing = true;
           }
       },
       addChatMessage: function(data) {
           if (data.message) {
               if (data.message.startsWith('http://stug.io?i=')) {
                   data.gameJoinToken = data.message.replace('http://stug.io?i=', '').trim();
               }
           }
           if (data.team !== undefined) {
               data.color = this.getChatColor(data.team);
           }

           data.time = Date.now();
           this.chatData.messages.push(data);

           this.scrollToBottom();

           this.messagesSinceLastChatSent++;

           if (!this.isOpen && data.name) {
               this.newMessages++;
           }
       },
       scrollToBottom: function() {
           let messagesElement = this.$el.querySelector("#chat-messages");
           if (messagesElement) {
               let isScrolledToBottom = messagesElement.scrollHeight - messagesElement.clientHeight <= messagesElement.scrollTop;
               if (isScrolledToBottom) {
                   setTimeout(() => {
                       messagesElement.scrollTop = messagesElement.scrollHeight;
                   }, 1);
               }
           }
       },
       sendChat: function() {
           if (!game.services.user.currentUser && !game.isPlayScreen) {
               this.addChatMessage({message: 'Must be logged in to chat.'});
               return;
           }

           let message = this.chatMessage;
           if (message && message.trim) {
               message = message.trim();
           }

           if (message === '/testreconnect') {
               game.disconnect();
               this.chatMessage = '';
               return;
           }

           if (message && message.length >= 1 && message.length <= 250) {
               if (Date.now() - this.lastMessageTime > 600) {
                   if (game.isPlayScreen && !game.isInMenu) {
                       game.mainSocket.emit('chat', message);
                   } else {
                       game.services.socket.getMenuSocket().emit('chat', message);
                   }
               } else {
                   this.addChatMessage({message: 'Please do not spam the chat.'});
               }
               this.lastMessageTime = Date.now();

               let messagesElement = this.$el.querySelector("#chat-messages");
               messagesElement.scrollTop = messagesElement.scrollHeight;
           }

           this.messagesSinceLastChatSent = 0;
           this.chatMessage = '';
           game.tryGameFocus(true);
       },
       getChatColor: function(team) {
           let player = game.getLastControllablePlayer();
           if (player) {
               if (player.team === team) {
                   return '#276884';
               } else {
                   return '#b5341d';
               }
           }
           return '#8d8d8d';
       }
   },
   template: `
   <div class="app-chat-handle" v-bind:class="{'force-disable-pointer-events': chatData.light && !chattypefocus, 'app-chat-light': chatData.light, 'app-chat-handle-clickable': !isOpen, 'app-chat-open': isOpen, 'message-flash': newMessages}" v-on:click="open()" v-show="!settings.disableChat">
       <div v-if="!isOpen">
           <span v-if="!currentUser">{{chatData.name ? chatData.name : 'Chat'}}</span>
           <span v-if="currentUser">{{currentUser.name}}</span>
           <span v-if="newMessages">({{newMessages >= 20 ? '20+' : newMessages}})</span>
       </div>
       <div v-if="isOpen">
           <div v-if="chatData.light">
               <br>
               <!--
               <div class="app-chat-close" style="margin-bottom:-30px;" v-on:click="bmc(); close()" @mouseenter="bme">
                   <i class="fa fa-window-minimize"></i>
               </div>
               -->
           </div>
           <div class="app-chat-title" v-if="!chatData.light">
               <span v-if="!currentUser">{{chatData.name ? chatData.name : 'Chat'}}</span>
               <span v-if="currentUser">{{currentUser.name}}</span>
           </div>
           <div class="app-chat-close" v-if="!chatData.light" v-on:click="bmc(); close()" @mouseenter="bme">
               <i class="fa fa-close"></i>
           </div>
           <div id="chat-messages" class="app-chat-messages">
               <div v-if="chatData.light"><br><br><br><br><br><br><br><br><br><br><br><br><br></div>
               <div v-for="chat in chatData.messages">
                   <div class="chat-message" v-bind:class="{'chat-message-server':!chat.name, 'chat-message-fade': chatData.light && Date.now()-chat.time < 10000, 'chat-message-hide': chatData.light && Date.now()-chat.time >= 10000, 'chat-message-fade-override': chatData.light && chattypefocus}">
                       <span v-if="!!chat.name">
                           <span v-if="chat.isDev">
                               <div class="chat-rank-dev"></div>
                           </span>
                           <span v-if="!chat.isDev && chat.xp">
                               <div class="chat-rank"><div class="rank-icon" v-bind:style="getRankStyle(game.calculateRank(chat.xp), 0.5, 1.4)"></div> <b>{{game.calculateRank(chat.xp)}}</b></div>
                           </span>
                           <div class="chat-message-name" v-bind:class="{'chat-message-name-dev':chat.isDev && chat.team === null}" v-bind:title="'User ID: ' + chat.userId" v-bind:style="{color: chat.color}">
                               {{chat.name}}:
                           </div>
                       </span>
                       <span v-if="!chat.gameJoinToken" v-bind:style="{color: !chat.name && chat.color ? chat.color : null}">
                           {{chat.message}}
                       </span>
                       <div v-if="chat.gameJoinToken">
                           <a v-bind:href="'http://stug.io?i=' + chat.gameJoinToken" style="font-size:18px; padding:8px; text-align:center;" class="app-btn app-btn-primary"><i class="fa fa-play"></i> Join {{chat.name}}'s Game</a>
                       </div>
                   </div>
               </div>
           </div>
           <input class="app-chat-input"
             @focus="chattypefocus=true"
             @blur="chattypefocus=false"
            id="chat-input" v-show="chattypefocus" autocomplete="off" type="text" @keyup.enter="sendChat" @keyup.escape="close(true)" v-model="chatMessage">
       </div>
   </div>
   `
})

//// death.js
Vue.component('app-game-death-menu', {
   mounted: function() {
       game.deathMenuComponent = this;
   },
   data: function() {
       return {
           shouldShowModal: false,
           data: null
       };
   },
   methods: {
       showModal: function(val, data) {
           this.shouldShowModal = val;
           if (data) {
               let vehicle = window.gameServer.vehicleListMap[data.attackerVehicleType]
               data.attackerVehicle = vehicle;
               if (vehicle) {
                   data.vehicleImage = 'assets/vehicles/' + (vehicle.base ? vehicle.base + '/' : '') + vehicle.key + '/' + vehicle.key + '_thumbnail.png';
               }
               if (data.hitData) {
                   if (data.hitData.hitType === 'point_blank') {
                       data.hitData.hitType = 'Point Blank Hit';
                   } else {
                       data.hitData.hitType = data.hitData.hitType.charAt(0).toUpperCase() + data.hitData.hitType.slice(1) + ' Armor Hit';
                   }
               }

               if (!data.tip) {
                   data.tip = tips[Math.floor(Math.random() * tips.length)];
               }
           }
           this.data = data;
       },
       showingModal: function() {
           return this.shouldShowModal;
       }
   },
   template: `
   <div class="death-modal" v-if="shouldShowModal">
       <div class="death-modal-content">
           <div class="row" style="margin:auto; width:600px;">
               <div class="col-4">
                   <div style="margin-top:20px;" v-if="data.attackerName">
                       Killed By:<br>
                       <h3>{{data.attackerName}}</h3>
                   </div>
               </div>
               <div class="col-4" v-if="data.attackerVehicle && data.attackerVehicle.properties">
                   <div class="shop-vehicle-image-vehicle" style="margin:auto; width:64px; height:64px;" v-bind:style="{backgroundImage:'url(' + data.vehicleImage + ')'}"></div>
                   {{data.attackerVehicle.properties.name}}
               </div>
               <div class="col-4">
                   <div style="margin-top:10px;" v-if="data.hitData">
                       {{data.hitData.hitType}}<br>
                       {{data.hitData.damage}} Damage<br>
                       {{Math.round(data.hitData.distance)}} Meters
                   </div>
               </div>
           </div>
           <small v-if="data.tip">Tip: {{data.tip}}</small>
       </div>
   </div>
   `
})

// forgotPasswordComplete.js
Vue.component('state-forgot-password-complete', {
   data: function() {
       let stateData = this.$root.getCurrentStateData();
       return {
           loading: false,
           token: stateData.token,
           password: '',
           passwordRetype: '',
           completeMessage: null
       };
   },
   methods: {
       submit: function(e) {
           e.preventDefault();
           game.playSound('button_click');
           if (this.password.trim() !== this.passwordRetype.trim()) {
               game.showGrowl('Passwords do not match.', {type: 'danger'});
               return;
           }

           this.loading = true;
           axios.post(API_URL + '/user/completePasswordReset', {
               token: this.token,
               password: this.password
           }).then((res) => {
               this.loading = false;
               if (res.data.success) {
                   game.showGrowl('Password reset successfully.', {type: 'success'});
                   if (game.services.user.isLoggedIn()) {
                       this.$root.$emit('changeState', 'state-profile');
                   } else {
                       this.$root.$emit('changeState', 'state-signin');
                   }
               } else {
                   if (res.data.error === 'invalid_password_reset_token') {
                       this.completeMessage = '<h4 class="error-message">Invalid password reset link, please request another.</h4>';
                   } else if (res.data.error === 'expired_password_reset_token') {
                       this.completeMessage = '<h4 class="error-message">This password reset link has expired, please request another.</h4>';
                   } else {
                       game.showGrowl('Failed to reset password.', {type: 'danger'});
                   }
               }
           }, (err) => {
               this.loading = false;
               game.showGrowl('Error: Failed to reset password.', {type: 'danger'});
               console.error('Failed to reset password:', err);
           });
       }
   },
   template: `
   <div class="vertical-center">
       <div v-if="loading">
           <img width="128" height="128" src="assets/loading.gif"><br><br>
           <h4>LOADING</h4>
       </div>
       <div v-if="!loading">
           <br>
           <div class="app-card text-center" v-if="!completeMessage">
               <form @submit="submit">
                   <h1><i class="fa fa-sign-in"></i> Reset your password</h1>
                   <br>
                   <label class="app-input-label">
                       New Password
                       <input v-model="password" minlength="6" required="required" type="password" class="app-input" placeholder="New Password">
                   </label>
                   <label class="app-input-label">
                       Retype New Password
                       <input v-model="passwordRetype" required="required" type="password" class="app-input" placeholder="Retype New Password">
                   </label>
                   <br><br>
                   <button type="submit" class="app-btn app-btn-secondary btn-sm" @mouseenter="bme">
                       <i class="fa fa-sign-in"></i> Submit
                   </button>
               </form>
               <br>
           </div>
           <div v-if="completeMessage" class="app-card text-center">
               <h1>Reset your password</h1>
               <br>
               <div v-html="completeMessage"></div>
               <br>
           </div>
           <br><br>
           <h3>
               <i class="fa fa-info-circle"></i> Account Support/Help<br>
               <a class="selectable" href="mailto:support@bombsightgames.com">support@bombsightgames.com</a>
           </h3>
       </div>
   </div>
   `
})

//// forgotPasswordInitiate.js
Vue.component('state-forgot-password-initiate', {
   data: function() {
       return {
           loading: false,
           email: '',
           completeMessage: null
       };
   },
   methods: {
       submit: async function(e) {
           e.preventDefault();
           game.playSound('button_click');
           this.loading = true;
           try {
               let res = await axios.post(API_URL + '/user/initiatePasswordReset', {
                   email: this.email
               });
               this.loading = false;
               if (res.data.success) {
                   this.completeMessage = '<h4>You should receive an email shortly, remember to check your spam folder.</h4>';
               } else {
                   if (res.data.error === 'password_reset_rate_limit') {
                       game.showGrowl('Please wait 5 minutes to reset your password again.', {type: 'danger'});
                   } else if (res.data.error === 'invalid_user') {
                       game.showGrowl('An account with this email was not found.', {type: 'danger'});
                   } else if (res.data.error === 'existing_google_account') {
                       this.completeMessage = '<h4 class="error-message">This account is registered through Google. Go back to the Sign In page and select <b>Sign In with Google</b> to access this account.</h4>';
                   } else {
                       game.showGrowl('Failed to reset password.', {type: 'danger'});
                   }
               }
           } catch (e) {
               this.loading = false;
               game.showGrowl('Failed to reset password.', {type: 'danger'});
               console.error('Failed to reset password:', e);
           }
       }
   },
   template: `
   <div class="vertical-center">
       <div v-if="loading">
           <img width="128" height="128" src="assets/loading.gif"><br><br>
           <h4>LOADING</h4>
       </div>
       <div v-if="!loading">
           <br>
           <div v-if="!completeMessage" class="app-card text-center">
               <form @submit="submit">
                   <h1>Reset your password</h1>
                   <br>
                   <label class="app-input-label">
                       Account Email
                       <input v-model="email" required="required" type="email" class="app-input" placeholder="Email">
                   </label>
                   <br><br>
                   <button type="submit" class="app-btn app-btn-secondary btn-sm" @mouseenter="bme">
                       <i class="fa fa-sign-in"></i> Submit
                   </button>
               </form>
           </div>
           <div v-if="completeMessage" class="app-card text-center">
               <h1>Reset your password</h1>
               <br>
               <div v-html="completeMessage"></div>
               <br>
           </div>
           <br><br>
           <h3>
               <i class="fa fa-info-circle"></i> Account Support/Help<br>
               <a class="selectable" href="mailto:support@bombsightgames.com">support@bombsightgames.com</a>
           </h3>
           <div v-if="ADSDK === 'steam'">
               <br>
               <div class="app-btn app-btn-danger" @mouseenter="bme" style="width:500px; padding:12px;" v-on:click="$root.$emit('changeState', 'state-signin')">
                   <i class="fa fa-arrow-left"></i> Return
               </div>
           </div>
       </div>
   </div>
   `
})

//// friends.js
Vue.component('state-friends', {
   template: `
   <div class="vertical-center">
       <iframe src="https://discord.com/widget?id=798756808478949396&theme=dark" width="400" height="500" allowtransparency="true" frameborder="0" sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe>
   </div>
   `
});

Vue.component('state-test', {
   data: function() {
       game.appComponent.enableBackground = false
       return {};
   },
   template: `
   <div class="vertical-center">
   </div>
   `
});

//// game.js
const game = {
   services: {},
   defaultKeyBinds: {
       'Forward': [87, 38],
       'Reverse': [83, 40],
       'Turn Left': [65, 37],
       'Turn Right': [68, 39],
       'Handbrake': [32, null],
       'Boost': [16, null],
       'Fire': [1000, null],
       'Repair': [82, null],
       'Killstreak 1': [49, null],
       'Killstreak 2': [50, null],
       'Killstreak 3': [51, null],
       'Ping Location': [1001, 69],
       'Show Emotes': [1002, 17],
       'Show Scoreboard': [9, null]
   },
   inputMapCache: {},
   settings: {
       quality: 'auto',
       windowMode: 'fullscreen',
       disableSound: false,
       disableMusic: false,
       disableChat: false,
       disableHUD: false,
       disableDamageIndicators: false,
       disableXPMessages: false,
       enableControllerSupport: false,
       disableScreenShake: false,
       volume: 1,
       musicVolume: 0.5,
       keyBinds: {}
   },
   isPlayScreen: false,
   showingLoadingScreen: true,
   inIframe: function() {
       try {
           return window.self !== window.top;
       } catch (e) {
           return true;
       }
   },
   showLoading: (shouldShow) => {
       game.showingLoadingScreen = shouldShow;
       if (shouldShow) {
           $('#loading').show();
       } else {
           setTimeout(() => {
               $('#loading').hide();
           }, 100);
       }
   },
   ready: false,
   onGameReady: () => {
       game.showLoading(false);

       if (isDesktopApp) {
           setTimeout(() => {
               window.electronAPI.gameReady();
           }, 100);
       }
   }
};

function escapeHtml(str) {
   if (str && str.replace) {
       return str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
   } else {
       return '';
   }
}
game.showGrowl = (message, data) => {
   data.allow_dismiss = false;
   if (!data.width) {
       data.width = 400;
   }
   $.bootstrapGrowl(escapeHtml(message), data);
};

function getQuery() {
   let vars = {}, hash;
   let hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
   for(let i = 0; i < hashes.length; i++) {
       hash = hashes[i].split('=');
       vars[hash[0]] = hash[1];
   }
   return vars;
}
game.queryData = getQuery();

game.environment = 'prod';
if (window.location.host === 'test.stug.io') {
   game.environment = 'test';
}

if (game.queryData && game.queryData.inPopup === 'true') {
   Cookies.set('purchaseResult', game.queryData.payment, {
       path: '/',
       domain: window.location.host,
       sameSite: 'None',
       secure: true
   });
   setTimeout(() => {
       window.close();
   }, 1);
}

try {
   if (window.localStorage) {
       let newSettings = window.localStorage.getItem('settings');
       if (newSettings) {
           newSettings = JSON.parse(newSettings);
           game.settings = Object.assign(JSON.parse(JSON.stringify(game.settings)), newSettings);
       }
   }
} catch(e) {
   console.error('Failed to parse settings.');
   game.cookiesBlocked = true;
   if (!isDesktopApp) {
       let message = 'Cookies are being blocked by your browser, this may cause issues! Please allow cookies for STUG.';
       if (game.inIframe()) {
           message = 'Third-party cookies are being blocked by your browser, this may cause issues! Please allow cookies for STUG.';
       }
       game.showGrowl(message, {
           type: 'danger',
           align: 'center',
           width: 500,
           delay: 15000
       });
   }
}

try {
   game.disableTutorialAsk = window.localStorage.getItem('disableTutorialAsk') === 'true';
} catch (e) {
   try {
       game.disableTutorialAsk = Cookies.get('disableTutorialAsk') === 'true';
   } catch (e) {
       game.disableTutorialAsk = true;
   }
}

if (window.location.pathname === '/play/') {
   game.isPlayScreen = true;
}
const MAP_FOLDER = 'assets/maps/';
const DISABLE_SOUNDS = false;
const fontFamily = ['Recursive', 'sans-serif'];

const COLOR_FRIENDLY = 0x276884;
const COLOR_ENEMY = 0xf22306;
const COLOR_FRIENDLY_BRIGHT = 0x43add9;
const COLOR_ENEMY_BRIGHT = 0xef3f25;

const snapshotRate = 1000/10;

(function() {
   let ENABLE_DEBUG = false; // debug mode
   let running = false; // if the game is running
   let WIDTH = window.innerWidth; // window width
   let HEIGHT = window.innerHeight; // window height
   let MAP_WIDTH = 4000; // map max width
   let MAP_HEIGHT = 4000; // map max height
   let AFK_TIME_TIL_KICK = 2 * 60 * 1000; // afk time until kicked
   let AFK_TIME_TIL_KICK_WARNING = 1 * 60 * 1000; // afk time until kick warning
   let DISABLE_AFK = false; // whether being afk counts or not
   let idleTime = Date.now();
   let serverTimeDiff = 0;
   let spectating = false; // whether you're spectating
   let latency = 0;
   let capturer = null;
   let pauseEffects = false;

   if (isMobile && !isPhoneApp) {
       console.info('Mobile is disabled for now.');
       return;
   } // lmao what?

   if (!PIXI.utils.isWebGLSupported()) {
       $('body').css({
           'overflow-y': 'auto'
       });
       game.showLoading(false);
       $('#webgl-disabled-message').show();
       return;
   }

   PIXI.settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = true;
   let app = new PIXI.Application(WIDTH, HEIGHT, {
       backgroundColor: 0x000000,
       FAIL_IF_MAJOR_PERFORMANCE_CAVEAT: true,
       antialias: false,
       powerPreference: 'high-performance'
   });
   app.stage = new PIXI.display.Stage();
   game.app = app;
   app.stop();
   PIXI.SCALE_MODES.DEFAULT = PIXI.SCALE_MODES.NEAREST;
   app.view.id = 'gameCanvas';
   document.body.appendChild(app.view);
   // setting up pixi thingies for use

   let vehicleData = null; // vehicle data???

   let isSmallMobile = isMobile && (WIDTH <= 900 || HEIGHT <= 900);
   let isSmallestMobile = isMobile && (WIDTH <= 800 || HEIGHT <= 800);
   game.isMobile = isMobile;
   game.isPhoneApp = isPhoneApp;
   // mobile detection stuff

   let currentMenu = null;
   let beforeRecordingStart = false;

   // positioning? helkpl
   let mx = 0;
   let my = 0;
   let gmx = 0;
   let gmy = 0;

   let entities = []; // important variables for entities
   let entityDictionary = {};

   let effects = []; // i wonder what this is

   let player = null; // the player object, can be returned with game.getPlayer()
   let lastControllablePlayer = null;

   let socket = null; // websockets~ :D
   let socket2 = null; 

   let lastSpectatedIndex = -1;
   let lastDeathTime = Date.now();

   let windAngle = 0; // wind stuff
   let windStrength = 0.01;

   let setPlayerData = null; // this looks like a nice variable

   let joystickManager;
   let timeScale = 1;
   let dropShadowFilter = new PIXI.Filter(shadowFilter.vert, shadowFilter.frag);

   // camera stuff
   const visibilityRange = 1920; // max view range
   let camera = {
       x: MAP_WIDTH/2,
       y: MAP_HEIGHT/2,
       z: 0,
       zoom: 1,
       screenShake: 0
   };
   game.camera = camera; // just exposing the camera variable we just set

   game.resetZoom = function() { // reset zoom function
       let newZoom = 1;
       if (game.watchingRecording) {
           newZoom = 1.75;
       } else if (game.roundEnded) {
           newZoom = 1.2;
       } else if (game.isInMenu) {
           newZoom = 2.75;
       } else if (isSmallestMobile) {
           newZoom = 0.4;
       } else if (isSmallMobile) {
           newZoom = 0.5;
       } else {
           newZoom = 1;
       }

       let curMaxRange = WIDTH;
       if (HEIGHT > WIDTH) {
           curMaxRange = HEIGHT;
       }
       let rangeDiff = visibilityRange - curMaxRange;
       newZoom -= rangeDiff / curMaxRange;

       if (newZoom < 0.75) {
           newZoom = 0.75;
       } else if (newZoom > 2.5) {
           newZoom = 2.5;
       }
       if (capturer) {
           newZoom = 1;
       }
       camera.zoom = newZoom;
   };
   game.resetZoom();

   window.document.addEventListener('contextmenu', function (evt) {
       if (game.isPlayScreen) {
           evt.preventDefault();
       }
   }); // ???

   // assets, sounds, etc
   let debugText = null;
   let resources = null;
   let sounds = null;
   let asset_list = {
       white: 'white.png',
       normal: 'normal.png',
       arrow_pointer: 'arrow_pointer.png',
       tutorial_portrait: 'tutorial_portrait.png',
       gui: 'gui.png',
       tags: 'tags.png',
       background: 'menu_bg.png',
       crosshair: 'crosshair.png',
       tracks: 'vehicles/tracks.png',
       wheel: 'vehicles/wheel.png',
       wheels: 'vehicles/wheels.png',
       tread_mark: 'tread_mark.png',
       ricochet: 'ricochet.png',
       ricochet_splash: 'ricochet_splash.png',
       shell: 'shell.png',
       shell_smoke: 'shell_smoke_default.png',
       sparks: 'sparks.png',
       tank_fire: 'tank_fire.png',
       tank_repair: 'repair.png',
       explosion: 'explosion.png',
       replay_icon: 'replay_icon.png',
       debris: 'debris.png',
       debris_clouds: 'debris_clouds.png',
       wall: 'wall.png',
       turret_cat: 'turret_cat.png',
       logo: 'logo.png',
       ctf_flag: 'ctf_flag.png',
       wall_deployable: 'wall_deployable.png',
       grenade: 'grenade.png',
       smoke_grenade: 'smoke_grenade.png',
       mine: 'mine.png',
       airstrike_shadow: 'airstrike_shadow.png',
       smoke_particles: 'smoke_particles.png',
       boost_particles: 'boost_particles.png',
       boost_sparks: 'boost_sparks.png',
       bomb_shadow: 'bomb_shadow.png',
       scorch: 'scorch.png',
       impact_terrain: 'impact_terrain.png',
       kill: 'kill.png',
       kill_skull: 'kill_skull.png',
       repair_kit: 'repair_kit.png',
       repairkit_halo: 'repairkit_halo.png',
       impact_ram: 'impact_ram.png',
       impact_tank: 'impact_tank.png',
       impact_tank_decal1: 'impact_tank_decal1.png',
       impact_tank_decal2: 'impact_tank_decal2.png',
       impact_tank_decal3: 'impact_tank_decal3.png',
       shotdecal_terrain: 'shotdecal_terrain.png',
       colossus: 'colossus.png',
       tracktrail: 'tracktrail.png',
       colossus_team: 'colossus_team.png',
       tutorial_flag: 'tutorial_flag.png',
       artillery_shadow: 'artillery_shadow.png',
       ability_airstrike: 'gui_new/ability_airstrike.png',
       ability_artillery: 'gui_new/ability_artillery.png',
       ability_colossus: 'gui_new/ability_colossus.png',
       ability_grenade: 'gui_new/ability_grenade.png',
       ability_landmine: 'gui_new/ability_landmine.png',
       ability_plow: 'gui_new/ability_plow.png',
       ability_sideskirts: 'gui_new/ability_sideskirts.png',
       ability_wall: 'gui_new/ability_wall.png',
       gui_timer_bg: 'gui_new/GUI_timer_bg2.png',
       gui_timer_fg: 'gui_new/GUI_timer_fg2.png',
       gui_base_bg: 'gui_new/GUI_base_bg.png',
       gui_base_fg: 'gui_new/GUI_base_fg.png',
       gui_base_mask: 'gui_new/GUI_base_mask.png',
       gui_icon: 'gui_new/GUI_icon.png',
       gui_chargebar_bg: 'gui_new/GUI_chargebar_bg.png',
       gui_chargebar_fg: 'gui_new/GUI_chargebar_fg.png',
       gui_chargebar_mask: 'gui_new/GUI_chargebar_mask.png',
       gui_counter_bg: 'gui_new/GUI_killcounter_bg.png',
       gui_counter_fg: 'gui_new/GUI_killcounter.png',
       gui_battle: 'gui_new/GUI_battle.png',
       gui_conquest: 'gui_new/GUI_conquest.png',
       damage_indicator: 'gui_new/damage_indicator.png',
       killfeed: 'gui_new/killfeed.png',
       medal_kill: 'medal_kill.png',
       medal_assist: 'medal_assist.png',
       debris_small: 'debris_small.png',
       debris_medium: 'debris_medium.png',
       debris_large: 'debris_large.png',
       debris1: 'debris1.png',
       debris2: 'debris2.png',
       debris3: 'debris3.png',
       burning: 'burning.png',
       wreck_explode: 'wreck_explode.png',
       repair_gui: 'repair_gui.png',
       key_hint: 'key_hint.png',
       ball: 'tankball/ball.png',
       objective_arrow: 'gui_new/objective_arrow.png',
       objective_icon: 'gui_new/objective_icon.png',
       objective_icon_contested: 'gui_new/objective_icon_contested.png',
       tank_ball_objective_icon: 'tankball/objective_icon.png',
       rank_icons: 'rank_icons.png',
       emote_bubble: 'emotes/emote_bubble.png',
       emotewheel_bg: 'emotes/emotewheel_bg.png',
       watersplash1: 'terrain/watersplash1.png',
       watersplash2: 'terrain/watersplash2.png',
       watersplash3: 'terrain/watersplash3.png',
       //survivor: 'survivor.png'
   };

   let soundsLoaded = false;
   function loadSounds() { // sounds!
       if (soundsLoaded) {
           return;
       }

       soundsLoaded = true;
       sounds = {
           theme_menu: new Howl({
               src: ['assets/theme_menu.ogg'],
               loop: true,
               volume: 0.08
           }),
           theme_lobby: new Howl({
               src: ['assets/theme_lobby.ogg'],
               loop: true,
               volume: 0.08
           }),
           theme_round_ending: new Howl({
               src: ['assets/theme_round_ending.ogg'],
               loop: false,
               volume: 0.08
           }),
           theme_victory: new Howl({
               src: ['assets/theme_victory.ogg'],
               loop: false,
               volume: 0.08
           }),
           theme_defeat: new Howl({
               src: ['assets/theme_defeat.ogg'],
               loop: false,
               volume: 0.08
           }),
           collect: new Howl({
               src: ["assets/collect.wav"],
               loop: false,
               volume: 0.05
           }),
           rank_up: new Howl({
               src: ["assets/rank_up2.wav"],
               loop: false,
               volume: 0.3
           }),
           beep: new Howl({
               src: ['assets/beep.wav'],
               loop: false,
               volume: 0.08
           }),
           round_end: new Howl({
               src: ['assets/round_end.wav'],
               loop: false,
               volume: 0.2
           }),
           tank_track: new Howl({
               src: ['assets/tank_track.ogg'],
               loop: true,
               volume: 0.25
           }),
           tank_engine: new Howl({
               src: ['assets/tank_engine.ogg'],
               loop: true,
               volume: 0.25
           }),
           tank_turret: new Howl({
               src: ['assets/tank_turret.ogg'],
               loop: true,
               volume: 0.25
           }),
           tank_repairing: new Howl({
               src: ['assets/repair_use.ogg'],
               loop: false,
               volume: 0.5
           }),
           tank_repairing_distant: new Howl({
               src: ['assets/repair_distant.ogg'],
               loop: false,
               volume: 0.5
           }),
           burning: new Howl({
               src: ['assets/burning.ogg'],
               loop: true,
               volume: 0.5
           }),
           round_start: new Howl({
               src: ['assets/round_start.mp3'],
               loop: false,
               volume: 0.5
           }),
           flag_captured: new Howl({
               src: ['assets/flag_captured.mp3'],
               loop: false,
               volume: 0.5
           }),
           flag_dropped: new Howl({
               src: ['assets/flag_dropped.mp3'],
               loop: false,
               volume: 0.5
           }),
           flag_taken: new Howl({
               src: ['assets/flag_taken.mp3'],
               loop: false,
               volume: 0.5
           }),
           shop_sale: new Howl({
               src: ['assets/shop_sale.ogg'],
               loop: false,
               volume: 0.5
           }),
           kill: new Howl({
               src: ['assets/kill.ogg'],
               loop: false,
               volume: 0.6
           }),
           assist: new Howl({
               src: ['assets/assist.ogg'],
               loop: false,
               volume: 0.2
           }),
           emote_in: new Howl({
               src: ['assets/emotes/emote_in.ogg'],
               loop: false,
               volume: 0.4
           }),
           emote_out: new Howl({
               src: ['assets/emotes/emote_out.ogg'],
               loop: false,
               volume: 0.4
           }),
           gunshot_distant: new Howl({
               src: ['assets/gunshot_distant.ogg'],
               loop: false,
               volume: 0.4
           }),
           reload_start: new Howl({
               src: ['assets/reload_start.ogg'],
               loop: false,
               volume: 0.4
           }),
           reload_end: new Howl({
               src: ['assets/reload_end.ogg'],
               loop: false,
               volume: 0.4
           }),
           reload_distant: new Howl({
               src: ['assets/reload_distant.ogg'],
               loop: false,
               volume: 0.8
           }),
           button_hover: new Howl({
               src: ['assets/button_hover.mp3'],
               loop: false,
               volume: 0.1
           }),
           button_click: new Howl({
               src: ['assets/button_click.mp3'],
               loop: false,
               volume: 0.25
           }),
           airstrike_fall: new Howl({
               src: ['assets/airstrike_fall.ogg'],
               loop: false,
               volume: 0.5
           }),
           airstrike_flyby: new Howl({
               src: ['assets/airstrike_flyby.ogg'],
               loop: false,
               volume: 0.5
           }),
           airstrike: new Howl({
               src: ['assets/airstrike.ogg'],
               loop: false,
               volume: 0.5
           }),
           grenade_launch: new Howl({
               src: ['assets/grenade_launch.ogg'],
               loop: false,
               volume: 0.5
           }),
           boost: new Howl({
               src: ['assets/boost.ogg'],
               loop: false,
               volume: 0.25
           }),
           boost_distant: new Howl({
               src: ['assets/boost_distant.ogg'],
               loop: false,
               volume: 0.4
           }),
           boost_recharged: new Howl({
               src: ['assets/boost_recharged.ogg'],
               loop: false,
               volume: 0.4
           }),
           powerup_reload: new Howl({
               src: ['assets/powerup_reload.ogg'],
               loop: false,
               volume: 0.6
           }),
           repair_kit: new Howl({
               src: ['assets/repairkit.ogg'],
               loop: false,
               volume: 0.1
           }),
           slomo: new Howl({
               src: ['assets/slomo.ogg'],
               loop: false,
               volume: 0.75
           }),
           booster1: new Howl({
               src: ['assets/booster1.ogg'],
               loop: false,
               volume: 0.5
           }),
           booster2: new Howl({
               src: ['assets/booster2.ogg'],
               loop: false,
               volume: 0.5
           }),
           booster3: new Howl({
               src: ['assets/booster3.ogg'],
               loop: false,
               volume: 0.5
           }),
           woosh: new Howl({
               src: ['assets/woosh.ogg'],
               loop: false,
               volume: 0.6
           }),
           woosh_out: new Howl({
               src: ['assets/woosh_out.ogg'],
               loop: false,
               volume: 0.2
           }),
           car_roll_loop: new Howl({
               src: ['assets/car_roll_loop.ogg'],
               loop: true,
               volume: 0.2
           }),
           car_drift_loop: new Howl({
               src: ['assets/car_drift_loop.ogg'],
               loop: true,
               volume: 0.2
           }),
           car_highgear_loop: new Howl({
               src: ['assets/car_highgear_loop.ogg'],
               loop: true,
               volume: 0.4
           }),
           car_idle_loop: new Howl({
               src: ['assets/car_idle_loop.ogg'],
               loop: true,
               volume: 0.4
           }),
           car_lowgear_loop: new Howl({
               src: ['assets/car_lowgear_loop.ogg'],
               loop: true,
               volume: 0.4
           }),
           car_start: new Howl({
               src: ['assets/car_start.ogg'],
               loop: false,
               volume: 0.4
           }),
           xp_collect: new Howl({
               src: ['assets/xp_collect.wav'],
               loop: false,
               volume: 0.2
           }),
           ping: new Howl({
               src: ['assets/ping/ping.ogg'],
               loop: false,
               volume: 1
           }),
           terrain_water: new Howl({
               src: ['assets/terrain/terrain_water.ogg'],
               loop: true,
               volume: 0.4
           }),
           terrain_ice: new Howl({
               src: ['assets/terrain/terrain_ice.ogg'],
               loop: true,
               volume: 0.4
           }),
           crowd_loop: new Howl({
               src: ['assets/tankball/crowd_loop.ogg'],
               loop: true,
               volume: 0.2
           }),
           goal_horn: new Howl({
               src: ['assets/tankball/goal_horn.ogg'],
               loop: false,
               volume: 0.2
           }),
           whistle: new Howl({
               src: ['assets/tankball/whistle.ogg'],
               loop: false,
               volume: 0.2
           }),
           barrier_destroyed_friendly: new Howl({
               src: ['assets/tankball/barrier_destroyed_friendly.ogg'],
               loop: false,
               volume: 0.4
           }),
           barrier_destroyed: new Howl({
               src: ['assets/tankball/barrier_destroyed.ogg'],
               loop: false,
               volume: 0.4
           }),
       };

       for (let i = 0; i < 7; i++) {
           sounds["reload" + (i + 1)] = new Howl({
               src: ["assets/reload_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.25
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["hit" + (i + 1)] = new Howl({
               src: ["assets/hit" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       for (let i = 0; i < 10; i++) {
           sounds["shell_whizz" + (i + 1)] = new Howl({
               src: ["assets/shell_whizz" + (i + 1) + ".mp3"],
               loop: false,
               volume: 0.4
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["artillery_distant" + (i + 1)] = new Howl({
               src: ["assets/artillery_distant_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["artillery_incoming" + (i + 1)] = new Howl({
               src: ["assets/artillery_incoming_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["gunshot" + (i + 1)] = new Howl({
               src: ["assets/gunshot" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.3
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["explosion" + (i + 1)] = new Howl({
               src: ["assets/explosion_tank_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["explosion_bomb" + (i + 1)] = new Howl({
               src: ["assets/explosion_bomb_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       for (let i = 0; i < 5; i++) {
           sounds["ricochet" + (i + 1)] = new Howl({
               src: ["assets/ricochet" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.9
           });
       }

       for (let i = 0; i < 5; i++) {
           sounds["ricochet_player" + (i + 1)] = new Howl({
               src: ["assets/ricochet_player" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.9
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["impact_player" + (i + 1)] = new Howl({
               src: ["assets/impact_player" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.2
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["impact_tank" + (i + 1)] = new Howl({
               src: ["assets/impact_tank" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.5
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["impact_terrain" + (i + 1)] = new Howl({
               src: ["assets/impact_terrain" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       for (let i = 0; i < 3; i++) {
           sounds["ball_catch_0" + (i + 1)] = new Howl({
               src: ["assets/tankball/ball_catch_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }
       for (let i = 0; i < 3; i++) {
           sounds["ball_impact_0" + (i + 1)] = new Howl({
               src: ["assets/tankball/ball_impact_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }
       for (let i = 0; i < 3; i++) {
           sounds["ball_kick_0" + (i + 1)] = new Howl({
               src: ["assets/tankball/ball_kick_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }
       for (let i = 0; i < 3; i++) {
           sounds["cheer_goal_0" + (i + 1)] = new Howl({
               src: ["assets/tankball/cheer_goal_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }
       for (let i = 0; i < 3; i++) {
           sounds["cheer_kill_0" + (i + 1)] = new Howl({
               src: ["assets/tankball/cheer_kill_0" + (i + 1) + ".ogg"],
               loop: false,
               volume: 0.1
           });
       }

       game.sounds = sounds;
   }
   game.loadSounds = loadSounds; // that was quite long

   game.updateLightingQuality = function() {
       if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
           diffuseGroupLayer.visible = true;
           normalGroupLayer.visible = true;
           lightGroupLayer.visible = true;

           if (background && background.backgroundNormal) {
               background.backgroundNormal.visible = true;
           }
       } else {
           diffuseGroupLayer.visible = false;
           normalGroupLayer.visible = false;
           lightGroupLayer.visible = false;

           if (background && background.backgroundNormal) {
               background.backgroundNormal.visible = false;
           }
       }
   };

   game.updateQuality = function() {
       for (let i=0; i<entities.length; i++) {
           let entity = entities[i];
           entity.qualityChanged();
       }

       game.updateLightingQuality();

       game.updateSettings();
   };

   game.updateSettings = function() {
       try {
           if (window.localStorage) {
               let settingsString = JSON.stringify(game.settings);
               window.localStorage.setItem('settings', settingsString);
           }
       } catch(e) {
           console.error('Failed to update settings.');
       }

       if (isDesktopApp) {
           window.electronAPI.updateSettings(game.settings);
       }
       game.reloadSettings();
   };

   let startedMusic;
   game.reloadSettings = () => {
       if (game.settings.disableMusic) {
           if (game.sounds['theme_menu']) {
               startedMusic = false;
               game.sounds['theme_menu'].stop();
           }
       } else {
           if (game.isInMenu && !game.settings.disableMusic && game.sounds['theme_menu'] && !game.sounds['theme_menu'].playing() && !startedMusic) {
               startedMusic = true;
               //game.sounds['theme_menu'].seek(0.65);
               game.sounds['theme_menu'].play();
               //game.sounds['theme_menu'].fade(0, 0.05, 2000);
           }
       }

       if (game.lobbyComponent) {
           game.lobbyComponent.updateMusic();
       }

       if (game.isInMenu || game.settings.disableHUD) {
           $('.game-menu-button').hide();
       } else {
           $('.game-menu-button').show();
       }

       let volume = parseFloat(game.settings.volume ? game.settings.volume : 1);
       if (volume < 0) {
           volume = 0;
       } else if (volume > 1) {
           volume = 1;
       }
       Howler.volume(volume);

       let musicVolume = parseFloat(game.settings.musicVolume ? game.settings.musicVolume : 0.5);
       if (musicVolume < 0) {
           musicVolume = 0;
       } else if (musicVolume > 1) {
           musicVolume = 1;
       }

       if (game.sounds['theme_menu']) {
           let themeVolume = 0.4 * musicVolume;
           game.sounds['theme_menu'].volume(themeVolume);
           game.sounds['theme_lobby'].volume(themeVolume * 1.4);
           game.sounds['theme_round_ending'].volume(themeVolume);
           game.sounds['theme_victory'].volume(themeVolume);
           game.sounds['theme_defeat'].volume(themeVolume);
       }

       if (!game.settings.keyBinds) {
           game.settings.keyBinds = {};
       }
       let defaultKeys = Object.keys(game.defaultKeyBinds);
       for (let i=0; i<defaultKeys.length; i++) {
           let key = defaultKeys[i];
           if (!game.settings.keyBinds[key]) {
               game.settings.keyBinds[key] = JSON.parse(JSON.stringify(game.defaultKeyBinds[key]));
           }
       }

       game.inputMapCache = {};
       let keyBindKeys = Object.keys(game.settings.keyBinds);
       for (let i=0; i<keyBindKeys.length; i++) {
           let key = keyBindKeys[i];
           let value = game.settings.keyBinds[key];
           if (value) {
               for (let j=0; j<value.length; j++) {
                   if (value[j] && !game.inputMapCache[value[j]]) {
                       game.inputMapCache[value[j]] = key;
                   }
               }
           }
       }

       game.updateLightingQuality();
   };

   let lastSoundPlay = Date.now() + 500;
   game.playSound = function(key) {
       try {
           if (Date.now() > lastSoundPlay + 50) {
               lastSoundPlay = Date.now();

               if (sounds[key]) {
                   sounds[key].play();
               }
           }
       } catch (e) {
           console.error('Failed to play sound:', e);
       }
   };

   let joystick1Data;
   let joystick2Data;
   function loadAssets() { // oohoohh
       vehicleData = window.gameServer.vehicleData;
       let vehicleKeys = Object.keys(vehicleData);
       for (let i=0; i<vehicleKeys.length; i++) {
           let type = vehicleKeys[i];
           let vehicleInfo = vehicleData[type];

           for (let j = 0; j < vehicleInfo.tileset.length; j++) {
               let tileset = vehicleInfo.tileset[j];

               if (tileset) {
                   if (tileset.tile) {
                       for (let i = 0; i < tileset.tile.length; i++) {
                           let tile = tileset.tile[i];
                           if (!tile) {
                               continue;
                           }
                           let assetName = null;
                           if (tile.image[0].source !== '../track.png' && tile.image[0].source !== '../wheel.png') {
                               if (vehicleInfo.base) {
                                   assetName = 'vehicles/' + vehicleInfo.base + '/' + type + '/' + tile.image[0].source;
                               } else {
                                   assetName = 'vehicles/' + type + '/' + tile.image[0].source;
                               }
                               asset_list[assetName] = assetName;
                           }
                       }
                   } else {
                       console.error('Unsupported tileset type:', tileset);
                   }
               }
           }
       }

       for (let i=0; i<window.gameServer.emoteList.length; i++) {
           let emote = window.gameServer.emoteList[i];
           if (emote.texture) {
               asset_list[emote.texture] = emote.texture;
           } else if (emote.spine) {
               asset_list[emote.spine] = emote.spine;
           }
       }

       for (let key in asset_list) {
           PIXI.Loader.shared.add(key, 'assets/' + asset_list[key]);
       }

       PIXI.Loader.shared.add('pingRing', 'assets/ping/ping_ring.json');
       PIXI.Loader.shared.add('pingDot', 'assets/ping/ping_dot.json');

       loadSounds();

       PIXI.Loader.shared.load();

       if (isDesktopApp) {
           window.electronAPI.windowReady();
       }
   }

   let touchOffset = {
       x: 0,
       y: 0
   };
   let touchEvent = null;
   let joystickZone;
   function createJoystickManager() {
       if (joystickManager) {
           //window.document.body.removeChild(joystickZone);
           joystickZone = null;
           joystickManager.destroy();
           joystickManager = null;
       }
       if (!game.isInMenu && game.isPlayScreen && game.isMobile) {
           //joystickZone = document.createElement('div');
           //joystickZone.classList.add('joystick-left-container');
           //window.document.body.appendChild(joystickZone);

           joystickManager = nipplejs.create({
               zone: game.app.view,
               multitouch: true,
               maxNumberOfNipples: 2,
               //zone: joystickZone,
               //mode: 'static',
               size: 130,
               //position: {
               //    top: '84%',
               //    left: '10%'
               //}
           });
           joystickManager.on('added', (event, joystick) => {
               window.document.body.appendChild(joystick.el);
           });
           joystickManager.on('move', (event, data) => {
               if (data.position.x < screen.width/2) {
                   joystick1Data = data;
               } else {
                   joystick2Data = data;
               }
           });
           joystickManager.on('removed', (event, joystick) => {
               window.document.body.removeChild(joystick.el);
               //joystickManager.on('end', (event, joystick) => {
               if (joystick1Data && joystick1Data.identifier === joystick.identifier) {
                   joystick1Data = null;
               }
               if (joystick2Data && joystick2Data.identifier === joystick.identifier) {
                   joystick2Data = null;
                   if (player && player.canControl && socket) {
                       emoteWheelContainer.visible = false;
                       socket.emit('fire', true);
                   }
               }
           });
       }
   }

   let roundState = {};
   let background = null;
   let spawnText = null;
   let announcementContainer = null;
   let guiSpritesheet = null;
   let tagsSpritesheet = null;
   let tutorialAvatarSpritesheet = null;
   let arrowSpritePointer = null;
   let tutorialContainer = null;
   let cursorSpritesheet = null;
   let replayIcon = null;
   let tipsText = null;
   let disconnectText = null;
   let globalChatText = null;
   let chatArray = [];
   let cursorSprite = null;
   let guiContainer = null;
   let damageIndicators = null;
   let guiRoundIndicatorSpritesheet = null;
   let emoteWheelContainer = null;
   let killfeedContainer = null;
   let gameCover = null;
   let recordingSplash = null;
   let repairGuiSpritesheet = null;
   function updateUIPositions() {
       if (announcementContainer) {
           announcementContainer.square.width = WIDTH;
           announcementContainer.infoText.x = WIDTH / 2;
           announcementContainer.titleText.x = WIDTH / 2;
           spawnText.x = WIDTH / 2;
           tipsText.x = WIDTH / 2;
           replayIcon.bar1.width = WIDTH;
           replayIcon.bar2.position.y = HEIGHT - replayIcon.bar2.height;
           replayIcon.bar2.width = WIDTH;
           gameCover.width = WIDTH;
           gameCover.height = HEIGHT;
           recordingSplash.background.width = WIDTH;
           recordingSplash.background.height = HEIGHT;
           recordingSplash.logo.position.x = WIDTH/2 - (recordingSplash.logo.width/2);
           recordingSplash.logo.position.y = HEIGHT/2 - (recordingSplash.logo.height/2);
           disconnectText.x = WIDTH / 2;

           let guiScale = camera.zoom;
           if (guiScale > 1.1) {
               guiScale = 1.1;
           }
           guiContainer.scale.set(guiScale);
           guiContainer.position.x = (WIDTH/2);
           guiContainer.base2.position.y = ((HEIGHT - 15)/guiScale) - guiContainer.base2.height;
       }
   }

   function onWindowResize() {
       if (capturer) {
           if (capturer.downloadType === 'mobile') {
               WIDTH = Math.round(1080 / 2);
               HEIGHT = Math.round(1920 / 2);
           } else {
               WIDTH = Math.round(1920 / 2);
               HEIGHT = Math.round(1080 / 2);
           }
           app.renderer.resize(WIDTH, HEIGHT);
       } else if (isMobile) {
           app.renderer.view.style.width = window.innerWidth + 'px';
           app.renderer.view.style.height = window.innerHeight + 'px';
           WIDTH = Math.round(window.innerWidth * 1.2);
           HEIGHT = Math.round(window.innerHeight * 1.2);
           app.renderer.resize(WIDTH, HEIGHT);
       } else {
           let resolution = window.devicePixelRatio;
           let w = window.innerWidth;
           let h = window.innerHeight;
           app.renderer.view.style.width = w + 'px';
           app.renderer.view.style.height = h + 'px';
           WIDTH = Math.round(w * resolution);
           HEIGHT = Math.round(h * resolution);
           if (WIDTH > 2560) {
               WIDTH = 2560;
           }
           if (HEIGHT > 1440) {
               HEIGHT = 1440;
           }
           app.renderer.resize(WIDTH, HEIGHT);
       }

       if (!game.isPlayScreen) {
           MAP_WIDTH = WIDTH;
           MAP_HEIGHT = HEIGHT;
       }

       game.resetZoom();
   }
   window.addEventListener('resize', onWindowResize);

   let playerLight;
   let ambientLight;
   let diffuseGroupLayer;
   let normalGroupLayer;
   let lightGroupLayer;
   PIXI.Loader.shared.onComplete.once(function (loader, res) {
       resources = res;
       console.info('Asset loading completed.');

       app.cstage = new PIXI.Container();
       app.stage.addChild(app.cstage);
       app.stage.filterArea = app.renderer.screen;

       diffuseGroupLayer = new PIXI.display.Layer(PIXI.lights.diffuseGroup);
       PIXI.lights.diffuseGroup.zIndex = 1;
       diffuseGroupLayer.getZIndex = () => {
           return 1;
       };
       app.cstage.addChild(diffuseGroupLayer);
       normalGroupLayer = new PIXI.display.Layer(PIXI.lights.normalGroup);
       PIXI.lights.normalGroup.zIndex = 3;
       normalGroupLayer.getZIndex = () => {
           return 2;
       };
       app.cstage.addChild(normalGroupLayer);
       lightGroupLayer = new PIXI.display.Layer(PIXI.lights.lightGroup);
       PIXI.lights.lightGroup.zIndex = 4;
       lightGroupLayer.getZIndex = () => {
           return 3;
       };
       app.cstage.addChild(lightGroupLayer);

       game.updateLightingQuality();

       //ambientLight = new PIXI.lights.AmbientLight(0xD39C71, 1.2);
       ambientLight = new PIXI.lights.AmbientLight(0xFFFFFF, 1.0);
       ambientLight.getZIndex = () => {
           return 0;
       };
       app.cstage.addChild(ambientLight);

       playerLight = new PIXI.lights.PointLight(0xFFFFFF, 0.4);
       playerLight.position.set(500, 500);
       playerLight.getZIndex = () => {
           return 0;
       };
       app.cstage.addChild(playerLight);

       cursorSpritesheet = loadSpritesheet(resources['crosshair'].texture, 32, 64);
       arrowSpritePointer = new PIXI.Sprite(cursorSpritesheet[1][0]);
       arrowSpritePointer.visible = false;
       arrowSpritePointer.anchor.set(0.5);
       arrowSpritePointer.getZIndex = function () {
           return -100000;
       };
       app.cstage.addChild(arrowSpritePointer);

       cursorSprite = new PIXI.Container();
       cursorSprite.getZIndex = function () {
           return -100000;
       };

       cursorSprite.shellLoading1 = new PIXI.Sprite(resources['white'].texture);
       cursorSprite.shellLoading1.width = 20;
       cursorSprite.shellLoading1.height = 16;
       cursorSprite.shellLoading1.x = 0;
       cursorSprite.shellLoading1.y = 0;
       cursorSprite.shellLoading1.anchor.x = 0.5;
       cursorSprite.shellLoading1.anchor.y = 1;
       cursorSprite.addChild(cursorSprite.shellLoading1);

       cursorSprite.shellLoading2 = new PIXI.Sprite(resources['white'].texture);
       cursorSprite.shellLoading2.width = 12;
       cursorSprite.shellLoading2.height = 10;
       cursorSprite.shellLoading2.x = 0;
       cursorSprite.shellLoading2.y = -15;
       cursorSprite.shellLoading2.anchor.x = 0.5;
       cursorSprite.shellLoading2.anchor.y = 1;
       cursorSprite.addChild(cursorSprite.shellLoading2);

       cursorSprite.cursor = new PIXI.Sprite(cursorSpritesheet[0][0]);
       cursorSprite.cursor.anchor.set(0.5);
       cursorSprite.addChild(cursorSprite.cursor);
       app.cstage.addChild(cursorSprite);

       cursorSprite.scale.set(0.80);
       arrowSpritePointer.scale.set(0.80);

       guiSpritesheet = loadSpritesheet(resources['gui'].texture, 128, 128);
       tagsSpritesheet = loadSpritesheet(resources['tags'].texture, 64, 16);

       background = new PIXI.TilingSprite(resources['background'].texture);
       background.getZIndex = function () {
           return 100000;
       };
       background.width = 10000;
       background.height = 10000;
       background.scale.x = 1.5;
       background.scale.y = 1.5;
       background.anchor.x = 0;
       background.anchor.y = 0;
       background.position.x = 0;
       background.position.y = 0;
       app.cstage.addChild(background);

       app.cstage.updateLayersOrder = function () {
           app.cstage.children.sort(function (a, b) {
               return b.getZIndex() - a.getZIndex()
           });
       };

       debugText = new PIXI.Text();
       debugText.visible = ENABLE_DEBUG;
       debugText.style.fill = 0xFFFFFF;
       debugText.style.fontFamily = fontFamily;
       debugText.anchor.x = 0;
       debugText.x = 10;
       debugText.y = 500;
       debugText.getZIndex = function () {
           return -100000;
       };
       app.stage.addChild(debugText);

       spawnText = new PIXI.Text();
       spawnText.style.fontFamily = fontFamily;
       spawnText.anchor.x = 0.5;
       spawnText.style.fill = 0xFFFFFF;
       spawnText.text = 'Spectating\nTap to Switch Player';
       spawnText.x = WIDTH / 2;
       spawnText.style.align = 'center';
       spawnText.y = 125;
       spawnText.visible = false;
       spawnText.getZIndex = function () {
           return -100000;
       };
       app.stage.addChild(spawnText);

       disconnectText = new PIXI.Text('');
       disconnectText.visible = false;
       disconnectText.style.fontFamily = fontFamily;
       disconnectText.style.fill = 0xFFFFFF;
       disconnectText.style.fontSize = 35;
       disconnectText.anchor.x = 0.5;
       disconnectText.x = WIDTH / 2;
       disconnectText.y = 200;
       app.stage.addChild(disconnectText);

       tipsText = new PIXI.Text();
       tipsText.style.fontFamily = fontFamily;
       tipsText.anchor.x = 0.5;
       tipsText.style.fill = 0xFFFFFF;
       tipsText.text = 'These are tips.';
       tipsText.style.align = 'center';
       tipsText.style.fontSize = 20;
       tipsText.x = WIDTH / 2;
       tipsText.y = 50;
       tipsText.visible = false;
       tipsText.getZIndex = function () {
           return -100000;
       };
       app.stage.addChild(tipsText);

       globalChatText = new PIXI.Text();
       globalChatText.style.fontFamily = fontFamily;
       globalChatText.anchor.x = 0;
       globalChatText.style.fill = 0xFFFFFF;
       globalChatText.text = '';
       globalChatText.style.align = 'left';
       globalChatText.style.fontSize = 20;
       globalChatText.x = 10;
       globalChatText.y = 10;
       globalChatText.getZIndex = function () {
           return -100000;
       };
       app.stage.addChild(globalChatText);

       announcementContainer = new PIXI.Container();
       announcementContainer.visible = false;
       announcementContainer.getZIndex = function () {
           return -100000;
       };
       app.stage.addChild(announcementContainer);

       announcementContainer.square = new PIXI.Sprite(resources['white'].texture);
       announcementContainer.square.alpha = 0.5;
       announcementContainer.square.tint = 0x000000;
       announcementContainer.square.width = 1;
       announcementContainer.square.height = 100;
       announcementContainer.addChild(announcementContainer.square);

       announcementContainer.titleText = new PIXI.Text('', {
           fontFamily: fontFamily,
           fontSize: 32,
           fill: 0xFFFFFF,
           align: 'center'
       });
       announcementContainer.titleText.anchor.x = 0.5;
       announcementContainer.titleText.x = WIDTH / 2;
       announcementContainer.titleText.y = 10;
       announcementContainer.addChild(announcementContainer.titleText);

       announcementContainer.infoText = new PIXI.Text('', {
           fontFamily: fontFamily,
           fontSize: 22,
           fill: 0xFFFFFF,
           align: 'center',
           wordWrap: true,
           wordWrapWidth: 500
       });
       announcementContainer.infoText.anchor.x = 0.5;
       announcementContainer.infoText.x = WIDTH / 2;
       announcementContainer.infoText.y = 50;
       announcementContainer.addChild(announcementContainer.infoText);

       emoteWheelContainer = new PIXI.Container();
       emoteWheelContainer.visible = false;
       emoteWheelContainer.position.y = 400;
       app.stage.addChild(emoteWheelContainer);

       updateEmotes([
           'emote-affirmative',
           'emote-no',
           'emote-groupup',
           'emote-hello',
           'emote-helpme',
           'emote-thankyou',
           'emote-heart'
       ]);

       killfeedContainer = new PIXI.Container();
       killfeedContainer.position.x = 10;
       killfeedContainer.position.y = 10;
       app.stage.addChild(killfeedContainer);

       replayIcon = new PIXI.Container();
       replayIcon.flashTimer = 0;
       replayIcon.visible = false;

       replayIcon.bar1 = new PIXI.Sprite(resources.white.texture);
       replayIcon.bar1.tint = 0x000000;
       replayIcon.bar1.position.x = 0;
       replayIcon.bar1.position.y = 0;
       replayIcon.bar1.width = WIDTH;
       replayIcon.bar1.height = 80;
       replayIcon.addChild(replayIcon.bar1);

       replayIcon.bar2 = new PIXI.Sprite(resources.white.texture);
       replayIcon.bar2.tint = 0x000000;
       replayIcon.bar2.position.x = 0;
       replayIcon.bar2.position.y = HEIGHT-replayIcon.bar1.height;
       replayIcon.bar2.width = WIDTH;
       replayIcon.bar2.height = replayIcon.bar1.height;
       replayIcon.addChild(replayIcon.bar2);

       gameCover = new PIXI.Sprite(resources.white.texture);
       gameCover.tint = 0x000000;
       gameCover.position.x = 0;
       gameCover.position.y = 0;
       gameCover.width = WIDTH;
       gameCover.height = HEIGHT;
       gameCover.visible = true;
       app.stage.addChild(gameCover);


       recordingSplash = new PIXI.Container();
       app.stage.addChild(recordingSplash);
       recordingSplash.background = new PIXI.Sprite(resources.white.texture);
       recordingSplash.background.tint = 0x000000;
       recordingSplash.background.position.x = 0;
       recordingSplash.background.position.y = 0;
       recordingSplash.background.width = WIDTH;
       recordingSplash.background.height = HEIGHT;
       recordingSplash.addChild(recordingSplash.background);

       recordingSplash.logo = new PIXI.Container();
       recordingSplash.logo.position.x = WIDTH/2 - (recordingSplash.logo.width/2);
       recordingSplash.logo.position.y = HEIGHT/2 - (recordingSplash.logo.height/2);
       recordingSplash.addChild(recordingSplash.logo);

       recordingSplash.logo.image = new PIXI.Sprite(resources.logo.texture);
       recordingSplash.logo.image.width = 512;
       recordingSplash.logo.image.height = 256;
       recordingSplash.logo.image.position.x = 0;
       recordingSplash.logo.image.position.y = 0;
       recordingSplash.logo.addChild(recordingSplash.logo.image);

       recordingSplash.logo.text = new PIXI.Text('Play now at STUG.io', {
           fontSize: 28,
           fill: 0xFFFFFF,
           align: 'center',
           fontFamily: fontFamily
       });
       recordingSplash.logo.text.anchor.set(0.5, 0);
       recordingSplash.logo.text.position.x = recordingSplash.logo.image.width/2;
       recordingSplash.logo.text.position.y = recordingSplash.logo.image.height;
       recordingSplash.logo.addChild(recordingSplash.logo.text);
       recordingSplash.visible = false;

       replayIcon.icon = new PIXI.Sprite(resources.replay_icon.texture);
       replayIcon.icon.position.x = 125;
       replayIcon.icon.position.y = 100;
       replayIcon.addChild(replayIcon.icon);

       app.stage.addChild(replayIcon);

       guiContainer = new PIXI.Container();
       guiContainer.visible = false;

       guiRoundIndicatorSpritesheet = loadSpritesheet(resources['gui_icon'].texture, 64, 64);
       guiContainer.base1 = new PIXI.Sprite(resources['gui_timer_bg'].texture);
       guiContainer.base1.width = 256;
       guiContainer.base1.height = 32;
       guiContainer.base1.anchor.set(0.5, 0);
       guiContainer.base1Upper = new PIXI.Sprite(resources['gui_timer_fg'].texture);
       guiContainer.base1Upper.anchor.set(0.5, 0);
       guiContainer.base1.addChild(guiContainer.base1Upper);

       guiContainer.interactive = true;
       guiContainer.on('pointerover', () => {
           guiContainer.alpha = 0.25;
       });
       guiContainer.on('pointerout', () => {
           guiContainer.alpha = 1;
       });

       guiContainer.base1Text = new PIXI.Text('00:00', {
           fontSize: 22,
           fill: 0xFFFFFF,
           align: 'center',
           fontFamily: fontFamily
       });
       guiContainer.base1Text.anchor.set(0.5, 0);
       guiContainer.base1Text.position.y = 2;
       guiContainer.base1.addChild(guiContainer.base1Text);
       guiContainer.addChild(guiContainer.base1);

       updateRoundIndicators();

       guiContainer.base2 = new PIXI.Sprite(resources['gui_base_bg'].texture);
       guiContainer.base2.anchor.set(0.5, 0);
       guiContainer.base2.width = 512;
       guiContainer.base2.height = 64;

       guiContainer.bar1MaskGraphics = new PIXI.Sprite(resources['gui_base_mask'].texture);
       guiContainer.bar1MaskGraphics.tint = 0xFFFFFF;
       guiContainer.bar1MaskGraphics.position.x = -255;
       guiContainer.base2.addChild(guiContainer.bar1MaskGraphics);

       guiContainer.bar1Behind = new PIXI.Sprite(resources.white.texture);
       guiContainer.bar1Behind.tint = 0xFFFFFF;
       guiContainer.bar1Behind.position.x = -237;
       guiContainer.bar1Behind.position.y = 6;
       guiContainer.bar1Behind.originalWidth = 472;
       guiContainer.bar1Behind.originalHeight = 42;
       guiContainer.bar1Behind.width = guiContainer.bar1Behind.originalWidth;
       guiContainer.bar1Behind.height = guiContainer.bar1Behind.originalHeight;
       guiContainer.bar1Behind.mask = guiContainer.bar1MaskGraphics;
       guiContainer.base2.addChild(guiContainer.bar1Behind);

       guiContainer.bar1 = new PIXI.Sprite(resources.white.texture);
       guiContainer.bar1.tint = 0xb62221;
       guiContainer.bar1.position.x = -237;
       guiContainer.bar1.position.y = 6;
       guiContainer.bar1.width = guiContainer.bar1Behind.width;
       guiContainer.bar1.height = guiContainer.bar1Behind.height;
       guiContainer.bar1.mask = guiContainer.bar1MaskGraphics;
       guiContainer.base2.addChild(guiContainer.bar1);

       guiContainer.base2Upper = new PIXI.Sprite(resources['gui_base_fg'].texture);
       guiContainer.base2Upper.anchor.set(0.5, 0);
       guiContainer.base2.addChild(guiContainer.base2Upper);

       repairGuiSpritesheet = loadSpritesheet(resources['repair_gui'].texture, 128, 64);
       guiContainer.repairHint = new PIXI.Sprite(repairGuiSpritesheet[0][0]);
       guiContainer.repairHint.position.x = 330;
       guiContainer.repairHint.anchor.set(0.5, 0);
       guiContainer.repairHint.visible = false;
       guiContainer.base2.addChild(guiContainer.repairHint);

       guiContainer.repairHintText = new PIXI.Text('R', {
           fontSize: 38,
           fill: 0xFFFFFF,
           align: 'center'
       });
       guiContainer.repairHintText.anchor.set(0.5, 0);
       guiContainer.repairHintText.position.x = 18;
       guiContainer.repairHintText.position.y = 12;
       guiContainer.repairHint.addChild(guiContainer.repairHintText);

       guiContainer.base2Text = new PIXI.Text('100', {
           fontSize: 22,
           fill: 0xFFFFFF,
           align: 'center',
           fontFamily: fontFamily
       });
       guiContainer.base2Text.anchor.set(0.5, 0);
       guiContainer.base2Text.position.y = 8;
       guiContainer.base2.addChild(guiContainer.base2Text);

       guiContainer.addChild(guiContainer.base2);

       damageIndicators = new PIXI.Container();
       damageIndicators.getZIndex = function () {
           return -95000;
       };
       app.cstage.addChild(damageIndicators);
       app.stage.addChild(guiContainer);


       tutorialAvatarSpritesheet = loadSpritesheet(resources['tutorial_portrait'].texture, 256, 256);
       tutorialContainer = new PIXI.Container();
       tutorialContainer.square = new PIXI.Sprite(resources['white'].texture);
       tutorialContainer.square.alpha = 0.5;
       tutorialContainer.square.tint = 0x000000;
       tutorialContainer.square.width = 1;
       tutorialContainer.square.height = 1;
       tutorialContainer.addChild(tutorialContainer.square);

       tutorialContainer.avatar = new PIXI.Sprite(tutorialAvatarSpritesheet[0][0]);
       tutorialContainer.avatar.width = 200;
       tutorialContainer.avatar.height = 200;
       tutorialContainer.addChild(tutorialContainer.avatar);

       tutorialContainer.text = new MultiStyleText('', {
           'default': {
               fontSize: 22,
               fill: 0xFFFFFF,
               align: 'left',
               wordWrap: true,
               wordWrapWidth: 200,
               fontFamily: fontFamily
           },
           'imp': {
               fontWeight: 'bold',
               fontSize: 22,
               align: 'left',
               wordWrap: true,
               wordWrapWidth: 200,
               fontFamily: fontFamily,
               fill: 0xDB982C
           }
       });
       tutorialContainer.addChild(tutorialContainer.text);
       tutorialContainer.visible = false;
       app.stage.addChild(tutorialContainer);

       game.loadVueApp();

       app.start();
       update();

       onWindowResize();
   });

   let emoteSendTime = 0;
   function toggleEmoteWheel() {
       if (!game.roundEnded) {
           if (game.isInMenu || !player || !player.valid || !player.canControl || !player.netData || !player.netData.alive) {
               emoteWheelContainer.visible = false;
               return;
           }
       }
       if (Date.now() - emoteSendTime < 8000) {
           emoteWheelContainer.visible = false;
           return;
       }

       emoteWheelContainer.visible = !emoteWheelContainer.visible;
       if (emoteWheelContainer.visible) {
           updateEmotes();
           if (game.roundEnded) {
               emoteWheelContainer.x = WIDTH/2 - (emoteWheelContainer.width / 2);
               emoteWheelContainer.y = HEIGHT - (emoteWheelContainer.height*1.2);
           } else {
               emoteWheelContainer.x = mx - (emoteWheelContainer.width / 2);
               emoteWheelContainer.y = my - (emoteWheelContainer.height / 2);
           }
       }
   }
   game.toggleEmoteWheel = toggleEmoteWheel;

   let lastEmoteData = null;
   function updateEmotes(data) {
       if (!data) {
           data = lastEmoteData;
       }
       lastEmoteData = data;
       emoteWheelContainer.removeChildren();

       let scale = WIDTH/1920;
       if (HEIGHT/1080 < scale) {
           scale = HEIGHT/1080;
       }
       if (scale < 0.4) {
           scale = 0.4;
       } else if (scale > 1) {
           scale = 1;
       }
       emoteWheelContainer.scale.set(scale);
       for (let i=0; i<data.length; i++) {
           let key = data[i]
           if (window.gameServer.emoteListMap[key]) {
               let bg = new PIXI.Sprite(resources['emotewheel_bg'].texture);
               let emote = window.gameServer.emoteListMap[key];
               bg.emote = emote;

               let icon = null;
               if (emote.spine) {
                   icon = new PIXI.spine.Spine(resources[emote.spine].spineData);
               } else {
                   let tex = resources[emote.texture].texture;
                   if (emote.animation) {
                       let spritesheet = loadSpritesheet(tex, Math.floor(tex.width / emote.animation.frameX), Math.floor(tex.height / emote.animation.frameY));
                       tex = spritesheet[0][0];
                   }
                   icon = new PIXI.Sprite(tex);
                   icon.anchor.set(0.5);
               }
               icon.position.x += 128;
               icon.position.y += 96;
               icon.interactive = false;
               bg.addChild(icon);

               let text = new PIXI.Text(emote.name,{
                   fontSize: 22,
                   fill: 0xFFFFFF,
                   align: 'center',
                   wordWrap: true,
                   wordWrapWidth: 150,
                   fontFamily: fontFamily
               });
               text.position.y += 64;
               text.anchor.set(0.5);
               icon.addChild(text);

               bg.position.x = i * (bg.width*0.5);
               if (i%2 === 0) {
                   bg.position.y = bg.height*0.25;
               } else {
                   bg.position.y = bg.height*-0.25;
               }
               emoteWheelContainer.addChild(bg);
               bg.alpha = 0.75;

               bg.interactive = true;
               bg.hitArea = new PIXI.Polygon([
                   bg.width/2, 0,
                   bg.width, bg.height/2,
                   bg.width/2, bg.height,
                   0, bg.height/2
               ]);
               bg.on('pointerover', function() {
                   this.alpha = 1;
                   this.tint = 0xFFFFCC;
               });
               bg.on('pointerout', function() {
                   this.alpha = 0.75;
                   this.tint = 0xFFFFFF;
               });
               bg.on('mousedown', function(e) {
                   if (e.data && e.data.button === 0 && player && player.valid && socket) {
                       emoteSendTime = Date.now();
                       socket.emit('showEmote', {
                           key: this.emote.key,
                           slot: i
                       });
                       didAction = true;
                       emoteWheelContainer.visible = false;
                   } else {
                       emoteWheelContainer.visible = false;
                   }
               });
           }
       }
   }

   function updateKillstreaks(data) {
       if (!data || !data.slots) {
           if (data && data.disabled) {
               if (guiContainer.killstreaks) {
                   guiContainer.base2.removeChild(guiContainer.killstreaks);
                   guiContainer.killstreaks = null;
               }
           }
           return;
       }

       if (guiContainer.killstreaks) {
           guiContainer.base2.removeChild(guiContainer.killstreaks);
           guiContainer.killstreaks = null;
       }

       guiContainer.killstreaks = new PIXI.Container();
       guiContainer.killstreakIndicators = [];
       guiContainer.killstreaks.position.y = -35;
       guiContainer.base2.addChild(guiContainer.killstreaks);
       let killstreakPos = [
           {
               x: -180,
               key: '1',
               ability: data.slots[0].type,
               active: data.slots[0].active
           },
           {
               x: -90
           },
           {
               x: 0,
               key: '2',
               ability: data.slots[1].type,
               active: data.slots[1].active
           },
           {
               x: 90
           },
           {
               x: 180,
               key: '3',
               ability: data.slots[2].type,
               active: data.slots[2].active
           }
       ];
       for (let i=0; i<killstreakPos.length; i++) {
           let pos = killstreakPos[i];
           let indicatorSheet = loadSpritesheet(resources['gui_counter_bg'].texture, 128, 32);
           let indicatorSX = 0;
           let indicatorSY = 0;
           if (pos.key === '1') {
               indicatorSX = 1;
           }
           if (pos.key === '2') {
               indicatorSY = 1;
           }
           if (pos.key === '3') {
               indicatorSX = 1;
               indicatorSY = 1;
           }
           let indicator = new PIXI.Sprite(indicatorSheet[indicatorSX][indicatorSY]);

           let totalKillstreakKills = data.killstreakKills + (data.killstreakLevel*5);
           if (totalKillstreakKills >= i+1) {
               let sheet = loadSpritesheet(resources['gui_counter_fg'].texture, 128, 32);
               let indicatorLevel = data.killstreakKills >= i+1 ? data.killstreakLevel : data.killstreakLevel-1;
               if (indicatorLevel < 0) {
                   indicatorLevel = 0;
               }
               indicator.texture = sheet[!!pos.key ? 1 : 0][indicatorLevel];
           }

           if (pos.ability) {
               let sheet = loadSpritesheet(resources['ability_' + pos.ability].texture, 64, 64);
               if (pos.active) {
                   indicator.killstreakForeground = new PIXI.Sprite(sheet[0][0]);

                   /*
                   indicator.hintSprite = new PIXI.Sprite(resources['key_hint'].texture);
                   indicator.hintSprite.position.y = -56;
                   indicator.hintSprite.width = 35;
                   indicator.hintSprite.height = 35;
                   indicator.hintSprite.anchor.set(0.5, 0.5);
                   indicator.hintSprite.textObj = new PIXI.Text(pos.key);
                   indicator.hintSprite.textObj.position.y = -5;
                   indicator.hintSprite.textObj.style.fontFamily = fontFamily;
                   indicator.hintSprite.textObj.style.fill = 0xFFFFFF;
                   indicator.hintSprite.textObj.style.fontSize = 30;
                   indicator.hintSprite.textObj.anchor.set(0.5, 0.5);
                   indicator.hintSprite.addChild(indicator.hintSprite.textObj);
                   indicator.addChild(indicator.hintSprite);
                   */
               } else {
                   indicator.killstreakForeground = new PIXI.Sprite(sheet[0][1]);
               }
               indicator.killstreakForeground.visible = totalKillstreakKills >= i+1;
               indicator.killstreakForeground.anchor.set(0.5, 0.5);
               indicator.killstreakForeground.position.y = -5;
               indicator.addChild(indicator.killstreakForeground);
           }

           if (indicator) {
               indicator.visible = true;
               indicator.anchor.set(0.5, 0);
               indicator.position.x = pos.x;
               guiContainer.killstreakIndicators.push(indicator);
               guiContainer.killstreaks.addChild(indicator);
           }
       }
   }

   function updateRoundIndicators() {
       let baseTexture = 'gui_battle';
       if (scoreboardData && window.gameServer.gamemodeList[scoreboardData.gamemode] && window.gameServer.gamemodeList[scoreboardData.gamemode].guiType) {
           baseTexture = window.gameServer.gamemodeList[scoreboardData.gamemode].guiType;
       }
       if (baseTexture === 'none') {
           baseTexture = null;
       }

       if (guiContainer.roundIndicatorContainer) {
           guiContainer.base1.removeChild(guiContainer.roundIndicatorContainer);
           guiContainer.roundIndicatorContainer = null;
       }

       if (!baseTexture) {
           return;
       }

       let positions;
       if (baseTexture === 'gui_conquest') {
           positions = [
               {
                   x: -71,
                   y: 70,
                   scale: 1
               },
               {
                   x: 0,
                   y: 70,
                   scale: 1,
                   middle: true
               },
               {
                   x: 71,
                   y: 70,
                   scale: 1
               }
           ];
       } else if (baseTexture === 'gui_battle') {
           positions = [
               {
                   x: -133,
                   y: 82,
                   scale: 0.65
               },
               {
                   x: -89,
                   y: 82,
                   scale: 0.65
               },
               {
                   x: -44,
                   y: 82,
                   scale: 0.65
               },
               {
                   x: 0,
                   y: 70,
                   scale: 1,
                   middle: true
               },
               {
                   x: 46,
                   y: 82,
                   scale: 0.65
               },
               {
                   x: 90,
                   y: 82,
                   scale: 0.65
               },
               {
                   x: 134,
                   y: 82,
                   scale: 0.65
               }
           ];
       } else {
           positions = [];
       }
       guiContainer.roundIndicators = [];
       guiContainer.roundIndicatorContainer = new PIXI.Container();

       guiContainer.baseRound = new PIXI.Sprite((resources[baseTexture]) ? resources[baseTexture].texture : null);
       guiContainer.baseRound.anchor.set(0.5, 0);
       guiContainer.baseRound.position.y = 45;
       guiContainer.roundIndicatorContainer.addChild(guiContainer.baseRound);

       for (let i=0; i<positions.length; i++) {
           let pos = positions[i];
           let indicator = new PIXI.Sprite(guiRoundIndicatorSpritesheet[0][0]);
           indicator.visible = false;
           indicator.anchor.set(0.5, 0);
           indicator.posData = pos;
           indicator.position.x = pos.x;
           indicator.position.y = pos.y-25;
           indicator.scale.set(pos.scale);
           guiContainer.roundIndicators.push(indicator);
           guiContainer.roundIndicatorContainer.addChild(indicator);
       }

       if ((baseTexture === 'gui_conquest' || baseTexture === 'percentage_only') && lastControllablePlayer && lastControllablePlayer.team !== null && lastControllablePlayer.team !== undefined) {
           let currentTeam = scoreboardData.teams[lastControllablePlayer.team];
           let otherTeam = lastControllablePlayer.team + 1;
           if (otherTeam >= scoreboardData.teams.length) {
               otherTeam = 0;
           }
           otherTeam = scoreboardData.teams[otherTeam];

           if (currentTeam && scoreboardData.maxScore) {
               let team1Score = new PIXI.Text(Math.floor((currentTeam.score/scoreboardData.maxScore) * 100) + '%', {
                   fontSize: 22,
                   fill: COLOR_FRIENDLY_BRIGHT,
                   align: 'center',
                   wordWrap: true,
                   wordWrapWidth: 800,
                   fontFamily: fontFamily
               });
               team1Score.anchor.set(0.5);
               team1Score.position.x = -155;
               team1Score.position.y = baseTexture === 'percentage_only' ? -20 : 32;
               guiContainer.baseRound.addChild(team1Score);
           }

           if (otherTeam && scoreboardData.maxScore) {
               let team2Score = new PIXI.Text(Math.floor((otherTeam.score/scoreboardData.maxScore) * 100)+ '%', {
                   fontSize: 22,
                   fill: COLOR_ENEMY_BRIGHT,
                   align: 'center',
                   wordWrap: true,
                   wordWrapWidth: 800,
                   fontFamily: fontFamily
               });
               team2Score.anchor.set(0.5);
               team2Score.position.x = 155;
               team2Score.position.y = baseTexture === 'percentage_only' ? -20 : 32;
               guiContainer.baseRound.addChild(team2Score);
           }
       }

       guiContainer.base1.addChild(guiContainer.roundIndicatorContainer);

       if (scoreboardData && scoreboardData.teams && lastControllablePlayer && baseTexture !== 'gui_conquest') {
           let currentTeam = scoreboardData.teams[lastControllablePlayer.team];
           let otherTeam = lastControllablePlayer.team + 1;
           if (otherTeam >= scoreboardData.teams.length) {
               otherTeam = 0;
           }
           otherTeam = scoreboardData.teams[otherTeam];

           for (let i=0; i<guiContainer.roundIndicators.length; i++) {
               let indicator = guiContainer.roundIndicators[i];
               if (indicator) {
                   indicator.visible = false;
                   indicator.texture = guiRoundIndicatorSpritesheet[0][0];
               }
           }

           if (currentTeam && otherTeam) {
               let currentTeamScore = currentTeam.score;
               if (currentTeamScore < 0) {
                   currentTeamScore = 0;
               }
               if (currentTeamScore > 4) {
                   currentTeamScore = 4;
               }
               for (let i=0; i<currentTeamScore; i++) {
                   let indicator = guiContainer.roundIndicators[i];
                   if (indicator) {
                       indicator.visible = true;
                       if (indicator.posData.middle) {
                           indicator.texture = guiRoundIndicatorSpritesheet[0][0];
                       } else {
                           indicator.texture = guiRoundIndicatorSpritesheet[0][1];
                       }
                   }
               }

               let otherTeamScore = otherTeam.score;
               if (otherTeamScore < 0) {
                   otherTeamScore = 0;
               }
               if (otherTeamScore > 4) {
                   otherTeamScore = 4;
               }
               for (let i=guiContainer.roundIndicators.length-otherTeamScore; i<guiContainer.roundIndicators.length; i++) {
                   let indicator = guiContainer.roundIndicators[i];
                   if (indicator) {
                       indicator.visible = true;
                       if (indicator.posData.middle) {
                           indicator.texture = guiRoundIndicatorSpritesheet[1][0];
                       } else {
                           indicator.texture = guiRoundIndicatorSpritesheet[1][1];
                       }
                   }
               }
           }
       }
   }

   function showAnnouncement(title, text, time, color) {
       if (game.watchingRecording) {
           return;
       }

       if (title) {
           announcementContainer.visible = true;
           announcementContainer.position.y = 200;
           announcementContainer.titleText.text = title;
           if (color) {
               announcementContainer.titleText.style.fill = color;
           } else {
               announcementContainer.titleText.style.fill = 0xFFC223;
           }
           if (!time) {
               time = 5000;
           }
           announcementContainer.hideTime = Date.now() + time;

           if (text) {
               announcementContainer.infoText.visible = true;
               announcementContainer.infoText.text = text;
               announcementContainer.square.height = 110;
           } else {
               announcementContainer.infoText.visible = false;
               announcementContainer.square.height = 60;
           }
       } else {
           announcementContainer.visible = false;
       }
   }

   if (isDesktopApp) {
       window.electronAPI.onMessageUDP((event, data) => {
           if (data && data.buffer && game.isPlayScreen) {
               game.onSnapshot(data.buffer);
           } else {
               console.error('Got invalid UDP message.', game.isPlayScreen, data);
           }
       });
   }

   let currentWebRTCPeer = null;
   let reconnectToken = null;
   let reconnecting = false;
   let reconnectionAttempts = 0;
   let scoreboardData = null;
   function init() {
       if (reconnecting) {
           reconnectionAttempts++;
       }

       startFPSCheck = Date.now() + 10000;
       if (!startFPSCheck && ADSDK === 'kongregate') {
           startFPSCheck = Date.now() + 20000;
       }

       let address = game.queryData.address;
       if (address === '127.0.0.1' || address === 'localhost') {
           address = window.location.hostname;
       }
       if (address === 'index.html') {
           address = '127.0.0.1';
       }

       for (let i=0; i<entities.length; i++) {
           let entity = entities[i];
           entity.remove();
       }
       entityDictionary = {};

       createJoystickManager();

       if (game.isSingleplayer) {
           DISABLE_AFK = true;
           socket = {
               connected: true,
               singleplayerSocket: true,
               on: function(name, fn) {
                   game.fakeSockets.clientSocket.socketEvents[name] = fn;
               },
               emit: function(name, data) {
                   if (game.fakeSockets.serverSocket && game.fakeSockets.serverSocket.socketEvents[name]) {
                       game.fakeSockets.serverSocket.socketEvents[name](data);
                   }
               },
               socketEvents: {},
               disconnect: function() {
                   window.location.reload();
               }
           };
           game.fakeSockets.clientSocket = socket;
       } else { // if not singleplayer
           if (socket && socket.singleplayerSocket) {
               socket = null;
           }
           game.destroySockets();

           DISABLE_AFK = false; // so if our game is not singleplayer, we get afk warnings and can be kicked

           let token = game.queryData.token;
           if (reconnectToken) {
               token = reconnectToken;
           }
           let protocol = websocketProtocol;
           if (game.queryData.port == 443) {
               protocol = 'https:';
           }
           socket = io(protocol + '//' + address + ':' + game.queryData.port, { // now our socket is... thingy!!!
               forceNew: true,
               query: {
                   userToken: token,
                   gameSocketType: 'main'
               },
               closeOnBeforeunload: false,
               reconnection: false,
               transports: ['websocket'],
               upgrade: false
           });
           socket.on('connect', () => {
               console.info('Main socket connected.');
               reconnecting = false;
               reconnectionAttempts = 0;
               reconnectToken = null;
           });
       }

       game.mainSocket = socket; // so the singleplayer/multiplayer socket goes in here

       onSocketConnected();
       running = true;

       let snapPort = (parseInt(game.queryData.port ? game.queryData.port : '443'));
       socket.on('growl', function (message) {
           game.showGrowl(message, {
               type: 'danger',
               align: 'center',
               allow_dismiss: true,
               width: 500,
               delay: 5000
           });
           if (game.lobbyChat && game.lobbyChat.component) {
               game.lobbyChat.component.addChatMessage({
                   message: message
               });
           }
       });

       socket.on('pong', function (data) {
           latency = Date.now() - parseInt(data);
       });

       socket.on('connect_error', function (err) {
           if (reconnecting && reconnectionAttempts < 5 && !(err && err.message === 'invalid_token')) {
               console.error('Reconnect error:', err);
               game.destroySockets();
               setTimeout(() => {
                   reconnecting = true;
                   game.disconnected = false;
                   init();
               }, 4000);
           } else {
               console.error('Connect error:', err);
               if (err && err.message && err.message !== '' && err.message !== 'invalid_token') {
                   game.showGrowl(err.message, {type: 'danger'});
               } else {
                   game.showGrowl('Failed to connect to server.', {type: 'danger'});
               }

               setTimeout(() => {
                   game.disconnect(true);
               }, 1000);
           }
       });

       socket.on('error', function(err) {
           console.error(err);
           if (err) {
               game.showGrowl(err.message ? err.message : err, {type: 'danger'});
           } else {
               game.showGrowl('Failed to connect to server.', {type: 'danger'});
           }
       });

       socket.on('rtcSignal', (data) => {
           if (currentWebRTCPeer) {
               currentWebRTCPeer.signal(data);
           }
       });

       socket.on('tryConnectWebRTC', function(rtcConfig) {
           if (currentWebRTCPeer) {
               currentWebRTCPeer.destroy();
               currentWebRTCPeer = null;
           }

           reconnectToken = rtcConfig.reconnectToken;
           connectSnapSocket(rtcConfig.uniqueToken);

           /*
           reconnectToken = rtcConfig.reconnectToken;
           //rtcConfig.iceTransportPolicy = 'relay';
           currentWebRTCPeer = new SimplePeer({
               initiator: false,
               config: rtcConfig
           });
           currentWebRTCPeer.on('error', (err) => {
               console.error('WebRTC connection error:', err);
           });

           currentWebRTCPeer.on('signal', (data) => {
               if (socket) {
                   socket.emit('rtcSignal', data);
               }
           });

           currentWebRTCPeer.on('connect', () => {
               console.info('WebRTC connection established.');
           });

           currentWebRTCPeer.on('data', (data) => {
               if (data && data.buffer) {
                   game.onSnapshot(data.buffer);
               }
           });

           setTimeout(() => {
               if (currentWebRTCPeer && !currentWebRTCPeer.connected) {
                   console.error('WebRTC connection failed, falling back to websockets.');
                   currentWebRTCPeer.destroy();
                   currentWebRTCPeer = null;

                   connectSnapSocket(rtcConfig.uniqueToken);
               }
           }, 5000);
           */
       });

       function connectSnapSocket(token) {
           if (currentWebRTCPeer) {
               console.error('Tried to initiate snap socket while rtc socket is open.');
               return;
           }

           if (isDesktopApp) {
               socket2 = {
                   events: {},
                   on: function (event, fn) {
                       this.events[event] = fn;
                   },
                   emit: function(event, data) {
                       if (this.events[event]) {
                           this.events[event](data);
                       }
                   }
               };
               window.electronAPI.connectUDP(address, snapPort+1, token);
           } else {
               let protocol = websocketProtocol;
               if (snapPort == 443) {
                   protocol = 'https:';
               }
               socket2 = io(protocol + '//' + address + ":" + snapPort, {
                   forceNew: true,
                   query: {
                       token: token,
                       gameSocketType: 'snapshot'
                   },
                   closeOnBeforeunload: false,
                   reconnection: false,
                   transports: ['websocket'],
                   upgrade: false
               });
           }

           socket2.on('connect', function() {
               console.info('Snap socket connected.');

               let oldDecoderAdd = socket2.io.decoder.add;
               socket2.io.decoder.add = function (obj) {
                   try {
                       oldDecoderAdd.call(socket2.io.decoder, obj);
                   } catch (e) {}
               };

               socket2.io.decoder.reconstructor = {
                   takeBinaryData: game.onSnapshot,
                   finishedReconstruction: function () {
                   }
               };
           });

           socket2.on('disconnect', function(reason) {
               console.info('Snap socket disconnected: ' + reason);
               game.disconnect();
           });
       }

       socket.on('disconnect', function(reason) {
           console.info('Main socket disconnected: ' + reason);
           game.disconnect();
       });

       sendPing();
   }
   game.init = init; // the init function goes in here

   function sendPing() {
       if (socket && socket.connected) {
           socket.emit('ping', Date.now());
       }
   }

   setInterval(() => {
       sendPing();
   }, 5000); // we send a ping every 5000ms

   game.isRunning = function(){
       return running;
   };

   game.watchingRecording = false;
   function onSnapshot(data, fromRecording) {
       if (game.watchingRecording && !fromRecording) {
           return;
       }

       try {
           let dataView = new DataView(data);

           let bytesRead = 0;

           let time = dataView.getFloat64(bytesRead);
           serverTimeDiff = Date.now() - time;
           bytesRead += 8;

           while (bytesRead < dataView.byteLength) {
               let found = false;
               let entityId = dataView.getUint32(bytesRead);
               let entity = entityDictionary[entityId];
               if (entity) {
                   let state = {
                       time: time,
                       serverTimeDiff: serverTimeDiff,
                       x: dataView.getFloat32(bytesRead + 4),
                       y: dataView.getFloat32(bytesRead + 8),
                       rotation: dataView.getFloat32(bytesRead + 12)
                   };
                   bytesRead += 16;
                   if (entity.subtype === 'capture_point') {
                       state.capturePercentage = dataView.getInt32(bytesRead);
                       bytesRead += 4;
                   }
                   if (entity.subtype === 'tank') {
                       state.turretRotation = dataView.getFloat32(bytesRead);
                       bytesRead += 4;
                   }
                   if (entity.netData && entity.netData.hasWheels) {
                       state.wheelRotation = dataView.getFloat32(bytesRead);
                       bytesRead += 4;
                   }
                   entity.addState(state);
                   found = true;
               }

               if (!found) {
                   bytesRead += 16;

                   try {
                       //Hacky fix, if the next byte is something weird, shift by 4.
                       if (dataView.getUint32(bytesRead) <= 0 || dataView.getUint32(bytesRead) >= 100000) {
                           bytesRead += 4;
                       }
                       if (dataView.getUint32(bytesRead) <= 0 || dataView.getUint32(bytesRead) >= 100000) {
                           bytesRead += 4;
                       }
                       if (dataView.getUint32(bytesRead) <= 0 || dataView.getUint32(bytesRead) >= 100000) {
                           bytesRead += 4;
                       }
                   } catch (e) {
                   }
               }
           }
       } catch (e) {
           console.error('Failed to read snapshot:', e);
       }

       return null;
   }
   game.onSnapshot = onSnapshot; // we put the onSnapshot function in here too

   function addChatMessage(data) {
       if (data.id) {
           for (let i = 0; i < entities.length; i++) {
               let entity = entities[i];
               if (data.id === entity.serverId) {
                   if (entity.chat) {
                       entity.chat.text = data.message;
                       entity.chat.visible = true;
                       entity.chat.removeChat = Date.now() + 6000;
                   }
                   if (entity.netData && entity.netData.name) {
                       chatArray.push(entity.netData.name + ': ' + data.message); // hookies!!!!
                   }
                   break;
               }
           }
       } else {
           chatArray.push(data.message);
       }

       if (chatArray.length > 8) {
           chatArray.shift();
       }

       let text = '';
       for (let i = 0; i < chatArray.length; i++) {
           text += chatArray[i] + '\n';
       }
       globalChatText.text = text;
   }

   let timeScaleChangeTime;
   let lastTimeScale = 1;
   function changeTimeScale(newTimeScale) {
       if (timeScale !== newTimeScale) {
           lastTimeScale = timeScale;
           timeScale = newTimeScale;
           timeScaleChangeTime = Date.now();
       }
   }

   let recordingData;
   let recordingWatchingStart;
   let currentRecordingTime;
   let oldRecordingSocket;
   let socketCallbacks;
   let currentRecordingTimeout;

   let lastSnapshotTime = Date.now();
   let curEvent;
   function processNextEvent(next) {
       if (recordingData && recordingData.events) {
           let event = recordingData.events[curEvent];

           if (event) {
               if (socketCallbacks[event.type]) {
                   let listeners = socketCallbacks[event.type];
                   if (Array.isArray(listeners)) {
                       for (let i = 0; i < listeners.length; i++) {
                           let listener = listeners[i];
                           listener(event.data);
                       }
                   } else if (typeof listeners === 'function') {
                       listeners(event.data);
                   }
               }

               if (next && game.watchingRecording) {
                   if (next.beforeRecordingStart) {
                       curEvent++;
                       processNextThing(event);
                       return;
                   } else {
                       if (beforeRecordingStart) {
                           currentRecordingTimeout = setTimeout(() => {
                               beforeRecordingStart = false;
                               if (currentWorldData) {
                                   updateAmbientSound(currentWorldData.ambientSound);
                               }
                               processNextThing(event);
                           }, next.time - recordingData.start);
                       } else {
                           //If next.type is set then it is an event and not a snapshot.
                           if (next.type) {
                               curEvent++;
                               processNextThing(event);
                               return;
                           } else {
                               currentRecordingTimeout = setTimeout(() => {
                                   processNextThing(event);
                               }, 1);

                               /*
                               let moddedSnapshotRate = snapshotRate * lastTimeScale;
                               let snapshotTimeAgo = Date.now() - lastSnapshotTime;
                               let nextTime = moddedSnapshotRate - snapshotTimeAgo;
                               currentRecordingTimeout = setTimeout(() => {
                                   processNextThing(event);
                               }, nextTime);
                               */
                           }
                       }
                   }
               }

               curEvent++;
           }
       }
   }

   function createPlayerCard(name, xp, texture) {
       let cardContainer = new PIXI.Container();
       cardContainer.x = WIDTH+1000;
       cardContainer.y = HEIGHT*0.2;
       cardContainer.getZIndex = function () {
           return -100000;
       };

       let rankSheet = loadSpritesheet(resources['rank_icons'].texture, 64, 64);

       let backgroundTexture = resources['white'].texture;
       let shouldTint = true;
       let background;
       if (texture && resources[texture] && resources[texture].texture) {
           backgroundTexture = resources[texture].texture;
           background = new PIXI.TilingSprite(backgroundTexture);
           shouldTint = false;
       } else {
           background = new PIXI.Sprite(backgroundTexture);
       }
       background.anchor.x = 0;
       background.position.x = -50;
       background.height = 80;
       background.clampMargin = 1;
       if (background.tileScale) {
           background.tileScale.set(0.75);
       }
       if (shouldTint) {
           background.tint = 0x6E9752;
       }

       cardContainer.addChild(background);

       let rankBackground = new PIXI.Sprite(resources['white'].texture);
       rankBackground.tint = 0xCCCCCC;
       rankBackground.width = 66;
       rankBackground.height = 66;
       rankBackground.anchor.x = 0.5;
       rankBackground.anchor.y = 0.5;
       rankBackground.position.x = -46;
       rankBackground.position.y = 40;
       rankBackground.rotation = Math.PI/4;
       cardContainer.addChild(rankBackground);

       let rankBackground2 = new PIXI.Sprite(resources['white'].texture);
       rankBackground2.tint = 0x5b5555;
       rankBackground2.width = 62;
       rankBackground2.height = 62;
       rankBackground2.anchor.x = 0.5;
       rankBackground2.anchor.y = 0.5;
       rankBackground2.position.x = -46;
       rankBackground2.position.y = 40;
       rankBackground2.rotation = Math.PI/4;
       cardContainer.addChild(rankBackground2);

       if (xp && xp > 1000) {
           let rank = game.services.user.calculateRank(xp);

           let tx = Math.floor(rank/5);
           let ty = 0;
           if (tx >= 24) {
               tx = 8;
               ty = 1;
           } else if (tx >= 16) {
               tx -= 16;
               ty = 1;
           }

           try {
               let rankIcon = new PIXI.Sprite(rankSheet[tx][ty]);
               rankIcon.scale.set(1.3);
               rankIcon.anchor.x = 0.5;
               rankIcon.anchor.y = 0.5;
               rankIcon.position.x = -46;
               rankIcon.position.y = 40;
               cardContainer.addChild(rankIcon);

               let rankText = new PIXI.Text();
               rankText.style.fontFamily = fontFamily;
               rankText.anchor.x = 0.5;
               rankText.anchor.y = 0.5;
               rankText.position.x = -45;
               rankText.position.y = 40;
               rankText.style.fill = 0xFFFFFF;
               rankText.style.fontSize = 30;
               rankText.text = rank;
               rankText.style.align = 'center';
               rankText.style.dropShadow = true;
               rankText.style.dropShadowDistance = 3;
               rankText.style.dropShadowColor = 0x000000;
               cardContainer.addChild(rankText);
           } catch (e) {
               console.error('Failed to display rank for replay:', e);
           }
       }

       let cardNameText = new PIXI.Text();
       cardNameText.style.fontFamily = fontFamily;
       cardNameText.position.x = 5;
       cardNameText.position.y = 2;
       cardNameText.anchor.x = 0;
       cardNameText.style.fill = 0xFFFFFF;
       cardNameText.style.fontSize = 62;
       cardNameText.text = name;
       cardNameText.style.align = 'left';
       cardNameText.style.dropShadow = true;
       cardNameText.style.dropShadowDistance = 6;
       cardNameText.style.dropShadowColor = 0x000000;
       cardContainer.addChild(cardNameText);

       background.width = cardNameText.width + 100;

       let maskContainer = new PIXI.Container();
       let backgroundMask1 = new PIXI.Sprite(resources['white'].texture);
       backgroundMask1.tint = 0xCCCCCC;
       backgroundMask1.position.x = background.position.x;
       backgroundMask1.position.y = background.position.y;
       backgroundMask1.width = background.width-40;
       backgroundMask1.height = background.height;
       maskContainer.addChild(backgroundMask1);

       let backgroundMask2 = new PIXI.Sprite(resources['white'].texture);
       backgroundMask2.tint = 0xCCCCCC;
       backgroundMask2.width = 66;
       backgroundMask2.height = 66;
       backgroundMask2.anchor.x = 0.5;
       backgroundMask2.anchor.y = 0.5;
       backgroundMask2.position.x = background.width-95;
       backgroundMask2.position.y = 0;
       backgroundMask2.rotation = Math.PI/4;
       maskContainer.addChild(backgroundMask2);

       let backgroundMask3 = new PIXI.Sprite(resources['white'].texture);
       backgroundMask3.tint = 0xCCCCCC;
       backgroundMask3.width = 66;
       backgroundMask3.height = 66;
       backgroundMask3.anchor.x = 0.5;
       backgroundMask3.anchor.y = 0.5;
       backgroundMask3.position.x = background.width-95;
       backgroundMask3.position.y = 80;
       backgroundMask3.rotation = Math.PI/4;
       maskContainer.addChild(backgroundMask3);

       background.mask = maskContainer;
       cardContainer.addChild(maskContainer);

       app.stage.addChild(cardContainer);

       return cardContainer;
   }

   let recordingAnimationTick = null;
   let replayNameContainer = null;
   function waitForPlayerAnimation() {
       return new Promise((resolve) => {
           playerAnimationFrame = null;

           if (!player || !player.valid) {
               resolve();
               return;
           }

           let sk = Object.keys(sounds);
           let pausedSounds = [];
           for (let i=0; i<sk.length; i++) {
               let sound = sounds[sk[i]];
               let soundIds = sound._getSoundIds();
               for (let j=0; j<soundIds.length; j++) {
                   let soundId = soundIds[j];
                   if (sound.playing(soundId)) {
                       sound.pause(soundId);
                       pausedSounds.push({
                           sound: sound,
                           soundId: soundId
                       });
                   }
               }
           }

           if (!capturer) {
               sounds['woosh'].play();
           }
           let cardTexture = null;
           if (player.netData && player.netData.cosmetics && player.netData.cosmetics && player.netData.cosmetics.skin && player.netData.cosmetics.skin.texture) {
               cardTexture = player.netData.cosmetics.skin.texture;
           }
           let playerName = player.netData.name;
           if (recordingData?.bestClip?.playerName) {
               playerName = recordingData.bestClip.playerName;
           }
           replayNameContainer = createPlayerCard(playerName, recordingData.bestClip.playerXP, cardTexture);
           let scale = 1.5 * (WIDTH/2560);
           if (scale > 1.5) {
               scale = 1.5;
           } else if (scale < 0.8) {
               scale = 0.8;
           }
           if (capturer && capturer.downloadType === 'mobile') {
               scale = 0.6;
           }
           if (player.name) {
               player.name.visible = false;
           }
           replayNameContainer.scale.set(scale);
           replayNameContainer.x = WIDTH+1000;
           replayNameContainer.y = HEIGHT*0.2;

           let maxZoom = 6;
           if (capturer) {
               maxZoom = 2;
           }
           let nameOffset = 0;
           let ticks = 0;
           let lastZoom = camera.zoom;
           recordingAnimationTick = () => {
               ticks++;
               if (game.watchingRecording) {
                   if (ticks === 180) {
                       if (!capturer) {
                           sounds['woosh_out'].play();
                       }
                   }

                   if (ticks < 180) {
                       if (camera.zoom < maxZoom) {
                           camera.zoom += 0.4;
                           replayNameContainer.x = Math.round(WIDTH * 0.3 + ((maxZoom - camera.zoom) * 1000));
                       }
                       if (camera.zoom >= maxZoom) {
                           camera.zoom = maxZoom;
                           replayNameContainer.x = Math.round(WIDTH * 0.3 + nameOffset);
                           nameOffset -= 0.25;
                       }
                   } else {
                       if (replayNameContainer) {
                           replayNameContainer.x = Math.round(WIDTH * 0.3 + nameOffset);
                           nameOffset -= 100;
                       }

                       if (camera.zoom > lastZoom) {
                           camera.zoom -= 0.3;
                       }

                       if (camera.zoom <= lastZoom) {
                           game.resetZoom();
                       }
                   }

                   camera.x = (player.x * camera.zoom) - WIDTH / 2;
                   camera.y = (player.y * camera.zoom) - HEIGHT / 2;
               }

               if (ticks === 200) {
                   if (game.watchingRecording && !game.isInMenu) {
                       for (let i = 0; i < pausedSounds.length; i++) {
                           let sound = pausedSounds[i];
                           sound.sound.play(sound.soundId);
                       }
                   }

                   resolve();

                   if (replayNameContainer) {
                       app.stage.removeChild(replayNameContainer);
                       replayNameContainer = null;
                   }
                   if (game.watchingRecording && !game.isInMenu) {
                       game.resetZoom();
                       camera.x = (player.x * camera.zoom) - WIDTH / 2;
                       camera.y = (player.y * camera.zoom) - HEIGHT / 2;
                   }
                   recordingAnimationTick = null;
               }
           };
       });
   }

   let curSnapshot;
   async function processNextSnapshot(next) {
       let snapshot = recordingData.snapshots[curSnapshot];

       if (playerAnimationFrame && curSnapshot === playerAnimationFrame) {
           pauseEffects = true;
           await waitForPlayerAnimation();
           pauseEffects = false;
       }

       if (recordingData?.bestClip?.followVictimAfterSnapshotCount && !playerAnimationFrame && curSnapshot === recordingData?.bestClip?.followVictimAfterSnapshotCount) {
           startFollowingRecordingVictim();
       }

       if (snapshot) {
           onSnapshot(snapshot.data, true);
           lastSnapshotTime = Date.now();

           if (curSnapshot >= 2) {
               if (recordingData.bestClip && (!player || !player.valid)) {
                   let found = false;
                   for (let i = 0; i < entities.length; i++) {
                       let entity = entities[i];
                       if ((recordingData.bestClip.clientId && recordingData.bestClip.clientId === entity?.netData?.clientId) || recordingData.bestClip.entityId === entity.serverId) {
                           player = entity;
                           player.canControl = false;
                           found = true;

                           camera.x = ((player.x * camera.zoom) - WIDTH / 2) - 50;
                           camera.y = (player.y * camera.zoom) - HEIGHT / 2;
                           break;
                       }
                   }

                   spectating = !found;

                   if (gameCover.visible && !capturer) {
                       game.gameCoverVisible(false);
                       addScreenshotToLatestRecording();
                   }
               }
           }

           if (gameCover.visible && curSnapshot >= 4 && !PIXI.Loader.shared.loading) {
               game.gameCoverVisible(false);
               if (capturer) {
                   setTimeout(() => {
                       if (capturer) {
                           capturer.start();
                       }
                   }, 1);
               } else {
                   addScreenshotToLatestRecording();
               }
           }

           if (next) {
               let nextTime = (next.time - snapshot.time);
               if (!next.type) {
                   if (Date.now() - timeScaleChangeTime >= snapshotRate*0.2) {
                       nextTime *= timeScale;
                   }
               } else {
                   nextTime *= timeScale;
               }

               if (nextTime <= 0) {
                   //TODO: This is a hacky fix and should be improved.
                   nextTime = 100 * timeScale;
               }

               if (nextTime <= 0) {
                   curSnapshot++;
                   processNextThing(snapshot);
                   return;
               } else {
                   currentRecordingTimeout = setTimeout(() => {
                       processNextThing(snapshot);
                   }, nextTime);
               }
           } else {
               stopWatchingRecording();
           }
       } else {
           stopWatchingRecording();
       }

       curSnapshot++;
   }

   let lastProgressUpdate = Date.now();
   function processNextThing(current) {
       if (recordingData) {
           let currentEvent = recordingData.events[curEvent];
           let currentSnapshot = recordingData.snapshots[curSnapshot];
           let nextEvent = recordingData.events[curEvent + 1];
           let nextSnapshot = recordingData.snapshots[curSnapshot + 1];

           let next;
           if (nextEvent && (!nextSnapshot || nextEvent.time < nextSnapshot.time)) {
               next = nextEvent;
           } else {
               next = nextSnapshot;
           }

           currentRecordingTime = current.time - recordingData.recordingStart;

           if (currentEvent && (!currentSnapshot || currentEvent.time < currentSnapshot.time)) {
               processNextEvent(next);
           } else {
               processNextSnapshot(next);
           }

           if (recordingData && recordingData.bestClip) {
               if (recordingData.bestClip.timeOfInterest && currentRecordingTime >= recordingData.bestClip.timeOfInterest + 550) {
                   changeTimeScale(1);
               } else if (recordingData.bestClip.timeOfInterest && currentRecordingTime >= recordingData.bestClip.timeOfInterest - 750) {
                   if (timeScale !== 6) {
                       changeTimeScale(6);
                       if (!game.isInMenu && sounds['slomo'] && !capturer) {
                           sounds['slomo'].play();
                       }
                   }
               }
           }

           if (recordingData && recordingData.snapshots) {
               let progress = Math.round((curSnapshot / recordingData.snapshots.length) * 100);
               if (capturer && game.recordingsComponent && Date.now()-lastProgressUpdate >= 1000) {
                   game.recordingsComponent.updateProgress(progress);
                   lastProgressUpdate = Date.now();
               }

               if (capturer && recordingData.snapshots.length - curSnapshot <= 6 && !recordingSplash.visible) {
                   recordingSplash.visible = true;
                   recordingSplash.alpha = 0;
               }

               if (progress >= 99) {
                   stopWatchingRecording();
               }
           }
       }
   }

   let updateRecordingScreenshot;
   function addScreenshotToLatestRecording() {
       if (updateRecordingScreenshot) {
           updateRecordingScreenshot = false;
           setTimeout(() => {
               try {
                   let base64 = game.getScreenAsBase64();

                   let recordings = window.localStorage.getItem('recordings');
                   if (!recordings) {
                       recordings = [];
                   } else {
                       try {
                           recordings = JSON.parse(recordings);
                       } catch (e) {
                           recordings = [];
                       }
                   }

                   if (recordings.length && recordings[recordings.length-1]) {
                       recordings[recordings.length-1].image = base64;
                   }

                   window.localStorage.setItem('recordings', JSON.stringify(recordings));
               } catch (e) {
                   console.error('Failed to add screenshot to recordings:', e);
               }
           }, 25);
       }
   }

   function getCurrentRecordingTime() {
       if (game.watchingRecording && recordingData) {
           return currentRecordingTime;
       }
       return 0;
   }

   let actualCurrentRecordingTime;
   let lastRecordingCheck;
   function calculateCurrentRecordingTime(currentTimeScale) {
       if (!lastRecordingCheck) {
           lastRecordingCheck = Date.now();
       }
       actualCurrentRecordingTime += (Date.now() - lastRecordingCheck)/currentTimeScale;
       lastRecordingCheck = Date.now();
       return actualCurrentRecordingTime;
   }

   let lastCapturer = null;
   let recordingFinishedCallback;
   let lastQualitySetting = null;
   let playerAnimationFrame = null;
   function startWatchingRecording(data, download, callback, showPlayerAnimation) {
       recordingFinishedCallback = callback;
       socketCallbacks = {};
       curEvent = 0;
       curSnapshot = 0;
       recordingData = data;
       lastRecordingCheck = null;
       lastTimeScale = 1;
       timeScale = 1;
       player = null;
       pauseEffects = false;
       if (game.deathMenuComponent) {
           game.deathMenuComponent.showModal(false, null);
       }
       actualCurrentRecordingTime = recordingData.start;
       recordingWatchingStart = Date.now();
       game.watchingRecording = true;
       emoteWheelContainer.visible = false;
       beforeRecordingStart = true;
       game.gameCoverVisible(true);
       if (game.roundEndComponent) {
           game.roundEndComponent.showModal(false);
       }
       game.resetZoom();

       if (!game.isInMenu) {
           let sk = Object.keys(sounds);
           for (let i = 0; i < sk.length; i++) {
               let sound = sounds[sk[i]];
               let soundIds = sound._getSoundIds();
               for (let j = 0; j < soundIds.length; j++) {
                   let soundId = soundIds[j];
                   if (sound.playing(soundId)) {
                       sound.stop(soundId);
                   }
               }
           }
       }

       playerAnimationFrame = null;
       if (showPlayerAnimation) {
           playerAnimationFrame = 10;
       }

       if (!oldRecordingSocket._callbacks) {
           oldRecordingSocket._callbacks = {};

           if (game.isSingleplayer) {
               oldRecordingSocket._callbacks = oldRecordingSocket.socketEvents;
           }
       }

       let callbackKeys = Object.keys(oldRecordingSocket._callbacks);
       for (let i=0; i<callbackKeys.length; i++) {
           let key = callbackKeys[i].replace('$', '');
           if (key !== 'stoprecording' && key !== 'chat' && key !== 'scoreboardData') {
               socketCallbacks[key] = oldRecordingSocket._callbacks[callbackKeys[i]];
               if (oldRecordingSocket && oldRecordingSocket.off) {
                   oldRecordingSocket.off(key);
               }
           }
       }

       socket = {
           connected: true,
           on: function(name, fn) {
           },
           emit: function(name, data) {
               if (name === 'scoreboard' || name === 'ping') {
                   oldRecordingSocket.emit(name, data);
               }
           },
           socketEvents: {},
           disconnect: oldRecordingSocket.disconnect
       };

       for (let i = 0; i < entities.length; i++) {
           let entity = entities[i];
           if (entity.type !== 'static_object') {
               entity.remove();
           }
       }

       for (let i = 0; i < effects.length; i++) {
           let effect = effects[i];
           effect.remove();
       }

       if (download) {
           createCapturer(download);
       }

       replayIcon.visible = !game.isInMenu && !capturer;
       replayIcon.bar1.visible = !game.isInMenu && !capturer;
       replayIcon.bar2.visible = !game.isInMenu && !capturer;

       setTimeout(() => {
           processNextThing(recordingData.events[0]);
       }, 1);
   }
   game.startWatchingRecording = startWatchingRecording;

   function stopWatchingRecording() {
       if (!game.watchingRecording) {
           return;
       }

       beforeRecordingStart = false;
       pauseEffects = false;

       if (!game.isInMenu) {
           let sk = Object.keys(sounds);
           for (let i = 0; i < sk.length; i++) {
               let sound = sounds[sk[i]];
               sound.stop();
           }
       }

       recordingAnimationTick = null;
       if (replayNameContainer) {
           app.stage.removeChild(replayNameContainer);
           replayNameContainer = null;
       }

       if (capturer) {
           capturer.stop();
           capturer.save();
           lastCapturer = capturer;
           capturer = null;

           game.settings.quality = lastQualitySetting;
           game.updateQuality();

           onWindowResize();
       }

       if (recordingSplash) {
           recordingSplash.visible = false;
       }

       for (let i = 0; i < entities.length; i++) {
           let entity = entities[i];
           if (entity.type !== 'static_object') {
               entity.remove();
           }
       }

       for (let i = 0; i < effects.length; i++) {
           let effect = effects[i];
           effect.remove();
       }

       camera.screenShake = 0;

       socket = oldRecordingSocket;
       let callbackKeys = Object.keys(socketCallbacks);
       for (let i=0; i<callbackKeys.length; i++) {
           let key = callbackKeys[i];
           let callbacks = socketCallbacks[key];
           for (let j=0; j<callbacks.length; j++) {
               socket.on(key, callbacks[j]);
           }
       }

       clearTimeout(currentRecordingTimeout);

       lastTimeScale = 1;
       timeScale = 1;
       game.resetZoom();
       if (replayIcon) {
           replayIcon.visible = false;
       }
       recordingData = null;
       spectating = false;
       game.watchingRecording = false;

       if (recordingFinishedCallback) {
           recordingFinishedCallback();
       }
   }

   function createCapturer(downloadType) {
       let canUseNormalWebm = false;
       let isChromium = window.chrome;
       let winNav = window.navigator;
       let vendorName = winNav.vendor;
       let isOpera = typeof window.opr !== "undefined";
       let isIEedge = winNav.userAgent.indexOf("Edg") > -1;
       let isIOSChrome = winNav.userAgent.match("CriOS");
       if(
           isChromium !== null &&
           typeof isChromium !== "undefined" &&
           vendorName === "Google Inc." &&
           isOpera === false &&
           isIEedge === false &&
           !isIOSChrome
       ) {
           canUseNormalWebm = true;
       }

       try {
           capturer = new CCapture({
               verbose: false,
               display: false,
               framerate: 60,
               motionBlurFrames: 0,
               quality: 50,
               format: canUseNormalWebm ? 'webm' : 'webm-mediarecorder',
               timeLimit: 0,
               frameLimit: 0,
               autoSaveTime: 0,
           });
           capturer.downloadType = downloadType;
           onWindowResize();
           game.resetZoom();

           lastQualitySetting = game.settings.quality;
           game.settings.quality = 'high';
           game.updateQuality();
       } catch (e) {
           console.error('Failed to create capturer:', e);
       }
   }

   function onSocketConnected() {
       game.doSpawn = function(event, type) {
           event.preventDefault();
           if (socket) {
               socket.emit('spawn', {
                   type: type
               });
           }
       }; // just function to emit 'spawn'

       oldRecordingSocket = socket;
       socket.on('chat', function(data) {
           if (game.settings.disableChat) {
               return;
           }

           if (data.id) {
               for (let i=0; i<entities.length; i++) {
                   let entity = entities[i];
                   if (data.id === entity.serverId) {
                       if (entity.chat) {
                           entity.chat.text = data.message;
                           entity.chat.visible = true;
                           entity.chat.removeChat = Date.now() + 5000;
                       }
                       break;
                   }
               }
           } else {
               if (game.lobbyChat && game.lobbyChat.component) {
                   game.lobbyChat.component.addChatMessage(data);
               }
           }
       }); // this is how we see chat

       socket.on('killstreaks', (data) => {
           updateKillstreaks(data);
       });

       socket.on('killfeed', function(data) {
           if (data.attacker && data.attacker.name && data.victim && data.victim.name) {
               let currentPlayerTeam = null;
               let currentPlayerId = null;
               if (lastControllablePlayer && lastControllablePlayer.team !== null && lastControllablePlayer.team !== undefined) {
                   currentPlayerTeam = lastControllablePlayer.team;
               }
               if (game.lobbyComponent) {
                   let playerData = game.lobbyComponent.getCurrentPlayerData();
                   if (playerData) {
                       currentPlayerId = playerData.clientId;
                   }
               }

               let kfLine = new PIXI.Container();
               kfLine.alpha = 1;
               kfLine.created = Date.now();
               let kfTextAttacker = new PIXI.Text(data.attacker.name, {
                   fontSize: 22,
                   fill: 0xFFFFFF,
                   align: 'left',
                   wordWrap: true,
                   wordWrapWidth: 800,
                   fontFamily: fontFamily
               });
               if (data.attacker.id === currentPlayerId) {
                   kfTextAttacker.style.fill = 0xDB982C;
               } else if (data.attacker.team === currentPlayerTeam) {
                   kfTextAttacker.style.fill = COLOR_FRIENDLY_BRIGHT;
               } else {
                   kfTextAttacker.style.fill = COLOR_ENEMY_BRIGHT;
               }
               kfLine.addChild(kfTextAttacker);

               let kfIcon = new PIXI.Sprite(resources['killfeed'].texture);
               kfIcon.x = kfTextAttacker.width + 5;
               kfLine.addChild(kfIcon);

               let kfTextVictim = new PIXI.Text(data.victim.name, {
                   fontSize: 22,
                   fill: 0xFFFFFF,
                   align: 'left',
                   wordWrap: true,
                   wordWrapWidth: 800,
                   fontFamily: fontFamily
               });
               kfTextVictim.x = kfIcon.x + kfIcon.width;
               if (data.victim.id === currentPlayerId) {
                   kfTextVictim.style.fill = 0xDB982C;
               } else if (data.victim.team === currentPlayerTeam) {
                   kfTextVictim.style.fill = COLOR_FRIENDLY_BRIGHT;
               } else {
                   kfTextVictim.style.fill = COLOR_ENEMY_BRIGHT;
               }
               kfLine.addChild(kfTextVictim);

               killfeedContainer.addChild(kfLine);

               if (killfeedContainer.children.length > 10) {
                   killfeedContainer.children.shift();
               }

               game.updateKillfeedContainer();
           }
       });

       socket.on('emotes', function(data) {
           updateEmotes(data);
       });

       socket.on('worldData', loadWorldData);

       socket.on('updateAmbientSound', (data) => {
           updateAmbientSound(data.sound);
       });

       socket.on('tutorialComplete', function(mode) {
           game.disconnected = true;
           game.stopGame();
           setTimeout(() => {
               game.disconnected = false;
               if (!mode) {
                   mode = 'conquest';
               }
               game.playComponent.startMatchmaking(mode, true);
           }, 10);
       });

       socket.on('tutorialData', function(data) {
           if (data) {
               tutorialContainer.tutorialData = data;
               tutorialContainer.text.text = data.text;
               sounds['beep'].volume(0.08);
               sounds['beep'].play();
           } else {
               tutorialContainer.tutorialData = null;
           }
       });

       socket.on('roundEnd', function (data) {
           if (game.deathMenuComponent) {
               game.deathMenuComponent.showModal(false, null);
           }
           game.roundEndComponent.showRoundEnd(data);
           for (let i=killfeedContainer.children.length-1; i>=0; i--) {
               killfeedContainer.removeChild(killfeedContainer.children[i]);
           }
       });

       socket.on('userUnlocks', function (data) {
           game.roundEndComponent.showUserUnlocks(data);
       });

       socket.on('showMenu', function (data) {
           if (gameCover) {
               game.gameCoverVisible(false);
           }

           if (data && data.menu === 'lobby') {
               roundStartTimer = data.startTimer;
               if (game.lobbyComponent) {
                   game.lobbyComponent.showModal(true, 'lobby');
                   game.lobbyComponent.updateData(data);
               }

               if (effects.length) {
                   for (let i=0; i<effects.length; i++) {
                       let effect = effects[i];
                       effect.remove();
                   }
                   effects = [];
               }

               if (game.roundEndComponent) {
                   game.roundEndComponent.showModal(false);
               }
               if (game.deathMenuComponent) {
                   game.deathMenuComponent.showModal(false, null);
               }
           } else if (data && data.menu === 'roundEnd') {
               if (game.roundEndComponent) {
                   game.roundEndComponent.showModal(true);
                   let lastKills = 0;
                   for (let i=0; i<entities.length; i++) {
                       let entity = entities[i];
                       if (entity.netData && entity.netData.lastRoundEndData && entity.netData.lastRoundEndData.kills >= lastKills) {
                           player = entity;
                           player.canControl = false;
                           lastKills = entity.netData.lastRoundEndData.kills;
                       }
                   }
               }
           } else {
               if (game.lobbyComponent) {
                   game.lobbyComponent.showModal(false);
               }

               if (game.roundEndComponent) {
                   game.roundEndComponent.showModal(false);
               }
           }

           idleTime = Date.now();
           currentMenu = data && data.menu ? data.menu : data;

           game.tryGameFocus();
       });

       socket.on('playEffect', function(data) {
           if (data && data.sound && sounds[data.sound]) {
               soundPlay(sounds[data.sound], null, 0.75);
           }
       });

       socket.on('setAnnouncement', function(data) {
           if (game.watchingRecording) {
               return;
           }

           let color = null;
           if (data.didWin !== undefined) {
               color = data.didWin ? COLOR_FRIENDLY : COLOR_ENEMY;
           }
           switch (data.title) {
               case 'point_captured':
                   if (lastControllablePlayer != null && data.team === lastControllablePlayer.team) {
                       data.title = 'We have captured ' + data.name +'!';
                       color = COLOR_FRIENDLY;
                   } else {
                       data.title = 'The enemy has captured ' + data.name + '!';
                       color = COLOR_ENEMY;
                   }
                   break;
               case 'flag_taken':
                   if (lastControllablePlayer != null && data.team === lastControllablePlayer.team) {
                       data.title = data.playerName + ' has taken the enemy flag!';
                       color = COLOR_FRIENDLY;
                   } else {
                       data.title = data.playerName + ' has taken our flag!';
                       color = COLOR_ENEMY;
                   }
                   break;
               case 'flag_captured':
                   if (lastControllablePlayer != null && data.team === lastControllablePlayer.team) {
                       data.title = data.playerName + ' has captured the enemy flag!';
                       color = COLOR_FRIENDLY;
                   } else {
                       data.title = data.playerName + ' has captured our flag!';
                       color = COLOR_ENEMY;
                   }
                   break;
               case 'flag_dropped':
                   if (lastControllablePlayer != null && data.team === lastControllablePlayer.team) {
                       data.title = 'The enemy has dropped our flag!';
                       color = COLOR_FRIENDLY;
                   } else {
                       data.title = 'We have dropped the enemy flag!';
                       color = COLOR_ENEMY;
                   }
                   break;
               case 'flag_returned':
                   if (lastControllablePlayer != null && data.team === lastControllablePlayer.team) {
                       data.title = data.playerName + ' has returned our flag!';
                       color = COLOR_FRIENDLY;
                   } else {
                       data.title = data.playerName + ' has returned the enemy flag!';
                       color = COLOR_ENEMY;
                   }
                   break;
           }
           showAnnouncement(data.title, data.text, data.time, color);
           if (data.sound && sounds[data.sound]) {
               sounds[data.sound].play();
           }
           if (data.chat) {
               addChatMessage({
                   message: data.title
               });
           }
       });

       socket.on('environmentUpdate', function(data) {
           windAngle = data.windAngle;
           windStrength = data.windStrength;
       });

       socket.on('createEntity', function(data) {
           let entity = null;
           if (data.type === 'static_object') {
               entity = createStaticObject(data.id, data.subtype, data.x, data.y, data.z, data.width, data.height, data.team, data.netData);
           } else if (data.type === 'object') {
               entity = createObject(data.id, data.subtype, data.x, data.y, data.z, data.width, data.height, data.team, data.netData);
           } else if (data.type === 'vehicle') {
               entity = createVehicle(data.id, data.subtype, data.x, data.y, data.z, data.width, data.height, data.team, data.netData);
           } else if (data.type === 'actor') {
               entity = createActor(data.id, data.subtype, data.x, data.y, data.z, data.width, data.height, data.team, data.netData);
           } else {
               console.error('Invalid entity type.');
           }

           if (entity) {
               if (!game.watchingRecording && entityDictionary[entity.serverId]) {
                   console.error('Entity already exists:', entity.serverId);
                   entityDictionary[entity.serverId].remove();
                   delete entityDictionary[entity.serverId];
               }
               entityDictionary[entity.serverId] = entity;
               entity.rotation = data.rotation;

               entity.addState({
                   time: Date.now() - serverTimeDiff,
                   serverTimeDiff: serverTimeDiff,
                   x: entity.x,
                   y: entity.y,
                   z: entity.z,
                   rotation: entity.rotation,
                   turretRotation: entity.rotation - (Math.PI/2)
               });

               entity.qualityChanged();
           }
       });

       socket.on('roundState', function (data) {
           roundState = data;

           if (!roundState || roundState.type !== 'roundEnded') {
               for (let i = 0; i < effects.length; i++) {
                   let effect = effects[i];
                   effect.remove();
               }
           }
       });

       function handleRPC(data) {
           if (entityDictionary[data.id]) {
               let entity = entityDictionary[data.id];
               if (entity[data.name]) {
                   entity[data.name](data.data);
               }
           } else {
               for (let i = 0; i < entities.length; i++) {
                   let entity = entities[i];
                   if (data.id === entity.serverId) {
                       if (entity[data.name]) {
                           entity[data.name](data.data);
                       } else {
                           console.error('Invalid RPC for entity:', data.name, entity.type);
                       }
                       break;
                   }
               }
           }
       }

       socket.on('entityrpc', function(data) {
           if (game.watchingRecording) {
               setTimeout(() => {
                   handleRPC(data);
               }, 1);
           } else {
               handleRPC(data);
           }
       });

       socket.on('removeEntity', function(id) {
           if (id && Array.isArray(id)) {
               for (let i=0; i<id.length; i++) {
                   let entityId = id[i];
                   if (entityDictionary[entityId]) {
                       entityDictionary[entityId].remove();
                       delete entityDictionary[entityId];
                   }
               }
           } else {
               if (entityDictionary[id]) {
                   entityDictionary[id].remove();
                   delete entityDictionary[id];
               } else {
                   for (let i=0; i<entities.length; i++) {
                       let entity = entities[i];
                       if (id === entity.serverId) {
                           entity.remove();
                       }
                   }
               }
           }
       });

       socket.on('setPlayer', function(data) {
           lastSpectatedIndex = -1;

           if (data.spectator) {
               spectating = true;
               player = null;
               if (!camera.x) {
                   camera.x = MAP_WIDTH / 2;
               }
               if (!camera.y) {
                   camera.y = MAP_HEIGHT / 2;
               }
               if (!camera.z) {
                   camera.z = 0;
               }
           } else {
               spectating = false;
               setPlayerData = data;
           }

           if (game.deathMenuComponent) {
               game.deathMenuComponent.showModal(false, null);
           }
       });

       socket.on('xpGain', function(data) {
           if (!game.settings.disableXPMessages) {
               let zoomRatio = WIDTH/(WIDTH*camera.zoom);
               let pos = {
                   x: (camera.x + WIDTH/2) * zoomRatio,
                   y: (camera.y + HEIGHT/2) * zoomRatio,
                   z: camera.z
               };
               if (player && player.valid && player.canControl) {
                   pos = {
                       x: player.x,
                       y: player.y - 50,
                       z: player.z
                   };
               }

               createEffect('xp_gain', pos.x, pos.y, pos.z, 128, 128, data);
           }
           if (data.sound) {
               sounds[data.sound].play();
           }
       }); // just visual

       socket.on('scoreboardData', function(data) {
           scoreboardData = data;
           updateScoreboard();

           updateRoundIndicators();
       });

       function ab2str(buf) {
           return String.fromCharCode.apply(null, new Uint16Array(buf));
       }

       socket.on('recording', function(data) {
           data.date = new Date();
           updateRecordingScreenshot = true;
           startWatchingRecording(data, null, null, true);

           try {
               if (window.localStorage) {
                   let recordings = window.localStorage.getItem('recordings');
                   if (!recordings) {
                       recordings = [];
                   } else {
                       try {
                           recordings = JSON.parse(recordings);
                       } catch (e) {
                           recordings = [];
                       }
                   }

                   let newSnapshots = [];
                   for (let i=0; i<data.snapshots.length; i++) {
                       let snapshot = data.snapshots[i];
                       let newSnapshot = JSON.parse(JSON.stringify(snapshot));
                       newSnapshot.data = ab2str(snapshot.data);
                       newSnapshots.push(newSnapshot);
                   }

                   let newRecording = JSON.parse(JSON.stringify(data));
                   newRecording.snapshots = newSnapshots;
                   recordings.push(newRecording);

                   let recordingsLimit = 10;
                   if (recordings.length > recordingsLimit) {
                       let amountToRemove = recordings.length-recordingsLimit;
                       for (let i=0; i<amountToRemove; i++) {
                           recordings.shift();
                       }
                   }

                   window.localStorage.setItem('recordings', JSON.stringify(recordings));
               }
           } catch (e) {
               console.error('Failed to save recordings:', e);
           }
       });

       socket.on('stoprecording', function() {
           stopWatchingRecording();
       });
   }

   game.gameCoverVisible = function(val) {
       if (gameCover) {
           gameCover.visible = val;
           if (!gameCover.visible && !game.isInMenu) {
               $('#loading-overlay').hide();
           }
       }
   };

   game.updateKillfeedContainer = function() {
       if (killfeedContainer) {
           let kfy = 0;
           for (let i=0; i<killfeedContainer.children.length; i++) {
               let child = killfeedContainer.children[i];
               child.y = kfy;
               kfy += 32 * child.alpha;
               if (Date.now()-child.created >= 12000) {
                   child.alpha -= 0.02;
                   if (child.alpha <= 0) {
                       killfeedContainer.removeChild(child);
                       i--;
                   }
               }
           }
       }
   };

   let currentAmbientMapSound = null;
   function updateAmbientSound(newSound) {
       if (currentAmbientMapSound) {
           soundStop(currentAmbientMapSound);
           currentAmbientMapSound = null;
       }

       if (currentWorldData) {
           currentWorldData.ambientSound = newSound;
       }

       if (newSound && sounds[newSound]) {
           currentAmbientMapSound = soundPlay(sounds[newSound], null, 0.65, true);
           currentAmbientMapSound.sound.seek(Math.random()*0.5, currentAmbientMapSound.id);
       }
   }

   let currentWorldData = null;
   function loadWorldData(data, attempts) {
       if (!attempts) {
           attempts = 1;
       }
       MAP_WIDTH = data.MAP_WIDTH;
       MAP_HEIGHT = data.MAP_HEIGHT;
       currentWorldData = data;

       if (data.clientId) {
           if (game.lobbyComponent) {
               game.lobbyComponent.setCurrentPlayerId(data.clientId);
           }
       }

       camera.x = (MAP_WIDTH/2) * camera.zoom - WIDTH/2;
       camera.y = (MAP_HEIGHT/2) * camera.zoom - HEIGHT/2;

       if (PIXI.Loader.shared.loading) {
           if (attempts >= 6) {
               console.error('Loader already running and attempts exceeded!');
               return;
           }

           //Loader is already running, try again after loading is done.
           PIXI.Loader.shared.onComplete.once(() => {
               loadWorldData(data, attempts+1);
           });
           return;
       }

       if (data.background && !resources[data.background]) {
           PIXI.Loader.shared.add(data.background);
       } else {
           if (background) {
               app.cstage.removeChild(background);
           }
           background = null;
       }

       app.renderer.backgroundColor = 0x000000;
       camera.unconstrainCamera = !!data.properties.unconstrainCamera;

       if (data.tilesets) {
           for (let j=0; j<data.tilesets.length; j++) {
               let tileset = data.tilesets[j];
               if (tileset.tile) {
                   for (let i = 0; i < tileset.tile.length; i++) {
                       let tile = tileset.tile[i];
                       if (tile.image) {
                           let asset = MAP_FOLDER + data.mapName + '/' + tile.image[0].source;
                           if (!resources[asset]) {
                               PIXI.Loader.shared.add(asset);
                           }
                       }
                   }
               } else if (tileset.image) {
                   for (let i = 0; i < tileset.image.length; i++) {
                       let image = tileset.image[i];
                       let asset = MAP_FOLDER + data.mapName + '/' + image.source;

                       if (!resources[asset]) {
                           PIXI.Loader.shared.add(asset);
                       }
                   }
               }
           }
       }

       if (isDesktopApp && game.isPlayScreen && !game.isInMenu) {
           if (data.mapName) {
               let mapName = data.mapName.toUpperCase();
               if (mapName.indexOf('_') !== -1) {
                   mapName = mapName.substr(0, data.mapName.indexOf('_'));
               }
               window.electronAPI.steamSetRichPresence('mapname', mapName);
           } else {
               window.electronAPI.steamSetRichPresence('mapname', 'Unknown');
           }

           if (data.gamemodeTitle) {
               window.electronAPI.steamSetRichPresence('gamemodename', data.gamemodeTitle);
           } else {
               window.electronAPI.steamSetRichPresence('gamemodename', 'Unknown');
           }
       }

       if (data && data.properties) {
           ambientLight.brightness = 1.4;
           ambientLight.color = 0xc4b4a8;

           if (data.properties.brightness !== null && data.properties.brightness !== undefined) {
               ambientLight.brightness = data.properties.brightness;
           }

           if (data.properties.lightColor !== null && data.properties.lightColor !== undefined) {
               ambientLight.color = parseInt(data.properties.lightColor.replace('#', '0x'));
           }
       }

       if (background) {
           app.cstage.removeChild(background);
       }

       if (!data.background) {
           data.background = 'background';
       }

       if (data.backgroundRepeat) {
           background = new PIXI.TilingSprite(resources[data.background].texture);
       } else {
           background = new PIXI.Sprite(resources[data.background].texture);
       }
       background.getZIndex = function () {
           return 100000;
       };
       background.width = MAP_WIDTH;
       background.height = MAP_HEIGHT;
       background.anchor.x = 0;
       background.anchor.y = 0;
       background.position.x = 0;
       background.position.y = 0;
       app.cstage.addChild(background);

       if (background) {
           if (data.properties.backgroundColor) {
               background.texture = resources.white.texture;
               background.tint = parseInt('0x' + data.properties.backgroundColor.replace('#', ''));
               let size = 10000;
               background.position.x = -size;
               background.position.y = -size;
               background.width = size * 2;
               background.height = size * 2;
           }

           background.parentGroup = PIXI.lights.diffuseGroup;
           let backgroundNormal = new PIXI.Sprite(resources.normal.texture);
           backgroundNormal.getZIndex = function () {
               return 100000;
           };
           backgroundNormal.width = background.width;
           backgroundNormal.height = background.height;
           backgroundNormal.parentGroup = PIXI.lights.normalGroup;
           background.backgroundNormal = backgroundNormal;
           background.addChild(backgroundNormal);

           background.backgroundNormal.visible = (game.settings.quality === 'auto' || game.settings.quality === 'high');
       }

       PIXI.Loader.shared.onComplete.once((loader, newResources) => {
           resources = newResources;
           console.info('Map assets loading completed.');

           for (let i=0; i<entities.length; i++) {
               let entity = entities[i];
               if ((entity.type === 'static_object' || (entity.type === 'object' && entity.subtype === 'dynamic_object')) && entity.netData && entity.netData.asset && entity.netData.asset.texture && resources[entity.netData.asset.texture]) {
                   entity.onAssetsLoaded();
               }
           }

           updateAmbientSound(data.ambientSound);

           if (!game.ready) {
               game.ready = true;
               setTimeout(() => {
                   game.onGameReady();
               }, 1000);
           }
       });
   }

   window.addEventListener('gamepadconnected', function(e) {
       console.info('Gamepad connected at index %d: %s. %d buttons, %d axes.',
           e.gamepad.index, e.gamepad.id,
           e.gamepad.buttons.length, e.gamepad.axes.length);
   });

   let usingGamepad = false;
   let gamepadAimAngle = null;
   let gamepadAimSize = null;

   function buttonPressed(b) {
       if (typeof(b) == "object") {
           return b.pressed;
       }
       return b == 1.0;
   }

   let movementAxisX = 0;
   let movementAxisY = 0;
   let joystickTargetAngle = 0;
   function handleGamepadInput() {
       if (joystickManager) {
           let newKeys = {};

           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Forward']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Reverse']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Turn Left']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Turn Right']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Handbrake']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Boost']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Repair']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 1']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 2']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 3']] = false;

           movementAxisX = 0;
           movementAxisY = 0;
           if (joystick1Data) {
               let leftAxisX = -joystick1Data.vector.x;
               let leftAxisY = joystick1Data.vector.y;
               if (Math.abs(leftAxisX) > 0.1) {
                   movementAxisX = leftAxisX;
               }
               if (Math.abs(leftAxisY) > 0.1) {
                   movementAxisY = leftAxisY;
               }
           }

           if (joystick2Data) {
               if (Math.abs(joystick2Data.vector.x) > 0.1) {
                   joystickTargetAngle += joystick2Data.vector.x * 0.02;
               }
               touchOffset = {
                   x: Math.cos(joystickTargetAngle) * 100,
                   y: Math.sin(joystickTargetAngle) * 100,
               }
               /*
               if (Math.abs(joystick2Data.vector.x) > 0.2) {
                   touchOffset.x += -joystick2Data.vector.x * 2;
               }
               if (Math.abs(joystick2Data.vector.y) > 0.2) {
                   touchOffset.y += joystick2Data.vector.y * 2;
               }
               */
               /*
               let bufferScale = 1.4;
               if (touchOffset.x < -WIDTH*bufferScale) {
                   touchOffset.x = -WIDTH*bufferScale;
               }
               if (touchOffset.x > WIDTH*bufferScale) {
                   touchOffset.x = WIDTH*bufferScale;
               }
               if (touchOffset.y < -HEIGHT*bufferScale) {
                   touchOffset.y = -HEIGHT*bufferScale;
               }
               if (touchOffset.y > HEIGHT*bufferScale) {
                   touchOffset.y = HEIGHT*bufferScale;
               }
               */
               if (player) {
                   touchEvent = {
                       x: WIDTH/2 - touchOffset.x,
                       y: HEIGHT/2 - touchOffset.y
                   };
               }
           }

           /*
           if (joystick2Data) {
               let rightAxisX = joystick2Data.vector.x;
               let rightAxisY = -joystick2Data.vector.y;
               let rightAxisSize = Math.abs(rightAxisY) + Math.abs(rightAxisX);
               if (rightAxisSize >= 0.75) {
                   gamepadAimAngle = Math.atan2(rightAxisY, rightAxisX);
                   gamepadAimSize = rightAxisSize;
                   if (gamepadAimSize > 1) {
                       gamepadAimSize = 1;
                   }
               } else {
                   gamepadAimAngle = null;
                   gamepadAimSize = null;
               }
           }
           */

           let nk = Object.keys(newKeys);
           for (let i = 0; i < nk.length; i++) {
               let key = nk[i];
               let value = newKeys[key];

               if (activatedInputs[key] !== value && socket) {
                   activatedInputs[key] = value;
                   if (activatedInputs[key]) {
                       socket.emit('keydown', key);
                   } else {
                       socket.emit('keyup', key);
                   }
               }
           }
       } else if (game.settings.enableControllerSupport) {
           let gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads : []);
           if (!gamepads || !socket || !gamepads[0]) {
               return;
           }

           let newKeys = {};

           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Forward']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Reverse']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Turn Left']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Turn Right']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Handbrake']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Boost']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Repair']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 1']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 2']] = false;
           newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 3']] = false;

           let gp = gamepads[0];
           if (gp) {
               let leftAxisX = gp.axes[0];
               let leftAxisY = gp.axes[1];
               if (leftAxisY <= -0.3) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Forward']] = true;
               } else if (leftAxisY >= 0.3) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Reverse']] = true;
               }

               if (leftAxisX <= -0.3) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Turn Left']] = true;
               } else if (leftAxisX >= 0.3) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Turn Right']] = true;
               }

               let rightAxisX = gp.axes[2];
               let rightAxisY = gp.axes[3];
               let rightAxisSize = Math.abs(rightAxisY) + Math.abs(rightAxisX);
               if (rightAxisSize >= 0.75) {
                   gamepadAimAngle = Math.atan2(rightAxisY, rightAxisX);
                   gamepadAimSize = rightAxisSize;
                   if (gamepadAimSize > 1) {
                       gamepadAimSize = 1;
                   }
               } else {
                   gamepadAimAngle = null;
                   gamepadAimSize = null;
               }

               if (buttonPressed(gp.buttons[7])) {
                   if (player && player.canControl && socket) {
                       emoteWheelContainer.visible = false;
                       socket.emit('fire', true);
                   }
               }

               if (buttonPressed(gp.buttons[0])) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Handbrake']] = true;
               }

               if (buttonPressed(gp.buttons[3])) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Repair']] = true;
               }

               if (buttonPressed(gp.buttons[6])) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Boost']] = true;
               }

               if (buttonPressed(gp.buttons[14])) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 1']] = true;
               }

               if (buttonPressed(gp.buttons[12])) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 2']] = true;
               }

               if (buttonPressed(gp.buttons[15])) {
                   newKeys[window.gameServer.sharedConstants.INPUT_MAP['Killstreak 3']] = true;
               }
           }

           let nk = Object.keys(newKeys);
           for (let i = 0; i < nk.length; i++) {
               let key = nk[i];
               let value = newKeys[key];

               if (activatedInputs[key] !== value && socket) {
                   activatedInputs[key] = value;
                   if (activatedInputs[key]) {
                       usingGamepad = true;
                       socket.emit('keydown', key);
                   } else {
                       socket.emit('keyup', key);
                   }
               }
           }
       }
   }

   let keyboardEventListenerObject = game.app.view;
   app.view.tabIndex = 0;

   let activatedInputs = {};
   let moveTimer = 0;
   keyboardEventListenerObject.addEventListener('keydown', function (event) {
       let doPrevent = false;
       event = event || window.event;
       let key = event.keyCode;

       moveTimer = 0;

       idleTime = Date.now();

       let inputValue = null;
       if (game.inputMapCache && game.inputMapCache[key]) {
           inputValue = window.gameServer.sharedConstants.INPUT_MAP[game.inputMapCache[key]];
       }

       if (currentMenu === 'lobby' && inputValue !== window.gameServer.sharedConstants.INPUT_MAP['Show Scoreboard'] && key !== 27) {
           return true;
       }

       if (key === 113) {
           ENABLE_DEBUG = !ENABLE_DEBUG;
           if (debugText) {
               debugText.visible = ENABLE_DEBUG;
           }
       } else if (key === 9) {
           doPrevent = true;
       } else if (key === 27) {
           doPrevent = true;
           if (game.isInMenu) {
               game.appComponent.changeState('state-settings');
           } else {
               game.toggleScoreboard();
           }
       }

       if (socket && player && player.canControl) {
           if (tutorialContainer && tutorialContainer.tutorialData && tutorialContainer.tutorialData.pause && key === 32) {
               continueTutorial();
           }
       }

       if (inputValue && !activatedInputs[inputValue]) {
           activatedInputs[inputValue] = true;
           handleInput(event, inputValue, true);
       }

       if (doPrevent) {
           event.preventDefault();
           return false;
       }
   });

   keyboardEventListenerObject.addEventListener('keyup', function (event) {
       let doPrevent = false;
       event = event || window.event;
       let key = event.keyCode;

       let inputValue = null;
       if (game.inputMapCache && game.inputMapCache[key]) {
           inputValue = window.gameServer.sharedConstants.INPUT_MAP[game.inputMapCache[key]];
       }

       if (key === 9) {
           doPrevent = true;
       }

       if (inputValue && activatedInputs[inputValue]) {
           activatedInputs[inputValue] = false;
           handleInput(event, inputValue, false);
       }

       if (key === 13) {
           if (game.lobbyChat && game.lobbyChat.component) {
               game.lobbyChat.component.open();
           }
       }

       if (doPrevent) {
           event.preventDefault();
           return false;
       }
   });

   keyboardEventListenerObject.addEventListener('focusout', () => {
       let activatedInputList = Object.keys(activatedInputs);
       for (let i=0; i<activatedInputList.length; i++) {
           let input = parseInt(activatedInputList[i]);
           if (activatedInputList[input] && socket) {
               socket.emit('keyup', input);
               activatedInputList[input] = false;
           }
       }
   });

   const DEFAULT_SOUND_MAX_DISTANCE = 1200;
   function soundPlay(sound, entity, volume, fadein, maxDistance) {
       if (beforeRecordingStart || game.isInMenu || DISABLE_SOUNDS || game.roundEnded || capturer) {
           return;
       }

       if (!maxDistance) {
           maxDistance = DEFAULT_SOUND_MAX_DISTANCE;
       }

       let tso = {
           id: -1,
           maxDistance: maxDistance,
           entity: entity,
           volume: volume,
       };

       let ttso = soundUpdate(tso);
       if (ttso != null) {
           let so = {
               id: sound.play(),
               maxDistance: maxDistance,
               sound: sound,
               volume: volume,
               entity: entity,
               started: Date.now()
           };

           if (fadein) {
               so.fadein = 600;
           }

           so = soundUpdate(so);
           return so;
       }

       return null;
   }

   function getListenerPos() {
       if (player && player.valid) {
           return {
               x: player.x,
               y: player.y,
               z: player.z
           };
       } else {
           return {
               x: camera.x + WIDTH / 2,
               y: camera.y + HEIGHT / 2,
               z: camera.z
           };
       }
   }

   function soundUpdate(so) {
       if (so.stopped) {
           return;
       }

       let maxDistance = so.maxDistance;
       if (!maxDistance) {
           maxDistance = DEFAULT_SOUND_MAX_DISTANCE;
       }

       let listener_pos = getListenerPos();
       let dist = 0;
       if (so.entity) {
           dist = Math.distanceBetween({
               x: so.entity.x,
               y: so.entity.y
           }, listener_pos);
       }
       if (dist >= maxDistance || (so.entity && so.entity.z !== undefined && so.entity.z !== listener_pos.z)) {
           soundStop(so);
           return null;
       }

       let final_vol = 0;
       let ignorePos = false;
       if (dist <= 150) {
           final_vol = so.volume;
           ignorePos = true;
       } else {
           let percent = (1 - (dist / maxDistance));
           let vol = so.volume * percent;

           if (percent <= 0.05) {
               soundStop(so);
               return null;
           }
           final_vol = vol;
       }

       if (so.fadein) {
           let tdiff = (Date.now() - so.started) / so.fadein;
           if (tdiff <= 0.05) {
               final_vol = 0;
           } else if (tdiff < 1) {
               final_vol *= tdiff;
           }
       }

       if (so.id !== -1) {
           so.sound.rate((so.defaultRate ? so.defaultRate : 1) * (1/timeScale), so.id);
           so.sound.volume(final_vol, so.id);
           if (!ignorePos && so.entity && so.entity.x && so.entity.y) {
               try {
                   so.sound.pos((so.entity.x * camera.zoom) / 100000, 0, (so.entity.y * camera.zoom) / 100000, so.id);
               } catch (e) {
                   console.error('Sound error 1:', e);
               }
           }
       }

       return so;
   }

   function soundStop(so) {
       if (so.sound && !so.stopped) {
           so.sound.stop(so.id);
           so.stopped = true;
       }
   }

   let lastmx = 0;
   let lastmy = 0;
   let mdx = 0;
   let mdy = 0;
   let currentMouseButton = 0;
   let pointerCount = 0;
   let downPosition = null;
   let eventPrefix = 'mouse';
   let tutorialTapCount = 0;
   if (isMobile) {
       eventPrefix = 'pointer';
   }

   function continueTutorial() {
       if (tutorialContainer && tutorialContainer.tutorialData && tutorialContainer.tutorialData.pause && socket) {
           socket.emit('tutorialContinue');
       }
   }

   let didAction;
   // important:section1
   function handleInput(event, inputValue, active) {
       if (!inputValue) {
           return;
       }
       if (didAction) {
           didAction = false;
           return;
       }

       if (inputValue === window.gameServer.sharedConstants.INPUT_MAP['Show Emotes'] && active) {
           toggleEmoteWheel();
       } else if (inputValue === window.gameServer.sharedConstants.INPUT_MAP['Show Scoreboard']) {
           event.preventDefault();
           if (active) {
               showScoreboard();
           } else {
               hideScoreboard();
           }
       } else if (inputValue === window.gameServer.sharedConstants.INPUT_MAP['Show Emotes'] && active) {
           toggleEmoteWheel();
       } else if (socket != null && active && socket.connected && app.renderer.plugins.interaction.eventData.data) {
           if (inputValue === window.gameServer.sharedConstants.INPUT_MAP['Fire']) {
               if (spawnText && spawnText.visible) {
                   switchSpectatingPlayer();
               } else {
                   moveTimer = 10;
                   if (!isMobile && player && player.canControl && socket) {
                       if (!emoteWheelContainer.visible) {
                           socket.emit('fire', true);
                       }
                       emoteWheelContainer.visible = false;
                   }
               }
           } else if (inputValue === window.gameServer.sharedConstants.INPUT_MAP['Ping Location']) {
               event.preventDefault();
               if (socket && player && player.canControl) {
                   socket.emit('pingLocation', {
                       x: gmx,
                       y: gmy
                   });
               }
           }
       }

       if (socket && socket.connected && player && player.canControl) {
           if (active) {
               socket.emit('keydown', inputValue);
           } else {
               socket.emit('keyup', inputValue);
           }
       }
   }

   let mouseEventListenerObject = game.app.view;
   mouseEventListenerObject.addEventListener(eventPrefix + 'down', function (e) {
       mx = e.clientX;
       my = e.clientY;

       if (tutorialContainer && tutorialContainer.tutorialData && tutorialContainer.tutorialData.pause) {
           tutorialTapCount++;
           if (tutorialTapCount >= 2) {
               tutorialTapCount = 0;
               continueTutorial();
           }
           return;
       } else {
           tutorialTapCount = 0;
       }

       pointerCount++;
       if (isMobile) {
           if (pointerCount === 1) {
               currentMouseButton = 0;
           } else if (pointerCount === 2) {
               currentMouseButton = 2;
           }
       } else {
           currentMouseButton = e.button;
       }

       let inputValue = null;
       if (game.inputMapCache && game.inputMapCache[1000 + currentMouseButton]) {
           inputValue = window.gameServer.sharedConstants.INPUT_MAP[game.inputMapCache[1000 + currentMouseButton]];
       }
       handleInput(e, inputValue, true);
   });
   mouseEventListenerObject.addEventListener(eventPrefix + 'move', function (e) {
       mx = e.clientX;
       my = e.clientY;

       mdx = lastmx - mx;
       mdy = lastmy - my;

       lastmx = mx;
       lastmy = my;
   });

   mouseEventListenerObject.addEventListener(eventPrefix + 'up', function (e) {
       mx = e.clientX;
       my = e.clientY;

       if (tutorialContainer && tutorialContainer.tutorialData) {
           if (my > HEIGHT - 256) {
               return;
           }
       }

       pointerCount--;

       let inputValue = null;
       if (game.inputMapCache && game.inputMapCache[1000 + currentMouseButton]) {
           inputValue = window.gameServer.sharedConstants.INPUT_MAP[game.inputMapCache[1000 + currentMouseButton]];
       }

       if (isMobile) {
           try {
               let fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
               if (!fullscreenElement) {
                   requestFullscreen(document.body);
               }
           } catch (e) {}
       }

       handleInput(e, inputValue, false);

       downPosition = null;
   });
   // important:section1end

   /*
   let touchEvent = null;
   let touchOffset = {
       x: 0,
       y: 0
   };
   let initialTouchPosition = null;
   let touchTime = Date.now();
   if (isMobile) {
       app.renderer.plugins.interaction.on('touchstart', (event) => {
           touchTime = Date.now();
           initialTouchPosition = {
               x: mx,
               y: my
           };
       });
       app.renderer.plugins.interaction.on('touchmove', (event) => {
           if (Math.distanceBetween({x: mx, y: my}, initialTouchPosition) > 15) {
               touchOffset.x += mdx;
               touchOffset.y += mdy;
               let bufferScale = 1.4;
               if (touchOffset.x < -WIDTH*bufferScale) {
                   touchOffset.x = -WIDTH*bufferScale;
               }
               if (touchOffset.x > WIDTH*bufferScale) {
                   touchOffset.x = WIDTH*bufferScale;
               }
               if (touchOffset.y < -HEIGHT*bufferScale) {
                   touchOffset.y = -HEIGHT*bufferScale;
               }
               if (touchOffset.y > HEIGHT*bufferScale) {
                   touchOffset.y = HEIGHT*bufferScale;
               }
               if (player) {
                   touchEvent = {
                       x: WIDTH/2 - touchOffset.x,
                       y: HEIGHT/2 - touchOffset.y
                   };
               }
           }
       });
       app.renderer.plugins.interaction.on('touchend', (event) => {
           if (Math.distanceBetween({x: mx, y: my}, initialTouchPosition) <= 15) {
               if (player && player.canControl && socket) {
                   socket.emit('fire', true);
               }
           }
       });
   }
   */

   game.tryFullscreen = function() {
       try {
           let fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
           if (!fullscreenElement) {
               requestFullscreen(document.body);
           }
       } catch (e) {}
   };

   game.tryGameFocus = function (force) {
       if (game.app && game.app.view && document.activeElement !== game.app.view && document.hasFocus() && (force || !document.activeElement || (document.activeElement.tagName !== 'INPUT' && document.activeElement.tagName !== 'SELECT' && document.activeElement.tagName !== 'TEXTAREA'))) {
           game.app.view.focus();
       }
   };

   function requestFullscreen(element) {
       // Supports most browsers and their versions.
       let requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullScreen;

       if (requestMethod) { // Native full screen.
           requestMethod.call(element);
       } else if (typeof window.ActiveXObject !== "undefined") { // Older IE.
           let wscript = new ActiveXObject("WScript.Shell");
           if (wscript !== null) {
               wscript.SendKeys("{F11}");
           }
       }
   }

   setTimeout(function() {
       loadAssets();
   }, 1);

   function switchSpectatingPlayer() {
       if ((lastDeathTime && Date.now()-lastDeathTime < 1500) || (player && player.valid && player.netData && player.netData.alive && player.canControl)) {
           return;
       }

       if (game.deathMenuComponent) {
           game.deathMenuComponent.showModal(false, null);
       }

       let foundPlayer = false;
       for (let i=0; i<entities.length; i++) {
           let entity = entities[i];
           if (entity.valid && entity.netData && entity.netData.alive && entity.type === 'vehicle' && entity !== player && entity.netData.tankType !== 'turret' && i > lastSpectatedIndex) {
               foundPlayer = true;
               lastSpectatedIndex = i;
               player = entity;
               player.canControl = false;
               break;
           }
       }

       if (!foundPlayer) {
           lastSpectatedIndex = -1;
       }
   }

   function getTeamTint(team) {
       let tintColor = 0xFFFFFF;
       switch (team) {
           case 0:
               tintColor = 0xDD6666;
               break;
           case 1:
               tintColor = 0x6666DD;
               break;
           case 2:
               tintColor = 0x66DD66;
               break;
           case 3:
               tintColor = 0xDDDDDD;
               break;
           case 4:
               tintColor = 0xDDDD66;
               break;
           case 5:
               tintColor = 0xdd7641;
               break;
           case 6:
               tintColor = 0xdd47b2;
               break;
           case 7:
               tintColor = 0x3dd1dd;
               break;
       }
       return tintColor;
   }

   function getTeamHex(team) {
       return '#FFFFFF';
       /*
       let tintColor = '#8d8d8d';
       switch (team) {
           case 0:
               tintColor = '#DD6666';
               break;
           case 1:
               tintColor = '#6666DD';
               break;
           case 2:
               tintColor = '#66DD66';
               break;
           case 3:
               tintColor = '#DDDDDD';
               break;
           case 4:
               tintColor = '#DDDD66';
               break;
           case 5:
               tintColor = '#dd7641';
               break;
           case 6:
               tintColor = '#dd47b2';
               break;
           case 7:
               tintColor = '#3dd1dd';
               break;
       }
       return tintColor;
       */
   }
   game.getTeamHex = getTeamHex;

   const overlayShaderFrag = `
precision mediump float;

varying vec2 vTextureCoord;
varying vec4 vColor;

uniform sampler2D uSampler;
uniform sampler2D uSampler2;
uniform vec2 scale;
uniform vec2 offset;
uniform float rotation;

float overlay(float a, float b)
{
   if (a < 0.5) {
       return 2.0 * a * b;
   }
   return 1.0 - 2.0 * ((1.0 - a) * (1.0 - b));
}

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
   float cosa = cos(rotation);
   float sina = sin(rotation);
   uv -= pivot;
   return vec2(
       cosa * uv.x - sina * uv.y,
       cosa * uv.y + sina * uv.x 
   ) + pivot;
}

void main(void)
{
   vec2 uvs2 = vTextureCoord.xy;
   uvs2 = uvs2 + offset;
   uvs2 = (uvs2 - 0.5) * scale + 0.5;
   vec4 fg = texture2D(uSampler, vTextureCoord);
   uvs2 = rotateUV(uvs2, vec2(0.5), rotation);
   vec4 fg2 = texture2D(uSampler2, fract(uvs2));
   
   gl_FragColor = vec4(overlay(fg.r, fg2.r), overlay(fg.g, fg2.g), overlay(fg.b, fg2.b), overlay(fg.w, fg2.w));
}
   `;

   const loadingTextures = {};
   let overlayFilter = new PIXI.Filter(null, overlayShaderFrag);
   function applyTextureOverlay(entity, texture, overlayPath, appliedSprite, offset, scale, rotation) {
       if (resources[overlayPath] && !loadingTextures[overlayPath]) {
           let overlay = resources[overlayPath].texture;

           overlayFilter.uniforms.uSampler2 = overlay;

           let widthRatio = texture.width / overlay.width;
           let heightRatio = texture.height / overlay.height;
           overlayFilter.uniforms.scale = {x: widthRatio, y: heightRatio};
           //TODO: Fix this incoming offset here.
           overlayFilter.uniforms.offset = {x: (offset.x / texture.width), y: (offset.y / texture.height)};
           overlayFilter.uniforms.rotation = rotation;
           overlayFilter.uniforms.scale.x *= scale;
           overlayFilter.uniforms.scale.y *= scale;

           if (appliedSprite) {
               overlayFilter.uniforms.offset.x += (appliedSprite.position.x / texture.width) * scale;
               overlayFilter.uniforms.offset.y += (appliedSprite.position.y / texture.height) * scale;
           }

           let renderTexture = PIXI.RenderTexture.create({width: texture.width, height: texture.height});
           let rtSprite = new PIXI.Sprite(texture);
           if (appliedSprite) {
               rtSprite.anchor.set(appliedSprite.anchor.x, appliedSprite.anchor.y);
           } else {
               rtSprite.anchor.set(0.5, 0.5);
           }
           rtSprite.position.x = renderTexture.width / 2;
           rtSprite.position.y = renderTexture.height / 2;
           rtSprite.filters = [overlayFilter];
           app.renderer.render(rtSprite, {
               renderTexture: renderTexture
           });
           return renderTexture;
       } else {
           if (!loadingTextures[overlayPath]) {
               loadingTextures[overlayPath] = PIXI.Texture.fromURL('/assets/' + overlayPath).then((tex) => {
                   delete loadingTextures[overlayPath];

                   resources[overlayPath] = {
                       texture: tex
                   };
                   if (entity && entity.updateTexture) {
                       entity.updateTexture();
                   }
               });
           } else {
               loadingTextures[overlayPath].then(() => {
                   if (entity && entity.updateTexture) {
                       entity.updateTexture();
                   }
               });
           }
           return texture;
       }
   }

   const decalShaderVert = `
attribute vec2 aVertexPosition;
attribute vec2 aTextureCoord;

uniform mat3 projectionMatrix;

varying vec2 vTextureCoord;

void main(void) {
   gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);
   vTextureCoord = aTextureCoord;
}
`;

   const decalShaderFrag = `
precision mediump float;

varying vec2 vTextureCoord;
varying vec4 vColor;

uniform sampler2D uSampler;
uniform sampler2D uSampler2;
uniform sampler2D uSampler3;//Base texture, optional.
uniform float useBaseTexture;
uniform vec2 scale;
uniform vec2 offset;
uniform float rotation;
uniform float alphaOffset;
uniform vec2 sampler2UVMod;

float overlay(float a, float b)
{
   if (a < 0.5) {
       return 2.0 * a * b;
   }
   return 1.0 - 2.0 * ((1.0 - a) * (1.0 - b));
}

vec2 rotateUV(vec2 uv, vec2 pivot, float rotation) {
   float cosa = cos(rotation);
   float sina = sin(rotation);
   uv -= pivot;
   return vec2(
       cosa * uv.x - sina * uv.y,
       cosa * uv.y + sina * uv.x 
   ) + pivot;
}

void main(void)
{
   vec2 uvs2 = vec2(vTextureCoord.x, vTextureCoord.y);
   uvs2 = uvs2 + offset;
   uvs2 = uvs2 * sampler2UVMod + vec2((1.0-sampler2UVMod.x)/2.0, (1.0-sampler2UVMod.y)/2.0);
   uvs2 = (uvs2 - 0.5) * scale + 0.5;
   vec4 fg = texture2D(uSampler, vTextureCoord);
   uvs2 = rotateUV(uvs2, vec2(0.5), rotation);
   vec4 fg2 = texture2D(uSampler2, uvs2);
   
   if (fg2.w > 0.0 && fg.w > 0.5 && uvs2.x >= 0.0 && uvs2.x <= 1.0 && uvs2.y >= 0.0 && uvs2.y <= 1.0) {
       if (useBaseTexture == 1.0 && fg2.w > 0.5) {
           vec4 fg3 = texture2D(uSampler3, vTextureCoord);
           float gray = dot(fg3.rgb, vec3(0.299, 0.587, 0.114));
           fg3 = vec4(vec3(gray), 1.0);
           fg2 = vec4(overlay(fg3.r, fg2.r), overlay(fg3.g, fg2.g), overlay(fg3.b, fg2.b), fg3.w);
       }
       
       float alpha = fg2.a-alphaOffset;
       if (alpha < 0.0) {
           alpha = 0.0;
       }
       gl_FragColor = fg;
       gl_FragColor.rgb = mix(gl_FragColor.rgb, fg2.rgb, alpha);
   } else {
       gl_FragColor = fg;
   }
}
   `;

   let decalFilter;
   function applyDecal(entity, baseTexture, texture, decal, offsetX, offsetY, rotation, scale, alphaOffset) {
       if (resources[decal] && !loadingTextures[decal]) {
           if (!decalFilter) {
               decalFilter = new PIXI.Filter(decalShaderVert, decalShaderFrag);
           }
           let renderTexture = PIXI.RenderTexture.create({width: texture.width, height: texture.height});

           decalFilter.uniforms.uSampler2 = resources[decal].texture;

           decalFilter.uniforms.useBaseTexture = 0;
           if (baseTexture) {
               decalFilter.uniforms.useBaseTexture = 1;
               decalFilter.uniforms.uSampler3 = baseTexture;//Base texture with no skin.

               let maxUV = texture.width/resources[decal].texture.width;
               if (texture.height/resources[decal].texture.height > maxUV) {
                   maxUV = texture.height/resources[decal].texture.height;
               }
               decalFilter.uniforms.sampler2UVMod = {
                   x: (texture.width/resources[decal].texture.width)/maxUV,
                   y: (texture.height/resources[decal].texture.height)/maxUV
               };
           } else {
               decalFilter.uniforms.sampler2UVMod = {
                   x: 1,
                   y: 1
               };
           }

           decalFilter.uniforms.scale = {x: scale, y: scale};
           decalFilter.uniforms.offset = {x: (offsetX / texture.width), y: (offsetY / texture.height)};
           decalFilter.uniforms.rotation = rotation;
           decalFilter.uniforms.alphaOffset = alphaOffset;

           let rtSprite = new PIXI.Sprite(texture);
           rtSprite.anchor.set(0.5, 0.5);
           rtSprite.position.x = renderTexture.width / 2;
           rtSprite.position.y = renderTexture.height / 2;
           rtSprite.filters = [decalFilter];
           app.renderer.render(rtSprite, {
               renderTexture: renderTexture
           });

           return renderTexture;
       } else {
           if (!loadingTextures[decal]) {
               loadingTextures[decal] = PIXI.Texture.fromURL('/assets/' + decal).then((tex) => {
                   resources[decal] = {
                       texture: tex
                   };
                   delete loadingTextures[decal];
                   decalFilter = new PIXI.Filter(decalShaderVert, decalShaderFrag);
                   if (entity && entity.updateTexture) {
                       entity.updateTexture();
                   }
               });
           } else {
               loadingTextures[decal].then(() => {
                   if (entity && entity.updateTexture) {
                       entity.updateTexture();
                   }
               });
           }

           return texture;
       }
   }


   function shuffle(array) {
       let currentIndex = array.length, temporaryValue, randomIndex;
       while (0 !== currentIndex) {
           randomIndex = Math.floor(Math.random() * currentIndex);
           currentIndex -= 1;
           temporaryValue = array[currentIndex];
           array[currentIndex] = array[randomIndex];
           array[randomIndex] = temporaryValue;
       }
       return array;
   }

   let vehiclePlayerOutlineFilter = new PIXI.filters.OutlineFilter(3, 0xe0d4d2, 0.5);
   let vehicleFriendlyOutlineFilter = new PIXI.filters.OutlineFilter(3, 0x276884, 0.5);
   let vehicleEnemyOutlineFilter = new PIXI.filters.OutlineFilter(3, 0xb5341d, 0.5);
   function getObjectProperties(object) {
       let properties = {};
       if (object.properties && object.properties[0] && object.properties[0].property) {
           for (let k=0; k<object.properties[0].property.length; k++) {
               let property = object.properties[0].property[k];
               switch (property.type) {
                   case 'int':
                       properties[property.name] = parseInt(property.value);
                       break;
                   case 'bool':
                       properties[property.name] = property.value.toLowerCase() === 'true';
                       break;
                   case 'float':
                       properties[property.name] = parseFloat(property.value);
                       break;
                   case 'string':
                   case 'color':
                   case 'file':
                   default:
                       properties[property.name] = property.value;
                       break;
               }
           }
       }
       return properties;
   }

   function download_sprite_as_png(renderer, sprite, fileName) {
       renderer.extract.canvas(sprite).toBlob((b) => {
           let a = document.createElement('a');
           document.body.append(a);
           a.download = fileName;
           a.href = URL.createObjectURL(b);
           a.click();
           a.remove();
       }, 'image/png');
   }
   game.createThumbnail = function() {
       download_sprite_as_png(app.renderer, player.sprite, player.netData.tankType + '_thumbnail.png');
   };

   game.getScreenAsBase64 = function() {
       let firstTex = app.renderer.generateTexture(app.cstage, {
           region: app.renderer.screen
       });
       let size = 1024;
       let tex = app.renderer.generateTexture(new PIXI.Sprite(firstTex), {
           region: new PIXI.Rectangle(WIDTH/2 - size/2, HEIGHT/2 - size/2, size, size)
       });
       return app.renderer.extract.base64(tex, 'image/jpeg', 0.2);
   };

   function getFilteredSpriteAsTexture(entity, filter) {
       let rtWidth = entity.width + 32;
       let rtHeight = entity.height + 32;
       let renderTexture = PIXI.RenderTexture.create({width: rtWidth, height: rtHeight});
       let rtSprite = entity;
       let lastX = rtSprite.x;
       let lastY = rtSprite.y;
       rtSprite.x = rtWidth / 2;
       rtSprite.y = rtHeight / 2;
       if (filter) {
           rtSprite.filters = [filter];
       } else {
           rtSprite.filters = [];
       }
       app.renderer.render(entity, {
           renderTexture: renderTexture
       });
       rtSprite.x = lastX;
       rtSprite.y = lastY;
       return renderTexture;
   }

   function animateSpriteBasedOnSpeed(entity, part, spritesheet, maxFrames) {
       if (!part.lastPosition) {
           part.lastPosition = new PIXI.Point();
       }
       if (!part.currentPosition) {
           part.currentPosition = new PIXI.Point();
       }
       let curRotation = entity.rotation + part.rotation;
       part.lastPosition.x = part.currentPosition.x;
       part.lastPosition.y = part.currentPosition.y;
       app.cstage.toLocal(part.position, part, part.currentPosition, true);

       let pdx = part.currentPosition.x - part.lastPosition.x;
       let pdy = part.currentPosition.y - part.lastPosition.y;
       let moveAngle = Math.angleBetween(part.lastPosition, part.currentPosition) - curRotation;
       moveAngle = (moveAngle % Math.PI2 + Math.PI2) % Math.PI2;
       let partSpeed = Math.magnitude({dx: pdx, dy: pdy})/6;
       if (partSpeed > 0.0001) {
           if (moveAngle > Math.PI) {
               part.frame -= partSpeed;
           } else {
               part.frame += partSpeed;
           }
       }

       if (Math.floor(part.frame) < 0) {
           part.frame += maxFrames;
       }
       if (Math.floor(part.frame) >= maxFrames) {
           part.frame -= maxFrames;
       }

       if (Math.floor(part.frame) < 0 || Math.floor(part.frame) >= maxFrames || !part.frame) {
           part.frame = 0;
       }
       let frameSafe = Math.floor(maxFrames-part.frame);
       if (frameSafe < 0 || frameSafe >= maxFrames) {
           frameSafe = 0;
       }
       let tex = spritesheet[frameSafe];
       if (tex && tex[0]) {
           part.texture = tex[0];
       }
   }

   function createVehicle(serverId, subtype, x, y, z, width, height, team, netData) {
       let entity = createEntity(serverId, 'vehicle', subtype, x, y, z, team, netData);
       entity.turretRotation = 0;

       entity.damagedAreas = [];

       let guiSpriteContainer = new PIXI.Container();
       guiSpriteContainer.getZIndex = function () {
           return entity.getZIndex() - guiSpriteContainer.y - 100;
       };
       entity.guiSpriteContainer = guiSpriteContainer;
       app.cstage.addChild(guiSpriteContainer);

       let pingLocationSprite = null;
       let emoteBubbleSpritesheet = loadSpritesheet(resources['emote_bubble'].texture, 128, 128);
       let emoteBase = new PIXI.Sprite();
       emoteBase.visible = false;
       emoteBase.position.x = 15;
       emoteBase.position.y = -125;
       emoteBase.frame = 0;
       entity.guiSpriteContainer.addChild(emoteBase);

       entity.showEmote = (key) => {
           if (game.watchingRecording) {
               return;
           }

           if (window.gameServer.emoteListMap[key] && (window.gameServer.emoteListMap[key].texture || window.gameServer.emoteListMap[key].spine)) {
               emoteBase.visible = true;
               emoteBase.currentEmote = window.gameServer.emoteListMap[key];

               if (emoteBase.icon) {
                   emoteBase.removeChild(emoteBase.icon);
                   delete emoteBase.icon;
               }

               if (emoteBase.currentEmote.spine) {
                   emoteBase.icon = new PIXI.spine.Spine(resources[emoteBase.currentEmote.spine].spineData);
                   emoteBase.icon.position.x = 64;
                   emoteBase.icon.position.y = 64;
                   emoteBase.addChild(emoteBase.icon);
                   emoteBase.icon.state.setAnimation(0, 'animation', true);
               } else {
                   emoteBase.icon = new PIXI.Sprite();
                   let tex = resources[emoteBase.currentEmote.texture].texture;
                   if (emoteBase.currentEmote.animation) {
                       emoteBase.icon.spritesheet = loadSpritesheet(tex, Math.floor(tex.width/emoteBase.currentEmote.animation.frameX), Math.floor(tex.height/emoteBase.currentEmote.animation.frameY));
                       tex = emoteBase.icon.spritesheet[0][0];
                   }
                   emoteBase.icon.texture = tex;
                   emoteBase.addChild(emoteBase.icon);
               }

               emoteBase.icon.visible = false;

               emoteBase.icon.frameX = 0;
               emoteBase.icon.frameY = 0;
               emoteBase.startTime = Date.now();
               emoteBase.texture = emoteBubbleSpritesheet[0][0];
               soundPlay(sounds['emote_in'], entity, 0.3);
           }
       };

       let sprite = new PIXI.Sprite();

       let spritesheet = null;
       let repairSpritesheet = loadSpritesheet(resources['tank_repair'].texture, 64, 64);
       if (subtype === 'tank') {
           let name = new PIXI.Text();
           name.position.y = 1;
           name.anchor.x = 0.5;
           name.visible = false;
           name.style.fill = 0xFFFFFF;
           name.style.dropShadow = true;
           name.style.dropShadowDistance = 2;
           name.style.dropShadowColor = 0x000000;
           name.style.fontSize = game.roundEnded ? 24 : 15;
           name.style.align = 'center';
           name.style.fontFamily = fontFamily;
           entity.name = name;
           guiSpriteContainer.addChild(name);

           let devtag = new PIXI.Sprite(tagsSpritesheet[0][0]);
           devtag.position.y = -5;
           devtag.scale.set(0.75);
           devtag.visible = false;
           devtag.anchor.set(0.5);
           entity.devtag = devtag;
           guiSpriteContainer.addChild(devtag);

           let repairIcon = new PIXI.Sprite(repairSpritesheet[0][0]);
           repairIcon.position.y = 30;
           repairIcon.scale.set(1.25);
           repairIcon.visible = false;
           repairIcon.anchor.set(0.5);
           repairIcon.fx = 0;
           repairIcon.fy = 0;
           entity.repairIcon = repairIcon;
           guiSpriteContainer.addChild(repairIcon);

           let chat = new PIXI.Text();
           chat.style.fontFamily = fontFamily;
           chat.position.y = -40;
           chat.anchor.x = 0.5;
           chat.visible = false;
           chat.style.fill = 0xFFFFFF;
           chat.style.fontSize = 20;
           entity.chat = chat;
           guiSpriteContainer.addChild(chat);

           if (scoreboardData && scoreboardData.gamemode === 'hunt' && entity.team === 0) {
               entity.turretLight = new PIXI.lights.PointLight(0xFFFFFF, 1.25, 1800, Math.PI/2);
               entity.turretLight.rotation = Math.PI + (Math.PI/4);
               entity.turretLight.getZIndex = () => {
                   return 1000;
               }
               app.cstage.addChild(entity.turretLight);

               entity.turretLight2 = new PIXI.lights.PointLight(0xFFFFFF, 0.4);
               entity.turretLight2.getZIndex = () => {
                   return 1000;
               }
               app.cstage.addChild(entity.turretLight2);
           }
       } else if (subtype === 'colossus') {
           spritesheet = loadSpritesheet(resources['colossus'].texture, 64, 64);
           sprite.texture = spritesheet[0][0];

           let colTeamSheet = loadSpritesheet(resources['colossus_team'].texture, 32, 64);
           let colossusTeam = new PIXI.Sprite();
           colossusTeam.anchor.set(0.5, 0.5);
           sprite.addChild(colossusTeam);
           if (lastControllablePlayer && entity.team === lastControllablePlayer.team) {
               colossusTeam.texture = colTeamSheet[1][0]
           } else {
               colossusTeam.texture = colTeamSheet[0][0]
           }
           entity.teamTexture = colossusTeam;

           entity.sprite = sprite;
           entity.sprite.anchor.set(0.5, 0.5);
           entity.sprite.parentGroup = PIXI.lights.diffuseGroup;
           entity.sprite.filters = [dropShadowFilter];
           entity.sprite.filterArea = app.screen;
       }

       let treadsSpritesheet = loadSpritesheet(resources['tracks'].texture, 32, 256);
       let wheelsSpritesheet = loadSpritesheet(resources['wheels'].texture, 32, 64);

       let vehicleDirectionSprite = new PIXI.Sprite(resources['arrow_pointer'].texture);
       vehicleDirectionSprite.width = 45;
       vehicleDirectionSprite.height = 45;
       vehicleDirectionSprite.visible = false;
       vehicleDirectionSprite.anchor.set(0.5);
       vehicleDirectionSprite.tint = 0xFFFFFF;
       vehicleDirectionSprite.parentGroup = PIXI.lights.diffuseGroup;
       entity.addChild(vehicleDirectionSprite);

       entity.updateTexture = () => {
           let skinApplied = false;
           if (!vehicleInfo.base && entity.netData.cosmetics.skin && entity.netData.cosmetics.skin.texture) {
               let offset = entity.netData.cosmetics.skin.offset;
               let scale = entity.netData.cosmetics.skin.scale;
               let rotation = Math.deg2rad(entity.netData.cosmetics.skin.rotation);

               if (parts['Hull']) {
                   for (let i = 0; i < parts['Hull'].length; i++) {
                       let parent = parts['Hull'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           if (!part.properties.disableCosmetics) {
                               part.texture = applyTextureOverlay(entity, resources[part.originalTexturePath].texture, entity.netData.cosmetics.skin.texture, null, offset, scale, rotation);
                           }
                       }
                   }
               }

               if (parts['Turret']) {
                   for (let i = 0; i < parts['Turret'].length; i++) {
                       let parent = parts['Turret'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           if (!part.properties.disableCosmetics) {
                               part.texture = applyTextureOverlay(entity, resources[part.originalTexturePath].texture, entity.netData.cosmetics.skin.texture, null, offset, scale, rotation);
                           }
                       }
                   }
               }

               skinApplied = true;
           }

           if (!skinApplied) {
               for (let i = 0; i < 2; i++) {
                   let decalKey = 'decal' + i;
                   if (entity.netData.cosmetics[decalKey] && entity.netData.cosmetics[decalKey].texture) {
                       let appliedPart = entity.parts['Hull'][0].parts[0];
                       if (entity.netData.cosmetics[decalKey].section === 'turret') {
                           if (entity.parts['Turret'] && entity.parts['Turret'][0]) {
                               appliedPart = entity.parts['Turret'][0].parts[0];
                           }
                       }
                       appliedPart.texture = resources[appliedPart.originalTexturePath].texture;
                   }
               }
           }

           for (let i=0; i<2; i++) {
               let decalKey = 'decal' + i;
               if (entity.netData.cosmetics[decalKey] && entity.netData.cosmetics[decalKey].texture) {
                   let offset = entity.netData.cosmetics[decalKey].offset;
                   let scale = entity.netData.cosmetics[decalKey].scale;
                   let rotation = Math.deg2rad(entity.netData.cosmetics[decalKey].rotation);
                   let appliedPart = entity.parts['Hull'][0].parts[0];
                   if (entity.netData.cosmetics[decalKey].section === 'turret') {
                       if (entity.parts['Turret'] && entity.parts['Turret'][0]) {
                           appliedPart = entity.parts['Turret'][0].parts[0];
                       }
                   }

                   appliedPart.texture = applyDecal(entity, resources[appliedPart.originalTexturePath].texture, appliedPart.texture, entity.netData.cosmetics[decalKey].texture, offset.x, offset.y, rotation, scale, 0);
               }
           }
       };

       let vehicleInfo = vehicleData[netData.tankType];
       if (subtype === 'tank' && !vehicleInfo) {
           console.error('No vehicle data defined!', entity.netData);
           entity.remove();
           return;
       }

       entity.updateOutlineFilters = () => {
           if (entity.outlineSprite) {
               if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                   entity.outlineSprite.filters = [dropShadowFilter];
                   entity.outlineSprite.filterArea = app.screen;
               } else {
                   entity.outlineSprite.filters = [];
               }
           }
       };

       let outlineSpriteCache = null;
       let lastOutlinePlayerTeam = null;
       entity.updateOutline = () => {
           if (entity.netData.disableOutlines) {
               return;
           }

           if (!outlineSpriteCache) {
               if (parts['Turret']) {
                   for (let i = 0; i < parts['Turret'].length; i++) {
                       let parent = parts['Turret'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           part.visible = false;
                       }
                   }
               }
               if (parts['Wheels']) {
                   for (let i = 0; i < parts['Wheels'].length; i++) {
                       let parent = parts['Wheels'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           part.visible = false;
                       }
                   }
               }

               outlineSpriteCache = getFilteredSpriteAsTexture(entity.sprite, null);

               if (parts['Turret']) {
                   for (let i = 0; i < parts['Turret'].length; i++) {
                       let parent = parts['Turret'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           part.visible = true;
                       }
                   }
               }
               if (parts['Wheels']) {
                   for (let i = 0; i < parts['Wheels'].length; i++) {
                       let parent = parts['Wheels'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           part.visible = true;
                       }
                   }
               }
           }

           if (entity.outlineSprite) {
               entity.removeChild(entity.outlineSprite);
               delete entity.outlineSprite;
           }

           let filter = vehicleEnemyOutlineFilter;
           lastOutlinePlayerTeam = null;
           if (lastControllablePlayer) {
               if (entity === lastControllablePlayer) {
                   filter = vehiclePlayerOutlineFilter;
               } else {
                   if (entity.team === lastControllablePlayer.team) {
                       filter = vehicleFriendlyOutlineFilter;
                   } else {
                       filter = vehicleEnemyOutlineFilter;
                   }
               }

               lastOutlinePlayerTeam = lastControllablePlayer.team;
           }

           let testSprite = new PIXI.Sprite(outlineSpriteCache);
           testSprite.anchor.set(0.5);
           let outlineTexture = getFilteredSpriteAsTexture(testSprite, filter);
           let outlineSprite = new PIXI.Sprite(outlineTexture);
           outlineSprite.parentGroup = PIXI.lights.diffuseGroup;
           outlineSprite.x = 0;
           outlineSprite.y = 0;
           outlineSprite.anchor.set(0.5);
           entity.addChildAt(outlineSprite, 0);
           entity.outlineSprite = outlineSprite;

           entity.updateOutlineFilters();

           if (vehicleDirectionSprite) {
               vehicleDirectionSprite.position.x = 0;
               vehicleDirectionSprite.position.y = -entity.sprite.height*0.4;
           }
       };

       const MAX_TREAD_FRAME = 4;
       const MAX_WHEEL_FRAME = 4;

       let parts = {};
       let boostSpritesheet = loadSpritesheet(resources['boost_sparks'].texture, 32, 64);
       if (vehicleInfo) {
           entity.sprite = new PIXI.Container();

           let assetMap = {};
           for (let j = 0; j < vehicleInfo.tileset.length; j++) {
               let tileset = vehicleInfo.tileset[j];

               if (tileset) {
                   let firstGID = parseInt(tileset.firstgid);
                   if (tileset.tile) {
                       for (let i = 0; i < tileset.tile.length; i++) {
                           let tile = tileset.tile[i];
                           if (!tile) {
                               continue;
                           }
                           let id = '' + (firstGID + (parseInt(tile.id)));
                           if (vehicleInfo.base) {
                               assetMap[id] = 'vehicles/' + vehicleInfo.base + '/' + netData.tankType + '/' + tile.image[0].source;
                           } else {
                               assetMap[id] = 'vehicles/' + netData.tankType + '/' + tile.image[0].source;
                           }
                       }
                   } else if (tileset.image) {
                       for (let i = 0; i < tileset.image.length; i++) {
                           let image = tileset.image[i];
                           if (!image) {
                               continue;
                           }
                           assetMap['' + firstGID] = '/' + image.source;
                       }
                   } else {
                       console.error('Unsupported tileset type:', tileset);
                   }
               }
           }

           let vehicleWidth = parseFloat(vehicleInfo.width) * parseFloat(vehicleInfo.tilewidth);
           let vehicleHeight = parseFloat(vehicleInfo.height) * parseFloat(vehicleInfo.tileheight);
           let scale = 0.5;
           entity.parts = parts;

           for (let i = 0; i < vehicleInfo.objectgroup.length; i++) {
               let group = vehicleInfo.objectgroup[i];
               let groupContainer = new PIXI.Container();

               groupContainer.scale.set(scale);
               groupContainer.position.x = group.offsetx ? parseFloat(group.offsetx) * scale : 0;
               groupContainer.position.y = group.offsety ? parseFloat(group.offsety) * scale : 0;
               groupContainer.parts = [];

               groupContainer.properties = getObjectProperties(group);

               if (group && group.object) {
                   for (let j = 0; j < group.object.length; j++) {
                       let object = group.object[j];
                       if (object && object.gid && Object.keys(object).length) {
                           try {
                               let tex = null;
                               if (resources[assetMap[object.gid]]) {
                                   tex = resources[assetMap[object.gid]].texture;
                               }

                               let objectSprite = new PIXI.Sprite(tex);
                               objectSprite.origX = object.x ? parseFloat(object.x) : 0;
                               objectSprite.origY = object.y ? parseFloat(object.y) : 0;
                               objectSprite.width = object.width ? parseFloat(object.width) : 128;
                               objectSprite.height = object.height ? parseFloat(object.height) : 128;
                               objectSprite.position.x = objectSprite.origX;
                               objectSprite.position.y = objectSprite.origY;
                               objectSprite.position.x -= vehicleWidth / 2;
                               objectSprite.position.y -= objectSprite.height;
                               objectSprite.position.y -= vehicleHeight / 2;
                               objectSprite.rotation = object.rotation ? Math.deg2rad(parseFloat(object.rotation)) : 0;
                               objectSprite.properties = getObjectProperties(object);
                               objectSprite.originalTexturePath = assetMap[object.gid];
                               groupContainer.addChild(objectSprite);
                               objectSprite.parentGroup = PIXI.lights.diffuseGroup;

                               let objectSpriteNormal = new PIXI.Sprite(resources['normal'].texture);
                               objectSpriteNormal.origX = object.x ? parseFloat(object.x) : 0;
                               objectSpriteNormal.origY = object.y ? parseFloat(object.y) : 0;
                               objectSpriteNormal.width = object.width ? parseFloat(object.width) : 128;
                               objectSpriteNormal.height = object.height ? parseFloat(object.height) : 128;
                               objectSpriteNormal.position.x = objectSprite.origX;
                               objectSpriteNormal.position.y = objectSprite.origY;
                               objectSpriteNormal.position.x -= vehicleWidth / 2;
                               objectSpriteNormal.position.y -= objectSprite.height;
                               objectSpriteNormal.position.y -= vehicleHeight / 2;
                               objectSpriteNormal.rotation = object.rotation ? Math.deg2rad(parseFloat(object.rotation)) : 0;
                               objectSpriteNormal.properties = getObjectProperties(object);
                               groupContainer.addChild(objectSpriteNormal);
                               objectSpriteNormal.parentGroup = PIXI.lights.normalGroup;
                               objectSpriteNormal.visible = false;
                               objectSprite.objectSpriteNormal = objectSpriteNormal;

                               groupContainer.parts.push(objectSprite);
                           } catch (e) {
                               console.error('Failed to load group object for vehicle:', e);
                           }
                       }
                   }

                   if (!parts[group.name]) {
                       parts[group.name] = [];
                   }
                   parts[group.name].push(groupContainer);
               }

               entity.sprite.addChild(groupContainer);
           }

           entity.addChild(entity.sprite);

           if (parts['Turret']) {
               entity.turret = parts['Turret'][0];
           }

           if (parts['Tracks']) {
               for (let i = 0; i < parts['Tracks'].length; i++) {
                   let parent = parts['Tracks'][i];
                   for (let j = 0; j < parent.parts.length; j++) {
                       let part = parent.parts[j];
                       part.frame = Math.floor(Math.random() * MAX_TREAD_FRAME);
                       let treadTex = treadsSpritesheet[part.frame];
                       if (treadTex && treadTex[0]) {
                           part.texture = treadTex[0];
                       }

                       part.boost = new PIXI.Sprite(boostSpritesheet[0][0]);
                       part.boost.visible = false;
                       part.boost.position.y = part.boost.position.y + 256 - 8;
                       part.boost.frame = Math.round(Math.random() * 7);
                       part.addChild(part.boost);
                   }
               }
           }

           if (parts['Wheels']) {
               for (let i = 0; i < parts['Wheels'].length; i++) {
                   let parent = parts['Wheels'][i];
                   for (let j = 0; j < parent.parts.length; j++) {
                       let part = parent.parts[j];
                       part.texture = resources['wheel'].texture;
                   }
               }
           }

           entity.updateOutline();

           entity.updateTexture();
       } else {
           entity.addChild(entity.sprite);

           entity.updateOutline();
       }

       if (subtype === 'tank') {
           entity.ramSpritesheet = loadSpritesheet(resources['impact_ram'].texture, 256, 128);
           entity.ramEffect = new PIXI.Sprite(entity.ramSpritesheet[0][0]);
           entity.ramEffect.frame = 0;
           entity.ramEffect.frameY = 0;
           entity.ramEffect.position.x = 0;
           entity.ramEffect.position.y = -entity.sprite.height/2;
           entity.ramEffect.scale.set(0.8);
           entity.ramEffect.visible = false;
           entity.ramEffect.anchor.set(0.5);
           entity.addChild(entity.ramEffect);
       }

       entity.qualityChanged = () => {
           let keys = Object.keys(parts);
           for (let i=0; i<keys.length; i++) {
               let group = parts[keys[i]];
               for (let k=0; k<group.length; k++) {
                   let parent = group[k];
                   if (parent.parts) {
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                               part.filters = [dropShadowFilter];
                               part.filterArea = app.screen;
                               if (part.objectSpriteNormal) {
                                   part.objectSpriteNormal.visible = true;
                               }
                           } else {
                               part.filters = [];
                               if (part.objectSpriteNormal) {
                                   part.objectSpriteNormal.visible = false;
                               }
                           }
                       }
                   }
               }
           }

           entity.updateOutlineFilters();
       };

       let frame = 0;
       let frameY = 0;
       let trackSound = null;
       let engineSound = null;
       let turretSound = null;
       let driftSound = null;
       let repairSound = null;
       let terrainSound = null;

       let boosting = false;
       let nextLoadSoundTime = 0;
       let currentLoadSound = 0;
       let loadingSounds = null;
       let pingLifetime = 5000;
       let oldTick = entity.tick;
       let lastTurretRotation = 0;
       let createParticle = 0;
       let smokeTime = 0;
       let flashTimer = 0;
       let terrainTimer = 0;
       entity.tick = function (delta) {
           if (vehicleDirectionSprite) {
               vehicleDirectionSprite.visible = false;
           }

           if (entity.turretLight) {
               entity.turretLight.position = entity.getCurrentTurretPosition();
               entity.turretLight2.position = entity.getCurrentTurretPosition();
               entity.turretLight.rotation = entity.turretRotation - (Math.PI/4);
           }

           if (emoteBase && emoteBase.visible) {
               if (Date.now()-emoteBase.startTime < 4000) {
                   emoteBase.frame += 0.5;
                   if (Math.floor(emoteBase.frame) > 3) {
                       emoteBase.frame = 3;
                       emoteBase.icon.visible = true;
                   } else if (emoteBase?.icon?.visible) {
                       if (emoteBase.currentEmote.texture && emoteBase.currentEmote.animation) {
                           emoteBase.icon.frameX += emoteBase.currentEmote.animation.speed ? emoteBase.currentEmote.animation.speed : 0.3;
                           if (Math.floor(emoteBase.icon.frameX) >= emoteBase.currentEmote.animation.frameX) {
                               emoteBase.icon.frameX -= emoteBase.currentEmote.animation.frameX;
                               emoteBase.icon.frameY += 1;
                               if (Math.floor(emoteBase.icon.frameY) >= emoteBase.currentEmote.animation.frameY) {
                                   if (emoteBase.currentEmote.animation.loop) {
                                       emoteBase.icon.frameY -= emoteBase.currentEmote.animation.frameY;
                                   } else {
                                       emoteBase.icon.frameX = emoteBase.currentEmote.animation.frameX-1;
                                       emoteBase.icon.frameY = emoteBase.currentEmote.animation.frameY-1;
                                   }
                               }
                           }
                           emoteBase.icon.texture = emoteBase.icon.spritesheet[Math.floor(emoteBase.icon.frameX)][Math.floor(emoteBase.icon.frameY)];
                       }
                   }
               } else {
                   if (emoteBase?.icon?.visible) {
                       emoteBase.icon.visible = false;
                       soundPlay(sounds['emote_out'], entity, 0.3);
                   }
                   emoteBase.frame -= 0.5;
                   if (Math.floor(emoteBase.frame) < 0) {
                       emoteBase.frame = 0;
                       emoteBase.visible = false;
                   }
               }
               emoteBase.texture = emoteBubbleSpritesheet[Math.floor(emoteBase.frame)][0];
           }

           if (lastControllablePlayer && entity.netData && entity.netData.alive && !game.watchingRecording && !game.isInMenu && !game.roundEnded) {
               if (lastControllablePlayer.team !== lastOutlinePlayerTeam) {
                   entity.updateOutline();
               }

               if (entity === lastControllablePlayer) {
                   if (vehicleDirectionSprite) {
                       vehicleDirectionSprite.visible = true;
                   }
               }
               if (entity.outlineSprite) {
                   if (tutorialContainer && tutorialContainer.tutorialData && tutorialContainer.tutorialData.pause && lastControllablePlayer.team !== entity.team) {
                       flashTimer++;
                       if (flashTimer > 25) {
                           flashTimer = 0;
                           entity.outlineSprite.visible = !entity.outlineSprite.visible;
                       }
                   } else {
                       entity.outlineSprite.visible = true;
                   }
               }
           } else {
               if (entity.outlineSprite) {
                   entity.outlineSprite.visible = false;
               }
           }

           if (entity.name) {
               if (game.roundEnded) {
                   let lastRoundEndData = {
                       kills: 0,
                       xp: 0
                   };
                   if (entity.netData.lastRoundEndData) {
                       lastRoundEndData = entity.netData.lastRoundEndData;
                   }
                   entity.name.text = entity.netData.name + '\n' + lastRoundEndData.kills + ' Kills';
                   if (lastRoundEndData.xp) {
                       entity.name.text += '\n' + lastRoundEndData.xp + ' XP';
                   }
                   entity.name.visible = true;
                   if (entity.devtag) {
                       entity.devtag.visible = entity.name.visible && entity.netData.isDev && !game.isSingleplayer;
                   }
               } else if (!game.isInMenu && entity.netData && entity.netData.name && entity.netData.alive && (entity !== player || !player.canControl) && !capturer) {
                   entity.name.text = entity.netData.name;
                   entity.name.visible = Math.distanceBetween({x: gmx, y: gmy}, entity) < 64;
                   if (entity.devtag) {
                       entity.devtag.visible = entity.name.visible && entity.netData.isDev && !game.isSingleplayer;
                   }
                   if (lastControllablePlayer) {
                       if (lastControllablePlayer.team === entity.team) {
                           entity.name.style.dropShadowColor = COLOR_FRIENDLY_BRIGHT;
                       } else {
                           entity.name.style.dropShadowColor = COLOR_ENEMY;
                       }
                   } else {
                       entity.name.style.dropShadowColor = 0x000000;
                   }
               } else {
                   entity.name.visible = false;
                   if (entity.devtag) {
                       entity.devtag.visible = false;
                   }
               }
           }

           for (let i=0; i<entity.damagedAreas.length; i++) {
               let area = entity.damagedAreas[i];
               let angle = (entity.rotation + area.angle) + Math.PI;
               area.lifetime--;
               if (area.lifetime <= 0) {
                   entity.damagedAreas.splice(i, 1);
                   i--;
               } else if (area.lifetime%5 === 0) {
                   if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                       let sangle = area.normalAngle + (-0.01 + (Math.random() * 0.02));
                       let size = 10 + Math.round(Math.random() * 5);
                       let speed = 0.5 + (Math.random() * 0.5);
                       let dist = area.dist * 0.75;
                       createEffect('smoke', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), entity.z, size, size, {
                           dx: Math.cos(sangle) * (speed * Math.random()),
                           dy: Math.sin(sangle) * (speed * Math.random()),
                           tint: 0x2b2b2b,
                           maxLifetime: 100
                       });
                   }
               }
           }

           if (pingLocationSprite && pingLocationSprite.visible) {
               if (Date.now() < pingLocationSprite.pingTime + pingLifetime) {
                   let dist = Math.distanceBetween(pingLocationSprite.startPosition, pingLocationSprite.nextPosition);
                   if (pingLocationSprite.totalDotDist < dist-200) {
                       pingLocationSprite.curDotDist += 20;
                       if (pingLocationSprite.curDotDist >= 80) {
                           pingLocationSprite.totalDotDist += pingLocationSprite.curDotDist
                           pingLocationSprite.curDotDist = 0;

                           let angle = Math.angleBetween(pingLocationSprite.startPosition, pingLocationSprite.nextPosition);
                           let pingDot = new PIXI.spine.Spine(resources.pingDot.spineData);
                           pingDot.position.x = pingLocationSprite.startPosition.x + Math.cos(angle) * pingLocationSprite.totalDotDist;
                           pingDot.position.y = pingLocationSprite.startPosition.y + Math.sin(angle) * pingLocationSprite.totalDotDist;
                           pingDot.state.setAnimation(0, 'animation', false);
                           pingDot.getZIndex = function () {
                               return -100000;
                           };
                           pingDot.count = 0;
                           pingDot.state.tracks[0].listener = {
                               complete: function () {
                                   pingDot.count++;
                                   if (pingDot.count >= 1) {
                                       setTimeout(() => {
                                           app.cstage.removeChild(pingDot);
                                       }, 1);
                                   }
                               }
                           };
                           app.cstage.addChild(pingDot);
                       }
                   }
               }
           }

           let speed = Math.magnitude(entity)/5;
           if (!speed) {
               speed = 0;
           }

           if (entity.netData.alive) {
               if (boosting) {
                   if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                       createParticle--;
                       if (createParticle <= 0) {
                           createParticle = 2;

                           let angle = Math.random() * Math.PI * 2;
                           let size = Math.round(width / 2) + Math.round(Math.random() * 40);
                           let offAngle = entity.rotation + (Math.PI / 2);
                           let dist = 2;
                           createEffect('boost_particle', entity.x + (Math.cos(offAngle) * dist), entity.y + (Math.sin(offAngle) * dist), entity.z, size, size, {
                               dx: Math.cos(angle) * (0.55 * Math.random()),
                               dy: Math.sin(angle) * (0.55 * Math.random())
                           });
                       }
                   }

                   if (parts['Tracks']) {
                       for (let i=0; i<parts['Tracks'].length; i++) {
                           let parent = parts['Tracks'][i];
                           for (let j=0; j<parent.parts.length; j++) {
                               let part = parent.parts[j];
                               if (part && part.boost) {
                                   part.boost.frame += 0.45;
                                   if (Math.floor(part.boost.frame) >= 8) {
                                       part.boost.frame = 0;
                                   }
                                   part.boost.texture = boostSpritesheet[Math.floor(part.boost.frame)][0];
                               }
                           }
                       }
                   }
               } else if (speed >= 0.2) {
                   if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                       createParticle--;
                       if (createParticle <= 0) {
                           createParticle = 4;
                           let angle = Math.random() * Math.PI * 2;
                           let size = 30 + Math.round(Math.random() * 10);
                           let offAngle = entity.rotation;
                           let dist = entity.sprite.width * 0.2;
                           createEffect('boost_particle', entity.x + (Math.cos(offAngle) * dist), entity.y + (Math.sin(offAngle) * dist), entity.z, size, size, {
                               dx: Math.cos(angle) * (0.55 * Math.random()),
                               dy: Math.sin(angle) * (0.55 * Math.random())
                           });

                           offAngle = entity.rotation - Math.PI;
                           createEffect('boost_particle', entity.x + (Math.cos(offAngle) * dist), entity.y + (Math.sin(offAngle) * dist), entity.z, size, size, {
                               dx: Math.cos(angle) * (0.55 * Math.random()),
                               dy: Math.sin(angle) * (0.55 * Math.random())
                           });
                       }
                   }
               }
           }

           if (subtype === 'tank' && entity.netData.alive) {
               if (entity.ramEffect && entity.ramEffect.visible) {
                   entity.ramEffect.frame += 0.4 * (1/timeScale);
                   if (Math.floor(entity.ramEffect.frame) >= 2) {
                       entity.ramEffect.frame = 0;
                       entity.ramEffect.frameY++;
                       if (Math.floor(entity.ramEffect.frameY) >= 4) {
                           entity.ramEffect.frameY = 3;
                           entity.ramEffect.visible = false;
                       }
                   }
                   entity.ramEffect.texture = entity.ramSpritesheet[Math.floor(entity.ramEffect.frame)][Math.floor(entity.ramEffect.frameY)];
               }

               if (entity.repairIcon && entity.repairIcon.visible) {
                   let frameDiff = 0.15 * (1/timeScale);
                   entity.repairIcon.fx += frameDiff;
                   if (Math.floor(entity.repairIcon.fx) >= 4) {
                       entity.repairIcon.fx = 0;
                       entity.repairIcon.fy++;
                       if (Math.floor(entity.repairIcon.fy) >= 3) {
                           entity.repairIcon.fx = 0;
                           entity.repairIcon.fy = 0;
                       }
                   }
                   entity.repairIcon.texture = repairSpritesheet[Math.floor(entity.repairIcon.fx)][Math.floor(entity.repairIcon.fy)];
               }

               if (!entity.netData.loaded) {
                   if (Date.now() >= nextLoadSoundTime) {
                       nextLoadSoundTime = Date.now() + 1000 + Math.round(Math.random() * 1000);
                       if (currentLoadSound === -1) {
                           soundPlay(sounds['reload_start'], entity, 0.25);
                           loadingSounds = shuffle([
                               1, 2, 3, 4, 5, 6, 7
                           ]);
                       } else if (player === entity && loadingSounds) {
                           soundPlay(sounds['reload' + (loadingSounds[currentLoadSound])], entity, 0.2);
                       }
                       currentLoadSound++;
                       if (currentLoadSound >= 7) {
                           currentLoadSound = 0;
                       }
                   }
               }

               if (parts['Wheels'] && entity.visible) {
                   for (let i=0; i<parts['Wheels'].length; i++) {
                       let parent = parts['Wheels'][i];
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];

                           animateSpriteBasedOnSpeed(entity, part, wheelsSpritesheet, MAX_WHEEL_FRAME);

                           if (!parent.properties.canTurn && (game.settings.quality === 'auto' || game.settings.quality === 'high') && entity.isDrifting) {
                               let pos = part.getBounds(true);
                               let zoomRatio = WIDTH / (WIDTH * camera.zoom);
                               let camX = camera.x * zoomRatio;
                               let camY = camera.y * zoomRatio;

                               let newPos = {
                                   x: camX + ((pos.x + pos.width / 2) * zoomRatio),
                                   y: camY + ((pos.y + pos.height / 2) * zoomRatio)
                               };

                               if ((game.settings.quality === 'auto' || game.settings.quality === 'high') && !entity.currentTerrain) {
                                   if (isOnScreen(newPos, 800) && (!part.lastTrackPos || Math.distanceBetween(part.lastTrackPos, newPos) >= 20) && Math.distanceBetween(entity, newPos) <= 200) {
                                       let rot = entity.rotation;
                                       if (part.lastTrackPos) {
                                           rot = Math.angleBetween(part.lastTrackPos, newPos);
                                       }

                                       let alpha = 0.2;
                                       if (part.lastTrackPos) {
                                           createEffect('tracktrail', newPos.x, newPos.y, entity.z, 55, 55, {
                                               alpha: alpha,
                                               rotation: rot + Math.PI / 2
                                           });
                                       }

                                       part.lastTrackPos = newPos;
                                   }
                               }
                           }
                       }
                   }
               }

               if (parts['Tracks'] && entity.visible) {
                   for (let i=0; i<parts['Tracks'].length; i++) {
                       let parent = parts['Tracks'][i];
                       for (let j=0; j<parent.parts.length; j++) {
                           let part = parent.parts[j];

                           animateSpriteBasedOnSpeed(entity, part, treadsSpritesheet, MAX_TREAD_FRAME);

                           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                               let pos = part.getBounds(true);
                               let zoomRatio = WIDTH/(WIDTH*camera.zoom);
                               let camX = camera.x * zoomRatio;
                               let camY = camera.y * zoomRatio;

                               let newPos = {
                                   x: camX + ((pos.x + pos.width/2) * zoomRatio),
                                   y: camY + ((pos.y + pos.height/2) * zoomRatio)
                               };

                               if ((game.settings.quality === 'auto' || game.settings.quality === 'high') && !entity.currentTerrain) {
                                   if (isOnScreen(newPos, 800) && (!part.lastTrackPos || Math.distanceBetween(part.lastTrackPos, newPos) >= 20) && Math.distanceBetween(entity, newPos) <= 200) {
                                       let rot = entity.rotation;
                                       if (part.lastTrackPos) {
                                           rot = Math.angleBetween(part.lastTrackPos, newPos);
                                       }

                                       let alpha = 0.3;
                                       if (vehicleInfo) {
                                           alpha += (vehicleInfo.properties.mass - 20) / 20;
                                       }

                                       if (alpha > 0.5) {
                                           alpha = 0.5;
                                       } else if (alpha < 0.1) {
                                           alpha = 0.1;
                                       }

                                       if (part.lastTrackPos) {
                                           createEffect('tracktrail', newPos.x, newPos.y, entity.z, 55, 55, {
                                               alpha: alpha,
                                               rotation: rot + Math.PI / 2
                                           });
                                       }

                                       part.lastTrackPos = newPos;
                                   }
                               }
                           }
                       }
                   }
               }

               if (!boosting && boostSound && boostSound.sound) {
                   boostSound.volume -= 0.005;
                   boostSound.sound.volume(boostSound.volume, boostSound.id);
                   if (boostSound.volume <= 0) {
                       boostSound = null;
                   }
               }

               if (parts['Turret']) {
                   if (entity.turretRotation) {
                       for (let i=0; i<parts['Turret'].length; i++) {
                           parts['Turret'][i].rotation = (entity.turretRotation - entity.rotation) + Math.PI / 2;
                       }
                   }
               }

               if (parts['Wheels']) {
                   if (entity.wheelRotation) {
                       for (let i=0; i<parts['Wheels'].length; i++) {
                           let group = parts['Wheels'][i];
                           if (group.properties && group.properties.canTurn) {
                               group.rotation = entity.wheelRotation;
                           }
                       }
                   }
               }

               let speed = Math.magnitude(entity)/5;
               if (entity.currentTerrain && speed + Math.abs(entity.drotation * 22) >= 0.08) {
                   let maxVolume = 0.2;
                   if (entity.currentTerrain.type === 'water') {
                       terrainTimer--;
                       if (terrainTimer <= 0) {
                           terrainTimer = 20;
                           let size = 90 + Math.round(Math.random() * 10);
                           createEffect('water_splash', entity.x + Math.randomInt(-20, 20), entity.y + Math.randomInt(-20, 20), entity.z, size, size);
                       }

                       if (!terrainSound) {
                           terrainSound = soundPlay(sounds.terrain_water, entity, 0.01);
                       }
                   } else if (entity.currentTerrain.type === 'ice') {
                       if (!terrainSound) {
                           terrainSound = soundPlay(sounds.terrain_ice, entity, 0.01);
                       }

                       maxVolume = (speed + Math.abs(entity.drotation * 15)) * 0.4;
                       if (maxVolume > 0.3) {
                           maxVolume = 0.3;
                       }
                   }

                   if (terrainSound) {
                       if (terrainSound.volume < maxVolume) {
                           terrainSound.volume += 0.01;
                       } else {
                           terrainSound.volume = maxVolume;
                       }
                   }
               } else {
                   terrainTimer = 40;

                   if (terrainSound) {
                       if (terrainSound.volume > 0.05) {
                           terrainSound.volume -= 0.01;
                       } else {
                           soundStop(terrainSound);
                           terrainSound = null;
                       }
                   }
               }

               if (terrainSound) {
                   soundUpdate(terrainSound);
               }

               let volume = Math.abs(speed) + Math.abs(entity.drotation * 4);
               if (volume > 0.15) {
                   volume = 0.15;
               }
               if (sounds.tank_track && volume > 0.01) {
                   if (!trackSound) {
                       if (vehicleInfo.properties?.engineType === 'car') {
                           trackSound = soundPlay(sounds.car_roll_loop, entity, volume);
                       } else {
                           trackSound = soundPlay(sounds.tank_track, entity, volume);
                       }
                   } else {
                       trackSound.volume = volume;
                       soundUpdate(trackSound);
                   }
               } else {
                   if (trackSound) {
                       soundStop(trackSound);
                       trackSound = null;
                   }
               }
               if (trackSound && trackSound.stopped) {
                   trackSound = null;
               }

               if (netData.tankType === 'racecar') {
                   if (entity.isDrifting) {
                       if (!driftSound) {
                           driftSound = soundPlay(sounds.car_drift_loop, entity, 0.1);
                       } else {
                           soundUpdate(driftSound);
                       }
                   } else {
                       if (driftSound) {
                           soundStop(driftSound);
                           driftSound = null;
                       }
                   }
                   if (driftSound && driftSound.stopped) {
                       driftSound = null;
                   }
               }

               if (!engineSound && !game.isInMenu && vehicleInfo.properties.engineForce) {
                   if (vehicleInfo.properties?.engineType === 'car') {
                       engineSound = soundPlay(sounds.car_lowgear_loop, entity, 0.05);
                   } else {
                       engineSound = soundPlay(sounds.tank_engine, entity, 0.05);
                   }
               }
               if (engineSound) {
                   let engineRate = Math.abs(speed) * 0.6;
                   if (engineRate > 0.3) {
                       engineRate = 0.3;
                   } else if (engineRate < 0.1) {
                       engineRate = 0.1;
                   } else if (!engineRate) {
                       engineRate = 0.1;
                   }

                   soundUpdate(engineSound);

                   let baseEngineRate = 0.8;
                   if (vehicleInfo && vehicleInfo.properties && vehicleInfo.properties.type) {
                       switch (vehicleInfo.properties.type) {
                           case 'heavy':
                               baseEngineRate = 0.65;
                               break;
                           case 'light':
                               baseEngineRate = 0.95;
                               break;
                       }
                   }

                   try {
                       engineSound.sound.rate(baseEngineRate + engineRate, engineSound.id);
                   } catch (e) {
                       console.error('Engine sound error:', e);
                   }
               }
               if (engineSound && engineSound.stopped) {
                   engineSound = null;
               }

               if (repairSound) {
                   soundUpdate(repairSound);
               }

               if (entity.turret) {
                   let turretDiff = Math.abs(entity.turret.rotation - lastTurretRotation);
                   lastTurretRotation = entity.turret.rotation;
                   if (turretDiff > 0.005) {
                       let turretVolume = turretDiff * 4;
                       if (turretVolume > 0.05) {
                           turretVolume = 0.05;
                       }
                       if (sounds.tank_turret && turretVolume > 0.01) {
                           if (!turretSound) {
                               turretSound = soundPlay(sounds.tank_turret, entity, turretVolume, true);
                           } else {
                               turretSound.volume = turretVolume;
                               soundUpdate(turretSound);
                           }
                       } else {
                           if (turretSound) {
                               soundStop(turretSound);
                               turretSound = null;
                           }
                       }
                   } else {
                       if (turretSound) {
                           soundStop(turretSound);
                           turretSound = null;
                       }
                   }
                   if (turretSound && turretSound.stopped) {
                       turretSound = null;
                   }
               }
           } else if (subtype === 'colossus') {
               let speed = Math.magnitude(entity)/8;
               if (!speed) {
                   speed = 0;
               }
               frame += speed;
               if (Math.floor(frame) >= 2) {
                   frame = 0;
                   frameY++;
                   if (frameY >= 2) {
                       frameY = 0;
                   }
               }
               sprite.texture = spritesheet[Math.floor(frame)][Math.floor(frameY)];
           }

           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
               if (!entity.netData.alive && Date.now() > entity.killTime + (400 * timeScale) && Date.now() < entity.killTime + 60000) {
                   smokeTime--;
                   if (smokeTime <= 0) {
                       smokeTime = 6;
                       let angle = (Math.PI * 2) * Math.random();
                       let size = 50 + Math.round(Math.random() * 10);
                       let speed = 0.25 + (Math.random() * 0.2);
                       createEffect('smoke', entity.x, entity.y, entity.z, size, size, {
                           dx: Math.cos(angle) * (speed * Math.random()),
                           dy: Math.sin(angle) * (speed * Math.random()),
                           tint: 0x2b2b2b
                       });
                   }
               }
           }

           oldTick(delta);

           if (entity.chat && entity.chat.visible) {
               if (Date.now() >= entity.chat.removeChat) {
                   entity.chat.removeChat = null;
                   entity.chat.visible = false;
               }
           }

           if (guiSpriteContainer) {
               guiSpriteContainer.visible = entity.isVisible() && entity.netData.alive;
               if (guiSpriteContainer.visible) {
                   guiSpriteContainer.x = entity.x;
                   if (game.roundEnded) {
                       guiSpriteContainer.y = entity.y + 80;
                       emoteBase.position.y = -125 - 80;
                   } else {
                       guiSpriteContainer.y = entity.y - 30;
                       emoteBase.position.y = -125;
                   }
               }
           }
       };

       entity.drifting = (isDrifting) => {
           entity.isDrifting = isDrifting;
       };

       entity.getCurrentTurretPosition = () => {
           if (entity.turret) {
               let zoomRatio = WIDTH/(WIDTH*camera.zoom);
               return {
                   x: (camera.x + entity.turret.worldTransform.tx) * zoomRatio,
                   y: (camera.y + entity.turret.worldTransform.ty) * zoomRatio
               };
           }
           return {
               x: entity.x,
               y: entity.y
           };
       };

       entity.stopSounds = function() {
           if (trackSound) {
               soundStop(trackSound);
               trackSound = null;
           }
           if (driftSound) {
               soundStop(driftSound);
               driftSound = null;
           }
           if (engineSound) {
               soundStop(engineSound);
               engineSound = null;
           }
           if (turretSound) {
               soundStop(turretSound);
               turretSound = null;
           }
           if (repairSound) {
               soundStop(repairSound);
               repairSound = null;
           }
           if (boostSound) {
               soundStop(boostSound);
               boostSound = null;
           }
           if (terrainSound) {
               soundStop(terrainSound);
               terrainSound = null;
           }
       };

       entity.setDead = function() {
           entity.netData.alive = false;
           let keys = Object.keys(parts);
           for (let i=0; i<keys.length; i++) {
               let group = parts[keys[i]];
               for (let k=0; k<group.length; k++) {
                   let parent = group[k];
                   if (parent.parts) {
                       for (let j = 0; j < parent.parts.length; j++) {
                           let part = parent.parts[j];
                           part.tint = 0x444444;
                       }
                   }
               }
           }
           if (entity.ramEffect) {
               entity.ramEffect.visible = false;
           }
       };

       if (entity.netData && !entity.netData.alive) {
           entity.setDead();
       }

       entity.explode = function() {
           entity.exploded = true;
           soundPlay(sounds['explosion_bomb' + (parseInt(Math.random() * 3) + 1)], entity, 0.35);

           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
               let debrisAmount = 10 + Math.round(Math.random() * 10);
               for (let i = 0; i < debrisAmount; i++) {
                   let angle = Math.random() * Math.PI * 2;
                   let size = 20 + Math.round(Math.random() * 10);
                   createEffect('debris', entity.x, entity.y, entity.z, size, size, {
                       dx: Math.cos(angle) * (50 * Math.random()),
                       dy: Math.sin(angle) * (50 * Math.random())
                   });
               }
           }

           createEffect('wreck_explosion', entity.x, entity.y, entity.z, 200, 200, {
               rotation: entity.rotation + (Math.random() >= 0.5 ? 0 : Math.PI)
           });
           //createEffect('explosion', entity.x, entity.y, entity.z, 256, 256);
           createEffect('scorch', entity.x, entity.y, entity.z, 128, 128);
       };

       entity.onRam = function() {
           soundPlay(sounds['impact_tank' + (parseInt(Math.random() * 3) + 1)], entity, 0.75);
           if (entity.ramEffect) {
               entity.ramEffect.frame = 0;
               entity.ramEffect.frameY = 0;
               entity.ramEffect.visible = true;
           }
       };

       entity.setRepairing = function(repairing) {
           entity.netData.repairing = repairing;
           if (entity.repairIcon) {
               entity.repairIcon.visible = entity.netData.repairing;
           }
           if (entity.netData.repairing) {
               if (!repairSound) {
                   if (player === entity) {
                       repairSound = soundPlay(sounds.tank_repairing, entity, 0.05);
                   } else {
                       repairSound = soundPlay(sounds.tank_repairing_distant, entity, 0.05);
                   }
               }
           } else {
               if (repairSound) {
                   repairSound = null;
               }
               entity.netData.health = 100;
           }
       };

       entity.repair = function(newHealth) {
           entity.netData.health = Math.round(newHealth);
           if (player === entity) {
               soundPlay(sounds['repair_kit'], entity, 0.2);
           }
       };

       if (entity.netData && entity.netData.repairing) {
           entity.setRepairing(entity.netData.repairing);
       }

       entity.oldHealth = entity.netData.health;
       entity.onDamage = function(newHealth) {
           entity.netData.health = Math.round(newHealth);
       };

       entity.updateTerrain = (type) => {
           entity.currentTerrain = type;
       };

       let boostSound = null;
       entity.boost = function(maxBoostTime) {
           if (player === entity) {
               boostSound = soundPlay(sounds['boost'], entity, 0.2);
           } else {
               boostSound = soundPlay(sounds['boost_distant'], entity, 0.2);
           }
           entity.nextBoostTime = Date.now() + maxBoostTime;
           entity.maxBoostTime = maxBoostTime;
           boosting = true;

           if (parts['Tracks']) {
               for (let i=0; i<parts['Tracks'].length; i++) {
                   let parent = parts['Tracks'][i];
                   for (let j=0; j<parent.parts.length; j++) {
                       let part = parent.parts[j];
                       if (part.boost) {
                           part.boost.visible = true;
                       }
                   }
               }
           }
       };

       entity.endBoost = function() {
           boosting = false;
           if (parts['Tracks']) {
               for (let i=0; i<parts['Tracks'].length; i++) {
                   let parent = parts['Tracks'][i];
                   for (let j=0; j<parent.parts.length; j++) {
                       let part = parent.parts[j];
                       if (part.boost) {
                           part.boost.visible = false;
                       }
                   }
               }
           }
       };

       entity.kill = function(data) {
           boosting = false;
           if (parts['Tracks']) {
               for (let i=0; i<parts['Tracks'].length; i++) {
                   let parent = parts['Tracks'][i];
                   for (let j=0; j<parent.parts.length; j++) {
                       let part = parent.parts[j];
                       if (part.boost) {
                           part.boost.visible = false;
                       }
                   }
               }
           }
           entity.killTime = Date.now();

           if (entity.turretLight) {
               app.cstage.removeChild(entity.turretLight);
               app.cstage.removeChild(entity.turretLight2);
               delete entity.turretLight;
           }

           entity.stopSounds();
           soundPlay(sounds['explosion' + (parseInt(Math.random() * 3) + 1)], entity, 0.3);

           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
               let debrisAmount = 10 + Math.round(Math.random() * 10);
               for (let i = 0; i < debrisAmount; i++) {
                   let angle = Math.random() * Math.PI * 2;
                   let size = 20 + Math.round(Math.random() * 10);
                   createEffect('debris', entity.x, entity.y, entity.z, size, size, {
                       dx: Math.cos(angle) * (50 * Math.random()),
                       dy: Math.sin(angle) * (50 * Math.random())
                   });
               }
           }

           entity.setDead();

           if (data.hitData && data.hitData.position && data.hitData.angle !== undefined) {
               createEffect('kill', entity.x, entity.y, entity.z, 256, 256, {
                   rotation: Math.PI*Math.random()*2
               });
           } else {
               createEffect('explosion', entity.x, entity.y, entity.z, 256, 256);
           }
           createEffect('scorch', entity.x, entity.y, entity.z, 256, 256);

           if (player && entity === player && player.canControl) {
               game.onPlayerDead(data);
           }
       };

       entity.changeName = function (newName) {
           if (newName && newName.name) {
               entity.netData.name = newName.name;
               entity.netData.isDev = newName.isDev;
           }
       };

       entity.lastFireTime = Date.now();
       entity.fire = function(paths) {
           entity.netData.loaded = false;
           nextLoadSoundTime = Date.now() + 250;
           currentLoadSound = -1;
           entity.lastFireTime = Date.now();

           let shellSizeMod = 1;
           if (vehicleInfo && vehicleInfo.properties && vehicleInfo.properties.damageMod) {
               shellSizeMod = vehicleInfo.properties.damageMod;
           }

           // NOTE: this code tries to make sure that the modifier has a maximum and minimum value
           if (shellSizeMod < 0.6) {
               shellSizeMod = 0.6;
           }
           if (shellSizeMod > 1.75) {
               shellSizeMod = 1.75;
           }

           let fireSound;
           if (entity === player) {
               fireSound = soundPlay(sounds['gunshot' + (parseInt(Math.random() * 3) + 1)], entity, 0.3 + (shellSizeMod*0.2));
           } else {
               fireSound = soundPlay(sounds['gunshot_distant'], entity, 0.5 + (shellSizeMod*0.2));
           }

           // NOTE: I would assume this is the actual firing
           createEffect('tank_fire', paths[0].from.x, paths[0].from.y, entity.z, 128, 128, {rotation: entity.rotation + entity.turret.rotation});

           if (fireSound) {
               let soundRate = (((2-shellSizeMod) - 1) * 0.65) + 1;
               if (soundRate < 0.7) {
                   soundRate = 0.7;
               }
               if (soundRate > 1.3) {
                   soundRate = 1.3;
               }
               fireSound.defaultRate = soundRate;
               fireSound.sound.rate(fireSound.defaultRate * (1/timeScale));
           }
           let shell = createEffect('shell', paths[0].from.x, paths[0].from.y, entity.z, 12*shellSizeMod, 22*shellSizeMod, {paths: paths, attacker: entity});
           applyScreenShake(entity.x, entity.y, entity.z, 50);

           if (game.watchingRecording && entity === player && recordingData.bestClip && recordingData.bestClip.followShot && getCurrentRecordingTime() >= recordingData.bestClip.followShot) {
               if (!recordingData.bestClip.victimId || (recordingData.bestClip.victimId && paths[paths.length-1].hitEntityID && parseInt(paths[paths.length-1].hitEntityID) === parseInt(recordingData.bestClip.victimId))) {
                   player = shell;
                   player.canControl = false;
               }
           }
       };

       entity.pingLocation = function(pos) {
           if (player && player.canControl && player.valid && entity.team === player.team && entity.valid) {
               pingLocationSprite = new PIXI.spine.Spine(resources.pingRing.spineData);
               pingLocationSprite.visible = false;
               pingLocationSprite.getZIndex = function () {
                   return -100000;
               };
               app.cstage.addChild(pingLocationSprite);

               pingLocationSprite.startPosition = {
                   x: entity.x,
                   y: entity.y
               };
               pingLocationSprite.nextPosition = pos;
               pingLocationSprite.totalDotDist = 0;
               pingLocationSprite.curDotDist = 0;
               pingLocationSprite.position.x = pingLocationSprite.nextPosition.x;
               pingLocationSprite.position.y = pingLocationSprite.nextPosition.y;
               pingLocationSprite.visible = true;
               pingLocationSprite.pingTime = Date.now();

               pingLocationSprite.state.setAnimation(0, 'animation', true);
               pingLocationSprite.state.tracks[0].listener = {
                   complete: function () {
                       if (Date.now() >= pingLocationSprite.pingTime + pingLifetime) {
                           pingLocationSprite.visible = false;
                       }
                   }
               };

               soundPlay(sounds['ping'], pingLocationSprite.nextPosition, 0.8, false, 1700);

               if (entity.chat) {
                   entity.chat.text = 'Look Here';
                   entity.chat.visible = true;
                   entity.chat.removeChat = Date.now() + 5000;
               }
           }
       };

       entity.reload = function() {
           if (entity === player) {
               soundPlay(sounds['reload_end'], entity, 0.25);
           } else {
               soundPlay(sounds['reload_distant'], entity, 0.3);
           }
           entity.netData.loaded = true;
       };

       entity.onRemove = function () {
           if (entity.guiSpriteContainer) {
               app.cstage.removeChild(entity.guiSpriteContainer);
           }
           if (pingLocationSprite) {
               app.cstage.removeChild(pingLocationSprite);
           }
           entity.stopSounds();

           if (entity.turretLight) {
               app.cstage.removeChild(entity.turretLight);
               app.cstage.removeChild(entity.turretLight2);
               delete entity.turretLight;
           }
       };

       return entity;
   }

   function createActor(serverId, subtype, x, y, z, width, height, team, netData) {
       let entity = createEntity(serverId, 'actor', subtype, x, y, z, team, netData);

       let sprite;
       let texture = resources['survivor'].texture;

       sprite = new PIXI.Sprite(texture);
       sprite.width = Math.abs(width);
       sprite.height = Math.abs(height);
       sprite.anchor.set(0.5);
       entity.sprite = sprite;
       sprite.parentGroup = PIXI.lights.diffuseGroup;
       entity.addChild(sprite);

       entity.spriteNormal = new PIXI.Sprite(resources.normal.texture);
       entity.spriteNormal.width = Math.abs(width);
       entity.spriteNormal.height = Math.abs(height);
       entity.spriteNormal.anchor.set(0.5);
       entity.spriteNormal.parentGroup = PIXI.lights.normalGroup;
       entity.spriteNormal.visible = false;
       entity.addChild(entity.spriteNormal);

       let oldTick = entity.tick;
       entity.tick = function (delta) {


           oldTick(delta);
       };

       entity.onRemove = function () {};

       entity.qualityChanged = function() {
           if (netData && netData.mapProperties && netData.mapProperties.enableShadow && (game.settings.quality === 'auto' || game.settings.quality === 'high')) {
               entity.sprite.filters = [dropShadowFilter];
           } else {
               entity.sprite.filters = [];
           }

           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
               entity.spriteNormal.visible = true;
           } else {
               entity.spriteNormal.visible = false;
           }
       };

       entity.onAssetsLoaded = () => {
           if (entity.netData && entity.netData.asset && resources[entity.netData.asset.texture] && resources[entity.netData.asset.texture].texture) {
               if (entity.netData.asset.tilewidth && entity.netData.asset.tileheight && entity.netData.asset.tilewidth <= resources[entity.netData.asset.texture].texture.width && entity.netData.asset.tileheight <= resources[entity.netData.asset.texture].texture.height) {
                   let spritesheet = loadSpritesheet(resources[entity.netData.asset.texture].texture, entity.netData.asset.tilewidth, entity.netData.asset.tileheight);
                   entity.sprite.texture = spritesheet[entity.netData.asset.tx][entity.netData.asset.ty];
               } else {
                   entity.sprite.texture = resources[entity.netData.asset.texture].texture;
               }
           }
       };
       if (entity.netData.asset && entity.netData.asset.texture && resources[entity.netData.asset.texture] && resources[entity.netData.asset.texture].texture) {
           entity.onAssetsLoaded();
       }

       let currentLoadSound = 0;
       let nextLoadSoundTime = Date.now();
       entity.lastFireTime = Date.now();
       entity.fire = function(paths) {
           entity.netData.loaded = false;
           nextLoadSoundTime = Date.now() + 250;
           currentLoadSound = -1;
           entity.lastFireTime = Date.now();

           let shellSizeMod = 0.4;

           let fireSound;
           if (entity === player) {
               fireSound = soundPlay(sounds['gunshot' + (parseInt(Math.random() * 3) + 1)], entity, 0.3 + (shellSizeMod*0.2));
           } else {
               fireSound = soundPlay(sounds['gunshot_distant'], entity, 0.5 + (shellSizeMod*0.2));
           }

           createEffect('tank_fire', paths[0].from.x, paths[0].from.y, entity.z, 128, 128, {rotation: entity.rotation + Math.PI/2});

           if (fireSound) {
               let soundRate = (((2-shellSizeMod) - 1) * 0.65) + 1;
               if (soundRate < 0.7) {
                   soundRate = 0.7;
               }
               if (soundRate > 1.3) {
                   soundRate = 1.3;
               }
               fireSound.defaultRate = soundRate;
               fireSound.sound.rate(fireSound.defaultRate * (1/timeScale));
           }
           let shell = createEffect('shell', paths[0].from.x, paths[0].from.y, entity.z, 12*shellSizeMod, 22*shellSizeMod, {paths: paths, attacker: entity});
           applyScreenShake(entity.x, entity.y, entity.z, 50);

           if (game.watchingRecording && entity === player && recordingData.bestClip && recordingData.bestClip.followShot && getCurrentRecordingTime() >= recordingData.bestClip.followShot) {
               if (!recordingData.bestClip.victimId || (recordingData.bestClip.victimId && paths[paths.length-1].hitEntityID && parseInt(paths[paths.length-1].hitEntityID) === parseInt(recordingData.bestClip.victimId))) {
                   player = shell;
                   player.canControl = false;
               }
           }
       };

       entity.getZIndex = function () {
           return 5000;
       };

       return entity;
   }

   function createStaticObject(serverId, subtype, x, y, z, width, height, team, netData) {
       let entity = createEntity(serverId, 'static_object', subtype, x, y, z, team, netData);

       let sprite;
       let texture = resources['wall'].texture;
       if (netData.mapProperties.polygon) {
           let polygonsData = netData.mapProperties.polygon[0].points.split(' ');
           let vertices = [];
           let uvs = [];
           let indexes = [];
           for (let i=0; i<polygonsData.length; i++) {
               let p = polygonsData[i].split(',');
               let px = parseFloat(p[0]);
               let py = parseFloat(p[1]);
               vertices.push(px);
               vertices.push(py);
               uvs.push(0);
               uvs.push(0);
           }

           if (polygonsData.length === 3) {
               indexes = [0, 1, 2];
               uvs = [0, 0, 1, 0, 1, 1];
           } else if (polygonsData.length === 4) {
               indexes = [0, 1, 2, 0, 2, 3];
               uvs = [0, 0, 1, 0, 1, 1, 0, 1];
           } else if (polygonsData.length === 5) {
               indexes = [0, 1, 2, 0, 2, 3, 0, 3, 4];
               uvs = [0, 0, 1, 0, 1, 1, 0, 0.5, 0, 1];
           } else if (polygonsData.length === 6) {
               indexes = [0, 1, 2, 0, 2, 3, 0, 3, 4, 0, 4, 5];
               uvs = [0, 0, 1, 0, 1, 1, 0, 0.4, 0, 0.8, 0, 1];
           } else {
               console.error('Polygon not supported:', polygonsData.length);
               entity.remove();
           }
           let geometry = new PIXI.Geometry();
           geometry.addAttribute('positions', vertices);
           geometry.addAttribute('uvs', uvs);
           geometry.addIndex(indexes);

           let meshMaterial = new PIXI.MeshMaterial(texture);
           sprite = new PIXI.Mesh(geometry, meshMaterial, undefined, PIXI.DRAW_MODES.TRIANGLES);
           entity.sprite = sprite;
           sprite.parentGroup = PIXI.lights.diffuseGroup;
           entity.addChild(sprite);
       } else {
           if (netData.asset) {
               sprite = new PIXI.Sprite(texture);
           } else {
               sprite = new PIXI.TilingSprite(texture);
           }
           sprite.width = Math.abs(width);
           sprite.height = Math.abs(height);
           let scalex = 1;
           let scaley = 1;
           if (width < 0) {
               scalex = -1;
           }
           if (height < 0) {
               scaley = -1;
           }
           sprite.scale.set(scalex, scaley);
           sprite.anchor.set(0.5);
           entity.sprite = sprite;
           sprite.parentGroup = PIXI.lights.diffuseGroup;
           entity.addChild(sprite);
       }

       entity.spriteNormal = new PIXI.Sprite(resources.normal.texture);
       entity.spriteNormal.width = Math.abs(width);
       entity.spriteNormal.height = Math.abs(height);
       entity.spriteNormal.anchor.set(0.5);
       entity.spriteNormal.parentGroup = PIXI.lights.normalGroup;
       entity.spriteNormal.visible = false;
       entity.addChild(entity.spriteNormal);

       entity.tick = function (delta) {};

       entity.onRemove = function () {};

       entity.qualityChanged = function() {
           if (netData && netData.mapProperties && netData.mapProperties.enableShadow && (game.settings.quality === 'auto' || game.settings.quality === 'high')) {
               entity.sprite.filters = [dropShadowFilter];
           } else {
               entity.sprite.filters = [];
           }

           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
               entity.spriteNormal.visible = true;
           } else {
               entity.spriteNormal.visible = false;
           }
       };

       entity.onAssetsLoaded = () => {
           if (entity.netData && entity.netData.asset && resources[entity.netData.asset.texture] && resources[entity.netData.asset.texture].texture) {
               if (entity.netData.asset.tilewidth && entity.netData.asset.tileheight && entity.netData.asset.tilewidth <= resources[entity.netData.asset.texture].texture.width && entity.netData.asset.tileheight <= resources[entity.netData.asset.texture].texture.height) {
                   let spritesheet = loadSpritesheet(resources[entity.netData.asset.texture].texture, entity.netData.asset.tilewidth, entity.netData.asset.tileheight);
                   entity.sprite.texture = spritesheet[entity.netData.asset.tx][entity.netData.asset.ty];
               } else {
                   entity.sprite.texture = resources[entity.netData.asset.texture].texture;
               }
           }
       };
       if (entity.netData.asset && entity.netData.asset.texture && resources[entity.netData.asset.texture] && resources[entity.netData.asset.texture].texture) {
           entity.onAssetsLoaded();
       }

       entity.getZIndex = function () {
           return (netData && netData.mapProperties && netData.mapProperties.zIndex) ? netData.mapProperties.zIndex : 10000;
       };

       return entity;
   }

   function createObject(serverId, subtype, x, y, z, width, height, team, netData) {
       let entity = createEntity(serverId, 'object', subtype, x, y, z, team, netData);

       let zOffset = 0;
       let sprite = new PIXI.Sprite(resources['wall'].texture);
       if (subtype !== 'capture_point') {
           entity.capturePercentage = 0;
           sprite.width = width;
           sprite.height = height;
           sprite.anchor.set(0.5);
           entity.sprite = sprite;
           entity.addChild(sprite);

           entity.sprite.parentGroup = PIXI.lights.diffuseGroup;
       }

       let spritesheet = null;
       let frame = 0;
       let frameY = 0;
       if (subtype === 'flag') {
           zOffset = -250;

           if (netData.type === 'tutorial') {
               spritesheet = loadSpritesheet(resources['tutorial_flag'].texture, 128, 128);
               sprite.texture = spritesheet[0][0];
           } else {
               spritesheet = loadSpritesheet(resources['ctf_flag'].texture, 128, 128);
               sprite.texture = spritesheet[0][0];
           }

           entity.updateObjectiveArrow();
           entity.hasShadow = true;
       } else if (subtype === 'capture_point') {
           entity.team = netData.currentCapturedTeam;
           sprite = new PIXI.Graphics();
           sprite.getZIndex = function () {
               return 10000;
           };
           app.cstage.addChild(sprite);

           sprite.parentGroup = PIXI.lights.diffuseGroup;

           entity.updateObjectiveArrow();
           entity.hasShadow = true;
       } else if (subtype === 'dynamic_object') {
           zOffset = 250;
           if (entity.netData.mapProperties && entity.netData.mapProperties.zOffset) {
               zOffset = entity.netData.mapProperties.zOffset;
           }
           entity.onAssetsLoaded = () => {
               if (entity.netData.asset.tilewidth && entity.netData.asset.tileheight) {
                   spritesheet = loadSpritesheet(resources[entity.netData.asset.texture].texture, entity.netData.asset.tilewidth, entity.netData.asset.tileheight);
                   sprite.texture = spritesheet[0][0];

                   if (entity.netData.mapProperties.fadeFrameX) {
                       entity.fadeSprite = new PIXI.Sprite(spritesheet[entity.netData.mapProperties.fadeFrameX][0]);
                       entity.fadeSprite.alpha = 1;
                       entity.fadeSprite.width = width;
                       entity.fadeSprite.height = height;
                       entity.fadeSprite.anchor.set(0.5);
                       entity.addChild(entity.fadeSprite);

                       entity.fadeSprite.parentGroup = PIXI.lights.diffuseGroup;
                   }
               } else {
                   entity.sprite.texture = resources[entity.netData.asset.texture].texture;
               }

               entity.sprite.visible = true;
           };

           if (entity.netData.mapProperties) {
               if (entity.netData.mapProperties.pickupType === 'health') {
                   let halo = new PIXI.Sprite(resources['repairkit_halo'].texture);
                   halo.width = 80;
                   halo.height = 80;
                   halo.anchor.set(0.5);
                   entity.addChild(halo);

                   halo.parentGroup = PIXI.lights.diffuseGroup;
               }

               if (entity.netData.mapProperties.enableArrowPointer) {
                   entity.updateObjectiveArrow();
               }
           }

           entity.hasShadow = true;
           if (entity.netData.asset && resources[entity.netData.asset.texture] && resources[entity.netData.asset.texture].texture) {
               entity.onAssetsLoaded();
           } else {
               entity.sprite.visible = false;
           }
       } else if (subtype === 'wall_deployable') {
           zOffset = -50;
           spritesheet = loadSpritesheet(resources['wall_deployable'].texture, 128, 64);
           sprite.texture = spritesheet[0][0];
           sprite.position.y = height/3;
           entity.hasShadow = true;
       } else if (subtype === 'grenade') {
           zOffset = -10000;
           if (entity.netData && entity.netData.subtype === 'smoke') {
               let smokesheet = loadSpritesheet(resources['smoke_grenade'].texture, 32, 16);
               if (lastControllablePlayer && entity.team === lastControllablePlayer.team) {
                   sprite.texture = smokesheet[0][1];
               } else {
                   sprite.texture = smokesheet[0][0];
               }
           } else {
               spritesheet = loadSpritesheet(resources['grenade'].texture, 64, 64);
               sprite.texture = spritesheet[2][1];
               if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                   entity.light = entity.createLight(0xCC0000, 0.35);
                   entity.light.visible = false;
               }
           }
           soundPlay(sounds['grenade_launch'], entity, 0.35);
       } else if (subtype === 'landmine') {
           zOffset = 100;
           spritesheet = loadSpritesheet(resources['mine'].texture, 64, 64);
           if (lastControllablePlayer && entity.team === lastControllablePlayer.team) {
               frameY = 0;
           } else {
               frameY = 1;
           }
           sprite.texture = spritesheet[Math.floor(frame)][Math.floor(frameY)];
       } else if (subtype === 'bomb') {
           zOffset = -10000;
           spritesheet = loadSpritesheet(resources['bomb_shadow'].texture, 32, 64);
           sprite.texture = spritesheet[0][0];
           sprite.scale.set(0.25);
           soundPlay(sounds['airstrike_fall'], entity, 0.2);
       } else if (subtype === 'artillery') {
           zOffset = -10000;
           sprite.texture = resources['artillery_shadow'].texture;
           sprite.scale.set(0.05);
           sprite.visible = false;
           soundPlay(sounds['artillery_distant' + (parseInt(Math.random() * 3) + 1)], entity, 0.25);
           entity.fireTime = Date.now();
       } else if (subtype === 'airstrike') {
           zOffset = -10000;
           sprite.texture = resources['airstrike_shadow'].texture;

           let p1 = new PIXI.Sprite(resources['airstrike_shadow'].texture);
           p1.position.x = -70;
           p1.position.y = 200;
           p1.width = width;
           p1.height = height;
           p1.anchor.set(0.5);
           entity.addChild(p1);

           let p2 = new PIXI.Sprite(resources['airstrike_shadow'].texture);
           p2.position.x = 70;
           p2.position.y = 350;
           p2.width = width;
           p2.height = height;
           p2.anchor.set(0.5);
           entity.addChild(p2);
       } else if (subtype === 'light') {
           entity.removeChild(entity.sprite);
           delete entity.sprite;
           entity.createLight(parseInt('0x' + entity.netData.mapProperties.color.replace('#', '')), parseFloat(entity.netData.mapProperties.brightness));
       }

       let oldTick = entity.tick;
       if (subtype === 'dynamic_object') {
           frame = netData.mapProperties.frameX ? netData.mapProperties.frameX : 0;
           frameY = netData.mapProperties.frameY ? netData.mapProperties.frameY : 0;
           let frameMaxX = 8;
           let frameMaxY = 1;
           entity.tick = function(delta) {
               if (spritesheet) {
                   if (netData.mapProperties.damageFrameX) {
                       let percent = 1-(entity.netData.health/netData.mapProperties.health);
                       frame = Math.round(netData.mapProperties.damageFrameX*percent);
                       if (frame > netData.mapProperties.damageFrameX) {
                           frame = netData.mapProperties.damageFrameX;
                       }
                   }
                   if (netData.mapProperties.damageFrameY) {
                       let percent = 1-(entity.netData.health/netData.mapProperties.health);
                       frameY = Math.round(netData.mapProperties.damageFrameY*percent);
                       if (frameY > netData.mapProperties.damageFrameY) {
                           frameY = netData.mapProperties.damageFrameY;
                       }
                   }
                   if (netData.mapProperties.animateMovement && entity.netData.animationState === 'default') {
                       let animSpeed = Math.magnitude(entity) * netData.mapProperties.animateMovement;
                       if (animSpeed >= frameMaxX/2) {
                           animSpeed = frameMaxX/2;
                       }
                       if (animSpeed >= 0.01) {
                           frame += animSpeed;
                       }
                       if (Math.floor(frame) >= frameMaxX) {
                           frame -= frameMaxX;

                           frameY++;
                           if (Math.floor(frameY) > frameMaxY) {
                               frameY = 0;
                           }
                       }
                   }
                   if (frame < 0) {
                       frame = 0;
                   }
                   if (frameY < 0) {
                       frameY = 0;
                   }
                   if (spritesheet[Math.floor(frame)] && spritesheet[Math.floor(frame)][Math.floor(frameY)]) {
                       sprite.texture = spritesheet[Math.floor(frame)][Math.floor(frameY)];
                   }
               }

               if (entity.fadeSprite && entity.fadeSprite.alpha > 0) {
                   entity.fadeSprite.alpha -= 0.00045;
               }

               if (netData.mapProperties.enableFireOnDamaged) {
                   let damagePercent = 1-(entity.netData.health/netData.mapProperties.health);
                   if (damagePercent >= 0.2) {
                       if (!entity.lastFireEffect || !entity.lastFireEffect.valid || damagePercent-entity.lastFireDamagePercentage >= 0.20) {
                           if (entity.lastFireEffect && entity.lastFireEffect.remove) {
                               entity.lastFireEffect.remove();
                           }

                           let size = 60 * ((1+damagePercent) * 1.5);
                           entity.lastFireEffect = createEffect('fire', entity.x, entity.y, entity.z, size, size);
                           entity.lastFireDamagePercentage = damagePercent;
                       }
                   }
               }

               if (netData.mapProperties.effect) {
                   switch (netData.mapProperties.effect) {
                       case 'burning':
                           if (!entity.lastFireEffect) {
                               let size = 70 + Math.round(Math.random() * 12);
                               entity.lastFireEffect = createEffect('fire', entity.x, entity.y, entity.z, size, size);
                           } else {
                               entity.lastFireEffect.x = entity.x;
                               entity.lastFireEffect.y = entity.y;
                           }
                           break;
                   }
               }

               oldTick(delta);
           };

           entity.onDamage = function(health) {
               entity.netData.health = health;
           };
       } else if (subtype === 'flag') {
           entity.tick = function(delta) {
               if (netData.type === 'tutorial') {
                   frame += 0.2;
                   if (Math.floor(frame) >= 4) {
                       frame = 0;
                       frameY++;
                       if (frameY >= 2) {
                           frameY = 0;
                       }
                   }
                   sprite.texture = spritesheet[Math.floor(frame)][Math.floor(frameY)];
               } else {
                   let yOffset = 0;
                   if (lastControllablePlayer && entity.team === lastControllablePlayer.team) {
                       yOffset = 0;
                   } else {
                       yOffset = 2;
                   }
                   frame += 0.2;
                   if (Math.floor(frame) >= 4) {
                       frame = 0;
                       frameY++;
                       if (frameY >= 2) {
                           frameY = 0;
                       }
                   }
                   sprite.texture = spritesheet[Math.floor(frame)][yOffset + Math.floor(frameY)];
               }

               oldTick(delta);
           };
       } else if (subtype === 'capture_point') {
           entity.tick = function (delta) {
               entity.team = entity.netData.currentCapturedTeam;

               let normalizedPercentage = (entity.capturePercentage/100.0);
               if (normalizedPercentage < 0) {
                   normalizedPercentage = 0;
               } else if (normalizedPercentage > 1) {
                   normalizedPercentage = 1;
               }

               sprite.clear();
               let color = (lastControllablePlayer && lastControllablePlayer.team === entity.team) ? COLOR_FRIENDLY : COLOR_ENEMY;
               sprite.beginFill(color);
               let innerRadius = 120;
               let outerRadius = 175;
               let startArc = 0;
               let endArc = normalizedPercentage * (Math.PI*2);
               sprite.arc(x, y, innerRadius, endArc-(Math.PI/2), startArc-(Math.PI/2), true);
               sprite.arc(x, y, outerRadius, startArc-(Math.PI/2), endArc-(Math.PI/2), false);
               sprite.finishPoly();
               sprite.endFill();

               if (lastControllablePlayer && lastControllablePlayer.team === entity.team && normalizedPercentage < 1) {
                   if (entity.arrow && entity.arrow.icon && !entity.arrow.contested) {
                       entity.arrow.contested = new PIXI.Sprite(resources['objective_icon_contested'].texture);
                       entity.arrow.contested.position.x = -1;
                       entity.arrow.contested.position.y = 6;
                       entity.arrow.contested.anchor.set(0.5);
                       entity.arrow.icon.addChild(entity.arrow.contested);
                   }
               } else if (entity.arrow && entity.arrow.icon && entity.arrow.contested) {
                   entity.arrow.icon.removeChild(entity.arrow.contested);
                   delete entity.arrow.contested;
               }

               if (guiContainer && guiContainer.roundIndicators && entity.netData.index !== undefined) {
                   let indicator = guiContainer.roundIndicators[entity.netData.index];
                   if (indicator) {
                       indicator.visible = entity.team !== -1;
                       indicator.alpha = normalizedPercentage;
                       if (entity.capturePercentage >= 100) {
                           if (lastControllablePlayer && lastControllablePlayer.team === entity.team) {
                               indicator.texture = guiRoundIndicatorSpritesheet[0][0];
                           } else {
                               indicator.texture = guiRoundIndicatorSpritesheet[1][0];
                           }
                       } else {
                           if (lastControllablePlayer && lastControllablePlayer.team === entity.team) {
                               indicator.texture = guiRoundIndicatorSpritesheet[0][1];
                           } else {
                               indicator.texture = guiRoundIndicatorSpritesheet[1][1];
                           }
                       }
                   }
               }

               oldTick(delta);
           };

           entity.updateCurrentCapturedTeam = (currentCapturedTeam) => {
               entity.netData.currentCapturedTeam = currentCapturedTeam;
           };
       } else if (subtype === 'wall_deployable') {
           entity.tick = function (delta) {
               frame += 0.15 * (1/timeScale);
               if (Math.floor(frame) >= 15) {
                   frame = 15;
               }
               sprite.texture = spritesheet[0][Math.floor(frame)];

               oldTick(delta);
           };
       } else if (subtype === 'landmine') {
           entity.tick = function (delta) {
               frame += 0.05 * (1/timeScale);
               if (Math.floor(frame) >= 2) {
                   frame = 0;
               }
               sprite.texture = spritesheet[Math.floor(frame)][frameY];

               oldTick(delta);
           };
       } else if (subtype === 'grenade') {
           let flying = true;
           let beepChange = Date.now();
           let maxFlyTime = 2000;
           let stopFlying = Date.now() + maxFlyTime;
           entity.tick = function(delta) {
               if (flying) {
                   let percent = 1 - ((stopFlying-Date.now())/maxFlyTime);
                   let scaleMod = 0.95;
                   if (percent < 0.5) {
                       entity.scale.set(1 + ((percent) * scaleMod));
                   } else {
                       entity.scale.set(1 + ((0.5 - (percent-0.5)) * scaleMod));
                   }

                   if (entity.light) {
                       entity.light.visible = (frameY === 0 && Math.floor(frame) === 3) || (frameY === 1 && Math.floor(frame) === 0);
                   }

                   frame += 0.2;
                   if ((frameY === 0 && Math.floor(frame) >= 4) || (frameY === 1 && Math.floor(frame) >= 3)) {
                       frame = 0;
                       frameY++;
                       if (frameY >= 2) {
                           frameY = 0;
                       }
                   }

                   if (Date.now() >= stopFlying) {
                       flying = false;
                       entity.hasShadow = true;
                       entity.qualityChanged();
                   }
               } else {
                   frameY = 1;

                   if (Date.now() >= beepChange) {
                       if (frame === 2) {
                           frame = 3;
                           beepChange = Date.now() + 250;
                           if (entity.light) {
                               entity.light.visible = true;
                           }
                       } else {
                           frame = 2;
                           beepChange = Date.now() + 250;
                           if (entity.light) {
                               entity.light.visible = false;
                           }
                       }
                   }
               }

               if (spritesheet) {
                   sprite.texture = spritesheet[Math.floor(frame)][Math.floor(frameY)];
               }

               /*
               if (lastControllablePlayer && entity.netData && entity.netData.alive && !game.watchingRecording && !game.isInMenu && !game.roundEnded) {
                   if (entity === lastControllablePlayer) {
                       entity.filters = [vehiclePlayerOutlineFilter];
                   } else {
                       if (entity.team === lastControllablePlayer.team) {
                           entity.filters = [vehicleFriendlyOutlineFilter];
                       } else {
                           entity.filters = [vehicleEnemyOutlineFilter];
                       }
                   }
               } else {
                   entity.filters = [];
               }
               */

               if (entity.exploded && entity.netData.subtype === 'smoke') {
                   entity.smokeTime -= (1 / timeScale);
                   if (entity.smokeTime <= 0) {
                       entity.smokeTime = 2;
                       let angle = (Math.PI * 2) * Math.random();
                       let size = 50 + Math.round(Math.random() * 10);
                       let offAngle = entity.rotation;
                       let dist = entity.width * 0.2;
                       let speed = 0.25 + (Math.random() * 0.2);
                       createEffect('smoke', entity.x + (Math.cos(offAngle) * dist), entity.y + (Math.sin(offAngle) * dist), entity.z, size, size, {
                           dx: Math.cos(angle) * (speed * Math.random()),
                           dy: Math.sin(angle) * (speed * Math.random()),
                           tint: (lastControllablePlayer && entity.team === lastControllablePlayer.team) ? COLOR_FRIENDLY_BRIGHT : COLOR_ENEMY_BRIGHT
                       });
                   }
               }

               oldTick(delta);
           };
       } else if (subtype === 'airstrike') {
           let hasPlayedSound = false;
           entity.tick = function (delta) {
               if (!hasPlayedSound && entity.isVisible()) {
                   let so = soundPlay(sounds['airstrike_flyby'], entity, 0.45);
                   if (so) {
                       hasPlayedSound = true;
                   }
               }

               oldTick(delta);
           };
       } else if (subtype === 'bomb') {
           entity.tick = function (delta) {
               frame += 0.07 * (1/timeScale);
               if (Math.floor(frame) >= 4) {
                   frame = 0;
               }
               sprite.texture = spritesheet[Math.floor(frame)][0];

               entity.scale.set(entity.scale.x + 0.005);
               oldTick(delta);
           };
       } else if (subtype === 'artillery') {
           entity.tick = function (delta) {
               if (entity.sprite) {
                   if (entity.sprite.visible) {
                       entity.scale.set(entity.scale.x + (0.01 * (1 / timeScale)));
                       if (Date.now() >= entity.fireTime + 3000 * (1 / timeScale) && !entity.soundPlayed) {
                           entity.soundPlayed = true;
                           soundPlay(sounds['artillery_incoming' + (parseInt(Math.random() * 3) + 1)], entity, 0.25);
                       }
                   } else if (Date.now() >= entity.fireTime + 1000 * (1 / timeScale)) {
                       entity.sprite.visible = true;
                   }
               }
               oldTick(delta);
           };
       }

       entity.playEffect = function(data) {
           if (data && data.sound && sounds[data.sound]) {
               soundPlay(sounds[data.sound], entity, 1);
           }

           if (data && data.effect) {
               if (data.effect === 'ball_kick') {
                   let smokeAmount = 12 + Math.round(Math.random() * 5);
                   for (let i = 0; i < smokeAmount; i++) {
                       let angle = Math.random() * Math.PI * 2;
                       let size = 15 + Math.round(Math.random() * 5);
                       let effect = createEffect('smoke', entity.x, entity.y, entity.z, size, size, {
                           dx: Math.cos(angle) * (1 + (2 * Math.random())),
                           dy: Math.sin(angle) * (1 + (2 * Math.random()))
                       });
                       effect.maxLifetime = 40;
                       effect.lifetime = 40;
                   }
               }
           }

           if (data && data.animationState) {
               entity.netData.animationState = data.animationState;
           }
       };

       entity.qualityChanged = function() {
           if (entity.sprite) {
               if (entity.hasShadow && (game.settings.quality === 'auto' || game.settings.quality === 'high')) {
                   entity.sprite.filters = [dropShadowFilter];
               } else {
                   entity.sprite.filters = [];
               }
           }
       };

       entity.explode = function() {
           if (subtype === 'dynamic_object') {
               switch (entity?.netData?.mapProperties?.deathEffect) {
                   case 'barrier_destroyed':
                       if (lastControllablePlayer && lastControllablePlayer.team === entity.team) {
                           game.playSound('barrier_destroyed_friendly');
                           showAnnouncement('Friendly Barrier Destroyed', null, 5000, COLOR_ENEMY);
                       } else {
                           game.playSound('barrier_destroyed');
                           showAnnouncement('Enemy Barrier Destroyed', null, 5000, COLOR_FRIENDLY);
                       }
                       break;
               }
           }

           entity.exploded = true;
           entity.smokeTime = 0;
           if (entity.netData.subtype === 'smoke') {
               zOffset =- -100;
               soundPlay(sounds['ricochet5'], entity, 0.2);
           } else {
               soundPlay(sounds['explosion_bomb' + (parseInt(Math.random() * 3) + 1)], entity, 0.35);

               if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                   let debrisAmount = 10 + Math.round(Math.random() * 10);
                   for (let i = 0; i < debrisAmount; i++) {
                       let angle = Math.random() * Math.PI * 2;
                       let size = 20 + Math.round(Math.random() * 10);
                       createEffect('debris', entity.x, entity.y, entity.z, size, size, {
                           dx: Math.cos(angle) * (50 * Math.random()),
                           dy: Math.sin(angle) * (50 * Math.random())
                       });
                   }
               }

               createEffect('explosion', entity.x, entity.y, entity.z, 256, 256);
               createEffect('scorch', entity.x, entity.y, entity.z, 128, 128);
           }
       };

       entity.onRemove = function () {
           if (entity.lastFireEffect && entity.lastFireEffect.remove) {
               entity.lastFireEffect.remove();
           }

           if (sprite) {
               try {
                   app.cstage.removeChild(sprite);
               } catch (e) {
                   console.error('Failed to remove sprite', e);
               }
           }
       };

       entity.getZIndex = function () {
           return -entity.y + zOffset;
       };

       return entity;
   }

   let spritesheetCache = {};
   function loadSpritesheet(texture, width, height) {
       if (!spritesheetCache[texture.baseTexture.resource.url]) {
           let spritesheet = [];
           for (let w = 0; w < Math.round(texture.baseTexture.width / width); w++) {
               let arr = [];
               for (let h = 0; h < Math.round(texture.baseTexture.height / height); h++) {
                   let rectangle = new PIXI.Rectangle(w * width, h * height, width, height);
                   let ntex = new PIXI.Texture(PIXI.BaseTexture.from(texture.baseTexture.resource.url, {
                       wrapMode: PIXI.WRAP_MODES.CLAMP
                   }), rectangle);
                   arr.push(ntex);
               }
               spritesheet.push(arr);
           }
           spritesheetCache[texture.baseTexture.resource.url] = spritesheet;
           return spritesheet;
       } else {
           return spritesheetCache[texture.baseTexture.resource.url];
       }
   }

   function createLight(entity, color, minBrightness, maxBrightness, duration) {
       let light = new PIXI.lights.PointLight(color, minBrightness);
       light.createTime = Date.now();
       light.minBrightness = minBrightness;
       entity.addChild(light);

       if (maxBrightness !== undefined && duration !== undefined) {
           light.maxBrightness = maxBrightness;
           light.duration = duration;

           light.tick = () => {
               let timeSinceCreation = Date.now() - light.createTime;
               if (timeSinceCreation >= light.duration * timeScale) {
                   entity.removeChild(light);
                   entity.lights.splice(entity.lights.indexOf(light), 1);
               } else {
                   let halfDuration = (light.duration * timeScale)/2;
                   let durationNormalized = timeSinceCreation/halfDuration;
                   if (timeSinceCreation < halfDuration) {
                       light.brightness =  Math.vallerp(light.minBrightness, light.maxBrightness, durationNormalized);
                   } else {
                       light.brightness =  Math.vallerp(light.maxBrightness, light.minBrightness, durationNormalized-1);
                   }
               }
           };

           entity.lights.push(light);
       }

       return light;
   }

   function createEntity(serverId, type, subtype, x, y, z, team, netData) {
       let entity = new PIXI.Container();
       entity.serverId = serverId;
       entity.subtype = subtype;
       entity.team = team;
       entity.netData = netData;

       entity.filterArea = app.screen;

       entity.states = [];
       entity.x = x;
       entity.y = y;
       entity.z = z;
       entity.lastX = x;
       entity.lastY = y;
       entity.lastRotation = 0;
       entity.dx = 0;
       entity.dy = 0;
       entity.drotation = 0;
       entity.type = type;
       entity.valid = true;
       entity.lights = [];

       let arrowSheet = loadSpritesheet(resources['objective_arrow'].texture, 32, 64);
       let iconSheet = loadSpritesheet(resources['objective_icon'].texture, 32, 32);

       let objectiveIconType = null;
       if (entity?.netData?.mapProperties?.objectType === 'ball' || entity?.netData?.mapProperties?.objectType === 'goal') {
           objectiveIconType = 'tank_ball';
           iconSheet = loadSpritesheet(resources['tank_ball_objective_icon'].texture, 32, 32);
           netData.isObjective = true;
       }

       entity.tick = function (delta) {
           if (ENABLE_DEBUG && entity === player) {
               debugText.text += 'Entities: ' + entities.length + '\n';
               debugText.text += 'Tracked Entities: ' + Object.keys(entityDictionary).length + '\n';
               debugText.text += 'Current Terrain: ' + (entity.currentTerrain ? entity.currentTerrain.type : 'default') + '\n';
               debugText.text += 'States: ' + entity.states.length + '\n';
               debugText.text += 'DX: ' + Math.round(entity.dx) + '\n';
               debugText.text += 'DY: ' + Math.round(entity.dy) + '\n';
               debugText.text += 'Rot: ' + (entity.rotation && entity.rotation.toFixed ? entity.rotation.toFixed(2) : 0) + '\n';
           }

           if (entity.arrow) {
               if (player && player.valid && player.type === 'vehicle' && player.netData.alive && player.canControl && !game.settings.disableHUD) {
                   let arrowDist = Math.distanceBetween(player, entity);
                   if (arrowDist > 500) {
                       let angle = Math.angleBetween(player, entity);
                       entity.arrow.visible = true;
                       entity.arrow.pointer.rotation = angle - Math.PI / 2;
                       entity.arrow.position.x = player.x + Math.cos(angle) * 350;
                       entity.arrow.position.y = player.y + Math.sin(angle) * 350;

                       if (objectiveIconType === 'tank_ball') {
                           if (entity?.netData?.mapProperties?.objectType === 'ball') {
                               entity.arrow.icon.texture = iconSheet[0][0];
                               entity.arrow.pointer.texture = arrowSheet[lastControllablePlayer && lastControllablePlayer.team === entity.team ? 1 : 0][0];
                           } else if (entity?.netData?.mapProperties?.objectType === 'goal') {
                               entity.arrow.visible = player.team !== entity.team;
                               entity.arrow.icon.texture = iconSheet[1][0];
                               entity.arrow.pointer.texture = arrowSheet[0][0];
                           }
                       } else {
                           let sheetX = 0;
                           if (lastControllablePlayer && lastControllablePlayer.team === entity.team) {
                               sheetX = 1;
                           }
                           entity.arrow.icon.texture = iconSheet[sheetX][0];
                           entity.arrow.pointer.texture = arrowSheet[sheetX][0];
                       }

                       if (arrowDist < 600) {
                           entity.arrow.alpha = (arrowDist-500)/100;
                       } else {
                           entity.arrow.alpha = 1;
                       }
                   } else {
                       entity.arrow.visible = false;
                   }
               } else {
                   entity.arrow.visible = false;
               }
           }

           for (let i=0; i<entity.lights.length; i++) {
               let light = entity.lights[i];
               light.tick();
           }

           if (entity.states.length >= 2) {
               let pos1 = entity.states[0];
               let pos2 = entity.states[1];
               if (Math.distanceBetween(pos1, pos2) > 1000) {
                   entity.x = pos2.x;
                   entity.y = pos2.y;
                   entity.rotation = pos1.rotation;
                   if (entity.subtype === 'tank') {
                       entity.turretRotation = pos1.turretRotation;
                   }
                   if (entity.netData && entity.netData.hasWheels) {
                       entity.wheelRotation = pos1.wheelRotation;
                   }
               } else {
                   /*
                   let val;
                   if (game.watchingRecording) {
                       let currentTime = calculateCurrentRecordingTime(pos2.timeScale) - pos1.serverTimeDiff;
                       let targetTime = pos2.time - pos1.time;
                       val = ((currentTime - pos1.time) / targetTime) - 1;
                   } else {
                       let currentTime = Date.now() - pos1.serverTimeDiff;
                       let targetTime = pos2.time - pos1.time;
                       val = ((currentTime - pos1.time) / targetTime) - 1;
                   }
                   */

                   let moddedSnapshotRate = snapshotRate * pos2.timeScale;
                   let val = pos1.val;
                   //TODO: Not sure why this is done here, improve this.
                   val += (delta/moddedSnapshotRate)*0.6;
                   pos1.val = val;

                   if (val >= 0) {
                       if (ENABLE_DEBUG && entity === player) {
                           debugText.text += 'diff: ' + pos1.serverTimeDiff + '\n';
                           debugText.text += 'val: ' + val + '\n';
                       }

                       let intpos = Math.lerp(pos1, pos2, val);
                       entity.x = intpos.x;
                       entity.y = intpos.y;

                       if (Math.abs(pos1.rotation - pos2.rotation) > Math.PI / 2) {
                           pos1.rotation = pos2.rotation;
                           entity.rotation = pos1.rotation;
                       } else {
                           entity.rotation = Math.vallerp(pos1.rotation, pos2.rotation, val);
                       }

                       if (entity.subtype === 'capture_point') {
                           entity.capturePercentage = Math.vallerp(pos1.capturePercentage, pos2.capturePercentage, val);
                       }

                       if (entity.subtype === 'tank') {
                           if (Math.abs(pos1.turretRotation - pos2.turretRotation) > Math.PI*2.5) {
                               pos1.turretRotation = pos2.turretRotation;
                               entity.turretRotation = pos1.turretRotation;
                           } else {
                               if (Math.abs(pos1.turretRotation - pos2.turretRotation) > Math.PI) {
                                   if (pos1.turretRotation > pos2.turretRotation) {
                                       pos2.turretRotation += Math.PI * 2;
                                   } else {
                                       pos1.turretRotation += Math.PI * 2;
                                   }
                               }

                               entity.turretRotation = Math.vallerp(pos1.turretRotation, pos2.turretRotation, val);
                           }

                           /*
                           if (Math.abs(pos1.turretRotation - pos2.turretRotation) > Math.PI / 2) {
                               pos1.turretRotation = pos2.turretRotation;
                               entity.turretRotation = pos1.turretRotation;
                           } else {
                               entity.turretRotation = Math.vallerp(pos1.turretRotation, pos2.turretRotation, val);
                           }
                           */
                       }

                       if (entity.netData && entity.netData.hasWheels) {
                           if (Math.abs(pos1.wheelRotation - pos2.wheelRotation) > Math.PI / 2) {
                               pos1.wheelRotation = pos2.wheelRotation;
                               entity.wheelRotation = pos1.wheelRotation;
                           } else {
                               entity.wheelRotation = Math.vallerp(pos1.wheelRotation, pos2.wheelRotation, val);
                           }
                       }

                       if (val >= 1) {
                           entity.shiftState();
                       }
                   } else {
                       if (ENABLE_DEBUG && entity === player) {
                           debugText.text += 'PACKET LOSS\n';
                       }

                       if (entity.states.length) {
                           entity.x = entity.states[0].x;
                           entity.y = entity.states[0].y;
                           entity.rotation = entity.states[0].rotation;
                           if (entity.subtype === 'tank') {
                               entity.turretRotation = entity.states[0].turretRotation;
                           }
                       }
                   }
               }
           }

           if (entity.sprite) {
               entity.visible = entity.isVisible();
           }

           entity.dx = entity.x - entity.lastX;
           entity.dy = entity.y - entity.lastY;
           entity.drotation = entity.rotation - entity.lastRotation;
           entity.lastX = entity.x;
           entity.lastY = entity.y;
           entity.lastRotation = entity.rotation;
       };

       entity.changeName = function (newName) {
           entity.netData.name = newName.name;
           entity.netData.isDev = newName.isDev;
       };

       entity.qualityChanged = function() {};

       entity.addState = function (state) {
           state.val = 0;
           state.clientTime = Date.now();
           state.timeScale = timeScale;
           if (game.watchingRecording) {
               state.serverTimeDiff = calculateCurrentRecordingTime(timeScale) - state.time;
           } else {
               state.serverTimeDiff = Date.now() - state.time;
           }
           let latestStateTime = 0;
           if (entity.states.length >= 2) {
               latestStateTime = entity.states[entity.states.length-1].time;
           }

           if (state.time > latestStateTime) {
               if (entity.states.length <= 1) {
                   let max = 0;
                   if (max < 400) {
                       max = 400;
                   }
                   let stateDiff = max;
                   if (entity.states[0]) {
                       stateDiff = state.clientTime - entity.states[0].clientTime;
                   }
                   if (stateDiff > max) {
                       entity.states = [{
                           time: state.time - Math.round((1000/6)*1.5),
                           timeScale: timeScale,
                           serverTimeDiff: serverTimeDiff,
                           x: entity.x,
                           y: entity.y,
                           z: entity.z,
                           rotation: entity.rotation,
                           turretRotation: entity.turretRotation
                       }];
                   }
               }

               entity.states.push(state);
           }

           if (entity.states.length > 2) {
               entity.shiftState();
           }
       };

       entity.shiftState = function() {
           entity.states.shift();
           if (entity.states[0]) {
               let dist = Math.distanceBetween(entity, entity.states[0]);
               if (dist < 250) {
                   entity.states[0].x = entity.x;
                   entity.states[0].y = entity.y;
                   entity.states[0].rotation = entity.rotation;
                   if (entity.subtype === 'tank') {
                       entity.states[0].turretRotation = entity.turretRotation;
                   }
               }
           }
       };

       entity.updateObjectiveArrow = function() {
           if (entity.arrow) {
               app.cstage.removeChild(entity.arrow);
           }

           entity.arrow = new PIXI.Container();
           entity.arrow.visible = false;

           entity.arrow.pointer = new PIXI.Sprite(arrowSheet[0][0]);

           entity.arrow.pointer.width = 32;
           entity.arrow.pointer.height = 64;
           entity.arrow.pointer.anchor.set(0.5, 0.25);
           entity.arrow.addChild(entity.arrow.pointer);

           entity.arrow.icon = new PIXI.Sprite(iconSheet[0][0]);
           entity.arrow.icon.width = 40;
           entity.arrow.icon.height = 40;
           entity.arrow.icon.anchor.set(0.5);
           entity.arrow.addChild(entity.arrow.icon);

           entity.arrow.getZIndex = function () {
               return -100000;
           };
           app.cstage.addChild(entity.arrow);
       };
       if (netData.isObjective) {
           entity.updateObjectiveArrow();
       }

       entity.soundPlay = function(data) {
           if (data && data.sound && sounds[data.sound]) {
               soundPlay(sounds[data.sound], entity, data.volume);
           }
       };

       entity.getZIndex = function () {
           return -entity.y;
       };

       entity.changeZLevel = function (newZ) {
           entity.z = newZ;
       };

       entity.isVisible = function () {
           return entity.z === camera.z && isOnScreen(entity);
       };

       entity.onRemove = function () {};

       entity.createLight = function(color, minBrightness, maxBrightness, duration) {
           return createLight(entity, color, minBrightness, maxBrightness, duration);
       };

       entity.updateTeam = function(newTeam) {
           entity.team = newTeam;
       };

       entity.remove = function () {
           if (entity.arrow) {
               app.cstage.removeChild(entity.arrow);
           }
           entity.valid = false;
           entity.onRemove();
           app.cstage.removeChild(entity);
           delete entityDictionary[entity.serverId];
       };

       app.cstage.addChild(entity);
       entities.push(entity);
       return entity;
   }

   function getPositionAlongLine(x1, y1, x2, y2, percentage) {
       return {x : x1 * (1.0 - percentage) + x2 * percentage, y : y1 * (1.0 - percentage) + y2 * percentage};
   }

   let maxScreenshakeDistance = 350;
   function applyScreenShake(x, y, z, size) {
       size *= 3;
       let target = {
           x: camera.x + WIDTH/2,
           y: camera.y + HEIGHT/2,
           z: camera.z
       };
       if (player && player.valid && (!player.netData || player.netData.alive)) {
           target.x = player.x;
           target.y = player.y;
           target.z = player.z;
       }
       if (z === target.z) {
           let dist = Math.distanceBetween({x: x, y: y}, target);
           if (dist < maxScreenshakeDistance) {
               camera.screenShake = size * (1 - (dist/maxScreenshakeDistance));
           }
       }
   }

   function blendColors(colorA, colorB, amount) {
       const [rA, gA, bA] = colorA.match(/\w\w/g).map((c) => parseInt(c, 16));
       const [rB, gB, bB] = colorB.match(/\w\w/g).map((c) => parseInt(c, 16));
       const r = Math.round(rA + (rB - rA) * amount).toString(16).padStart(2, '0');
       const g = Math.round(gA + (gB - gA) * amount).toString(16).padStart(2, '0');
       const b = Math.round(bA + (bB - bA) * amount).toString(16).padStart(2, '0');
       return '#' + r + g + b;
   }

   let lastImpactSound = 0;
   function playPlayerImpactSound(entity) {
       soundPlay(sounds['impact_player' + (lastImpactSound+1)], entity, 0.5);
       let newImpactSound = parseInt(Math.random() * 3);
       if (newImpactSound === lastImpactSound) {
           newImpactSound -= 1;
       }
       if (newImpactSound < 0) {
           newImpactSound = 2;
       }
       lastImpactSound = newImpactSound;
   }

   function createEffect(type, x, y, z, width, height, data) {
       if (beforeRecordingStart) {
           return {};
       }

       let effect = new PIXI.Container();
       if (!data) {
           data = {};
       }

       let frames = 0;
       let framesY = 0;

       effect.x = x;
       effect.y = y;
       effect.z = z;
       effect.valid = true;
       effect.lastX = x;
       effect.lastY = y;
       effect.velocityX = 0;
       effect.velocityY = 0;
       effect.dx = 0;
       effect.dy = 0;
       effect.type = type;
       effect.maxLifetime = 100;
       effect.lights = [];
       if (data.rotation) {
           effect.rotation = data.rotation;
       } else {
           effect.rotation = (Math.PI * 2) * Math.random();
       }

       effect.createLight = function(color, minBrightness, maxBrightness, duration) {
           return createLight(effect, color, minBrightness, maxBrightness, duration);
       };

       let zOffset = 100;
       let spritesheet = null;
       let spritesheet2 = null;
       let effectSound = null;
       let disableLighting = false;
       if (type === 'spark') {
           spritesheet = loadSpritesheet(resources['sparks'].texture, 128, 128);
           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'shell_smoke') {
           spritesheet = loadSpritesheet(resources['shell_smoke'].texture, 64, 64);
           effect.maxLifetime = 15;
           effect.sprite = new PIXI.Sprite(spritesheet[Math.round(Math.random()*3)][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
           let speed = 0.5;
           effect.dx = -speed + (Math.random() * (speed*2));
           effect.dy = -speed + (Math.random() * (speed*2));
       } else if (type === 'fire') {
           spritesheet = loadSpritesheet(resources['burning'].texture, 64, 64);
           effect.maxLifetime = 1000 + Math.round(Math.random() * 250);
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
           effect.rotation = 0;

           frames = Math.random()*4;
           framesY = Math.random()*2;

           effectSound = soundPlay(sounds.burning, effect, 0.25);

           effect.fireLight = effect.createLight(0xf37a14, 0.6);
       }  else if (type === 'tank_fire') {
           effect.maxLifetime = 100;
           spritesheet = loadSpritesheet(resources['tank_fire'].texture, 256, 256);
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5, 1);
           effect.addChild(effect.sprite);
       } else if (type === 'ricochet') {
           effect.rotation = 0;
           spritesheet = loadSpritesheet(resources['ricochet'].texture, 64, 256);
           effect.maxLifetime = 500;
           let angle1 = Math.angleBetween(effect, data.pathNode1.from) + Math.PI/2;
           let angle2 = Math.angleBetween(effect, data.pathNode2.to) + Math.PI/2;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.rotation = angle1;
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.x = 0.5;
           effect.sprite.anchor.y = 0.95;
           effect.addChild(effect.sprite);
           effect.sprite2 = new PIXI.Sprite(spritesheet[0][1]);
           effect.sprite2.rotation = angle2;
           effect.sprite2.width = width;
           effect.sprite2.height = height;
           effect.sprite2.anchor.x = 0.5;
           effect.sprite2.anchor.y = 0.95;
           effect.addChild(effect.sprite2);
           effect.sprite2.parentGroup = PIXI.lights.diffuseGroup;
       } else if (type === 'ricochet_splash') {
           effect.rotation = 0;
           let fangle = Math.angleBetween({x: 0, y: 0}, {x: data.pathNode1.normal[0], y: data.pathNode1.normal[1]}) + Math.PI/2;
           spritesheet = loadSpritesheet(resources['ricochet_splash'].texture, 256, 256);
           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.rotation = fangle;
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.x = 0.5;
           effect.sprite.anchor.y = 0.96;
           effect.addChild(effect.sprite);

           effect.createLight(0xf37a14, 0.1, 0.6, 300);
       } else if (type === 'shell') {
           spritesheet = loadSpritesheet(resources['shell'].texture, 32, 64);
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
           effect.currentPath = 0;

           effect.maxLifetime = 0;
           for (let i=0; i<data.paths.length; i++) {
               let path = data.paths[i];
               let dist = Math.distanceBetween(path.from, path.to);
               let lifetime = dist/55;
               if (lifetime <= 0) {
                   lifetime = 1;
               }
               path.lifetime = 1;
               path.maxLifetime = lifetime;
               effect.maxLifetime += path.maxLifetime;
           }

           effect.createLight(0xf37a14, 0.25 + ((width/12) * 0.06));
       } else if (type === 'explosion') {
           spritesheet = loadSpritesheet(resources['explosion'].texture, 256, 256);
           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
           applyScreenShake(effect.x, effect.y, effect.z, 1000);

           effect.createLight(0xf37a14, 0.4, 4, 300);
       } else if (type === 'wreck_explosion') {
           spritesheet = loadSpritesheet(resources['wreck_explode'].texture, 128, 128);
           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
           applyScreenShake(effect.x, effect.y, effect.z, 800);

           effect.createLight(0xf37a14, 0.4, 2, 300);
       } else if (type === 'water_splash') {
           spritesheet = loadSpritesheet(resources['watersplash' + Math.randomInt(1, 3)].texture, 64, 64);
           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
           zOffset = -500;
       }  else if (type === 'kill') {
           zOffset = 150;
           effect.rotation = 0;
           spritesheet = loadSpritesheet(resources['kill'].texture, 256, 256);
           spritesheet2 = loadSpritesheet(resources['kill_skull'].texture, 128, 128);

           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.rotation = data.rotation;
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);

           effect.sprite2 = new PIXI.Sprite(spritesheet2[0][0]);
           effect.sprite2.visible = false;
           effect.sprite2.frame = 0;
           effect.sprite2.width = width/2;
           effect.sprite2.height = height/2;
           effect.sprite2.anchor.set(0.5);
           effect.addChild(effect.sprite2);

           applyScreenShake(effect.x, effect.y, effect.z, 1000);
           effect.createLight(0xf37a14, 0.4, 3, 300);
       } else if (type === 'impact_terrain') {
           spritesheet = loadSpritesheet(resources['impact_terrain'].texture, 256, 128);

           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5, 0.2);
           effect.addChild(effect.sprite);

           applyScreenShake(effect.x, effect.y, effect.z, 1000);
           effect.createLight(0xf37a14, 0.1, 0.6, 250);
       } else if (type === 'impact_tank') {
           spritesheet = loadSpritesheet(resources['impact_tank'].texture, 256, 256);

           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(spritesheet[0][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5, 0.5);
           effect.addChild(effect.sprite);

           applyScreenShake(effect.x, effect.y, effect.z, 1000);
           effect.createLight(0xf37a14, 0.1, 0.6, 250);
       } else if (type === 'shotdecal_terrain') {
           zOffset = -500;
           effect.maxLifetime = 10000;
           spritesheet = loadSpritesheet(resources['shotdecal_terrain'].texture, 64, 64);

           effect.sprite = new PIXI.Sprite(spritesheet[Math.round(Math.random())][Math.round(Math.random())]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5, 0.8);
           effect.addChild(effect.sprite);

           applyScreenShake(effect.x, effect.y, effect.z, 1000);
       } else if (type === 'tracktrail') {
           zOffset = -500;
           effect.maxLifetime = 500;
           effect.sprite = new PIXI.Sprite(resources['tracktrail'].texture);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5, 0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'debris') {
           spritesheet = loadSpritesheet(resources['debris'].texture, 32, 32);
           effect.maxLifetime = 150 + Math.round(Math.random() * 100);
           effect.sprite = new PIXI.Sprite(spritesheet[Math.round(Math.random()*7)][Math.round(Math.random())]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'debris_cloud') {
           spritesheet = loadSpritesheet(resources['debris_clouds'].texture, 128, 128);
           effect.maxLifetime = 100 + Math.round(Math.random() * 50);
           effect.sprite = new PIXI.Sprite(spritesheet[Math.round(Math.random()*3)][0]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'boost_particle') {
           spritesheet = loadSpritesheet(resources['boost_particles'].texture, 64, 64);
           effect.maxLifetime = 100 + Math.round(Math.random() * 50);
           effect.sprite = new PIXI.Sprite(spritesheet[Math.round(Math.random()*3)][Math.round(Math.random())]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'smoke') {
           spritesheet = loadSpritesheet(resources['smoke_particles'].texture, 64, 64);
           effect.maxLifetime = 200 + Math.round(Math.random() * 50);
           effect.sprite = new PIXI.Sprite(spritesheet[Math.round(Math.random()*3)][Math.round(Math.random())]);
           effect.sprite.width = width;
           effect.sprite.height = height;
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'scorch') {
           zOffset = -500;
           effect.maxLifetime = 1000;
           effect.sprite = new PIXI.Sprite(resources['scorch'].texture);
           effect.sprite.width = width;
           effect.sprite.height = height;
           if (Math.random() >= 0.5) {
               effect.sprite.scale.set(0.1);
           } else {
               effect.sprite.scale.set(-0.1);
           }
           effect.sprite.anchor.set(0.5);
           effect.addChild(effect.sprite);
       } else if (type === 'xp_gain') {
           effect.rotation = 0;
           effect.maxLifetime = 200;
           let text = '';
           if (data.damage) {
               text += '<damage>' + data.damage + '</damage>\n';
           }

           text += data.text;
           effect.sprite = new MultiStyleText(text, {
               'default': {
                   fontFamily: fontFamily,
                   fontSize: 16,
                   fill: 0xFFC223,
                   align: 'left'
               },
               'xp': {
                   fontFamily: fontFamily,
                   fontWeight: 'bold',
                   fontSize: 20,
                   fill: 0xFFC223,
                   align: 'left'
               },
               'damage': {
                   fontFamily: ['Moon Get', 'sans-serif'],
                   position: 'relative',
                   top: '2px',
                   fontSize: 28,
                   fill: blendColors('#FFC223', '#FF2323', Math.abs(data.damage/100.0)),
                   align: 'left'
               }
           });
           effect.dy = -0.4;
           effect.sprite.anchor.set(0.5, 0.75);
           effect.addChild(effect.sprite);
           zOffset = 10000;
           disableLighting = true;

           if (data.sound === 'kill') {
               spritesheet = loadSpritesheet(resources['medal_kill'].texture, 64, 64);
           } else if (data.sound === 'assist') {
               spritesheet = loadSpritesheet(resources['medal_assist'].texture, 64, 64);
           }

           if (spritesheet) {
               effect.medal = new PIXI.Sprite(spritesheet[0][0]);
               effect.medal.position.x = (-effect.sprite.width / 2) - 40;
               effect.medal.position.y = (-effect.sprite.height / 4);
               effect.medal.anchor.set(0.5, 0.75);
               effect.sprite.addChild(effect.medal);
           }
       }

       if (data.dx) {
           effect.dx = data.dx;
       }
       if (data.dy) {
           effect.dy = data.dy;
       }
       if (data.tint) {
           effect.sprite.tint = data.tint;
       }
       if (data.alpha) {
           effect.sprite.alpha = data.alpha;
       }
       if (data.maxLifetime) {
           effect.maxLifetime = data.maxLifetime;
       }

       if (effect.sprite && !disableLighting) {
           effect.sprite.parentGroup = PIXI.lights.diffuseGroup;
       }

       effect.lifetime = effect.maxLifetime;
       effect.tick = function () {
           if (effect.lifetime > 0) {
               effect.lifetime -= (1/timeScale);

               for (let i=0; i<effect.lights.length; i++) {
                   let light = effect.lights[i];
                   light.tick();
               }
           } else {
               effect.remove();
           }

           if (effectSound) {
               soundUpdate(effectSound);
           }
           if (effectSound && effectSound.stopped) {
               effectSound = null;
           }

           if (type === 'smoke') {
               let angle = windAngle;
               let speed = windStrength;
               effect.dx += Math.cos(angle) * speed;
               effect.dy += Math.sin(angle) * speed;
           }

           if (type === 'ricochet') {
               frames += 0.4 * (1/timeScale);
               if (Math.floor(frames) >= 13) {
                   effect.remove();
               } else {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][0];
                   effect.sprite2.texture = spritesheet[Math.floor(frames)][1];
               }
           } else if (type === 'fire') {
               let alpha = effect.lifetime/effect.maxLifetime;
               if (alpha > 0.1) {
                   alpha = 1;
               } else {
                   alpha = alpha/0.1;
               }
               effect.sprite.alpha = alpha;

               effect.fireLight.brightness = (1.2 + Math.random()*0.3) * alpha;

               frames += 0.22 * (1/timeScale);
               if (Math.floor(frames) >= 4) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 2) {
                       frames = 0;
                       framesY = 0;
                   }
               }

               effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];

               if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                   if (!effect.smokeTime || effect.smokeTime <= 0) {
                       effect.smokeTime = 35;
                       let angle = (Math.PI * 2) * Math.random();
                       let size = 75 + Math.round(Math.random() * 10);
                       let speed = 0.25 + (Math.random() * 0.2);
                       createEffect('smoke', effect.x, effect.y, effect.z, size, size, {
                           dx: Math.cos(angle) * (speed * Math.random()),
                           dy: Math.sin(angle) * (speed * Math.random()),
                           tint: 0x2b2b2b
                       });
                   } else {
                       effect.smokeTime--;
                   }
               }
           }  else if (type === 'tank_fire') {
               frames += 0.65 * (1/timeScale);
               if (Math.floor(frames) >= 8) {
                   frames = 0;
                   framesY += 1;
                   if (framesY >= 3) {
                       framesY = 0;
                       effect.remove();
                   }
               } else {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           } else if (type === 'ricochet_splash') {
               frames += 0.3 * (1/timeScale);
               if (Math.floor(frames) >= 8) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 2) {
                       framesY = 0;
                       effect.remove();
                   }
               }

               effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
           } else if (type === 'debris') {
               let alpha = effect.lifetime/effect.maxLifetime;
               if (alpha > 0.1) {
                   alpha = 1;
               } else {
                   alpha = alpha/0.1;
               }
               effect.sprite.alpha = alpha;
               effect.dx *= 0.85;
               effect.dy *= 0.85;

               let speed = Math.magnitude(effect);
               if (speed > 2) {
                   zOffset = 100;
               } else {
                   effect.dx = 0;
                   effect.dy = 0;
                   zOffset = -400;
               }
           } else if (type === 'debris_cloud') {
               let lifePercentage = (effect.lifetime/effect.maxLifetime);
               effect.sprite.alpha = 0.75 * lifePercentage;
               zOffset = -175 * lifePercentage;
           } else if (type === 'boost_particle') {
               let lifePercentage = (effect.lifetime/effect.maxLifetime);
               effect.sprite.alpha = 0.75 * lifePercentage;
               zOffset = (-175 * lifePercentage) - (25 * lifePercentage) ;
           } else if (type === 'smoke') {
               let lifePercentage = (effect.lifetime/effect.maxLifetime);
               effect.sprite.alpha = 0.75 * lifePercentage;
               zOffset = 7500 + (-25 * lifePercentage);
               effect.scale.set(0.5 + ((1-(effect.lifetime/effect.maxLifetime)) * 2.5));
           } else if(type === 'scorch') {
               let alpha = effect.lifetime/effect.maxLifetime;
               if (alpha > 0.1) {
                   alpha = 1;
               } else {
                   alpha = alpha/0.1;
               }
               effect.sprite.alpha = alpha;

               if (effect.sprite.scale.x > 0) {
                   if (effect.sprite.scale.x < (width / 256)) {
                       effect.sprite.scale.set(effect.sprite.scale.x + 0.1);
                   }
               } else {
                   if (effect.sprite.scale.x > -(width / 256)) {
                       effect.sprite.scale.set(effect.sprite.scale.x - 0.1);
                   }
               }
           } else if (type === 'spark') {
               frames += 0.5 * (1/timeScale);
               if (Math.floor(frames) >= 4) {
                   effect.remove();
               } else {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][0];
               }
           } else if (type === 'shell_smoke') {
               let alpha = effect.lifetime/effect.maxLifetime;
               if (alpha > 0.5) {
                   alpha = 1;
               } else {
                   alpha = alpha/0.5;
               }
               effect.sprite.alpha = alpha;
               effect.scale.set(0.1 + ((1-(effect.lifetime/effect.maxLifetime)) * 0.5));
               effect.dx *= 0.999;
               effect.dy *= 0.999;
           } else if (type === 'tracktrail') {
               let alpha = effect.lifetime/effect.maxLifetime;
               if (alpha > 0.5) {
                   alpha = 1;
               } else {
                   alpha = alpha/0.5;
               }
               effect.sprite.alpha = data.alpha ? data.alpha * alpha : 1;
           } else if (type === 'shell') {
               let percentage = data.paths[effect.currentPath].lifetime/data.paths[effect.currentPath].maxLifetime;
               data.paths[effect.currentPath].lifetime += 1/timeScale;

               frames += 0.34;
               if (Math.floor(frames) >= 7) {
                   frames = 0;
               }

               effect.sprite.texture = spritesheet[Math.floor(frames)][0];

               let shellRate;
               let listenerPos = getListenerPos();
               let posDiff = {
                   x: effect.x - listenerPos.x,
                   y: effect.y - listenerPos.y
               };
               let distanceLength = Math.distanceBetween(effect, listenerPos);
               let screenVelocity = 0;
               let effectVelocity = {
                   x: effect.velocityX,
                   y: effect.velocityY
               };
               let cueVelocity = Math.dot(effectVelocity, posDiff) / distanceLength;
               let relativeVelocity = screenVelocity - cueVelocity;
               let SpeedOfSound = 100;
               shellRate = (1 + relativeVelocity / SpeedOfSound) / (1 - relativeVelocity / SpeedOfSound);

               if (shellRate > 3) {
                   shellRate = 3;
               } else if (shellRate < 0) {
                   shellRate = 0.01;
               } else if (!shellRate) {
                   shellRate = 0.01;
               }

               if (effect.lastShellRate !== shellRate) {
                   if (effect.lastShellRate >= 2 && shellRate < 2) {
                       soundPlay(sounds['shell_whizz' + Math.randomInt(1, 10)], effect, 0.5);
                   }
                   effect.lastShellRate = shellRate;
               }

               if (data.paths[effect.currentPath].hitEntityID) {
                   if (!data.paths[effect.currentPath].hitEntity) {
                       data.paths[effect.currentPath].hitEntity = getEntityById(data.paths[effect.currentPath].hitEntityID);
                   }
                   if (data.paths[effect.currentPath].hitEntity) {
                       let other = data.paths[effect.currentPath].hitEntity;
                       if (data.paths[effect.currentPath].hitOffset) {
                           data.paths[effect.currentPath].to = {
                               x: other.x - data.paths[effect.currentPath].hitOffset.x,
                               y: other.y - data.paths[effect.currentPath].hitOffset.y
                           };
                       } else {
                           data.paths[effect.currentPath].to = {
                               x: other.x,
                               y: other.y
                           };
                       }
                   }
               }

               let angle = Math.angleBetween(data.paths[effect.currentPath].from, data.paths[effect.currentPath].to);
               let pos = getPositionAlongLine(data.paths[effect.currentPath].from.x, data.paths[effect.currentPath].from.y, data.paths[effect.currentPath].to.x, data.paths[effect.currentPath].to.y, percentage);
               effect.rotation = angle + Math.PI/2;
               effect.x = pos.x;
               effect.y = pos.y;

               let maxOffset = 2;
               for (let i = 0; i < 4; i++) {
                   let smokePos = getPositionAlongLine(data.paths[effect.currentPath].from.x, data.paths[effect.currentPath].from.y, data.paths[effect.currentPath].to.x, data.paths[effect.currentPath].to.y, percentage - (Math.random() * 0.05));
                   smokePos.x += -maxOffset + (Math.random() * (maxOffset * 2));
                   smokePos.y += -maxOffset + (Math.random() * (maxOffset * 2));
                   createEffect('shell_smoke', smokePos.x, smokePos.y, effect.z, 32, 32);
               }

               percentage = data.paths[effect.currentPath].lifetime/data.paths[effect.currentPath].maxLifetime;
               if (percentage >= 1) {
                   data.paths[effect.currentPath].to.z = effect.z;

                   if (damageIndicators && damageIndicators.visible && player && player.canControl && data.attacker && data.attacker.valid && data.paths[effect.currentPath].hitEntity === player && player.netData && player.netData.alive && player.team !== data.attacker.team) {
                       let dsheet = loadSpritesheet(resources['damage_indicator'].texture, 32, 128);
                       let ind = new PIXI.Sprite(dsheet[data.paths[effect.currentPath].didHit ? 0 : 1][0]);
                       ind.created = Date.now();
                       ind.anchor.set(0.5);
                       ind.damageEntity = data.attacker;
                       ind.visible = false;
                       damageIndicators.addChild(ind);
                   }

                   effect.currentPath++;
                   if (effect.currentPath >= data.paths.length) {
                       effect.remove();
                       if (data.paths[effect.currentPath-1].didHit) {
                           let hitPos = data.paths[effect.currentPath - 1].to;
                           let hitAngle = Math.angleBetween(hitPos, data.paths[effect.currentPath - 1].from);
                           if (data.paths[effect.currentPath-1].didHitVehicle) {
                               if (player && player.canControl && data.paths[effect.currentPath-1].hitEntity === player) {
                                   playPlayerImpactSound(hitPos);
                               } else {
                                   soundPlay(sounds['impact_tank' + (parseInt(Math.random() * 3) + 1)], hitPos, 0.75);
                               }
                               createEffect('impact_tank', hitPos.x, hitPos.y, hitPos.z, 256, 256, {
                                   rotation: hitAngle - Math.PI/2
                               });

                               let hitEntity = data.paths[effect.currentPath-1].hitEntity;
                               if (hitEntity && data.paths[effect.currentPath-1].didHitEnemy) {
                                   let scale = 4;
                                   let angle = Math.angleBetween(hitPos, hitEntity) - hitEntity.rotation;
                                   let dist = Math.distanceBetween(hitEntity, hitPos);
                                   let offsetX = Math.cos(angle) * dist;
                                   let offsetY = Math.sin(angle) * dist * 1.5;
                                   if (hitEntity.parts && hitEntity.parts['Hull'] && hitEntity.parts['Hull'][0]) {
                                       hitEntity.parts['Hull'][0].parts[0].texture = applyDecal(hitEntity, null, hitEntity.parts['Hull'][0].parts[0].texture, 'impact_tank_decal' + (parseInt(Math.random() * 3) + 1), offsetX, offsetY, (hitEntity.rotation - data.paths[effect.currentPath - 1].normalAngle) + Math.PI / 2, scale, 0);
                                   }

                                   if (hitEntity.netData && hitEntity.netData.alive && hitEntity.damagedAreas) {
                                       hitEntity.damagedAreas.push({
                                           angle: angle,
                                           dist: dist,
                                           normalAngle: data.paths[effect.currentPath - 1].normalAngle,
                                           lifetime: 250 + Math.round(50 * Math.random())
                                       });
                                   }
                               }
                           } else {
                               soundPlay(sounds['impact_terrain' + (parseInt(Math.random() * 3) + 1)], hitPos, 0.35);
                               createEffect('impact_terrain', hitPos.x, hitPos.y, hitPos.z, 256, 128, {
                                   rotation: data.paths[effect.currentPath - 1].normalAngle - Math.PI / 2
                               });
                               if (data.paths[effect.currentPath-1].didHitTerrain) {
                                   createEffect('shotdecal_terrain', hitPos.x, hitPos.y, hitPos.z, 64, 64, {
                                       rotation: data.paths[effect.currentPath - 1].normalAngle + Math.PI / 2
                                   });
                               }
                           }
                           applyScreenShake(effect.x, effect.y, effect.z, 200);

                           if (game.settings.quality === 'auto' || game.settings.quality === 'high') {
                               if (data.paths[effect.currentPath - 1].hitTeam !== undefined) {
                                   let debrisAmount = 3 + Math.round(Math.random() * 2);
                                   let hitAngleOffset = Math.PI * 0.2;
                                   for (let i = 0; i < debrisAmount; i++) {
                                       let debrisAngle = hitAngle + ((Math.random() * hitAngleOffset) - hitAngleOffset / 2);
                                       let size = 20 + Math.round(Math.random() * 10);
                                       createEffect('debris', hitPos.x, hitPos.y, hitPos.z, size, size, {
                                           dx: Math.cos(debrisAngle) * (15 * Math.random()),
                                           dy: Math.sin(debrisAngle) * (15 * Math.random())
                                       });
                                   }
                               }
                           }
                       }
                   } else {
                       applyScreenShake(effect.x, effect.y, effect.z, 50);

                       if (player && player.canControl && data.paths[effect.currentPath-1].hitEntity === player) {
                           soundPlay(sounds['ricochet_player' + (parseInt(Math.random() * 5) + 1)], data.paths[effect.currentPath-1].to, 0.8);
                       } else {
                           soundPlay(sounds['ricochet' + (parseInt(Math.random() * 5) + 1)], data.paths[effect.currentPath-1].to, 0.7);
                       }

                       let pathNode1 = data.paths[effect.currentPath-1];
                       let pathNode2 = data.paths[effect.currentPath];
                       createEffect('ricochet_splash', pathNode1.to.x, pathNode1.to.y, pathNode1.to.z, 128, 128, {
                           pathNode1: pathNode1,
                           pathNode2: pathNode2
                       });
                       createEffect('ricochet', pathNode1.to.x, pathNode1.to.y, pathNode1.to.z, 32, 128, {
                           pathNode1: pathNode1,
                           pathNode2: pathNode2
                       });
                   }
               }
           } else if (type === 'explosion') {
               let frameDiff = 0.45 * (1/timeScale);
               frames += frameDiff;
               if (Math.floor(frames) >= 4) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 4) {
                       effect.remove();
                   }
               }

               if (effect.valid) {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           } else if (type === 'wreck_explosion') {
               let frameDiff = 0.38 * (1/timeScale);
               frames += frameDiff;
               if (Math.floor(frames) >= 4) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 4) {
                       effect.remove();
                   }
               }

               if (effect.valid) {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           } else if (type === 'water_splash') {
               let frameDiff = 0.14 * (1/timeScale);
               frames += frameDiff;
               if (Math.floor(frames) >= 4) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 4) {
                       effect.remove();
                   }
               }

               if (effect.valid) {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           }  else if (type === 'kill') {
               let frameDiff = 0.35 * (1/timeScale);
               frames += frameDiff;
               if (Math.floor(frames) >= 4) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 4) {
                       effect.remove();
                   }
               }

               effect.sprite2.frame += 0.25 * (1/timeScale);
               effect.sprite2.visible = true;
               if (Math.floor(effect.sprite2.frame) < 4) {
                   effect.sprite2.texture = spritesheet2[Math.floor(effect.sprite2.frame)][0];
               } else {
                   effect.sprite2.visible = false;
               }

               if (effect.valid) {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           } else if (type === 'impact_terrain' || type === 'impact_tank') {
               let frameDiff = 0.35 * (1/timeScale);
               frames += frameDiff;
               if (Math.floor(frames) >= 4) {
                   frames = 0;
                   framesY++;
                   if (Math.floor(framesY) >= 4) {
                       effect.remove();
                   }
               }

               if (effect.valid) {
                   effect.sprite.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           } else if (type === 'xp_gain') {
               effect.dx *= 0.995;
               effect.dy *= 0.995;
               let alpha = effect.lifetime/effect.maxLifetime;
               if (alpha > 0.3) {
                   alpha = 1;
               } else {
                   alpha = alpha/0.3;
               }
               effect.sprite.alpha = alpha;

               if (effect.medal) {
                   if (Math.floor(frames) >= 3 && Math.floor(framesY) >= 1) {
                       frames = 3;
                       framesY = 1;
                   } else {
                       frames += 0.2;
                       if (Math.floor(frames) >= 4) {
                           frames = 0;
                           framesY++;
                           if (Math.floor(framesY) >= 2) {
                               framesY = 1;
                           }
                       }
                   }
                   effect.medal.texture = spritesheet[Math.floor(frames)][Math.floor(framesY)];
               }
           }

           if (effect.sprite) {
               effect.visible = effect.isVisible();
           }

           effect.x += effect.dx * (1/timeScale);
           effect.y += effect.dy * (1/timeScale);

           effect.velocityX = effect.x - effect.lastX;
           effect.velocityY = effect.y - effect.lastY;

           effect.lastX = effect.x;
           effect.lastY = effect.y;
       };

       effect.getZIndex = function () {
           return -effect.y - zOffset;
       };

       effect.isVisible = function () {
           return effect.z === camera.z && isOnScreen(effect);
       };

       effect.onRemove = function () {
           if (effectSound) {
               soundStop(effectSound);
               effectSound = null;
           }
       };

       effect.remove = function () {
           effect.valid = false;
           effect.onRemove();
           app.cstage.removeChild(effect);
       };

       app.cstage.addChild(effect);
       effects.push(effect);
       return effect;
   }

   game.getMousePosition = () => {
       if (isMobile && touchEvent) {
           let pos = touchEvent;
           let zoomRatio = WIDTH/(WIDTH*camera.zoom);
           return {
               x: (pos.x + camera.x) * zoomRatio,
               y: (pos.y + camera.y) * zoomRatio
           };
       }

       if (usingGamepad) {
           if (player && gamepadAimAngle !== null) {
               let dist = 800 * gamepadAimSize;
               if (dist < 200) {
                   dist = 200;
               }
               dist = 500;
               return {
                   x: player.x + (Math.cos(gamepadAimAngle) * dist),
                   y: player.y + (Math.sin(gamepadAimAngle) * dist)
               };
           }

           return {
               x: gmx,
               y: gmy
           };
       }

       if (app.renderer.plugins.interaction && app.renderer.plugins.interaction.mouse && app.renderer.plugins.interaction.mouse.global) {
           let pos = app.renderer.plugins.interaction.mouse.global;
           if (pos.x === -999999 && pos.y === -999999 && touchEvent) {
               pos = touchEvent;
           }
           let zoomRatio = WIDTH/(WIDTH*camera.zoom);
           return {
               x: (pos.x + camera.x) * zoomRatio,
               y: (pos.y + camera.y) * zoomRatio
           };
       }

       return {
           x: 0,
           y: 0
       };
   };

   let screenOffset = 250;
   function isOnScreen(pos, bufferOverride) {
       let buffer = screenOffset;
       if (bufferOverride) {
           buffer = bufferOverride;
       }
       return pos.x * camera.zoom >= camera.x - buffer && pos.y * camera.zoom >= camera.y - buffer && pos.x * camera.zoom <= camera.x + WIDTH + buffer && pos.y * camera.zoom <= camera.y + HEIGHT + buffer;
   }

   function getServerTime() {
       return Date.now() - serverTimeDiff;
   }

   function getEntityById(id) {
       if (entityDictionary[id]) {
           return entityDictionary[id];
       } else {
           for (let i=0; i<entities.length; i++) {
               let entity = entities[i];
               if (entity.serverId === id) {
                   return entity;
               }
           }
       }
       return null;
   }

   game.startTestDrive = function(vehicle) {
       game.startSingleplayer(false, true, false, false);
       setTimeout(() => {
           game.fakeSockets.clientSocket.emit('sandboxSwitchVehicle', vehicle);

           let server = game.server;
           let spawns = server.teamData[1].spawns;
           for (let i=0; i<spawns.length; i++) {
               let spawn = spawns[i];
               server.createVehicle('tank', spawn.x + (Math.random()*5), spawn.y + (Math.random()*5), 0, Math.radians(spawn.properties.angle), 128, 128, 1, {
                   tankType: 'medium_tank',
                   cosmetics: {}
               });
           }
       }, 100);
   }

   let lastVehicleUsed = null;
   let playerAliveTime = null;
   game.onPlayerAlive = function() {
       if (game.deathMenuComponent) {
           game.deathMenuComponent.showModal(false, null);
       }

       if (game.hideBannerAd) {
           game.hideBannerAd();
       }

       if (!game.isInMenu) {
           try {
               if (ADSDK === 'crazygames') {
                   const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                   crazysdk.gameplayStart();
               }
           } catch (e) {}
       }

       updateRoundIndicators();

       if (!game.isInMenu) {
           if (player?.netData?.tankType && lastVehicleUsed !== player.netData.tankType && (scoreboardData?.gamemode === 'conquest' || scoreboardData?.gamemode === 'battle')) {
               game.services.api.recordEvent('useVehicle', {
                   event_category: 'Game',
                   event_label: player.netData.tankType
               });
               lastVehicleUsed = player.netData.tankType;
           }
           if (player) {
               playerAliveTime = Date.now();
           }
       }
   };

   game.getLastVehicleUsed = function() {
       return lastVehicleUsed;
   };

   game.onPlayerDead = function(data) {
       lastDeathTime = Date.now();

       if (!game.isInMenu) {
           try {
               if (ADSDK === 'crazygames') {
                   const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                   crazysdk.gameplayStop();
               }
           } catch (e) {}
       }

       if (data && data.attackerId) {
           setTimeout(() => {
               let attacker = getEntityById(data.attackerId);
               if (attacker) {
                   player = attacker;
                   player.canControl = false;
               }
           }, 1250);

           if (game.deathMenuComponent) {
               game.deathMenuComponent.showModal(true, data);
           }
       }

       if (!game.isInMenu && playerAliveTime) {
           game.services.api.recordTiming('playerDead', Date.now()-playerAliveTime, {
               event_category: 'Game',
               event_label: player.netData.tankType
           });
       }
   };

   window.onbeforeunload = function() {
       if (!game.disconnected && !game.isInMenu && socket && socket.connected) {
           return 'Are you sure you want to leave the game?';
       }
   };

   window.onunload = function() {
       try {
           if (socket) {
               socket.emit('forceDisconnect');
           }
       } catch (e) {}
   };

   function formatTimer(duration) {
       if (duration < 0) {
           duration = 0;
       }
       let hrs = ~~(duration / 3600);
       let mins = ~~((duration % 3600) / 60);
       let secs = ~~duration % 60;
       let ret = '';

       if (hrs > 0) {
           ret += '' + hrs + ':' + (mins < 10 ? '0' : '');
       } else {
           ret += (mins < 10 ? '0' : '');
       }

       ret += mins + ':' + (secs < 10 ? '0' : '');
       ret += secs;
       return ret;
   }

   function createChargeBar(color, text) {
       let chargeBarContainer = new PIXI.Container();
       chargeBarContainer.position.y = -130;

       let base = new PIXI.Sprite(resources['gui_chargebar_bg'].texture);
       base.anchor.set(0.5, 0);
       chargeBarContainer.addChild(base);

       let barMaskGraphics = new PIXI.Sprite(resources['gui_chargebar_mask'].texture);
       barMaskGraphics.tint = 0xFFFFFF;
       barMaskGraphics.anchor.set(0.5, 0);
       chargeBarContainer.addChild(barMaskGraphics);

       let bar = new PIXI.Sprite(resources.white.texture);
       bar.tint = color;
       bar.position.x = -128;
       bar.width = 250;
       bar.height = 30;
       bar.mask = barMaskGraphics;
       chargeBarContainer.bar = bar;
       chargeBarContainer.addChild(bar);

       let barText = new PIXI.Text(text);
       barText.position.y = 7;
       barText.style.fontFamily = fontFamily;
       barText.anchor.x = 0.5;
       barText.style.fill = 0xFFFFFF;
       barText.style.fontSize = 16;
       barText.style.align = 'center';
       chargeBarContainer.addChild(barText);

       let baseUpper = new PIXI.Sprite(resources['gui_chargebar_fg'].texture);
       baseUpper.anchor.set(0.5, 0);
       chargeBarContainer.addChild(baseUpper);

       guiContainer.base2.addChild(chargeBarContainer);

       return chargeBarContainer;
   }

   function updateChargeBar(chargeBarContainer, percent) {
       chargeBarContainer.bar.width = 250 * percent;
   }

   function destroyChargeBar(chargebar) {
       if (chargebar) {
           guiContainer.base2.removeChild(chargebar);
       }
   }

   function setPlayer(entity) {
       player = entity;

       if (player) {
           if (!game.isInMenu) {
               player.canControl = setPlayerData.canControl;
           } else {
               player.canControl = false;
           }

           if (currentMenu && currentMenu === 'lobby') {
               $('#lobbyMenuModal').hide();
               currentMenu = null;
           }

           if (player.canControl) {
               lastControllablePlayer = player;
           }
       }

       if (player && ((gameCover && gameCover.visible) || game.isInMenu)) {
           camera.x = (player.x * camera.zoom) - WIDTH / 2;
           camera.y = (player.y * camera.zoom) - HEIGHT / 2;
       }

       if (player && player.canControl) {
           game.onPlayerAlive();
           if (player.updateOutline) {
               player.updateOutline();
           }
       } else if (game.garageComponent && game.isInMenu) {
           game.garageComponent.updateSettings();
       }

       if (guiContainer && player && player.canControl && player.netData && player.netData.cosmetics && player.netData.cosmetics.skin && player.netData.cosmetics.skin.texture) {
           guiContainer.base1Upper.texture = applyTextureOverlay(null, resources['gui_timer_fg'].texture, player.netData.cosmetics.skin.texture, null, {x: 0, y: 0}, 1, 0);
           guiContainer.base2Upper.texture = applyTextureOverlay(null, resources['gui_base_fg'].texture, player.netData.cosmetics.skin.texture, null, {x: 0, y: 0}, 1, 0);
       }

       game.gameCoverVisible(false);
   }

   function startFollowingRecordingVictim() {
       let entity = getEntityById(recordingData.bestClip.victimId);
       if (entity && player !== entity) {
           player = entity;
           player.canControl = false;
           spectating = false;
           delete recordingData.bestClip.followShot;
           delete recordingData.bestClip.victimId;
           delete recordingData.bestClip.clientId;
           delete recordingData.bestClip.entityId;
       }
   }

   const FPSMIN = 30;
   let fpsCheck = null;
   let startFPSCheck = null;
   let roundStartTimer = 0;
   let menuInit = false;
   let targetTickTime = Date.now();
   let lastTick = Date.now();
   let g_TICK = 10;
   let g_Time = 0;
   function update() {
       requestAnimationFrame(update);

       handleGamepadInput();

       updateUIPositions();

       if (recordingSplash && recordingSplash.visible) {
           if (recordingSplash.alpha < 1) {
               recordingSplash.alpha += 0.05;
           } else {
               recordingSplash.alpha = 1;
           }
       }

       if (game.watchingRecording && curSnapshot >= 1) {
           if (game.watchingRecording && recordingData && recordingData.bestClip && recordingData.bestClip.originalAttackerId && (!player || !player.valid || player.type === 'vehicle')) {
               let entity = getEntityById(recordingData.bestClip.originalAttackerId);
               if (entity && player !== entity) {
                   player = entity;
                   player.canControl = false;
                   spectating = false;
                   delete recordingData.bestClip.originalAttackerId;
               }
           } else if (game.watchingRecording && recordingData && recordingData.bestClip && recordingData.bestClip.victimId && (!player || !player.valid || player.type === 'vehicle') && recordingData.bestClip.timeOfInterest && getCurrentRecordingTime() >= recordingData.bestClip.timeOfInterest - 30) {
               startFollowingRecordingVictim();
           }
       }

       if (!DISABLE_AFK) {
           if (((currentMenu && currentMenu !== 'lobby') || (player && player.canControl)) && !game.watchingRecording) {
               let idleDiff = Date.now()-idleTime;
               if (idleDiff >= AFK_TIME_TIL_KICK) {
                   console.error('Kicked for being AFK.');
                   game.disconnect(true);
                   if (!announcementContainer.visible) {
                       showAnnouncement('AFK', 'You have been kicked for inactivity.', 2500);
                   }
               } else if (idleDiff >= AFK_TIME_TIL_KICK_WARNING) {
                   if (!announcementContainer.visible) {
                       showAnnouncement('AFK', 'You will be kicked for inactivity in one minute.', 2500);
                   }
               }
           }
       }

       if (scoreboardData && scoreboardData.gamemode === 'hunt' && game.settings.quality !== 'high') {
           game.settings.quality = 'high';
           game.reloadSettings();
       }

       if (lastTimeScale !== timeScale) {
           let moddedSnapshotRate = snapshotRate * lastTimeScale;
           if (Date.now() - timeScaleChangeTime >= moddedSnapshotRate*1.2) {
               lastTimeScale = timeScale;
           }
       }

       let timeDiff = 1;
       if (!capturer) {
           let timeNow = Date.now();
           timeDiff = timeNow - g_Time;
           if (timeDiff < g_TICK) {
               return;
           }
           g_Time = timeNow;
       }

       let delta = Date.now() - lastTick;
       lastTick = Date.now();

       if (announcementContainer && announcementContainer.visible) {
           if (Date.now() > announcementContainer.hideTime-500) {
               announcementContainer.alpha = (announcementContainer.hideTime-Date.now())/500;
           } else {
               announcementContainer.alpha = 1;
           }

           if (Date.now() > announcementContainer.hideTime) {
               announcementContainer.visible = false;
           }
       }

       if (disconnectText) {
           disconnectText.visible = !game.isSingleplayer && (game.disconnected || reconnecting);
           if (disconnectText.visible) {
               if (socket && socket.reconnecting) {
                   disconnectText.text = 'Disconnected from Game\nAttempting to Reconnect...';
               } else {
                   disconnectText.text = 'Disconnected from Game';
               }
           }
       }

       game.updateKillfeedContainer();

       if (cursorSprite && cursorSprite.visible) {
           app.view.style.cursor = 'none';
       } else {
           app.view.style.cursor = 'url(\'/assets/menu/cursor_spectate.png\') 9 9, auto';
       }

       game.tryGameFocus();

       if (player && playerLight) {
           playerLight.x = player.x;
           playerLight.y = player.y;
           playerLight.visible = !game.isInMenu && !player.turretLight;
       } else {
           playerLight.visible = false;
       }

       if (game.settings.quality === 'auto' && !capturer && startFPSCheck && Date.now() >= startFPSCheck) {
           let fps = Math.round(1000/delta);
           if (fps < FPSMIN) {
               if (!fpsCheck) {
                   fpsCheck = Date.now();
               } else if (Date.now()-fpsCheck >= 1500) {
                   game.settings.quality = 'low';
                   game.updateQuality();
                   let message = 'Graphics quality was set to Low Quality due to low FPS. Please make sure you have hardware acceleration enabled!';
                   if (isDesktopApp || isPhoneApp) {
                       message = 'Graphics quality was set to Low Quality due to low FPS.';
                   }
                   game.showGrowl(message, {
                       type: 'danger',
                       align: 'center',
                       width: 500,
                       delay: 12000
                   });
               }
           } else {
               fpsCheck = null;
           }
       } else {
           fpsCheck = null;
       }

       if (currentAmbientMapSound) {
           soundUpdate(currentAmbientMapSound);
       }

       if (guiContainer) {
           guiContainer.visible = game.isPlayScreen && !game.roundEnded && !game.isInMenu && !game.watchingRecording && !currentMenu && !game.settings.disableHUD;
           guiContainer.base1.visible = !game.isSingleplayer;
           if (killfeedContainer) {
               killfeedContainer.visible = game.isPlayScreen && !game.roundEnded && !game.isInMenu && !game.watchingRecording && !currentMenu && !game.settings.disableHUD;
           }
           if (guiContainer.killstreaks) {
               guiContainer.killstreaks.visible = player && player.valid && player.netData && player.netData.alive && player.canControl;
           }

           if (guiContainer.visible) {
               if (damageIndicators) {
                   damageIndicators.visible = guiContainer.visible && !game.settings.disableDamageIndicators;
                   if (damageIndicators.visible) {
                       let camWorldCenter = {
                           x: (camera.x + WIDTH / 2) / camera.zoom,
                           y: (camera.y + HEIGHT / 2) / camera.zoom
                       };
                       for (let i = 0; i < damageIndicators.children.length; i++) {
                           let ind = damageIndicators.children[i];
                           if (player && player.valid && player.canControl && player.netData && player.netData.alive && ind.damageEntity && ind.damageEntity.valid && ind.damageEntity.netData && ind.damageEntity.netData.alive) {
                               let indTime = Date.now() - ind.created;
                               ind.visible = Math.floor((indTime)/200)%2 === 0;

                               let angle = Math.angleBetween(camWorldCenter, ind.damageEntity);
                               let dist = Math.distanceBetween(camWorldCenter, ind.damageEntity);
                               if (dist > 400) {
                                   dist = 400;
                               }
                               ind.position.x = camWorldCenter.x + (Math.cos(angle) * dist);
                               ind.position.y = camWorldCenter.y + (Math.sin(angle) * dist);

                               let buffer = 300;
                               if (ind.x * camera.zoom < camera.x + buffer) {
                                   ind.x = (camera.x/camera.zoom) + buffer;
                               }
                               if (ind.y * camera.zoom < camera.y + buffer) {
                                   ind.y = (camera.y/camera.zoom) + buffer;
                               }
                               if (ind.x * camera.zoom > camera.x + WIDTH - buffer) {
                                   ind.x = ((camera.x + WIDTH)/camera.zoom) - buffer;
                               }
                               if (ind.y * camera.zoom > camera.y + HEIGHT - buffer) {
                                   ind.y = ((camera.y + HEIGHT)/camera.zoom) - buffer;
                               }


                               let indDist = Math.distanceBetween(ind, ind.damageEntity);
                               if (indDist > 200 && indTime < 6000) {
                                   ind.rotation = Math.angleBetween(ind, ind.damageEntity) + Math.PI / 2;
                               } else {
                                   damageIndicators.removeChild(ind);
                                   i--;
                               }
                           } else {
                               damageIndicators.removeChild(ind);
                               i--;
                           }
                       }
                   }
               }

               guiContainer.base2.visible = player && player.valid && player.netData && player.netData.alive;
               if (guiContainer.base2.visible) {
                   if (player.netData.health > player.oldHealth) {
                       player.oldHealth = player.netData.health;
                   }
                   guiContainer.bar1.width = guiContainer.bar1Behind.originalWidth * (player.netData.health / 100);
                   guiContainer.bar1Behind.width = guiContainer.bar1Behind.originalWidth * (player.oldHealth / 100);

                   guiContainer.repairHint.visible = player.canControl && player.netData.health < 100 && !player.netData.repairing && !player.netData.disableRepairing;
                   if (guiContainer.repairHint.visible) {
                       if (player.netData.health > 50) {
                           if (guiContainer.repairHint.texture !== repairGuiSpritesheet[0][0]) {
                               guiContainer.repairHint.texture = repairGuiSpritesheet[0][0];
                           }
                       } else {
                           if (guiContainer.repairHint.texture !== repairGuiSpritesheet[0][1]) {
                               guiContainer.repairHint.texture = repairGuiSpritesheet[0][1];
                           }
                       }
                   }

                   if (player.oldHealth >= player.netData.health) {
                       player.oldHealth -= 0.5;
                   }
                   let boostReadyDiff = player.nextBoostTime-Date.now();
                   let boostPercent = 1 - (boostReadyDiff/player.maxBoostTime);
                   if (!player.nextBoostTime) {
                       boostPercent = 1;
                   }
                   if (boostPercent < 0) {
                       boostPercent = 0;
                   }
                   if (boostPercent > 1) {
                       boostPercent = 1;
                   }
                   if (boostPercent < 1) {
                       if (!guiContainer.boostChargeBar) {
                           guiContainer.boostChargeBar = createChargeBar(0xd3b30b, 'BOOST RECHARGING');
                       }
                       if (boostReadyDiff <= 500 && !guiContainer.boostChargeBar.boostRechargePlayed) {
                           guiContainer.boostChargeBar.boostRechargePlayed = true;
                           sounds['boost_recharged'].play();
                       }
                       updateChargeBar(guiContainer.boostChargeBar, boostPercent);
                   } else {
                       if (guiContainer.boostChargeBar) {
                           destroyChargeBar(guiContainer.boostChargeBar);
                           guiContainer.boostChargeBar = null;
                       }
                   }

                   guiContainer.base2Text.text = Math.round(player.netData.health);
               }
           }
       }

       if (currentMenu === 'lobby' || game.roundEnded || game.watchingRecording) {
           if (roundStartTimer) {
               roundStartTimer -= timeDiff;
               let secondsTilStart = Math.round(roundStartTimer / 1000);
               if (game.lobbyComponent) {
                   game.lobbyComponent.updateRoundTimer(secondsTilStart);
               }
           }
           if (guiContainer && guiContainer.base1Text) {
               guiContainer.base1Text.visible = false;
           }
       } else {
           if (guiContainer && guiContainer.base1Text) {
               guiContainer.base1Text.visible = roundState && roundState.endTime;
               if (guiContainer.base1Text.visible) {
                   let timeLeft = Math.round((roundState.endTime - getServerTime()) / 1000);
                   if (roundState.type === 'playing' && timeLeft < 12) {
                       if (!game.settings.disableMusic && game.sounds['theme_round_ending'] && !game.sounds['theme_round_ending'].playing()) {
                           game.sounds['theme_round_ending'].play();
                       }
                       guiContainer.base1Text.style.fill = '#FF2222';
                   } else {
                       guiContainer.base1Text.style.fill = '#FFFFFF';
                   }
                   guiContainer.base1Text.text = formatTimer(timeLeft);
               }
           }
       }

       if (tutorialContainer) {
           if (tutorialContainer.tutorialData) {
               let wordPadding = 12;
               tutorialContainer.square.x = tutorialContainer.avatar.width;
               tutorialContainer.square.width = WIDTH;
               tutorialContainer.text.x = tutorialContainer.square.x + wordPadding;
               tutorialContainer.text.y = wordPadding;
               tutorialContainer.text.style.wordWrapWidth = (tutorialContainer.square.width - tutorialContainer.square.x) - (wordPadding * 2);
               tutorialContainer.square.height = tutorialContainer.avatar.height;
               tutorialContainer.y = HEIGHT - tutorialContainer.height;
               tutorialContainer.visible = true;
           } else {
               tutorialContainer.visible = false;
           }
       }

       if (!game.isPlayScreen) {
           if (!menuInit) {
               MAP_WIDTH = WIDTH+5;
               MAP_HEIGHT = HEIGHT+5;
               menuInit = true;

               game.appComponent.gameLoaded();
           }
       }

       if (ENABLE_DEBUG) {
           debugText.text = 'Press F2 to disable debug\n';
           debugText.text += 'FPS: ' + Math.round(1000/delta) + '\n';
           debugText.text += 'Latency: ' + latency + ' ms\n';
       }

       if (!pauseEffects) {
           for (let i=0; i<entities.length; i++) {
               let entity = entities[i];
               if (entity.valid) {
                   entity.tick(delta);

                   if (setPlayerData && setPlayerData.id === entity.serverId) {
                       setPlayer(entity);
                       setPlayerData = null;
                   }
               } else {
                   entities.splice(i, 1);
                   i--;
               }
           }

           for (let i = 0; i < effects.length; i++) {
               let effect = effects[i];
               if (effect.valid) {
                   effect.tick(delta);
               } else {
                   effects.splice(i, 1);
                   i--;
               }
           }
       }

       if (player && player.valid && !spectating) {
           let target = {
               x: (player.x * camera.zoom) - WIDTH / 2,
               y: (player.y * camera.zoom) - HEIGHT / 2
           };

           if (game.roundEnded) {
               target.y -= 100;
           }

           if (!game.roundEnded && (!game.deathMenuComponent || !game.deathMenuComponent.showingModal()) && !game.isInMenu && !game.watchingRecording && player && player.valid && (!player.netData || player.netData.alive) && app.renderer.plugins.interaction.eventData.data) {
               let wmp = {
                   x: gmx,
                   y: gmy
               };
               let dist = Math.distanceBetween(player, wmp) * 0.5;
               if (dist > 650) {
                   dist = 650;
               }
               let angle = Math.angleBetween(player, wmp);
               target.x += Math.cos(angle) * dist;
               target.y += Math.sin(angle) * dist;
           }

           if (!game.settings.disableScreenShake && camera.screenShake > 0) {
               camera.screenShake *= 0.85;
               if (camera.screenShake <= 1) {
                   camera.screenShake = 0;
               }
               let size = camera.screenShake*0.1;
               target.x += Math.cos(camera.screenShake)*size;
               target.y += Math.sin(camera.screenShake)*size;
           }

           let diffx = (target.x-camera.x)*0.25;
           if (Math.abs(diffx) < 2) {
               camera.x = target.x;
           } else {
               if (player && player.type === 'shell') {
                   camera.x += diffx;
               } else {
                   camera.x += diffx/timeScale;
               }
           }

           let diffy = (target.y-camera.y)*0.25;
           if (Math.abs(diffy) < 2) {
               camera.y = target.y;
           } else {
               if (player && player.type === 'shell') {
                   camera.y += diffy;
               } else {
                   camera.y += diffy/timeScale;
               }
           }
           camera.z = player.z;
       } else if (spectating || game.isMapEditor){
           let dx = 0;
           let dy = 0;

           if (activatedInputs[window.gameServer.sharedConstants.INPUT_MAP['Forward']]) {
               dy = -1;
           } else if (activatedInputs[window.gameServer.sharedConstants.INPUT_MAP['Reverse']]) {
               dy = 1;
           }

           if (activatedInputs[window.gameServer.sharedConstants.INPUT_MAP['Turn Left']]) {
               dx = -1;
           } else if (activatedInputs[window.gameServer.sharedConstants.INPUT_MAP['Turn Right']]) {
               dx = 1;
           }

           if (dx !== 0) {
               camera.x += dx * 15;
           }
           if (dy !== 0) {
               camera.y += dy * 15;
           }
       }

       if (!camera.unconstrainCamera && WIDTH <= MAP_WIDTH && HEIGHT <= MAP_HEIGHT) {
           if (camera.x + WIDTH > MAP_WIDTH * camera.zoom) {
               camera.x = MAP_WIDTH * camera.zoom - WIDTH;
           }

           if (camera.x < 0) {
               camera.x = 0;
           }

           if (camera.y + HEIGHT > MAP_HEIGHT * camera.zoom) {
               camera.y = MAP_HEIGHT * camera.zoom - HEIGHT;
           }

           if (camera.y < 0) {
               camera.y = 0;
           }
       }

       if (replayIcon && replayIcon.visible) {
           if (!game.isInMenu) {
               replayIcon.flashTimer--;
               if (replayIcon.flashTimer <= 0) {
                   replayIcon.icon.visible = !replayIcon.icon.visible;
                   replayIcon.flashTimer = 35;
               }
           } else {
               replayIcon.icon.visible = false;
           }
       }

       if (spawnText) {
           spawnText.visible = game.isPlayScreen && !game.isInMenu && !game.isMapEditor && !spectating && !game.watchingRecording && !currentMenu && (!player || !player.canControl || !player.netData.alive) && !game.roundEnded;
       }

       app.cstage.x = Math.floor(-camera.x);
       app.cstage.y = Math.floor(-camera.y);
       app.cstage.scale.x = camera.zoom;
       app.cstage.scale.y = camera.zoom;
       app.cstage.updateLayersOrder();

       let mousePos = game.getMousePosition();
       if (mousePos && (mousePos.x || mousePos.y)) {
           gmx = mousePos.x;
           gmy = mousePos.y;
       }

       if (cursorSprite) {
           cursorSprite.position.x = gmx;
           cursorSprite.position.y = gmy;
           if (player && player.valid) {
               let turretPosition = player;
               if (player.getCurrentTurretPosition) {
                   turretPosition = player.getCurrentTurretPosition();
               }
               cursorSprite.rotation = Math.angleBetween(turretPosition, cursorSprite.position) + Math.PI/2;
           } else {
               cursorSprite.rotation = 0;
           }
       }

       if (arrowSpritePointer && cursorSprite) {
           let wmp = {
               x: gmx,
               y: gmy
           };

           if (player && player.valid && ((player.type === 'vehicle' && player.subtype === 'tank') || player.type === 'actor') && player.netData.alive && player.canControl) {
               let turretPosition = player;
               if (player.getCurrentTurretPosition) {
                   turretPosition = player.getCurrentTurretPosition();
               }
               if (Date.now()-targetTickTime > 50) {
                   player.targetAngle = Math.angleBetween(turretPosition, wmp);
                   if (socket) {
                       if (movementAxisX || movementAxisY) {
                           socket.emit('targetAngle', {
                               targetAngle: player.targetAngle,
                               movementAxisX: movementAxisX,
                               movementAxisY: movementAxisY
                           });
                       } else {
                           socket.emit('targetAngle', player.targetAngle);
                       }
                   }
                   targetTickTime = Date.now();
               }

               let arrowDist = Math.distanceBetween(turretPosition, wmp);
               if (arrowDist > 50 && !emoteWheelContainer.visible) {
                   arrowSpritePointer.visible = true;
                   arrowSpritePointer.rotation = player.turretRotation + Math.PI / 2;
                   arrowSpritePointer.position.x = turretPosition.x + Math.cos(player.turretRotation) * (arrowDist);
                   arrowSpritePointer.position.y = turretPosition.y + Math.sin(player.turretRotation) * (arrowDist);
                   if (player.netData.loaded) {
                       arrowSpritePointer.tint = 0xFFFFFF;
                       cursorSprite.cursor.tint = 0xFFFFFF;
                       cursorSprite.shellLoading1.tint = 0xFFFFFF;
                       cursorSprite.shellLoading2.tint = 0xFFFFFF;
                       cursorSprite.shellLoading1.height = 16;
                       cursorSprite.shellLoading2.height = 10;
                   } else {
                       arrowSpritePointer.tint = 0xC41900;
                       cursorSprite.cursor.tint = 0xC41900;
                       if (player.lastFireTime) {
                           let percent = (Date.now()-player.lastFireTime)/player.netData.reloadTime;
                           if (percent > 1) {
                               percent = 1;
                           }
                           let percent1 = percent/0.5;
                           let percent2 = (percent-0.46)/0.5;
                           if (percent1 > 1) {
                               percent1 = 1;
                           }
                           if (percent2 < 0) {
                               percent2 = 0;
                           }
                           cursorSprite.shellLoading1.height = 16 * percent1;
                           cursorSprite.shellLoading2.height = 10 * percent2;
                       } else {
                           cursorSprite.shellLoading1.height = 0;
                           cursorSprite.shellLoading2.height = 0;
                       }
                   }

                   cursorSprite.visible = true;
               } else {
                   arrowSpritePointer.visible = false;
                   cursorSprite.visible = false;
               }
           } else {
               arrowSpritePointer.visible = false;
               cursorSprite.visible = false;
           }
       }

       let listener_pos = getListenerPos();
       if (listener_pos && listener_pos.x && listener_pos.y) {
           try {
               Howler.pos(listener_pos.x / 100000, 0, listener_pos.y / 100000);
           } catch (e) {
               console.error('Sound error 2:', e);
           }
       }

       if (recordingAnimationTick) {
           recordingAnimationTick();
       }

       if (capturer) {
           capturer.capture(app.renderer.view);
       }
   }

   game.resetGame = function() {
       tutorialContainer.tutorialData = null;
       recordingFinishedCallback = null;
       if (game.watchingRecording) {
           stopWatchingRecording();
       }
   };

   game.stopGame = function() {
       if (game.watchingRecording) {
           recordingFinishedCallback = null;
           stopWatchingRecording();
       }

       tutorialContainer.tutorialData = null;

       if (game.server) {
           game.server.stopGame();
           game.server = null;
       }
   };

   game.destroySockets = function() {
       try {
           currentWebRTCPeer.destroy();
           currentWebRTCPeer = null;
       } catch (e) {}
       try {
           socket2.disconnect();
           socket2 = null;
       } catch (e) {}
       try {
           socket.disconnect();
           socket = null;
       } catch (e) {}
   };

   game.disconnect = function(forceDisconnect) {
       if (forceDisconnect) {
           reconnecting = false;
           try {
               if (socket) {
                   socket.emit('forceDisconnect');
               }
           } catch (e) {}
       }
       if (reconnecting) {
           return;
       }

       if (!game.isInMenu) {
           try {
               if (ADSDK === 'crazygames') {
                   const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                   crazysdk.gameplayStop();
               }
           } catch (e) {}
       }

       game.disconnected = true;
       if (game.isSingleplayer) {
           game.stopGame();
           game.appComponent.reloadMenu();
           game.disconnected = false;
       } else {
           setTimeout(() => {
               if (forceDisconnect) {
                   cleanUri();
                   setTimeout(() => {
                       game.destroySockets();
                       window.location.reload();
                   }, 100);
               } else if (!reconnecting) {
                   game.destroySockets();
                   console.info('Disconnected! Attempting to reconnect.');
                   reconnecting = true;
                   game.disconnected = false;
                   setTimeout(() => {
                       init();
                   }, 1000);
               }
           }, 100);
       }
   };

   setInterval(function() {
       if (game.isInMenu) {
           game.services.ad.showBannerAd();
       }
   }, 60000);

   function copyToClipboard(elem) {
       // create hidden text element, if it doesn't already exist
       let targetId = '_hiddenCopyText_';
       let target;
       let isInput = elem.tagName === 'INPUT' || elem.tagName === 'TEXTAREA';
       let origSelectionStart, origSelectionEnd;
       if (isInput) {
           // can just use the original source element for the selection and copy
           target = elem;
           origSelectionStart = elem.selectionStart;
           origSelectionEnd = elem.selectionEnd;
       } else {
           // must use a temporary form element for the selection and copy
           target = window.document.getElementById(targetId);
           if (!target) {
               target = window.document.createElement("textarea");
               target.style.position = "absolute";
               target.style.left = "-9999px";
               target.style.top = "0";
               target.id = targetId;
               window.document.body.appendChild(target);
           }
           target.textContent = elem.textContent;
       }
       // select the content
       let currentFocus = window.document.activeElement;
       target.focus();
       target.setSelectionRange(0, target.value.length);

       // copy the selection
       let succeed;
       try {
           succeed = window.document.execCommand("copy");
       } catch (e) {
           console.error('Failed to copy:', e);
           succeed = false;
       }
       // restore original focus
       if (currentFocus && typeof currentFocus.focus === "function") {
           currentFocus.focus();
       }

       if (isInput) {
           // restore prior selection
           elem.setSelectionRange(origSelectionStart, origSelectionEnd);
       } else {
           // clear temporary content
           target.textContent = "";
       }
       return succeed;
   }

   function showScoreboard(state) {
       if (game.lobbyComponent && !game.lobbyComponent.isVisible()) {
           if (socket && !game.isSingleplayer) {
               socket.emit('scoreboard', null);
           }
           game.lobbyComponent.showModal(true, state);
       }
   }
   game.showScoreboard = showScoreboard;

   function updateScoreboard() {
       if (game.lobbyComponent) {
           game.lobbyComponent.updateData(scoreboardData);
       }
   }

   function hideScoreboard() {
       if (game.lobbyComponent && game.lobbyComponent.isVisible()) {
           if (currentMenu !== 'lobby') {
               game.lobbyComponent.showModal(false);
           }
       }
   }
   game.hideScoreboard = hideScoreboard;

   game.toggleScoreboard = function(state) {
       if (game.lobbyComponent && game.lobbyComponent.isVisible()) {
           hideScoreboard();
       } else {
           showScoreboard(state);
       }
   };

   game.lobbyReady = function() {
       idleTime = Date.now();
       socket.emit('lobbyReady');
   };

   game.lobbyJoinTeam = function(team) {
       socket.emit('lobbyJoinTeam', team);
   };

   game.lobbyNewTeam = function() {
       socket.emit('lobbyNewTeam');
   };

   game.lobbyLockTeam = function() {
       socket.emit('lobbyLockTeam');
   };

   game.getPlayer = function() {
       return player;
   };
   game.getLastControllablePlayer = function() {
       return lastControllablePlayer;
   };

   game.copyShareLink = function(elementId) {
       try {
           copyToClipboard(document.getElementById(elementId));
           return true;
       } catch (e) {
           console.error('Failed to copy link to clipboard:', e);
       }
       return false;
   };

   Math.PI2 = Math.PI * 2;
   Math.angleBetween = function (p1, p2) {
       return Math.atan2(p2.y - p1.y, p2.x - p1.x);
   };
   Math.distanceBetween = function (p1, p2) {
       return Math.sqrt(Math.pow((p1.x - p2.x), 2) + Math.pow((p1.y - p2.y), 2));
   };
   Math.deg2rad = function(degrees) {
       return degrees * (Math.PI/180);
   };
   Math.rad2deg = function(radians) {
       return radians * (180/Math.PI);
   };
   Math.normalizeAngleRadians = function(radians) {
       return radians - Math.PI2 * Math.floor(radians / Math.PI2);
   };
   Math.differenceBetweenAngles = function(current, target) {
       let mod = function ( a, n ) { return ( a % n + n ) % n; }

       let a = mod( ( current - target ), Math.PI2 );
       let b = mod( ( target - current ), Math.PI2 );

       return a < b ? -a : b;
   };
   Math.angleNormalized = function(angle) {
       return Math.atan2(Math.sin(angle), Math.cos(angle));
   };
   Math.angleDifference = function(angle1, angle2) {
       return (angle2 - angle1) % Math.PI2;
   };
   Math.anglesWithinRange = function(angle1, angle2, diff) {
       const angleDiff = Math.angleNormalized(Math.angleDifference(angle1, angle2));
       return angleDiff <= diff && angleDiff >= -diff;
   };
   Math.magnitude = function (p1) {
       return Math.hypot(p1.dx, p1.dy);
   };
   Math.dot = function (p1, p2) {
       return (p1.x*p2.x) + (p1.y*p2.y);
   };
   Math.randomInt = function (min, max) {
       return Math.floor(Math.random() * (max - min + 1) + min)
   };
   Math.vallerp = function (val1, val2, value) {
       return val1 + (val2 - val1) * value;
   };
   Math.lerp = function (vec1, vec2, value) {
       return {
           x: vec1.x + (vec2.x - vec1.x) * value,
           y: vec1.y + (vec2.y - vec1.y) * value
       };
   };
   Math.extendPoint = function (point, distance, angle) {
       return {
           x: Math.round(Math.cos(angle) * distance + point.x),
           y: Math.round(Math.sin(angle) * distance + point.y)
       };
   };
   Math.rotateAround = function({x: cx, y: cy, rotation: cr}, {x, y}, angle) {
       const cos = Math.cos(angle ?? cr), sin = Math.sin(angle ?? cr);
       return {
           x: cx + (x - cx) * cos - (y - cy) * sin,
           y: cy + (x - cx) * sin + (y - cy) * cos
       };
   };
   Math.isPointWithinBounds = function(point, bounds) {
       let i = 0, l = {p1: bounds[3]};
       while (i < bounds.length) {
           l.p2 = bounds[i++];
           if (!(0 < (l.p2.x - l.p1.x) * (point.y - l.p1.y) - (l.p2.y - l.p1.y) * (point.x - l.p1.x))) {
               return false;
           }
           l.p1 = l.p2;
       }
       return true;
   };
})();

/*
setTimeout(() => {
   game.isInMenu = false;
   game.lobbyComponent.showModal(true);
   game.lobbyComponent.updateData({
       players: [],
       teams: [],
       consumables: [
           {
               skuSlug: 'consumable-boost-1-5',
               quantity: 5
           },
           {
               skuSlug: 'consumable-boost-2',
               quantity: 2
           },
           {
               skuSlug: 'consumable-boost-3',
               quantity: 1
           },
           {
               skuSlug: 'consumable-boost-5',
               quantity: 5
           }
       ]
   });
}, 5000);
*/

/*
setTimeout(() => {
   game.isPlayScreen = true;
   game.isInMenu = false;
   game.appComponent.updateIsPlayScreen();

   game.roundEndComponent.showRoundEnd({
       roundActuallyEnded: true,
       message: 'Round Ended!',
       awards: {
           //xp: 2000,
           xp: 8000,
           coins: 0
       },
       stats: {
           'Kill': 12,
           'Assist': 5
       },
       lastXP: 0,
       isUser: false,
       clientAwardData: {
           bonusXP: 500
       }
   });

   setTimeout(() => {
       game.roundEndComponent.showUserUnlocks([
           {
               type: 'vehicle',
               key: 'm5_stout',
               researchProgress: 35
           },
           {
               type: 'html',
               key: '<i class="fa fa-flask fa-4x"></i><h4>All Research Trees</h4>'
           },
           {
               type: 'html',
               key: '<i class="fa fa-wrench fa-4x"></i><h4>Vehicle Garage</h4>'
           },
           {
               type: 'html',
               key: 'Bounce 10 shots off of your armor.<h5>+2,500 XP</h5>',
               xp: 2500,
               text: 'Complete!'
           },
           {
               type: 'skin',
               key: 'skin-stripes',
               vehicle: 'light_tank'
           },
           {
               type: 'skin',
               key: 'skin-camo_woodland_junglestripes',
               vehicle: 'light_tank'
           },
           {
               type: 'vehicle',
               key: 'assault_gun'
           },
           {
               type: 'vehicle',
               key: 'light_tank'
           }
       ]);
   }, 1000);
}, 4000);
*/

//// gameMenu.js
Vue.component('app-game-game-menu', {
    mounted: function() {
        game.gameMenuComponent = this;
    },
    data: function() {
        return {
            shouldShowModal: false,
            state: null,
            showFullscreenButton: ADSDK !== 'crazygames'
        };
    },
    methods: {
        showModal: function(val) {
            this.shouldShowModal = val;
            if (!this.shouldShowModal) {
                game.tryGameFocus();
            }
        },
        fullscreen: function() {
            this.bmc();
            game.tryFullscreen();
        },
        scoreboard: function() {
            this.bmc();
            game.showScoreboard();
            this.showModal(false);
        },
        disconnect: function() {
            this.bmc();
            game.disconnect(true);
            this.showModal(false);
        }
    },
    template: `
    <div class="game-modal" v-if="shouldShowModal">
        <div class="game-modal-content game-modal-content-sm">
            <div v-if="!state">
                <button type="button" v-on:click="bmc(); showModal(false)" @mouseenter="bme" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <h2><i class="fa fa-bars"></i> Game Menu</h2>
                <button type="button" class="app-btn app-btn-primary" v-on:click="bmc(); showModal(false)" @mouseenter="bme">
                    <i class="fa fa-play"></i> Continue Playing
                </button>
                <button type="button" class="app-btn app-btn-secondary" v-on:click="fullscreen()" v-if="showFullscreenButton" @mouseenter="bme">
                    <i class="fa fa-arrows-alt"></i> Fullscreen
                </button>
                <button type="button" class="app-btn app-btn-secondary" v-on:click="scoreboard()" @mouseenter="bme">
                    <i class="fa fa-bars"></i> Show Team List
                </button>
                <button type="button" class="app-btn app-btn-secondary" v-on:click="bmc(); state='settings'" @mouseenter="bme">
                    <i class="fa fa-gear"></i> Settings
                </button>
                <br><br>
                <button type="button" class="app-btn app-btn-danger" v-on:click="disconnect()" @mouseenter="bme">
                    <i class="fa fa-close"></i> Disconnect
                </button>
            </div>
            <div v-if="state === 'settings'">
                <app-game-settings></app-game-settings>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); state=null" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
        </div>
    </div>
    `
})

//// gameSignIn.js
Vue.component('app-game-game-sign-in', {
   mounted: function() {
       game.gameSignInComponent = this;
   },
   data: function() {
       return {
           shouldShowModal: false
       };
   },
   methods: {
       showModal: function(val) {
           this.shouldShowModal = val;
           if (this.shouldShowModal) {
               setTimeout(() => {
                   attachGauthClickHandler();
               }, 1);
           }
       }
   },
   template: `
   <div class="game-modal" v-if="shouldShowModal">
       <div class="game-modal-content game-modal-content-fixed-md">
           <button type="button" v-on:click="bmc(); showModal(false)" @mouseenter="bme" class="close" data-dismiss="modal" aria-label="Close">
               <span aria-hidden="true">&times;</span>
           </button>
           <div v-if="ADSDK === 'kongregate'" class="text-center">
               <br>
               <h2>Sign In with Kongregate</h2>
               <img class="kongregate-sign-in" @mouseenter="bme" @click="bmc(); game.signInKongregate(true)" src="/assets/menu/kongregate-reg-btn-horizontal.png">
               <br>
               <br>
               <h3>
                   <i class="fa fa-info-circle"></i> Account Support/Help<br>
                   <a class="selectable" href="mailto:support@bombsightgames.com">support@bombsightgames.com</a>
               </h3>
           </div>
           <div class="text-center" v-if="ADSDK !== 'kongregate'">
               <h2 style="float:left;"><i class="fa fa-sign-in"></i> Sign In</h2>
               <br><br>
               <state-register></state-register>
               <h2>Or</h2>
               <div id="g_id_signin" data-type="standard" @mouseenter="bme" v-on:click="bmc">
                   <i class="fa fa-google"></i>&nbsp;&nbsp;Sign In with Google
               </div>
           </div>
       </div>
   </div>
   `
})

//// garage.js
const freeVehicles = ['weevil_mkv', 'light_tank'];
const defaultEmotes = {
    'emote0': {
        emote: 'emote-affirmative'
    },
    'emote1': {
        emote: 'emote-no'
    },
    'emote2': {
        emote: 'emote-groupup'
    },
    'emote3': {
        emote: 'emote-hello'
    },
    'emote4': {
        emote: 'emote-helpme'
    },
    'emote5': {
        emote: 'emote-thankyou'
    },
    'emote6': {
        emote: 'emote-heart'
    }
};
Vue.component('state-garage', {
    mounted: function () {
        game.garageComponent = this;
    },
    data: function() {
        game.appComponent.enableBackground = !game.services.user.currentUser;
        let token = Cookies.get('token');
        if (token && game.watchingRecording) {
            game.disconnect(true);
        }

        if (token) {
            game.gameCoverVisible(true);
        }

        this.refreshSettings();

        if (token) {
            game.services.user.getSettings().then((userSettings) => {
                this.slots = userSettings.slots;
                this.globalCosmetics = userSettings.globalCosmetics ? userSettings.globalCosmetics : {};
                this.updateThumbnails();
                this.loading = false;
            });
        }

        let isDev = game.services.user.currentUser && game.services.user.currentUser.isDev;
        return {
            currentSlot: 0,
            loading: !!token,
            settings: {},
            equippedData: {},
            needToSelectResearch: false,
            isDev: isDev,
            vehicleList: [],
            skinList: window.gameServer.skinList,
            base64Test: null,
            slots: null,
            globalCosmetics: null,
            currentView: null,
            currentViewData: {},
            ownedInventoryMap: {},
            inventorySlugs: [],
            garageLocked: game.services.user.currentUser ? game.services.user.currentUser.currentRank < 2 : true,
            currentUser: game.services.user.currentUser,
            vehicleInventory: [],
            thumbnailSlotOverride: null
        };
    },
    methods: {
        equipItem: function(equipCategory, item) {
            this.bmc();
            let closeCurrentView = true;
            let slot = this.slots[this.currentSlot];

            let currentViewData = this.currentViewData;
            let equipKey = equipCategory;
            if (equipCategory === 'skin') {
                slot.skin = item.key;
                slot.skinData = {
                    offset: {x: 0, y: 0},
                    scale: 1,
                    rotation: 0
                };
                game.appComponent.updatePlayerSettings(slot);
            } else if (equipCategory === 'decal') {
                let decalKey = 'decal' + this.currentViewData.decalSlot;
                if (item.key) {
                    closeCurrentView = false;
                    let decalSlot = {};
                    equipKey = decalKey;
                    slot.decals[decalKey] = decalSlot;

                    decalSlot.decal = item.key;
                    decalSlot.decalData = {
                        offset: {x: 0, y: 0},
                        scale: 1,
                        rotation: 0
                    };
                } else {
                    delete slot.decals[decalKey];
                }
                game.appComponent.updatePlayerSettings(slot);
            } else if (equipCategory === 'emote') {
                let emoteKey = 'emote' + this.currentViewData.emoteSlot;
                if (item.key) {
                    closeCurrentView = false;
                    let emoteSlot = {};
                    equipKey = emoteKey;
                    slot.emotes[emoteKey] = emoteSlot;

                    emoteSlot.emote = item.key;
                } else {
                    delete slot.emotes[emoteKey];
                }
                this.globalCosmetics.emotes = slot.emotes;
                game.appComponent.updatePlayerSettings(slot);
            }

            this.refreshCurrentSlot();

            this.saveCurrentSlot(closeCurrentView).then(() => {
                this.equippedData[equipKey] = item;

                if (item.key) {
                    if (equipCategory === 'skin') {
                        this.changeCurrentView('skin-edit');
                    } else if (equipCategory === 'decal') {
                        this.changeCurrentView('decal-edit', {
                            decalSlot: currentViewData.decalSlot
                        });
                    } else if (equipCategory === 'emote') {
                        this.changeCurrentView('emote-slots');
                    } else {
                        this.changeCurrentView('customization');
                    }
                }

                game.services.api.recordEvent('equipItem', {
                    event_category: 'Garage',
                    event_label: item.key
                });
            });
        },
        changeCurrentView: function(newView, data) {
            this.currentView = newView;
            this.currentViewData = data ? data : {};

            if (!this.currentView || this.currentView === 'skin-edit' || this.currentView === 'decal-edit') {
                game.appComponent.enableBackground = false;
            } else {
                game.appComponent.enableBackground = true;
            }
        },
        changeCurrentSlotVehicle: async function(newVehicle, inventory) {
            let slot = this.slots[this.currentSlot];
            slot.vehicle = newVehicle;

            if (inventory && inventory.data && inventory.data.slotData) {
                if (inventory.data.slotData.skin) {
                    slot.skin = inventory.data.slotData.skin;
                    slot.skinData = inventory.data.slotData.skinData;
                } else {
                    slot.skin = null;
                }

                if (inventory.data.slotData.decals) {
                    slot.decals = inventory.data.slotData.decals;
                } else {
                    slot.decals = {};
                }
            } else {
                slot.skin = null;
                slot.decals = {};
            }

            let userSettings = await game.services.user.getSettings();
            userSettings.slots[this.currentSlot].vehicle = slot.vehicle;
            game.services.user.updateSettingsCache(userSettings);
        },
        saveCurrentSlot: async function(closeCurrentView) {
            $('#loading-overlay').show();
            let slot = this.slots[this.currentSlot];
            let slotData = {
                vehicle: slot.vehicle,
                skin: slot.skin,
                skinData: slot.skinData,
                decals: slot.decals,
                emotes: slot.emotes
            };
            let token = Cookies.get('token');
            if (token) {
                try {
                    await axios.put(API_URL + '/slot/' + this.currentSlot + '?token=' + token, slotData);
                } catch (e) {
                    game.showGrowl('Failed to save, please try again.', {type: 'danger'});
                    slot.skin = null;
                    slot.skinData = null;
                }
                this.$forceUpdate();
                $('#loading-overlay').hide();
                if (closeCurrentView) {
                    this.closeCurrentView();
                }

                let userSettings = await game.services.user.getSettings();
                userSettings.slots[this.currentSlot] = slot;
                userSettings.globalCosmetics = JSON.parse(JSON.stringify(this.globalCosmetics));
                game.services.user.updateSettingsCache(userSettings);
            } else {
                throw new Error('Not logged in.');
            }
        },
        updateSettings: function() {
            setTimeout(() => {
                game.appComponent.updatePlayerSettings(this.settings);
                this.$forceUpdate();
            }, 50);
        },
        refreshCurrentSlot: function() {
            this.selectSlot(this.currentSlot);
        },
        refreshSettings: async function() {
            if (game.services.user.isLoggedIn()) {
                let userSettings = await game.services.user.getSettings();
                this.needToSelectResearch = !userSettings.currentResearch;
            }
        },
        updateThumbnails: function() {
            for (let i=0; i<this.slots.length; i++) {
                let slot = this.slots[i];
                let vehicle = window.gameServer.vehicleListMap[slot.vehicle];
                let base = null;
                if (vehicle && vehicle.base) {
                    base = vehicle.base;
                }
                slot.thumbnail = 'assets/vehicles/' + (base ? base + '/' : '') + slot.vehicle + '/' + slot.vehicle + '_thumbnail.png';
            }
        },
        selectSlot: function(index) {
            if (!this.slots || !this.slots[index]) {
                return;
            }

            this.updateThumbnails();

            game.firstLoad = true;
            this.currentSlot = index;
            let slot = this.slots[this.currentSlot];
            if (this.thumbnailSlotOverride) {
                slot.vehicle = this.thumbnailSlotOverride;
            }
            if (game.fakeSockets.clientSocket) {
                if (game.getPlayer()) {
                    game.getPlayer().remove();
                }
                game.fakeSockets.clientSocket.emit('sandboxSwitchVehicle', slot.vehicle);
            }

            if (!slot.decals) {
                slot.decals = {};
            }

            this.refreshSettings();

            this.settings = slot;
            this.equippedData = {
                skin: slot.skin ? JSON.parse(JSON.stringify(window.gameServer.skinListMap[slot.skin])) : null,
                decals: {},
                emotes: {}
            };
            for (let i=0; i<2; i++) {
                let decalKey = 'decal' + i;
                if (slot.decals[decalKey]) {
                    this.equippedData.decals[decalKey] = JSON.parse(JSON.stringify(window.gameServer.decalListMap[slot.decals[decalKey].decal]));
                }
            }

            slot.emotes = this.globalCosmetics.emotes;
            if (!slot.emotes) {
                slot.emotes = {};
            }
            for (let i=0; i<7; i++) {
                let emoteKey = 'emote' + i;
                if (!slot.emotes[emoteKey]) {
                    slot.emotes[emoteKey] = JSON.parse(JSON.stringify(defaultEmotes[emoteKey]));
                }
                this.equippedData.emotes[emoteKey] = JSON.parse(JSON.stringify(window.gameServer.emoteListMap[slot.emotes[emoteKey].emote]));
            }
        },
        selectVehicleInfo: function(vehicle) {
            this.bmc();
            game.vehicleInfoModal.showModal(this.currentView, vehicle, this.vehicleInventory);
        },
        signIn: function() {
            this.$root.$emit('changeState', 'state-signin');
        },
        openSwitchList: async function() {
            this.bmc();
            game.appComponent.enableBackground = true;
            this.loading = true;
            this.vehicleList = [];

            let token = Cookies.get('token');
            let res = await axios.get(API_URL + '/garage/vehicleInventory?token=' + token);
            this.vehicleInventory = res.data;

            let vehicleList = JSON.parse(JSON.stringify(window.gameServer.vehicleList));
            let newVehicleList = [];
            for (let i=0; i<vehicleList.length; i++) {
                let vehicle = vehicleList[i];
                if (vehicle.key === 'medium_tank' || (!this.garageLocked && freeVehicles.includes(vehicle.key))) {
                    newVehicleList.push(vehicle);
                    continue;
                }
                for (let j=0; j<this.vehicleInventory.length; j++) {
                    let vi = this.vehicleInventory[j];
                    if (vi.skuSlug === 'vehicle-' + vehicle.key) {
                        if (vi.data && vi.data.researched) {
                            newVehicleList.push(vehicle);
                        }
                        break;
                    }
                }
            }
            this.vehicleList = newVehicleList;

            this.changeCurrentView('switch');
            this.loading = false;
        },
        openCustomization: function() {
            this.bmc();
            game.appComponent.enableBackground = true;
            this.changeCurrentView('customization');
        },
        loadInventoryType: async function(type) {
            let token = Cookies.get('token');
            let itemList = await axios.get(API_URL + '/garage/inventory?token=' + token + '&subcategory=' + type);
            this.ownedInventoryMap = {};
            for (let i=0; i<itemList.data.length; i++) {
                let inventoryItem = itemList.data[i];
                if (inventoryItem.category === 'bundle') {
                    let bundle;
                    if (inventoryItem.parentSkuSlug) {
                        bundle = window.gameServer.itemListMap[inventoryItem.parentSkuSlug];
                    } else {
                        bundle = window.gameServer.itemListMap[inventoryItem.skuSlug];
                    }
                    if (bundle && bundle.items) {
                        for (let j=0; j<bundle.items.length; j++) {
                            let item = bundle.items[j];
                            this.ownedInventoryMap[item.key] = true;
                        }
                    }
                } else {
                    this.ownedInventoryMap[inventoryItem.skuSlug] = true;
                }
            }
        },
        openSkinCategories: async function() {
            this.loading = true;
            let slot = this.slots[this.currentSlot];
            let token = Cookies.get('token');
            let res = await axios.get(API_URL + '/garage/inventory/vehicle-' + slot.vehicle + '?token=' + token);
            slot.inventoryData = res.data;

            await this.loadInventoryType('skin');

            this.changeCurrentView('skin-categories');
            this.loading = false;
        },
        openSkins: function(category) {
            let slot = this.slots[this.currentSlot];
            let skins = JSON.parse(JSON.stringify(window.gameServer.skinList[category]));
            for (let i=0; i<skins.length; i++) {
                let skin = skins[i];
                skin.visible = true;

                if (category === 'Premium') {
                    skin.visible = !!this.ownedInventoryMap[skin.key];
                    skin.canEquip = skin.visible;
                } else {
                    skin.canEquip = window.gameServer.sharedFunctions.checkSkinRequirements(skin, (slot.inventoryData && slot.inventoryData.stats) ? slot.inventoryData.stats : {});
                }

                if (!skin.canEquip && skin.requirements) {
                    skin.unlockRequirements = '';
                    let reqKeys = Object.keys(skin.requirements);
                    for (let j=0; j<reqKeys.length; j++) {
                        let reqKey = reqKeys[j];
                        let reqValue = skin.requirements[reqKey];
                        skin.unlockRequirements += 'Requirements: ' + reqValue + ' ' + reqKey + 's ';
                    }
                }
            }

            this.changeCurrentView('skins', {
                category: category,
                skins: skins
            });
        },
        openDecalSlot: function(decalSlot) {
            if (this.equippedData.decals['decal' + decalSlot]) {
                this.changeCurrentView('decal-edit', {
                    decalSlot: decalSlot
                });
            } else {
                this.openDecals(decalSlot);
            }
        },
        openDecals: async function(decalSlot) {
            this.loading = true;

            await this.loadInventoryType('decal');

            let decals = JSON.parse(JSON.stringify(window.gameServer.decalList));
            for (let i=0; i<decals.length; i++) {
                let decal = decals[i];
                decal.visible = !!this.ownedInventoryMap[decal.key] || this.isDev;
                decal.canEquip = decal.visible;
            }

            this.changeCurrentView('decals', {
                decalSlot: decalSlot,
                decals: decals
            });
            this.loading = false;
        },
        openEmoteSlot: function(emoteSlot) {
            this.openEmotes(emoteSlot);
        },
        openEmotes: async function(emoteSlot) {
            this.loading = true;

            await this.loadInventoryType('emote');

            let emotes = JSON.parse(JSON.stringify(window.gameServer.emoteList));
            for (let i=0; i<emotes.length; i++) {
                let emote = emotes[i];
                emote.visible = !!this.ownedInventoryMap[emote.key] || !emote.price || this.isDev;
                emote.canEquip = emote.visible;
            }

            this.changeCurrentView('emotes', {
                emoteSlot: emoteSlot,
                emotes: emotes
            });
            this.loading = false;
        },
        openResearch: function() {
            this.$root.$emit('changeState', 'state-research');
        },
        createThumbnail: function() {
            this.bmc();
            game.createThumbnail();
        },
        testScreenshot: function() {
            this.bmc();
            this.base64Test = game.getScreenAsBase64();
        },
        startTestDrive: function() {
            this.bmc();

            let currentVehicle = 'medium_tank';
            if (game.getPlayer()) {
                currentVehicle = game.getPlayer().netData.tankType;
            }
            game.startTestDrive(currentVehicle);
            setTimeout(() => {
                game.appComponent.updatePlayerSettings(this.settings);
                this.$forceUpdate();
            }, 300);
        },
        openShop: function(category) {
            game.appComponent.changeState('state-shop', {
                category: category
            });
        },
        closeCurrentView: async function() {
            this.changeCurrentView(null);
            game.appComponent.enableBackground = false;
            this.refreshSettings();
        },
        cancelCustomization: async function() {
            let userSettings = await game.services.user.getSettings();
            this.slots = userSettings.slots;
            this.globalCosmetics = userSettings.globalCosmetics ? userSettings.globalCosmetics : {};
            this.refreshCurrentSlot();
            this.closeCurrentView();
        }
    },
    template: `
    <div :class="{'vertical-center': !currentUser || loading}">
        <div v-if="loading">
            <img width="128" height="128" src="assets/loading.gif"><br><br>
            <h4>LOADING</h4>
        </div>
        <div v-if="!currentUser && !loading">
            <h1><i class="fa fa-wrench fa-2x"></i></h1>
            <h3>Sign in to view the garage.</h3>
            <button type="button" class="app-btn app-btn-secondary" v-on:click="signIn()" @mouseenter="bme"><i class="fa fa-sign-in"></i> Sign In</button>
        </div>
        <div v-if="currentUser && !loading">
            <br><br>
            <div v-if="currentView === 'customization'">
                <div class="row">
                    <div class="col">
                        <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); (settings && settings.skin) ? changeCurrentView('skin-edit') : openSkinCategories();" @mouseenter="bme">
                            <div>
                                <h3 style="height:50px;">Camos</h3>
                                <div style="border-radius:6px; overflow:hidden;">
                                    <div class="shop-tab-image shop-tab-skin" style="transform:scale(1);"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); changeCurrentView('decal-slots')" @mouseenter="bme">
                            <div>
                                <h3 style="height:50px;">Decals</h3>
                                <div style="border-radius:6px; overflow:hidden;">
                                    <div class="shop-tab-image shop-tab-decal" style="transform:scale(1);"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); changeCurrentView('emote-slots')" @mouseenter="bme">
                            <div>
                                <h3 style="height:50px;">Emotes</h3>
                                <div style="border-radius:6px; overflow:hidden;">
                                    <div class="shop-tab-image shop-tab-emote" style="transform:scale(1);"></div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <br>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); closeCurrentView()" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
            
            <div class="row" v-if="currentView === 'decal-edit'">
                <div class="col garage-edit-left">
                    <h4>Decal Slot {{currentViewData.decalSlot+1}}</h4>
                    <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); openDecals(currentViewData.decalSlot)" @mouseenter="bme">
                        <div v-if="!equippedData.decals['decal' + currentViewData.decalSlot]">
                            <div style="height:60px;">None</div>
                        </div>
                        <div v-if="equippedData.decals['decal' + currentViewData.decalSlot]">
                            <div style="height:50px;">{{equippedData.decals['decal' + currentViewData.decalSlot].name}}</div>
                            <div>
                                <div v-bind:style="equippedData.decals['decal' + currentViewData.decalSlot].style"></div>
                            </div>
                        </div>
                    </div>
                    <br>
                    <button v-if="equippedData.decals['decal' + currentViewData.decalSlot]" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm" v-on:click="equipItem('decal', {key:undefined})" @mouseenter="bme">
                        Unequip
                    </button>
                </div>
                
                <div class="col" v-if="settings.decals['decal' + currentViewData.decalSlot]">
                    <div class="garage-edit-right">
                        <label class="text-left">
                            Section<br>
                            <select class="app-input" v-model="settings.decals['decal' + currentViewData.decalSlot].decalData.section" style="width:435px;" @input="updateSettings">
                                <option :value="undefined">Hull</option>
                                <option value="turret">Turret</option>
                            </select>
                        </label>
                        <label class="text-left">
                            Offset X<br>
                            <input type="range" v-model="settings.decals['decal' + currentViewData.decalSlot].decalData.offset.x" min="-200" max="200" style="width:450px;" class="slider" @input="updateSettings">
                        </label>
                        <label class="text-left">
                            Offset Y<br>
                            <input type="range" v-model="settings.decals['decal' + currentViewData.decalSlot].decalData.offset.y" min="-200" max="200" style="width:450px;" class="slider" @input="updateSettings">
                        </label>
                        <label class="text-left">
                            Scale<br>
                            <input type="range" v-model="settings.decals['decal' + currentViewData.decalSlot].decalData.scale" min="0.5" max="10" step="0.1" style="width:450px;" class="slider" @input="updateSettings">
                        </label>
                        <label class="text-left" style="width:93%">
                            Rotation<br>
                            <input type="range" v-model="settings.decals['decal' + currentViewData.decalSlot].decalData.rotation" min="0" max="360" style="width:100%;" class="slider" @input="updateSettings">
                            <input type="number" v-model="settings.decals['decal' + currentViewData.decalSlot].decalData.rotation" class="app-input" placeholder="Rotation" @change="updateSettings">
                        </label>
                        <div class="row">
                            <div class="col">
                                <button type="button" class="app-btn app-btn-danger" v-on:click="cancelCustomization()" @mouseenter="bme">
                                    <i class="fa fa-close"></i> Cancel
                                </button>
                            </div>
                            <div class="col">
                                <button type="button" class="app-btn app-btn-secondary" v-on:click="bmc(); saveCurrentSlot(true)" @mouseenter="bme">
                                    <i class="fa fa-save"></i> Save
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div v-if="currentView === 'decal-slots'">
                <h3 class="text-center">Select a Decal Slot</h3>
                
                <div class="row">
                    <div class="col" v-for="(e, index) in 2">
                        <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); openDecalSlot(index)" @mouseenter="bme">
                            <div v-if="!equippedData.decals['decal' + index]">
                                <div style="height:60px;">None</div>
                            </div>
                            <div v-if="equippedData.decals['decal' + index]">
                                <div style="height:50px;">{{equippedData.decals['decal' + index].name}}</div>
                                <div>
                                    <div v-bind:style="equippedData.decals['decal' + index].style"></div>
                                </div>
                            </div>
                        </div>
                        <h3>Decal Slot {{index+1}}</h3>
                    </div>
                </div>
                <br>
                <button type="button" class="app-btn app-btn-danger" v-on:click="cancelCustomization()" @mouseenter="bme">
                    <i class="fa fa-close"></i> Cancel
                </button>
            </div>
            
            <div v-if="currentView === 'decals'">
                <h2>Decals</h2>
                <div v-for="(item, index) in currentViewData.decals" class="app-card shop-item" v-if="item.visible">
                    <div style="height:30px;">{{item.name}}</div>
                    <div style="margin-bottom:6px;">
                        <div v-bind:style="item.style"></div>
                    </div>
                    <div v-if="!item.canEquip">
                        <i class="fa fa-lock"></i> Locked
                    </div>
                    <button v-if="item.canEquip && settings['decal'] !== item.key" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm" v-on:click="equipItem('decal', item)" @mouseenter="bme">
                        Equip
                    </button>
                    <button v-if="item.canEquip && settings['decal'] === item.key" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm">
                        Equipped
                    </button>
                </div>
                <br><br>
                <button class="app-btn app-btn-gold" v-on:click="openShop('decal')" @mouseenter="bme">
                    More Decals
                </button>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); changeCurrentView('decal-slots')" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
            
            <div v-if="currentView === 'emote-slots'">
                <h3 class="text-center">Select an Emote Slot</h3>
                
                <div class="row">
                    <div class="col" v-for="(e, index) in 7">
                        <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); openEmoteSlot(index)" @mouseenter="bme">
                            <div v-if="!equippedData.emotes['emote' + index]">
                                <div style="height:60px;">None</div>
                            </div>
                            <div v-if="equippedData.emotes['emote' + index]">
                                <div style="height:50px;">{{equippedData.emotes['emote' + index].name}}</div>
                                <div>
                                    <div v-bind:style="equippedData.emotes['emote' + index].style"></div>
                                </div>
                            </div>
                        </div>
                        <h3>Emote Slot {{index+1}}</h3>
                    </div>
                </div>
                <br>
                <button type="button" class="app-btn app-btn-danger" v-on:click="cancelCustomization()" @mouseenter="bme">
                    <i class="fa fa-close"></i> Cancel
                </button>
            </div>
            
            <div v-if="currentView === 'emotes'">
                <h2>Emotes</h2>
                <div v-for="(item, index) in currentViewData.emotes" class="app-card shop-item" v-if="item.visible">
                    <div style="height:30px;">{{item.name}}</div>
                    <div style="margin-bottom:6px;">
                        <div v-bind:style="item.style"></div>
                    </div>
                    <div v-if="!item.canEquip">
                        <i class="fa fa-lock"></i> Locked
                    </div>
                    <button v-if="item.canEquip && settings['emote'] !== item.key" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm" v-on:click="equipItem('emote', item)" @mouseenter="bme">
                        Equip
                    </button>
                    <button v-if="item.canEquip && settings['emote'] === item.key" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm">
                        Equipped
                    </button>
                </div>
                <br><br>
                <button class="app-btn app-btn-gold" v-on:click="openShop('emote')" @mouseenter="bme">
                    More Emotes
                </button>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); changeCurrentView('emote-slots')" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
        
            <div class="row" v-if="currentView === 'skin-edit'">
                <div class="col garage-edit-left">
                    <h4>Camo</h4>
                    <div class="app-card app-card-clickable shop-item" v-on:click="bmc(); openSkinCategories()" @mouseenter="bme">
                        <div v-if="!equippedData['skin']">
                            <div style="height:60px;">None</div>
                        </div>
                        <div v-if="equippedData['skin']">
                            <div style="height:50px;">{{equippedData['skin'].name}}</div>
                            <div>
                                <div v-bind:style="equippedData['skin'].style"></div>
                            </div>
                        </div>
                    </div>
                    <br>
                    <button v-if="settings.skin !== null" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm" v-on:click="equipItem('skin', {key:undefined})" @mouseenter="bme">
                        Unequip
                    </button>
                    
                    <div v-if="!(settings && settings.skin && settings.skinData && settings.skinData.offset)">
                        <button type="button" class="app-btn app-btn-danger" v-on:click="cancelCustomization()" @mouseenter="bme">
                            <i class="fa fa-close"></i> Cancel
                        </button>
                    </div>
                </div>
                
                <div class="col" v-if="settings && settings.skin && settings.skinData && settings.skinData.offset">
                        <div class="garage-edit-right">
                        <label class="text-left">
                            Offset X<br>
                            <input type="range" v-model="settings.skinData.offset.x" min="-500" max="500" style="width:450px;" class="slider" @input="updateSettings">
                        </label>
                        <label class="text-left">
                            Offset Y<br>
                            <input type="range" v-model="settings.skinData.offset.y" min="-500" max="500" style="width:450px;" class="slider" @input="updateSettings">
                        </label>
                        <label class="text-left">
                            Scale<br>
                            <input type="range" v-model="settings.skinData.scale" min="0.5" max="4" step="0.1" style="width:450px;" class="slider" @input="updateSettings">
                        </label>
                        <label class="text-left" style="width:93%">
                            Rotation<br>
                            <input type="range" v-model="settings.skinData.rotation" min="0" max="360" style="width:100%;" class="slider" @input="updateSettings">
                            <input type="number" v-model="settings.skinData.rotation" class="app-input" placeholder="Rotation" @change="updateSettings">
                        </label>
                        <div class="row">
                            <div class="col">
                                <button type="button" class="app-btn app-btn-danger" v-on:click="cancelCustomization()" @mouseenter="bme">
                                    <i class="fa fa-close"></i> Cancel
                                </button>
                            </div>
                            <div class="col">
                                <button type="button" class="app-btn app-btn-secondary" v-on:click="bmc(); saveCurrentSlot(true)" @mouseenter="bme">
                                    <i class="fa fa-save"></i> Save
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div v-if="currentView === 'switch'">
                <div class="row">
                    <div class="col" v-for="(vehicle, index) in vehicleList">
                        <div class="app-card app-card-clickable shop-item" @mouseenter="bme" v-on:click="selectVehicleInfo(vehicle)">
                            <h5>{{vehicle.properties.name}}</h5>
                            <div>
                                <img class="vehicle-thumbnail" :src="'assets/vehicles/' + (vehicle.base ? vehicle.base + '/' : '') + vehicle.key + '/' + vehicle.key + '_thumbnail.png'">
                            </div>
                        </div>
                    </div>
                </div>
                <br><br>
                <button class="app-btn app-btn-gold" v-on:click="openShop('vehicle')" @mouseenter="bme">
                    More Vehicles
                </button>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); closeCurrentView()" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
            
            <div v-if="currentView === 'skin-categories'">
                <h2>Camos</h2>
                <div v-for="(item, index) in skinList" class="app-card app-card-clickable shop-item" v-on:click="bmc(); openSkins(index)" @mouseenter="bme">
                    <div style="height:50px;">{{index}}</div>
                    <div>
                        <div v-bind:style="skinList[index][0].style"></div>
                    </div>
                    <br>
                </div>
                <br><br>
                <button class="app-btn app-btn-gold" v-on:click="openShop('skin')" @mouseenter="bme">
                    More Camos
                </button>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); closeCurrentView()" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
            
            <div v-if="currentView === 'skins'">
                <h2>{{currentViewData.category}}</h2>
                <h4 v-if="currentViewData.skins[0] && currentViewData.skins[0].requirements">Unlock Requirements: {{Object.keys(currentViewData.skins[0].requirements)[0]}}s</h4>
                <div v-for="(item, index) in currentViewData.skins" class="app-card shop-item" :title="item.unlockRequirements" v-if="item.visible">
                    <div style="height:30px;">{{item.name}}</div>
                    <div style="margin-bottom:6px;">
                        <div v-bind:style="item.style"></div>
                    </div>
                    <div v-if="!item.canEquip">
                        <i class="fa fa-lock"></i> Locked
                    </div>
                    <button v-if="item.canEquip && settings['skin'] !== item.key" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm" v-on:click="equipItem('skin', item)" @mouseenter="bme">
                        Equip
                    </button>
                    <button v-if="item.canEquip && settings['skin'] === item.key" type="button" style="white-space:nowrap;" class="app-btn app-btn-secondary app-btn-sm">
                        Equipped
                    </button>
                </div>
                <br><br>
                <button class="app-btn app-btn-gold" v-on:click="openShop('skin')" @mouseenter="bme">
                    More Camos
                </button>
                <button type="button" class="app-btn app-btn-danger" v-on:click="bmc(); openSkinCategories()" @mouseenter="bme">
                    <i class="fa fa-arrow-left"></i> Return
                </button>
            </div>
            
            <div v-if="!currentView">
                <div v-if="!garageLocked && needToSelectResearch" class="app-card app-card-clickable text-center" v-on:click="openResearch()" @mouseenter="bme">
                    <div class="float-left">
                        <i style="color:#c91313; margin:8px; font-size:70px;" class="fa fa-exclamation"></i>
                    </div>
                    <div class="float-right">
                        <i style="color:#c91313; margin:8px; font-size:70px;" class="fa fa-exclamation"></i>
                    </div>
                    <h3 style="color:#c91313;">No Research Selected!</h3>
                    <p>Click here to go to the research page to select a vehicle to start unlocking.</p>
                </div>
                
                <div class="garage-slots">
                    <div class="row">
                        <div class="col" v-for="(slot, index) in slots" v-if="!garageLocked" style="width:100px;">
                            <div v-bind:class="{'slot-selected': index === currentSlot}" class="app-card-solid app-card-clickable shop-item" style="max-height:200px;" @mouseenter="bme" v-on:click="bmc(); selectSlot(index)">
                                <div class="shop-vehicle-image-background" style="margin-top:30px;">
                                    <div class="shop-vehicle-image-vehicle" v-bind:style="{backgroundImage:'url(' + slot.thumbnail + ')'}"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-8" v-if="garageLocked">
                            <br><br>
                            <h4 style="position:relative;">
                                <i class="fa fa-lock"></i> Rank 2 required to unlock other vehicle slots.
                            </h4>
                        </div>
                        <div class="col" style="padding-top:4px;">
                            <button type="button" class="app-btn app-btn-tertiary garage-btn" v-on:click="openSwitchList()" @mouseenter="bme">
                                <i class="fa fa-exchange"></i> Switch
                            </button>
                            <button type="button" class="app-btn app-btn-tertiary garage-btn" v-on:click="openCustomization()" @mouseenter="bme">
                                <div class="garage-icon-customize"></div> Customize
                            </button>
                            <button type="button" class="app-btn app-btn-tertiary garage-btn" v-on:click="startTestDrive()" @mouseenter="bme">
                                <div class="garage-icon-drive"></div> Test Drive
                            </button>
                            <button v-if="thumbnailSlotOverride" type="button" class="app-btn app-btn-secondary garage-btn" v-on:click="createThumbnail()" @mouseenter="bme">
                                Create Thumbnail
                            </button>
                            <!--
                            <button type="button" class="app-btn app-btn-secondary garage-btn" v-on:click="testScreenshot()" @mouseenter="bme">
                                Create Screenshot
                            </button>
                            <div v-if="base64Test" style="position:absolute; z-index:500; top:-600px; left:-800px;">
                                <img :src="base64Test">
                            </div>
                            -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <br><br>
    </div>
    `
})

//// gold.js
if (isDesktopApp) {
   window.electronAPI.onSteamMicroTxnAuthorizationResponse((data) => {
       if (game.goldComponent) {
           game.goldComponent.onSteamMicroTxnAuthorizationResponse(data);
       }
   });
}

Vue.component('app-game-gold', {
   mounted: function() {
       game.goldComponent = this;
   },
   beforeDestroy: function() {
       clearInterval(this.timer);
   },
   data: function() {
       return {
           purchaseWindow: null,
           timer: null,
           loading: false,
           shouldShowModal: false,
           state: null,
           currencyDisplay: '$',
           currency: 'usd',
           products: {},
           goldMessage: null,
           purchaseInfo: null
       };
   },
   methods: {
       showModal: function(val, message) {
           this.shouldShowModal = val;
           this.purchaseWindow = null;
           if (message) {
               this.goldMessage = message;
           } else {
               this.goldMessage = null;
           }
           if (this.shouldShowModal) {
               this.loading = true;

               game.services.api.recordEvent('showGold', {
                   event_category: 'Gold'
               });

               let token = Cookies.get('token');
               axios.get(API_URL + '/gold?token=' + token).then((res) => {
                   this.products = {};
                   for (let i=0; i<res.data.length; i++) {
                       let product = res.data[i];
                       if (ADSDK === 'kongregate') {
                           let kredsAmount = window.gameServer.sharedFunctions.convertCurrencyToKreds(this.currency, product.prices[this.currency].unit_amount);
                           if (product.metadata && product.metadata.bundle) {
                               product.prices[this.currency].displayPrice = '<span style="top:18px; font-size:34px;">' + kredsAmount + ' Kreds</span>';
                           } else {
                               product.prices[this.currency].displayPrice = kredsAmount + ' Kreds';
                           }
                       } else {
                           product.prices[this.currency].displayPrice = this.currencyDisplay + (product.prices[this.currency].unit_amount/100).toFixed(2)
                       }
                       this.products[product.name] = product;
                   }
                   this.loading = false;
               });
           }
       },
       showBundle: function(bundle) {
           this.bmc();
           let bundleData = JSON.parse(JSON.stringify(window.gameServer.itemListMap[bundle]));
           if (bundleData && bundleData.name) {
               let metadata = this.products[bundleData.name].metadata;
               if (metadata && metadata.goldAmount) {
                   bundleData.items.unshift({
                       key: 'gold',
                       quantity: metadata.goldAmount
                   });
               }
               game.itemInfoModal.showModal('gold', bundleData, 'bundle');
               this.showModal(false);
           }
       },
       onSteamMicroTxnAuthorizationResponse: function(data) {
           if (data.authorized) {
               $('#loading-overlay').show();
               window.electronAPI.steamGetSessionTicket((ticketData) => {
                   let token = Cookies.get('token');
                   data.ticket = ticketData.ticket;
                   axios.post(API_URL + '/checkoutGoldSteamFinalize?token=' + token, data).then((res) => {
                       if (res.data.success) {
                           this.showModal(false);

                           if (this.purchaseInfo) {
                               game.itemComponent.showModal(true, this.purchaseInfo);
                               if (this.purchaseInfo.goldAmount) {
                                   game.services.user.currentUser.goldCount += this.purchaseInfo.goldAmount;
                               }
                           }
                       }

                       $('#loading-overlay').hide();
                       this.loading = false;
                       game.appComponent.$forceUpdate();
                   }, (err) => {
                       game.showGrowl('Failed to process transaction, please contact support.', {type: 'danger'});
                       console.error('Failed to process Steam transaction:', err);
                       $('#loading-overlay').hide();
                   });
               });
           }
       },
       showCheckout: async function(product) {
           this.bmc();
           this.loading = true;

           game.services.api.recordEvent('checkoutGold', {
               event_category: 'Gold',
               event_label: this.currency + '-' + this.products[product].name
           });

           let productData = this.products[product];
           let purchaseInfo;
           try {
               if (productData.metadata.bundle && window.gameServer.itemListMap[productData.metadata.bundle]) {
                   let item = window.gameServer.itemListMap[productData.metadata.bundle];
                   purchaseInfo = {
                       name: productData.metadata.goldAmount.toLocaleString('en-US') + ' Gold',
                       secondName: item.name,
                       image: item.thumbnail,
                       goldAmount: productData.metadata.goldAmount
                   };
               } else {
                   purchaseInfo = {
                       name: productData.metadata.goldAmount.toLocaleString('en-US') + ' Gold',
                       secondName: null,
                       image: '/assets/goldicon_large.png',
                       goldAmount: productData.metadata.goldAmount
                   };
               }
               Cookies.set('purchaseInfo', JSON.stringify(purchaseInfo), {path: '/', domain: window.location.host});
           } catch (e) {}
           this.purchaseInfo = purchaseInfo;

           let analyticsId = await game.services.user.getAnalyticsId();

           let token = Cookies.get('token');

           if (ADSDK === 'kongregate') {
               let data = {
                   session: token,
                   priceId: productData.prices[this.currency].id,
                   analyticsId: analyticsId,
                   purchaseInfo: purchaseInfo
               };
               window.kongregate.mtx.purchaseItemsRemote(JSON.stringify(data), (data) => {
                   if (data.success) {
                       this.showModal(false);

                       if (purchaseInfo) {
                           game.itemComponent.showModal(true, purchaseInfo);
                           if (purchaseInfo.goldAmount) {
                               game.services.user.currentUser.goldCount += purchaseInfo.goldAmount;
                           }
                       }
                   }
                   this.loading = false;
                   game.appComponent.$forceUpdate();
               });
               return;
           } else if (ADSDK === 'steam') {
               window.electronAPI.steamGetSessionTicket((ticketData) => {
                   let data = {
                       session: token,
                       ticket: ticketData.ticket,
                       priceId: productData.prices[this.currency].id,
                       analyticsId: analyticsId,
                       purchaseInfo: purchaseInfo
                   };

                   axios.post(API_URL + '/checkoutGoldSteam?token=' + token, data).then((res) => {
                       if (res.data.success) {
                           this.showModal(false);
                       }
                       this.loading = false;
                       game.appComponent.$forceUpdate();
                   });
               });
               return;
           }

           let host = window.location.href;
           let inPopup = false;
           if (ADSDK === 'crazygames') {
               inPopup = true;
           }
           return axios.post(API_URL + '/checkoutGold?token=' + token, {
               host: host,
               priceId: productData.prices[this.currency].id,
               analyticsId: analyticsId,
               inPopup: inPopup
           }).then((res) => {
               if (inPopup) {
                   clearInterval(this.timer);
                   this.purchaseWindow = window.open(res.data.data.url, '_blank', 'left=100,top=100,width=1000,height=800');
                   this.timer = setInterval(() => {
                       if (!this.purchaseWindow || this.purchaseWindow.closed) {
                           let purchaseResult = Cookies.get('purchaseResult');
                           if (purchaseResult === 'completed') {
                               if (purchaseInfo) {
                                   game.itemComponent.showModal(true, purchaseInfo);
                                   if (purchaseInfo.goldAmount) {
                                       game.services.user.currentUser.goldCount += purchaseInfo.goldAmount;
                                   }
                               }
                           }

                           try {
                               Cookies.remove('purchaseInfo', {path: '/', domain: window.location.host});
                               Cookies.remove('purchaseResult', {
                                   path: '/',
                                   domain: window.location.host,
                                   sameSite: 'None',
                                   secure: true
                               });
                           } catch (e) {}
                           this.purchaseWindow = null;
                           clearInterval(this.timer);
                           this.loading = false;
                           this.showModal(false);
                           game.appComponent.$forceUpdate();
                       }
                   }, 500);
               } else {
                   try {
                       window.top.location.href = res.data.data.url;
                   } catch (e) {
                       if (inIframe()) {
                           window.open(res.data.data.url, '_blank');
                       } else {
                           window.location.href = res.data.data.url;
                       }
                   }
               }
           });
       }
   },
   template: `
   <div class="game-modal" v-if="shouldShowModal">
       <div class="game-modal-content">
           <button type="button" v-on:click="bmc(); showModal(false)" @mouseenter="bme" class="close" data-dismiss="modal" aria-label="Close">
               <span aria-hidden="true">&times;</span>
           </button>
           <h2 style="text-align:left;">
               <img style="margin-top:-5px;" src="/assets/goldicon.png"> Buy Gold
           </h2>
           <h2 v-if="goldMessage">
               {{goldMessage}}
           </h2>
           <div v-if="loading">
               <div v-if="purchaseWindow">
                   <h3>Please complete the transaction in the new window.</h3>
               </div>
               <div v-if="!purchaseWindow"> 
                   <img width="128" height="128" src="assets/loading.gif"><br><br>
                   <h4>LOADING</h4>
               </div>
           </div>
           <div v-if="!loading">
               <div class="row" style="overflow:hidden;">
                   <div class="col" v-if="products['Starter Bundle']">
                       <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.4); margin-top:50px; margin-bottom:60px;">
                           <img @mouseenter="bme" v-on:click="showCheckout('Starter Bundle')" class="gold-image" src="/assets/promo/promo_starter_bundle.jpg">
                           <div class="bundle-overlay">
                               <button style="position:relative; top:-12px; left:-85px; transform:scale(0.7); font-size:30px; text-shadow: 2px 2px rgba(0,0,0,0.9);" class="app-btn app-btn-gold">
                                   Starter Bundle
                               </button>
                               <div style="font-size:18px; position:relative; top:-25px; left:50px; text-align:left; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                   <img class="bundle-icon" src="/assets/goldicon_shadow.png"> <span style="font-size:26px;">10,000 Gold</span><br>
                                   <img class="bundle-icon-sm" src="/assets/booster1_thumbnail.png"> 20 x1.5 Boosters<br>
                                   <img class="bundle-icon-sm" src="/assets/booster2_thumbnail.png"> 10 x2 Boosters<br>
                                   <img class="bundle-icon-sm" src="/assets/booster3_thumbnail.png"> 5 x3 Booster
                               </div>
                               <div class="gold-overlay-bundle-price">
                                   <span v-html="products['Starter Bundle'].prices[currency].displayPrice"></span><br>
                               </div>
                           </div>
                       </div>
                   </div>
                   <div class="col" v-if="products['Scorched Earth Bundle']">
                       <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.4); margin-top:50px; margin-bottom:60px;">
                           <img @mouseenter="bme" v-on:click="showBundle('bundle-scorched-earth')" class="gold-image" src="/assets/promo/scorched_earth_bundle.gif">
                           <div class="bundle-overlay">
                               <button style="position:relative; top:-12px; left:-85px; transform:scale(0.7); font-size:30px; text-shadow: 2px 2px rgba(0,0,0,0.9);" class="app-btn app-btn-gold">
                                   Scorched Earth
                               </button>
                               <div style="font-size:18px; position:relative; top:-25px; left:50px; text-align:left; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                   <img class="bundle-icon" src="/assets/goldicon_shadow.png"> <span style="font-size:26px;">20,000 Gold</span><br>
                                   P-34/85 - Renegade<br>
                                   Pummeler II - Road Capt.<br>
                                   <img class="bundle-icon-sm" src="/assets/booster3_thumbnail.png"> 10 x3 Booster
                               </div>
                               <div class="gold-overlay-bundle-price" style="margin-left:35px;">
                                   <span v-html="products['Scorched Earth Bundle'].prices[currency].displayPrice"></span><br>
                               </div>
                           </div>
                       </div>
                   </div>
                   <!--
                   <div class="col" v-if="products['Aces Bundle']">
                       <div style="margin-left:auto; margin-right:auto; width:450px; transform:scale(1.4); margin-top:50px; margin-bottom:60px;">
                           <img @mouseenter="bme" v-on:click="showBundle('bundle-aces-tank')" class="gold-image" src="/assets/promo/aces_bundle.gif">
                           <div class="bundle-overlay">
                               <button style="position:relative; top:-12px; left:-85px; transform:scale(0.7); font-size:30px; text-shadow: 2px 2px rgba(0,0,0,0.9);" class="app-btn app-btn-gold app-btn-aces-bundle">
                                   Aces Bundle
                               </button>
                               <div style="font-size:18px; position:relative; top:-25px; left:50px; text-align:left; text-shadow: 2px 2px rgba(0,0,0,0.9);">
                                   <img class="bundle-icon" src="/assets/goldicon_shadow.png"> <span style="font-size:26px;">20,000 Gold</span><br>
                                   Tigress I - Desert Ace<br>
                                   Heckler - Bocage Ace<br>
                                   <img class="bundle-icon-sm" src="/assets/booster3_thumbnail.png"> 25 x3 Booster
                               </div>
                               <div class="gold-overlay-bundle-price">
                                   <span v-html="products['Aces Bundle'].prices[currency].displayPrice"></span><br>
                               </div>
                           </div>
                       </div>
                   </div>
                   -->
               </div>
               <div class="row" style="overflow:hidden;">
                   <div class="col">
                       <img class="gold-image" style="margin-top:5px;" src="/assets/gold_4.jpg" v-on:click="showCheckout('125,000 Gold')" @mouseenter="bme">
                       <div class="gold-overlay">
                           <div class="gold-overlay-text">
                               <span v-html="products['125,000 Gold'].prices[currency].displayPrice"></span><br>
                               <span class="gold-color">100,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"><br>
                               <div class="gold-free"><span class="gold-color">+25,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"> <span class="gold-color">Free!</span></div>
                           </div>
                       </div>
                   </div>
                   <div class="col">
                       <img class="gold-image" src="/assets/gold_2.jpg" v-on:click="showCheckout('12,000 Gold')" @mouseenter="bme">
                       <div class="gold-overlay">
                           <div class="gold-overlay-text" style="top:5%;">
                               <span v-html="products['12,000 Gold'].prices[currency].displayPrice"></span><br>
                               <span class="gold-color">10,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"><br>
                               <div class="gold-free"><span class="gold-color">+2,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"> <span class="gold-color">Free!</span></div>
                           </div>
                       </div>
                       
                       <img class="gold-image" src="/assets/gold_3.jpg" v-on:click="showCheckout('50,000 Gold')" @mouseenter="bme">
                       <div class="gold-overlay">
                           <div class="gold-overlay-text" style="top:55%;">
                            <span v-html="products['50,000 Gold'].prices[currency].displayPrice"></span><br>
                               <span class="gold-color">40,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"><br>
                               <div class="gold-free"><span class="gold-color">+10,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"> <span class="gold-color">Free!</span></div>
                           </div>
                       </div>
                   </div>
                   <div class="col">
                       <img class="gold-image" style="margin-top:5px;" src="/assets/gold_1.jpg" v-on:click="showCheckout('2,000 Gold')" @mouseenter="bme">
                       <div class="gold-overlay">
                           <div class="gold-overlay-text" style="top:65%;">
                               <span v-html="products['2,000 Gold'].prices[currency].displayPrice"></span><br>
                               <span class="gold-color">2,000</span> <img class="gold-overlay-icon" src="/assets/goldicon_shadow.png"><br>
                           </div>
                       </div>
                   </div>
               </div>
           </div>
       </div>
   </div>
   `
});

//// header.js
Vue.component('app-header', {
   mounted: function() {
       this.$root.$on('signIn', () => {
           this.currentUser = game.services.user.currentUser;
       });

       this.$root.$on('stateChanged', (currentState) => {
           this.showBattleButton = currentState !== 'state-play';

           if (this.showBattleButton) {
               this.headerMidImg = '/assets/menu/menu_header_mid_filled.png';
           } else {
               this.headerMidImg = '/assets/menu/menu_header_mid_empty.png';
           }
       });
   },
   data: function() {
       return {
           currentUser: game.services.user.currentUser,
           showBattleButton: false,
           headerMidImg: '/assets/menu/menu_header_mid_empty.png'
       };
   },
   methods: {
       signIn: function() {
           this.$root.$emit('changeState', 'state-signin');
       },
       showProfile: function() {
           this.$root.$emit('changeState', 'state-profile');
       },
       showPlay: function() {
           game.playSound('button_click');
           this.$root.$emit('changeState', 'state-play');
       },
       showSettings: function(event) {
           event.preventDefault();
           this.$root.$emit('changeState', 'state-settings');
       },
       bme: function() {
           game.playSound('button_hover');
       },
       headerMidEnter: function() {
           if (this.showBattleButton) {
               this.bme();
               this.headerMidImg = '/assets/menu/menu_header_mid_hover.png';
           }
       },
       headerMidExit: function() {
           if (this.showBattleButton) {
               this.headerMidImg = '/assets/menu/menu_header_mid_filled.png';
           }
       },
       headerMidDown: function() {
           if (this.showBattleButton) {
               this.headerMidImg = '/assets/menu/menu_header_mid_click.png';
           }
       }
   },
   template: `
   <div class="app-header">
       <div class="app-header-hr-container">
           <div class="app-header-hr-text">
               <span v-if="showBattleButton" style="font-size:40px;">
                   BATTLE
               </span>
           </div>
           <img class="app-header-hr-part" src="/assets/menu/menu_header_bar.png">
           
           <img class="app-header-hr-part" v-bind:src="headerMidImg" v-on:click="showPlay()" @mouseenter="headerMidEnter" @mouseout="headerMidExit" @mousedown="headerMidDown">
           
           <img class="app-header-hr-part app-header-hr-part-flip" src="/assets/menu/menu_header_bar.png">
       </div>
       <!--
       <div class="app-header-hr">
           <img class="app-header-hr-cap-right" src="/assets/menu/menu_header_cap.png">
       </div>
       <div class="app-header-mid">
           test
       </div>
       <div class="app-header-hr">
       
       </div>
       -->
       
       <!--
       <div v-if="!currentUser" class="app-header-profile app-header-profile-signin" v-on:click="signIn()" @mouseenter="bme">
           <i class="fa fa-sign-in"></i> Sign In
       </div>
       <div v-if="currentUser" class="app-header-profile app-header-profile-signedin" v-on:click="showProfile()" @mouseenter="bme">
           <div class="vertical-center" style="padding:6px;">
               <div class="rank-icon" v-bind:style="getRankStyle(currentUser.currentRank)"></div><b>{{currentUser.currentRank}}</b> {{currentUser.name}}
           </div>
       </div>
       <button v-if="showBattleButton" type="button" class="app-btn battle-btn app-btn-primary glowing" v-on:click="showPlay()" @mouseenter="bme">
           <i class="fa fa-play"></i> Battle
       </button>
       <div class="app-header-left">
           <a href="#" class="app-social-button app-social-button-sm btn-settings" v-on:click="showSettings($event)" @mouseenter="bme"><i class="fa fa-gear"></i></a>
       </div>
       -->
   </div>
   `
})

//// item.js
Vue.component('app-game-item', {
   mounted: function() {
       game.itemComponent = this;
   },
   data: function() {
       return {
           loading: false,
           shouldShowModal: false,
           itemData: null
       };
   },
   methods: {
       showModal: function(val, itemData) {
           this.shouldShowModal = val;
           if (this.shouldShowModal) {
               this.itemData = itemData;
               if (!this.itemData.imageStyle) {
                   this.itemData.imageStyle = {
                       backgroundImage: 'url(' + itemData.image + ')'
                   };
               }

               setTimeout(() => {
                   game.sounds['shop_sale'].play();
               }, 400);
           } else {
               this.itemData = null;
           }
       }
   },
   template: `
   <div class="game-modal" v-if="shouldShowModal && itemData" v-on:click="bmc(); showModal(false)">
       <div class="animate__animated animate__zoomInDown" style="position:relative; top:40%;">
           <div class="game-modal-center text-center" style="margin-top:50px; z-index:5">
               <div v-if="itemData.image" v-for="index in (itemData.amount ? itemData.amount : 1)" :key="index" style="position:relative; left:-45px; top:-5px; width:40px; display:inline-block;" v-bind:style="{zIndex: -index}">
                   <div class="shop-vehicle-image-vehicle" style="display:inline-block; margin:auto; transform:scale(1.35);" v-bind:style="itemData.imageStyle"></div>
               </div>
               <br>
               <h3>
                   {{itemData.name}}
                   <br>
                   <span v-if="itemData.secondName">{{itemData.secondName}}</span>
                   <span v-if="!itemData.secondName"><br></span>
                   <br>
                   <span class="gold-color">Acquired!</span>
               </h3>
               <div v-if="itemData.amount && itemData.amount > 1" class="item-acquired-number">Pack of {{itemData.amount}}</div>
           </div>
           <div class="item-acquired animate__animated animate__pulse animate__infinite animate__slow"></div>
       </div>
   </div>
   `
});

//// itemInfo.js
Vue.component('app-game-item-info', {
   mounted: function() {
       game.itemInfoModal = this;
   },
   data: function() {
       return {
           type: null,
           item: false,
           category: null,
           state: 'info'
       };
   },
   methods: {
       showModal: function(type, item, category) {
           this.type = type;
           this.item = item;
           this.category = category;

           if (this.item) {
               if (this.item.items) {
                   let itemsFormatted = [];
                   for (let i=0; i<this.item.items.length; i++) {
                       let childItem = this.item.items[i];
                       if (window.gameServer.itemListMap[childItem.key]) {
                           let childItemData = JSON.parse(JSON.stringify(window.gameServer.itemListMap[childItem.key]));
                           childItemData.quantity = childItem.quantity;
                           if (childItem.key === 'gold') {
                               childItemData.name = childItemData.quantity.toLocaleString('en-US') + ' Gold';
                               delete childItemData.quantity;
                               childItemData.imageStyle = {
                                   background: 'url(' + childItemData.thumbnail + ') center center',
                                   backgroundRepeat: 'no-repeat',
                                   width: '256px',
                                   height: '256px',
                                   marginLeft: childItemData.offsetX ? childItemData.offsetX : '-64px',
                                   position: 'relative',
                                   top: childItemData.offsetY ? childItemData.offsetY : '-64px',
                                   transform: 'scale(0.65)'
                               };
                           } else {
                               childItemData.imageStyle = {
                                   background: 'url(' + childItemData.thumbnail + ') 0 center',
                                   backgroundRepeat: 'no-repeat',
                                   width: '256px',
                                   height: '256px',
                                   marginLeft: childItemData.offsetX ? childItemData.offsetX : '-64px',
                                   position: 'relative',
                                   top: childItemData.offsetY ? childItemData.offsetY : '-64px',
                                   transform: 'scale(0.4)'
                               };
                           }
                           if (childItemData.category === 'vehicle') {
                               childItemData.imageStyle.backgroundPosition = 'center';
                               childItemData.imageStyle.transform = 'scale(0.8)';
                           }
                           itemsFormatted.push(childItemData);
                       }
                   }
                   this.item.items = itemsFormatted;
               }

               if (type === 'shop') {
                   this.state = 'info';

                   game.services.api.recordEvent('viewItem', {
                       event_category: 'Shop',
                       event_label: this.item.key
                   });
               }
           }
       },
       resolveItemRequirements: function() {
           return new Promise((resolve, reject) => {
               if (this.item.requiresSpecificVehicle) {
                   game.vehicleSelectionComponent.showModal(true, {
                       parentSkuSlug: this.item.key
                   }, resolve, reject);
               } else {
                   resolve();
               }
           });
       },
       purchaseGold: function() {
           if (!game.services.user.isLoggedIn()) {
               this.$root.$emit('changeState', 'state-signin');
               this.showModal(false);
               return;
           }

           $('#loading-overlay').show();
           let promise = game.goldComponent.showCheckout(this.item.name);
           if (promise && promise.then) {
               promise.then(() => {
                   this.showModal(false);
                   $('#loading-overlay').hide();
               }, (err) => {
                   console.error('Checkout gold error:', err);
                   this.showModal(false);
                   $('#loading-overlay').hide();
               });
           } else {
               $('#loading-overlay').hide();
           }
       },
       purchase: async function() {
           if (!game.services.user.isLoggedIn()) {
               this.$root.$emit('changeState', 'state-signin');
               this.showModal(false);
               return;
           }

           this.bmc();
           if (this.item && this.item.price) {
               if (game.services.user.currentUser.goldCount >= this.item.price) {
                   try {
                       let purchaseData = await this.resolveItemRequirements();

                       $('#loading-overlay').show();
                       let token = Cookies.get('token');

                       let analyticsId = await game.services.user.getAnalyticsId();
                       let result = await axios.post(API_URL + '/shop/' + this.category + '/purchase?token=' + token, {
                           itemKey: this.item.key,
                           purchaseData: purchaseData,
                           analyticsId: analyticsId
                       });

                       if (result && result.data && result.data.success) {
                           game.services.user.currentUser.goldCount -= this.item.price;

                           game.itemComponent.showModal(true, {
                               name: this.item.name,
                               secondName: this.item.secondName ? this.item.secondName : null,
                               image: this.item.thumbnail ? this.item.thumbnail : null
                           });
                           if (game.shopComponent && (!purchaseData || !purchaseData.selectedVehicle)) {
                               game.shopComponent.setItemOwned(this.item.key, this.item.quantity);
                           }
                           this.showModal(false);
                           game.appComponent.$forceUpdate();
                       } else {
                           if (result && result.data && result.data.message) {
                               game.showGrowl(result.data.message, {type: 'danger'});
                           } else {
                               game.showGrowl('Purchase failed, please refresh and try again.', {type: 'danger'});
                           }
                       }
                       $('#loading-overlay').hide();
                   } catch (e) {
                       $('#loading-overlay').hide();
                       if (e !== 'canceled') {
                           console.error('Purchase failed:', e);
                           game.showGrowl('Purchase failed, please refresh and try again.', {type: 'danger'});
                       }
                   }
               } else {
                   game.goldComponent.showModal(true, 'You do not have enough gold for this item!');
                   this.showModal(false);
               }
           }
       },
       openVehicle: function(item) {
           this.bmc();
           game.vehicleInfoModal.showModal('details', JSON.parse(JSON.stringify(window.gameServer.vehicleListMap[item.key])), []);
       },
       switchState: function(newState) {
           this.bmc();
           this.state = newState;
       }
   },
   template: html`
   <div class="game-modal-v2" v-if="item">
       <div class="game-modal-v2-content game-modal-v2-center game-modal-v2-content-fixed-md">
           <div class="game-modal-v2-header">
               <button class="lobby-small-button float-right lobby-close-button" type="button" v-on:click="bmc(); showModal(false)" data-dismiss="modal" aria-label="Close" @mouseenter="bme()"></button>
               <h2><i class="shell-info-icon"></i> {{item.name}}{{item.items && item.name.indexOf('Bundle') === -1 ? ' Bundle' : ''}}</h2>
           </div>
           <div class="game-modal-v2-container">
               <div class="text-center" v-if="state === 'info'">
                   <div v-if="!item.items">
                       <div class="shop-vehicle-image-background" v-bind:style="item.backgroundStyle">
                           <div class="shop-vehicle-image-vehicle" v-bind:style="item.imageStyle"></div>
                       </div>
                       <br>
                       <h3>{{item.secondName}}</h3>
                       <div v-if="item.description">{{item.description}}</div>
                       <br><br>
                   </div>
                   <div v-if="item.items" class="text-left">
                       <h3>Items in this bundle:</h3>
                       <div style="width:100%; height:450px; overflow-y:scroll; border:2px solid black;">
                           <div v-for="childItem in item.items">
                               <div style="display:inline-block; width:30%;">
                                   <div class="shop-vehicle-image-background" v-bind:style="childItem.backgroundStyle">
                                       <div class="shop-vehicle-image-vehicle" v-bind:style="childItem.imageStyle"></div>
                                   </div>
                               </div>
                               <div style="display:inline-block; width:65%; position:relative; top:-50px; margin-left:8px;">
                                   <h3>{{childItem.name}}</h3>
                                   <h3>{{childItem.secondName}}</h3>
                                   <small v-if="childItem.category === 'decal'">Decal<br></small>
                                   <small v-if="childItem.category === 'skin'">Camo<br></small>
                                   <button v-if="childItem.category === 'vehicle'" v-on:click="openVehicle(childItem)" class="app-btn app-btn-sm app-btn-secondary"  @mouseenter="bme">
                                       <i class="fa fa-info-circle"></i> Vehicle Details
                                   </button>
                                   <h4 v-if="childItem.quantity && childItem.quantity > 1">Pack of {{childItem.quantity}}</h4>
                               </div>
                           </div>
                       </div>
                       <br>
                       <h4 v-if="item.xpBonus" class="text-center gold-color">
                           +{{item.xpBonus}}% XP bonus in battle when equipped
                           <br>
                       </h4>
                       <h4 v-if="item.limitedTime" class="text-center gold-color">
                           Limited Time Offer!
                           <br>
                       </h4>
                       <br>
                   </div>
               </div>
               <div v-if="type === 'shop' && item.price" class="text-center">
                   <h2 class="gold-color">
                       <img style="margin-top:-5px;" src="/assets/goldicon.png"> {{item.price}}
                   </h2>
                   <button class="app-btn app-btn-gold" v-on:click="purchase()" @mouseenter="bme">
                       BUY NOW
                   </button>
               </div>
               <div v-if="type === 'gold'" class="text-center">
                   <button class="app-btn app-btn-gold" v-on:click="purchaseGold()" @mouseenter="bme">
                       BUY NOW
                   </button>
               </div>
           </div>
       </div>
   </div>
   `
})

//// itemRoll.js
const rollItems = [
   {
       id: 'gold_5',
       image: '/assets/goldicon_large.png',
       text: '5 Gold',
       style: {}
   },
   {
       id: 'gold_10',
       image: '/assets/goldicon_large.png',
       text: '10 Gold',
       style: {}
   },
   {
       id: 'gold_20',
       image: '/assets/goldicon_large.png',
       text: '20 Gold',
       style: {}
   },
   {
       id: 'gold_50',
       image: '/assets/goldicon_large.png',
       text: '50 Gold',
       style: {}
   },
   {
       id: 'gold_100',
       image: '/assets/goldicon_large.png',
       text: '100 Gold',
       style: {}
   }
];

const scrollOffset = 50;
const itemWidth = 178;
Vue.component('app-game-item-roll', {
   mounted: function() {
       game.itemRollComponent = this;
   },
   beforeDestroy: function() {
       clearInterval(this.timer);
   },
   data: function() {
       return {
           shouldShowModal: false,
           rollItems: rollItems.concat(JSON.parse(JSON.stringify(rollItems))),
           loading: false,
           timer: null,
           rollSpeed: 0,
           tickSpeed: 0,
           xPos: 0,
           containerStyle: {
               position: 'relative',
               width: '2000px'
           }
       };
   },
   methods: {
       showModal: async function(val) {
           this.shouldShowModal = val;

           this.loading = false;
           if (this.shouldShowModal) {
               this.loading = true;
               let token = Cookies.get('token');
               let wonItemServer = null;
               try {
                   let analyticsId = await game.services.user.getAnalyticsId();
                   let roll = await axios.post(API_URL + '/shop/gold/claimGold?token=' + token, {
                       analyticsId: analyticsId
                   });
                   if (roll.data.success && roll.data.item) {
                       wonItemServer = roll.data.item;
                   }
               } catch (e) {
                   console.error('Claim gold failed:', e);
               }

               if (!wonItemServer) {
                   game.showGrowl('Failed to redeem gold, please try again.', {type: 'danger'});
                   this.showModal(false);
                   return;
               }

               let wonItem = null;
               let wonItemIndex = 0;
               for (let i = 0; i < rollItems.length; i++) {
                   let item = rollItems[i];
                   if (item.id === wonItemServer.id) {
                       wonItemIndex = i;
                       wonItem = item;
                       break;
                   }
               }

               if (!wonItem) {
                   console.error('Invalid win item.');
                   this.shouldShowModal = false;
                   return;
               }

               this.loading = false;
               game.appComponent.showClaimGold(false);
               clearInterval(this.timer);
               this.xPos = (-itemWidth * wonItemIndex) + (((itemWidth-(itemWidth/2)) * Math.random()) * 0.6);

               this.rollSpeed = 61.5;
               this.tickSpeed = itemWidth;
               this.timer = setInterval(() => {
                   this.xPos -= this.rollSpeed;
                   this.tickSpeed -= this.rollSpeed;
                   if (this.tickSpeed <= 0) {
                       this.tickSpeed = itemWidth;
                       game.sounds['button_hover'].play();
                   }

                   this.rollSpeed *= 0.99;
                   if (this.rollSpeed <= 0.5) {
                       clearInterval(this.timer);
                       game.sounds['button_hover'].play();
                       setTimeout(() => {
                           this.showModal(false);
                           game.itemComponent.showModal(true, {
                               name: wonItemServer.amount + ' Gold',
                               secondName: null,
                               image: wonItem.image
                           });
                           game.services.user.currentUser.goldCount += wonItemServer.amount;
                           game.appComponent.$forceUpdate();
                       }, 1000);
                   }
                   if (this.xPos <= -((rollItems.length * itemWidth) + scrollOffset)) {
                       this.xPos = -scrollOffset;
                   }
                   this.containerStyle.left = Math.round(this.xPos) + 'px';

                   for (let i = 0; i < this.rollItems.length; i++) {
                       let item = this.rollItems[i];
                       let x = i * itemWidth;
                       let dist = Math.abs(x + (this.xPos - 250));
                       let opacity = 1 - (dist / 300);
                       if (opacity < 0) {
                           opacity = 0;
                       } else if (opacity > 1) {
                           opacity = 1;
                       }
                       item.style = {
                           opacity: opacity,
                           transform: 'scale(' + (0.8 + (opacity*0.3)) + ')'
                       };
                   }

                   this.$forceUpdate();
               }, 15);
           } else {
               clearInterval(this.timer);
           }
       }
   },
   template: `
   <div class="game-modal" v-if="shouldShowModal">
       <div v-if="loading" style="position:relative; top:40%;">
           <img width="128" height="128" src="assets/loading.gif"><br><br>
           <h4>LOADING</h4>
       </div>
       <div class="animate__animated animate__fadeInDown" v-if="!loading" style="position:relative; top:40%;">
           <div class="game-modal-center text-center" style="margin-top:50px; z-index:5">
               <div class="item-roll-container">
                   <div v-bind:style="containerStyle">
                       <div class="item-roll" v-for="item in rollItems" v-bind:style="item.style">
                           <div v-if="item.image" class="shop-vehicle-image-vehicle" v-bind:style="{backgroundImage:'url(' + item.image + ')'}"></div>
                           <h3 class="gold-color">{{item.text}}</h3>
                       </div>
                   </div>
               </div>
           </div>
       </div>
   </div>
   `
});

//// leaderboards.js
Vue.component('state-leaderboards', {
   data: function() {
       axios.get(API_URL + '/leaderboard').then((res) => {
           let data = res.data;

           let leaderboard = [];
           for (let i=0; i<data.leaderboard.length; i++) {
               let player = data.leaderboard[i];
               player.rank = game.services.user.calculateRank(player.xp);
               leaderboard.push(player);
           }

           this.leaderboard = leaderboard;
           this.loading = false;
       });

       return {
           loading: true,
           leaderboard: []
       };
   },
   template: `
   <div>
       <h1>Top 25 Players</h1>
       <div v-if="loading">
           <img width="128" height="128" src="assets/loading.gif"><br><br>
           <h4>LOADING</h4>
       </div>
       <div v-if="!loading">
           <h3 v-if="leaderboard.length <= 0">No players found.</h3>
           <div v-for="(player, index) in leaderboard" class="app-card">
               {{ index+1 }}. {{ player.name }}
               <div class="pull-right" style="margin-top:-8px;">
                   <div class="rank-icon" v-bind:style="getRankStyle(player.rank)"></div> <b>{{player.rank}}</b>
               </div>
           </div>
           <br><br>
       </div>
   </div>
   `
})

//// lobby.js
let updatedUrlWithInvite = false;
Vue.component('app-game-lobby', {
    mounted: function() {
        game.lobbyComponent = this;
    },
    data: function() {
        return {
            shouldShowModal: false,
            inviteLink: null,
            inviteCopyTimeout: null,
            isScoreboard: false,
            consumableActivated: null,
            timerMessage: '',
            playerCount: 0,
            currentRank: 0,
            currentPlayerData: {},
            lowestPlayerCount: 100,
            currentPlayerId: null,
            data: {},
            loggedIn: false,
            selectedSlot: 0,
            state: null,
            friends: [],
            availableVehicles: [
                {
                    name: 'Medium Tank',
                    key: 'medium_tank',
                    requiredRank: 0
                },
                {
                    name: 'Weevil Mk. V',
                    key: 'weevil_mkv',
                    requiredRank: 2
                },
                {
                    name: 'Light Tank',
                    key: 'light_tank',
                    requiredRank: 2
                }
            ]
        };
    },
    methods: {
        showModal: function(visible, state) {
            if (game.isInMenu) {
                this.shouldShowModal = false;
                return;
            }
            if (!this.shouldShowModal && visible) {
                this.attentionGrabTime = Date.now() + 2000 + Math.round(1000 * Math.random());
                this.consumableActivated = null;
            }
            if (!this.shouldShowModal && visible) {
                this.state = state ?? null;
            }
            this.shouldShowModal = visible;
            this.isScoreboard = !state;
            if (!this.shouldShowModal) {
                this.data = {};
            }

            this.updateMusic();
        },
        updateMusic: function() {
            if (game.settings.disableMusic || !this.shouldShowModal || this.isScoreboard) {
                if (game.sounds['theme_lobby']) {
                    game.sounds['theme_lobby'].stop();
                }
            } else {
                if (game.sounds['theme_lobby'] && !game.sounds['theme_lobby'].playing()) {
                    game.sounds['theme_lobby'].play();
                }
            }
        },
        isVisible: function() {
            return this.shouldShowModal;
        },
        updateData: function(data) {
            if (!this.shouldShowModal || this.isScoreboard) {
                this.isScoreboard = data.menu === 'scoreboard';
            }
            this.loggedIn = !!Cookies.get('token');
            if (data.shareLinkToken && data.shareLinkToken.indexOf('undefined') === -1) {
                if (ADSDK === 'steam' || ADSDK === 'kongregate') {
                    this.inviteLink = null;
                } else if (ADSDK === 'crazygames') {
                    if (this.shouldShowModal) {
                        const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                        this.inviteLink = crazysdk.inviteLink({i: data.shareLinkToken});
                    }
                } else {
                    this.inviteLink = window.location.protocol + '//' + window.location.host + '?i=' + data.shareLinkToken;

                    if (ADSDK !== 'kongregate' && !updatedUrlWithInvite) {
                        updatedUrlWithInvite = true;
                        let qdata = getQuery();
                        if (!qdata || qdata.i !== data.shareLinkToken) {
                            try {
                                let url = new URL(window.location);
                                url.searchParams.set('i', data.shareLinkToken);
                                window.history.pushState(null, '', url.toString());
                            } catch (e) {}
                        }
                    }
                }
            } else {
                this.inviteLink = null;
            }

            if (isDesktopApp && game.isPlayScreen && !game.isInMenu) {
                window.electronAPI.steamSetRichPresence('steam_display', '#Status_InGame');
                if (data.shareLinkToken && data.shareLinkToken.indexOf('undefined') === -1) {
                    window.electronAPI.steamSetRichPresence('connect', data.shareLinkToken);
                } else {
                    window.electronAPI.steamSetRichPresence('connect', '');
                }
            }

            let oldConsumables = this.data.consumables;
            let oldChallenges = this.data.challenges;
            this.data = data;
            if (!this.data.challenges) {
                this.data.challenges = oldChallenges;
            }
            this.playerCount = this.data.players.length;
            this.lowestPlayerCount = 100;
            if (data.clientId !== undefined && data.clientId !== null) {
                this.currentPlayerId = data.clientId;
            }
            for (let i=0; i<this.data.teams.length; i++) {
                let team = this.data.teams[i];
                team.playerList = [];
                let playerCount = 0;
                for (let j=0; j<this.data.players.length; j++) {
                    let player = this.data.players[j];
                    player.rank = game.services.user.calculateRank(player.xp);
                    if (player.clientId === this.currentPlayerId) {
                        this.currentPlayerData = player;
                        player.classes = {'lobby-current-player': true};
                    }

                    if (player.team === team.id) {
                        if (!player.isBot && player.clientId !== data.clientId) {
                            playerCount++;
                        }
                        if (player === this.currentPlayerData && this.currentPlayerData.isTeamLeader) {
                            team.isCurrentPlayerLeader = true;
                        }

                        team.playerList.push(player);
                        this.data.players.splice(j, 1);
                        j--;
                    }
                }

                team.actualPlayerCount = playerCount;
                if (playerCount < this.lowestPlayerCount) {
                    this.lowestPlayerCount = playerCount;
                }
            }

            if (oldConsumables) {
                this.data.consumables = oldConsumables;
            }

            if (!oldConsumables && this.data.consumables) {
                for (let i=0; i<this.data.consumables.length; i++) {
                    let item = this.data.consumables[i];
                    let itemData = window.gameServer.itemListMap[item.skuSlug];
                    if (itemData) {
                        item.name = itemData.name;
                        item.sound = itemData.sound;
                        item.colClasses = {};
                        item.baseClasses = {
                            'app-card-solid-clickable': true
                        };
                        item.sort = itemData.sort;
                        item.imageStyle = {
                            marginLeft: 'auto',
                            marginRight: 'auto',
                            marginTop: '-60px',
                            marginBottom: '-60px',
                            background: 'url(' + (itemData.texture ? itemData.texture : itemData.thumbnail) + ') 0 center',
                            width: '256px',
                            height: '256px',
                            position: 'relative',
                            transform: 'scale(0.6)'
                        };
                        if (item.name === 'XP Boost x5') {
                            item.imageStyle.backgroundPosition = '-772px -772px';
                        }
                    }
                    this.data.consumables.sort((a, b) => {
                        return a.sort - b.sort;
                    });
                }
            }

            this.currentRank = 0;
            if (this.currentPlayerData && this.currentPlayerData.xp) {
                this.currentRank = this.currentPlayerData.rank;
            }

            if (this.data.slots && this.data.slots.length) {
                this.availableVehicles = this.data.slots;
            }

            for (let i=0; i<this.availableVehicles.length; i++) {
                let slot = this.availableVehicles[i];
                let vehicle = window.gameServer.vehicleListMap[slot.key];
                let base = null;
                if (vehicle && vehicle.base) {
                    base = vehicle.base;
                }
                slot.thumbnail = 'assets/vehicles/' + (base ? base + '/' : '') + slot.key + '/' + slot.key + '_thumbnail.png';
            }

            this.updateMusic();
        },
        setCurrentPlayerId: function(clientId) {
            this.currentPlayerId = clientId;
        },
        getCurrentPlayerData: function() {
            return this.currentPlayerData;
        },
        updateRoundTimer: function(secondsTilStart) {
            if (!this.shouldShowModal || !this.data) {
                return;
            }

            if (secondsTilStart > 0) {
                if (this.data.roundStateType === 'lobby') {
                    this.timerMessage = 'Round starting in ' + secondsTilStart + ' seconds';
                } else {
                    this.timerMessage = 'Round ending in ' + secondsTilStart + ' seconds';
                }
            } else {
                this.timerMessage = 'Starting...';
            }

            if (this.data && this.data.consumables && this.data.consumables.length && !this.consumableActivated) {
                if (this.attentionGrabTime && Date.now() >= this.attentionGrabTime) {
                    this.attentionGrabTime = Date.now() + 5000 + Math.round(5000 * Math.random());
                    let item = this.data.consumables[Math.floor(Math.random()*this.data.consumables.length)];
                    if (item && item.quantity) {
                        item.baseClasses = {
                            'app-card-solid-clickable': true,
                            'animate__animated': true,
                            'animate__pulse': true,
                            'animate__repeat-2': true
                        };
                        setTimeout(() => {
                            if (!this.consumableActivated) {
                                item.baseClasses = {
                                    'app-card-solid-clickable': true
                                };
                            }
                        }, 2000);
                    }
                    this.$forceUpdate();
                }
            }
        },
        getTeamHex: function(teamId) {
            return game.getTeamHex(teamId);
        },
        ready: function() {
            game.playSound('button_click');
            game.mainSocket.emit('lobbyReady');
        },
        lockTeam: function(team) {
            game.mainSocket.emit('lobbyLockTeam');
            team.locked = !team.locked;
            this.$forceUpdate();
        },
        joinTeam: function(team) {
            game.playSound('button_click');
            game.mainSocket.emit('lobbyJoinTeam', team.id);
        },
        selectVehicle: function(index) {
            if (this.selectedSlot !== index) {
                game.playSound('button_click');
            }

            this.selectedSlot = index;
            game.mainSocket.emit('lobbySelectVehicle', this.selectedSlot);
        },
        activateConsumable: function(item) {
            if (this.consumableActivated) {
                return;
            }
            this.consumableActivated = item.skuSlug;

            game.mainSocket.emit('activateConsumable', item.skuSlug);

            game.services.api.recordEvent('activateConsumable', {
                event_category: 'Game',
                event_label: item.skuSlug
            });

            for (let i=0; i<this.data.consumables.length; i++) {
                let it = this.data.consumables[i];
                it.colClasses = {
                    'animate-width-0': true
                };
                it.baseClasses = {
                    'animate__animated': true,
                    'animate__fadeOut': true
                };
            }
            item.colClasses = null;
            item.baseClasses = null;
            this.$forceUpdate();

            setTimeout(() => {
                if (item.sound && game.sounds[item.sound]) {
                    game.sounds[item.sound].play();
                }
                item.quantity--;
                item.baseClasses = {
                    'animate__animated': true,
                    'animate__tada': true,
                    'animate-horizontal-center': true
                };
                if (item.name === 'XP Boost x5') {
                    item.classes = {
                        'animate-boost-large': true
                    };
                } else {
                    item.classes = {
                        'animate-boost': true
                    };
                }
                this.$forceUpdate();
            }, 800);
        },
        openPlayerMenu: function(player) {
            game.playerMenuComponent.openPlayerMenu(player, this.currentPlayerData);
        },
        copyShareLink: function() {
            if (typeof this.inviteCopyTimeout !== 'number') {
                game.copyShareLink('scoreboard-menu-share-link');
            }
            clearTimeout(this.inviteCopyTimeout);
            this.inviteCopyTimeout = setTimeout(() => {
                this.inviteCopyTimeout = undefined;
            }, 3000);
        },
        disconnect: function() {
            this.bmc();
            game.disconnect(true);
            this.showModal(false);
        },
        goToSignIn: function() {
            this.bmc();
            game.gameSignInComponent.showModal(true);
        },
        openSteamInviteFriends: function() {
            this.bmc();
            this.state = 'invite';
            this.friends = [];
            const stateMap = {
                'Online': 10,
                'Busy': 5,
                'Away': 4,
                'Offline': -10,
            };
            window.electronAPI.steamGetFriends((friends) => {
                friends.sort((a, b) => {
                    let stateValueA = stateMap[a.state];
                    let stateValueB = stateMap[b.state];
                    if (stateValueA === stateValueB) {
                        return a.name.localeCompare(b.name);
                    } else {
                        return stateValueB - stateValueA;
                    }
                });
                this.friends = friends;
            });
        },
        inviteFriend: function(friend) {
            if (friend && friend.steamid && this.data && this.data.shareLinkToken) {
                window.electronAPI.steamInviteFriend(friend.steamid, this.data.shareLinkToken);
            }
            friend.inviteSent = true;
            this.$forceUpdate();
        }
    },
    template: html`
        <div class="game-modal" v-if="shouldShowModal">
            <div id="lobby-scoreboard">
                <div class="lobby-challenges" v-if="data && data.challenges && !data.privateGame">
                    <app-game-challenges :challenges="data.challenges" style="transform:scale(0.75); margin-top:-44px;"></app-game-challenges>
                </div>
                <div id="lobby-scoreboard-header">
                    <button class="lobby-small-button float-left" type="button" v-on:click="bmc(); state = 'disconnect'"
                            aria-label="Disconnect" @mouseenter="bme"><i class="fa fa-arrow-left"
                                                                         aria-hidden="true"></i></button>
                    <div class="lobby-profile text-left float-left">
                        <template v-if="!loggedIn">
                            <button id="lobby-login" class="lobby-small-button float-left" type="button"
                                    v-on:click="goToSignIn" aria-label="Login" @mouseenter="bme"><i
                                    class="fa fa-sign-in"></i></button>
                            <div class="lobby-header-profile-info d-flex flex-column justify-content-center align-items-center">
                                <div>Login to earn XP and<br>increase your rank!</div>
                            </div>
                        </template>
                        <!--
                        <template v-else>
                            <div id="lobby-profile" class="lobby-small-button float-left"><i class="fa fa-user"></i></div>
                            <div class="lobby-header-profile-info d-flex flex-column justify-content-center align-items-center">
                                <div class="lobby-profile-name"><span>{{currentPlayerData.name}}</span></div>
                                <div class="lobby-profile-rank">
                                    <div class="rank-icon" v-bind:style="getRankStyle(currentRank)"></div> {{currentRank}}
                                </div>
                            </div>
                        </template>
                        -->
                    </div>
                    <div id="lobby-scoreboard-logo"></div>
                    <button id="lobby-readyup" v-if="!isScoreboard && !currentPlayerData.ready" type="button"
                            v-on:click="ready()" @mouseenter="bme">Ready
                    </button>
                    <button class="lobby-small-button float-right lobby-close-button" type="button"
                            v-on:click="bmc(); game.hideScoreboard()" data-dismiss="modal" aria-label="Close"
                            @mouseenter="bme" :disabled="!isScoreboard"></button>
                    <button id="lobby-settings" class="lobby-small-button float-right" type="button"
                            v-on:click="bmc(); state = (state !== 'settings' ? 'settings' : null)" aria-label="Settings"
                            @mouseenter="bme"><i class="fa fa-gear"></i></button>
                    <button id="lobby-fullscreen" v-if="ADSDK !== 'crazygames'" class="lobby-small-button float-right"
                            type="button" v-on:click="bmc(); game.tryFullscreen()" data-dismiss="modal"
                            aria-label="Fullscreen" @mouseenter="bme"><i class="fa fa-arrows-alt"></i></button>
                </div>
                <h5 v-if="!isScoreboard && timerMessage" id="lobby-timer-status">{{timerMessage}}</h5>
                <div id="lobby-scoreboard-content"
                     v-bind:class="{'lobby-scoreboard-timer-status': !isScoreboard && timerMessage}">
                    <div v-if="!data.disableVehicleSelection" class="lobby-vehicle-selection-wrapper">
                        <h3>Vehicle Select</h3>
                        <button v-for="(vehicle, index) in availableVehicles"
                                :disabled="vehicle.requiredRank > currentRank && !data.forceAllowVehicleSelection" type="button" class="lobby-vehicle-card"
                                v-bind:class="{'lobby-vehicle-selected': selectedSlot === index}"
                                v-on:click="selectVehicle(index)" @mouseenter="bme">
                            <div v-bind:style="{ backgroundImage: 'url(' + vehicle.thumbnail + ')' }"></div>
                            <p v-if="vehicle.requiredRank > currentRank && !data.forceAllowVehicleSelection">
                                <i class="fa fa-lock"></i> Locked<br>
                                (Requires Rank {{vehicle.requiredRank}})
                            </p>
                            <h5 class="d-flex justify-content-center align-items-center">{{vehicle.name}}</h5>
                        </button>
                    </div>
                    <div id="lobby-scoreboard-main"
                         v-bind:class="{'lobby-scoreboard-full-width': data.disableVehicleSelection}">
                        <div v-if="state === 'settings'" id="lobby-scoreboard-main-content" class="lobby-app-alt-state">
                            <app-game-settings></app-game-settings>
                            <button class="lobby-text-button m-3" type="button" v-on:click="bmc(); state=null"
                                    aria-label="Return" @mouseenter="bme"><i class="fa fa-arrow-left"></i> Return
                            </button>
                        </div>
                        <div v-else-if="state === 'disconnect'" id="lobby-scoreboard-main-content"
                             class="lobby-app-alt-state">
                            <h2>Are you sure you want to leave?</h2>
                            <div>
                                <div class="text-center">
                                    <p class="m-1">If you leave, you'll lose all progress made during this match.</p>
                                    <button class="lobby-text-button m-2" type="button"
                                            v-on:click="bmc(); state = 'escape'" aria-label="Cancel" @mouseenter="bme">
                                        Keep Playing
                                    </button>
                                    <button class="lobby-text-button m-2" type="button" v-on:click="disconnect"
                                            aria-label="Disconnect" @mouseenter="bme">Disconnect
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div v-else-if="state === 'invite'" id="lobby-scoreboard-main-content"
                             class="lobby-app-alt-state">
                            <button class="lobby-text-button m-3" type="button" v-on:click="bmc(); state=null"
                                    aria-label="Return" @mouseenter="bme"><i class="fa fa-arrow-left"></i> Return
                            </button>

                            <h2>Invite Friends</h2>
                            <div>
                                <div v-for="friend in friends" class="app-card app-card-sm"
                                     v-bind:class="{'app-card-clickable': !friend.inviteSent}"
                                     v-on:click="!friend.inviteSent && inviteFriend(friend)" @mouseenter="bme">
                                    <img v-if="friend.avatar" style="display:inline-block;" :src="friend.avatar">&nbsp;&nbsp;
                                    {{friend.name}} - {{friend.state}}<span v-if="friend.inviteSent" style="color:#d9a227;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Invite sent!</span>
                                </div>
                            </div>
                        </div>
                        <div v-else id="lobby-scoreboard-main-content">
                            <!-- TODO: Gamemode information. Icon, title, description, max points, etc. You could do some neat stuff here with it. -->
                            <h5 v-if="data.xpMultiplier && !data.privateGame" class="m-3 gold-color">
                                <span v-if="data.xpMultiplier > 1"><i class="fa fa-star"></i> {{data.xpMultiplier}}x XP multiplier for this gamemode!</span>
                                <span v-if="data.xpMultiplier < 1"><i class="fa fa-exclamation"></i> {{data.xpMultiplier}}x XP multiplier for this gamemode</span>
                            </h5>
                            <div v-if="loggedIn && !data.privateGame && !isScoreboard" class="lobby-consumable-list">
                                <ul v-if="data.consumables && data.consumables.length">
                                    <template v-for="(item, index) in data.consumables">
                                        <li v-if="item.quantity || consumableActivated === item.skuSlug"
                                            class="lobby-consumable-boost" v-bind:class="item.baseClasses"
                                            @mouseenter="!consumableActivated && bme()"
                                            v-on:click="activateConsumable(item)">
                                            <div class="shop-vehicle-image-vehicle"
                                                 v-bind:class="[item.classes, 'lobby-' + item.skuSlug]"
                                                 v-bind:style="item.imageStyle"></div>
                                            <h5>{{item.name}}</h5>
                                            <small>{{item.quantity}} Owned</small>
                                        </li>
                                    </template>
                                </ul>
                                <h5 v-else class="m-3">Purchase a boost in the store to activate it here and earn more
                                    XP!</h5>
                            </div>
                            <div v-if="game.isSingleplayer" style="font-family: 'Mont', sans-serif;">
                                <h3 class="m-3">Welcome to the tutorial for STUG!</h3>
                                <h4 class="m-3">Follow the in-game hints to complete your objectives!</h4>
                            </div>
                            <template v-else>
                                <div class="lobby-players" v-if="!isScoreboard">
                                    <div class="lobby-players-header">
                                        <h5>
                                            <span v-if="!data.privateGame">Public </span>
                                            <span v-else><i class="fa fa-lock"></i> Private </span>
                                            Lobby ({{playerCount}} Player<span v-if="playerCount !== 1">s</span>)
                                        </h5>
                                    </div>
                                    <div class="lobby-players-wrapper">
                                        <div class="lobby-team-players-wrapper">
                                            <div v-for="(player, index) in data.players"
                                                 style="font-size:16px; display:inline-block; margin:5px; width:auto;"
                                                 class="app-card app-card-clickable app-card-sm"
                                                 v-on:click="openPlayerMenu(player)" @mouseenter="bme">
                                                <i class="fa fa-close" v-if="!player.ready" style="color:red;"></i>
                                                <i class="fa fa-check" v-if="player.ready" style="color:green;"></i>
                                                <span v-if="player.rank"><div class="rank-icon"
                                                                              v-bind:style="getRankStyle(player.rank, 0.5, 1.5)"></div> {{player.rank}} </span><span
                                                    v-bind:class="player.classes">{{player.name}}</span>
                                            </div>
                                            <div v-if="data.privateGame" class="lobby-players-notice">
                                                This game will not earn any XP<span v-if="!isMobile && inviteLink"> and can only be joined with the invite link below</span>.
                                            </div>
                                        </div>
                                        <div class="lobby-players-footer"></div>
                                    </div>
                                </div>
                                <template v-if="data.teams && data.teams.length <= 2">
                                    <div v-if="!data.isMatchmaking && (data.roundStateType !== 'lobby' || data.privateGame)"
                                         class="lobby-teams d-flex justify-content-center flex-wrap">
                                        <div v-for="(team, index) in data.teams" class="lobby-team">
                                            <div class="lobby-team-header">
                                                <h5>{{team.name}} ({{team.players}}/{{team.maxPlayers}})</h5>
                                                <button v-if="!isScoreboard && data.privateGame" class="lobby-join-team"
                                                        type="button" v-on:click="joinTeam(team)"
                                                        @mouseenter="bme"></button>
                                                <div v-else class="lobby-join-team"></div>
                                            </div>
                                            <div class="lobby-team-points" v-if="data.maxScore">
                                                <h6 v-if="isScoreboard">
                                                    {{Math.floor((team.score/data.maxScore)*100)}}%</h6>
                                                <div v-bind:style="{ width: Math.floor((team.score/data.maxScore) * 100) + '%', backgroundColor: currentPlayerData.team === team.id ? '#1963a2' : '#b52204' }"></div>
                                            </div>
                                            <div class="lobby-team-players">
                                                <div class="lobby-team-players-wrapper">
                                                    <div v-if="!team.playerList.length"
                                                         class="m-0 lobby-players-notice">Awaiting players to join...
                                                    </div>
                                                    <div v-for="(player, index) in team.playerList"
                                                         class="app-card app-card-clickable app-card-sm lobby-player"
                                                         v-on:click="openPlayerMenu(player)">
                                                    <span v-if="!isScoreboard">
                                                        <i class="fa fa-close" v-if="!player.ready"
                                                           style="color:red;"></i>
                                                        <i class="fa fa-check" v-if="player.ready"
                                                           style="color:green;"></i>
                                                    </span>
                                                        <span v-if="isScoreboard" class="float-right">
                                                        {{player.score}}
                                                    </span>
                                                        <span v-if="player.rank"><div class="rank-icon"
                                                                                      v-bind:style="getRankStyle(player.rank, 0.5, 1.5)"></div> {{player.rank}} </span><span
                                                            v-bind:class="player.classes">{{player.name}}</span> <i
                                                            v-if="player.isTeamLeader" class="fa fa-star"
                                                            style="color:yellow;"></i>
                                                    </div>
                                                </div>
                                                <div class="lobby-players-footer"></div>
                                            </div>
                                        </div>
                                    </div>
                                </template>
                                <template v-else-if="playerCount">
                                    <div class="lobby-players">
                                        <div class="lobby-players-header">
                                            <h5>Scoreboard ({{playerCount}} Player<span
                                                    v-if="playerCount !== 1">s</span>)</h5>
                                        </div>
                                        <div class="lobby-players-wrapper">
                                            <div class="lobby-team-players-wrapper">
                                                <template v-for="(team, index) in data.teams">
                                                    <div v-for="(player, index) in team.playerList"
                                                         style="font-size:16px; display:inline-block; margin:5px; width:auto;"
                                                         class="app-card app-card-clickable app-card-sm d-block"
                                                         v-on:click="openPlayerMenu(player)" @mouseenter="bme">
                                                        <span v-if="player.rank"><div class="rank-icon"
                                                                                      v-bind:style="getRankStyle(player.rank, 0.5, 1.5)"></div> {{player.rank}} </span><span
                                                            v-bind:class="player.classes">{{player.name}}</span><span
                                                            class="float-right">{{player.score}}</span>
                                                    </div>
                                                </template>
                                            </div>
                                            <div class="lobby-players-footer"></div>
                                        </div>
                                    </div>
                                </template>
                                <div v-if="ADSDK === 'steam' || ADSDK === 'kongregate'">
                                    <div v-if="data.shareLinkToken" id="lobby-invite-wrapper"
                                         v-bind:class="{'invite-copied': typeof inviteCopyTimeout === 'number'}">
                                        <h5>Invite Code</h5>
                                        <div class="input-group">
                                            <div class="input-group-prepend">
                                                <button type="button" v-on:click="copyShareLink(); bmc();"
                                                        @mouseenter="bme"></button>
                                            </div>
                                            <input type="text" v-model="data.shareLinkToken" id="scoreboard-menu-share-link"
                                                   placeholder="" readonly>
                                        </div>
                                    </div>
                                    <button v-if="ADSDK === 'steam'" class="lobby-text-button" id="lobby-invite-friends" type="button"
                                            v-on:click="openSteamInviteFriends()" aria-label="Invite Friends"
                                            @mouseenter="bme">
                                        <i class="fa fa-sign-in"></i> Invite Friends
                                    </button>
                                </div>
                                <div v-if="!isMobile && inviteLink" id="lobby-invite-wrapper"
                                     v-bind:class="{'invite-copied': typeof inviteCopyTimeout === 'number'}">
                                    <h5>Invite Link</h5>
                                    <div class="input-group">
                                        <div class="input-group-prepend">
                                            <button type="button" v-on:click="copyShareLink(); bmc();"
                                                    @mouseenter="bme"></button>
                                        </div>
                                        <input type="text" v-model="inviteLink" id="scoreboard-menu-share-link"
                                               placeholder="" readonly>
                                    </div>
                                </div>
                            </template>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    `
})

//// mapEditor.js
Vue.component('state-map-editor', {
   data: function() {
       game.isMapEditor = true;

       game.startSingleplayer(false, true, false, false, null, null, () => {

       });

       return {};
   },
   template: `<div></div>`
});

//// matching.js
Vue.component('app-game-matching', {
   mounted: function() {
       game.matchmakingComponent = this;

       this.$root.$on('menuSocketCreated', (menuSocket) => {
           menuSocket.on('matchingData', (data) => {
               this.matchingData = data;
           });

           menuSocket.on('joinGame', (data) => {
               game.play(null, null, data);
           });

           menuSocket.on('exitMatchmaking', (data) => {
               this.cancel();
               if (data && data.message) {
                   game.showGrowl(data.message, {type: 'danger'});
               }
           });

           menuSocket.on('disconnect', () => {
               this.cancel();
           });
       });
   },
   unmounted: function() {
       this.cancel();
   },
   data: function() {
       return {
           shouldShowModal: false,
           matching: false,
           matchingStart: Date.now(),
           matchingTime: '0:00',
           matchingIntervalId: null,
           matchingData: {
               players: 1
           }
       };
   },
   methods: {
       showModal: function(val) {
           this.shouldShowModal = val;
       },
       startMatching: function(data) {
           if (!this.matching) {
               this.showModal(true);
               this.matching = true;
               this.matchingStart = Date.now();
               this.matchingTime = '0:00';
               game.services.socket.getMenuSocket().emit('enterMatchmaking', data);
               if (!this.matchingIntervalId) {
                   this.matchingIntervalId = setInterval(() => {
                       let diff = Date.now() - this.matchingStart;
                       let minutes = Math.floor(diff / 60000);
                       var seconds = ((diff % 60000) / 1000).toFixed(0);
                       this.matchingTime = minutes + ":" + (seconds < 10 ? '0' : '') + seconds;
                   }, 1000);
               }

               game.services.api.recordEvent('enterMatchmaking', {
                   event_category: 'Menu'
               });
           }
       },
       cancel: function() {
           this.showModal(false);
           if (this.matchingIntervalId) {
               clearInterval(this.matchingIntervalId);
               this.matchingIntervalId = null;
           }
           if (this.matching) {
               this.matching = false;
               game.services.socket.getMenuSocket().emit('exitMatchmaking', {});
           }
       }
   },
   template: `
   <div class="matching-modal" v-if="shouldShowModal">
       <h2>Searching for a match...</h2>
       <img width="128" height="128" src="assets/loading.gif"><br><br>
       <br><br>
       <h3>{{matchingTime}}</h3>
       <h4>{{matchingData.players}} Players Searching</h4>
       <br><br>
       <button class="app-btn app-btn-danger app-btn-sm" v-on:click="cancel()">
           <i class="fa fa-close"></i> Cancel
       </button>
   </div>
   `
})

//// mixins.js
Vue.mixin({
   methods: {
       getRankStyle: function(curRank, scale, transform) {
           if (!scale) {
               scale = 1;
           }

           let tx = Math.floor(curRank/5);
           let ty = 0;
           if (tx >= 24) {
               tx = 8;
               ty = 1;
           } else if (tx >= 16) {
               tx -= 16;
               ty = 1;
           }
           let style = {
               backgroundImage: 'url(/assets/rank_icons.png)',
               backgroundPosition: '-' + (tx*Math.round(32*scale)) + 'px -' + (ty*Math.round(32*scale)) + 'px',
               backgroundRepeat: 'repeat',
               backgroundSize: Math.round(512*scale) + 'px' + ' ' + Math.round(64*scale) + 'px',
               width: Math.round(32*scale) + 'px',
               height: Math.round(32*scale) + 'px',
               top: Math.round(6*scale) + 'px',
               left: Math.round(4*scale) + 'px'
           };
           if (transform) {
               style.transform = 'scale(' + transform + ')';
           }
           return style;
       },
       bme: function() {
           game.playSound('button_hover');
       },
       bmc: function() {
           game.playSound('button_click');
       }
   }
});

//// play.js
const featuredVideos = [
   'nCQY7Lyhw3A',
   'FI3RoNDEPbE',
   'YR4ipxXGiTI',
   'Bofst6cT9mg',
   'imlonzwLxJc',
   'VS8_Iz6feRc',
   'JIpAWfoAN4I',
   'cZvq5vDwKEw',
   'Dw5fJuC2MGg',
   'mu6RT45rU_M',
];

const randomModeStart = 14 * 60 * 60 * 1000;
const randomModeEnd = 19 * 60 * 60 * 1000;

Vue.component('state-play', {
   mounted: function () {
       game.playComponent = this;
   },
   created: function() {
       this.updateTimer();
       this.timer = setInterval(this.updateTimer, 1000);
   },
   beforeDestroy: function() {
       clearInterval(this.timer);
   },
   data: function () {
       let newUpdates = false;
       try {
           let lastUpdateSeen = Cookies.get('lastUpdateSeen');
           if (lastUpdateSeen && lastUpdateSeen !== window.gameServer.sharedConstants.VERSION) {
               newUpdates = true;
           }
       } catch (e) {}

       let playerName = '';
       try {
           if (window.localStorage) {
               playerName = window.localStorage.getItem('name');
           }
       } catch (e) {}
       if (game.services.user.currentUser) {
           playerName = game.services.user.currentUser.name.split(' ')[0];
       }

       axios.get(API_URL + '/gameStats').then((res) => {
           let data = res.data;

           this.playerCount = data.playerCount;
           this.gameCount = data.gameCount;
           this.currentRandomGamemode = data.currentRandomGamemode;

           let regionsKeys = Object.keys(data.regions);
           let selectedRegion = 'NA1';
           let selectedRegionDist = 100000;
           regionsKeys.sort((a, b) => {
               return a > b;
           });

           let regions = [];
           for (let i=0; i<regionsKeys.length; i++) {
               let region = data.regions[regionsKeys[i]];
               regions.push(region);
               let dist = getDistanceFromLatLonInKm(data.coords[0], data.coords[1], region.coords[0], region.coords[1]);
               if (dist < selectedRegionDist) {
                   selectedRegion = region.code;
                   selectedRegionDist = dist;
               }
           }
           this.regionOptions = regions;
           this.selectedRegion = selectedRegion;
       });

       let featuredVideoId = null;
       if (featuredVideos && featuredVideos.length) {
           featuredVideoId = featuredVideos[Math.floor(Math.random()*featuredVideos.length)];
       }

       if (isDesktopApp && game.services.user.isLoggedIn() && !game.disableTutorialAsk) {
           setTimeout(() => {
               game.startTutorial();
           }, 1);
       }

       let isDev = game.services.user.currentUser && game.services.user.currentUser.isDev;
       let isFirstLoad = !game.hasDoneFirstLoad;
       game.hasDoneFirstLoad = true;
       return {
           firstLoad: isFirstLoad,
           gameCount: 0,
           playerCount: 0,
           isDev: isDev,
           newUpdates: newUpdates,
           featuredVideoId: featuredVideoId,
           currentMenu: null,
           createGameData: {
               createGame: true,
               privateGame: true,
               disableBots: true,
               gamemode: 'conquest'
           },
           currentRandomGamemode: null,
           currentUser: game.services.user.currentUser,
           battleModeDisabled: !game.services.user.currentUser || game.services.user.currentUser.currentRank < 5,
           randomModeDisabled: true,
           randomModeUnlockTime: '00:00:00',
           gameListLoading: false,
           gameList: [],
           playerName: playerName,
           inviteCode: '',
           selectedRegion: 'NA1',
           regionOptions: [
               {
                   name: 'North America',
                   code: 'NA1',
                   coords: [40.7128, -74.006],
                   playerCount: 0,
                   gameRoomCount: 0
               }
           ]
       };
   },
   methods: {
       updateTimer: function() {
           this.randomModeUnlockTime = null;
           this.randomModeDisabled = false;
           return;

           const startOfToday = new Date();
           const startOfTomorrow = new Date();
           startOfToday.setUTCHours(0, 0, 0, 0);
           startOfTomorrow.setUTCHours(0, 0, 0, 0);
           startOfTomorrow.setDate(startOfToday.getDate() + 1);

           let currentStartTime = startOfToday.getTime() + randomModeStart;
           let currentEndTime = startOfToday.getTime() + randomModeEnd;
           let timeUntilCurrentStart = Math.floor(currentStartTime - Date.now());
           let timeUntilCurrentEnd = Math.floor(currentEndTime - Date.now());
           if (timeUntilCurrentStart <= 0 && timeUntilCurrentEnd > 0) {
               if (timeUntilCurrentEnd <= 30 * 60 * 1000) {
                   this.randomModeUnlockTime = msToTime(timeUntilCurrentEnd);
               } else {
                   this.randomModeUnlockTime = null;
               }
               this.randomModeDisabled = false;
           } else {
               let nextStartTime = startOfTomorrow.getTime() + randomModeStart;
               if (nextStartTime > 24 * 60 * 60 * 1000) {
                   nextStartTime = startOfToday.getTime() + randomModeStart;
               }
               let timeUntilNextRefresh = Math.floor(nextStartTime - Date.now());
               if (timeUntilNextRefresh < 0) {
                   nextStartTime = startOfTomorrow.getTime() + randomModeStart;
                   timeUntilNextRefresh = Math.floor(nextStartTime - Date.now());
               }

               this.randomModeUnlockTime = msToTime(timeUntilNextRefresh);
               this.randomModeDisabled = true;
           }
       },
       startMatchmaking: function(gamemode, force) {
           game.playSound('button_click');

           let name = this.playerName;

           try {
               if (!name && window.localStorage) {
                   name = window.localStorage.getItem('name');
               }
           } catch (e) {}

           if (!name) {
               name = 'Guest';
           }

           let invalidNameMessage = false;
           if (!name) {
               invalidNameMessage = 'Please enter a name.';
           } else if(/[^a-zA-Z0-9\[\]]/.test(name)) {
               invalidNameMessage = 'Names can only have letters and numbers.';
           } else if (name.length <= 2) {
               invalidNameMessage = 'Name is too short.';
           } else if (name.length > 16) {
               invalidNameMessage = 'Name is too long.';
           }

           if (invalidNameMessage) {
               if (force) {
                   name = 'Guest';
               } else {
                   game.showGrowl(invalidNameMessage, {type: 'danger'});
                   return;
               }
           }

           if (name === 'Guest') {
               name = 'Guest' + Math.round(Math.random()*9999);
           }

           try {
               if (window.localStorage) {
                   window.localStorage.setItem('name', name);
               }
           } catch (e) {}
           this.playerName = name;

           /*
           //TODO: Make sure to trigger tutorial with this too.
           game.matchmakingComponent.startMatching({
               name: name,
               regionCode: this.selectedRegion,
               session: Cookies.get('token')
           });
           */

           game.play(null, {
               currentRandomGamemode: this.currentRandomGamemode?.key,
               gamemode: gamemode,
               playerName: this.playerName,
               regionCode: this.selectedRegion
           }, null, force);

           game.services.api.recordEvent('playGamemode', {
               event_category: 'Game',
               event_label: (gamemode === 'random' && this.currentRandomGamemode) ? this.currentRandomGamemode.key : gamemode
           });
       },
       startTutorial: function() {
           game.playSound('button_click');
           game.startTutorial();
       },
       startSingleplayer: function(isTutorial, isSandbox) {
           game.playSound('button_click');
           game.startSingleplayer(isTutorial, isSandbox);
       },
       showGameList: function() {
           game.playSound('button_click');
           this.currentMenu = 'gameList';
           this.gameListLoading = true;

           let playerXP = (game.services.user.currentUser && game.services.user.currentUser.currentXp) ? game.services.user.currentUser.currentXp : 1000;
           axios.get(API_URL + '/gameList').then((res) => {
               let data = res.data;

               let games = [];
               if (data && data.games && data.games.length) {
                   games = data.games;
                   games.sort(function(a, b) {
                       return b.players - a.players;
                   });

                   if (!this.isDev) {
                       for (let i = 0; i < games.length; i++) {
                           let game = games[i];
                           if (playerXP > window.gameServer.sharedConstants.MIN_XP_FOR_GUEST_GAME && game.averageClientXP <= window.gameServer.sharedConstants.MIN_XP_FOR_GUEST_GAME) {
                               games.splice(i, 1);
                               i--;
                           } else if (this.battleModeDisabled && game.gamemode === 'Battle') {
                               games.splice(i, 1);
                               i--;
                           }
                       }
                   }
               }

               this.gameList = games;
               this.gameListLoading = false;
           });

           game.services.api.recordEvent('openGameList', {
               event_category: 'Menu'
           });
       },
       joinGame: function(selectedGame) {
           game.playSound('button_click');
           if (selectedGame) {
               if (!game.queryData) {
                   game.queryData = {};
               }

               game.queryData.i = selectedGame.token;
               game.play(null, {
                   playerName: this.playerName,
                   regionCode: this.selectedRegion
               });
           }
       },
       joinInviteCode: function() {
           if (this.inviteCode && this.inviteCode.indexOf('-') !== -1) {
               if (!game.queryData) {
                   game.queryData = {};
               }
               let inviteCode = this.inviteCode;
               if (inviteCode.indexOf('?i=') !== -1) {
                   inviteCode = inviteCode.substr(inviteCode.indexOf('?i=') + 3, inviteCode.length).trim();
               }
               game.queryData.i = inviteCode;

               if (game.isGameLoaded) {
                   setTimeout(() => {
                       game.play(null);
                   }, 250);
               }
           } else {
               game.showGrowl('Invalid invite code.', {type: 'danger'});
           }
       },
       createGame: function() {
           game.playSound('button_click');
           if (this.currentUser) {
               game.play(this.createGameData, {
                   playerName: this.playerName,
                   regionCode: this.selectedRegion,
                   gamemode: this.createGameData.gamemode
               });
           }
       },
       returnToMainMenu: function() {
           game.playSound('button_click');
           this.currentMenu = null;
       },
       openChangeLog: function() {
           game.playSound('button_click');
           this.newUpdates = false;
           Cookies.set('lastUpdateSeen', window.gameServer.sharedConstants.VERSION, {expires: 365, path: '/', domain: window.location.host});

           game.services.api.recordEvent('openChangeLog', {
               event_category: 'Menu'
           });
       },
       showProfileEdit: function() {
           this.$root.$emit('changeState', {
               state: 'state-profile',
               editProfile: true
           });
       },
       onNameInputBlur: function() {
           let name = this.playerName ? this.playerName.trim() : '';
           if (name && game.verifyName(name)) {
               if (window.localStorage) {
                   window.localStorage.setItem('name', name);
               }
           }
       },
       showRecordings: function() {
           this.$root.$emit('changeState', 'state-recordings');
       },
   },
   template: html`
       <div style="margin-top:8px;">
           <div class="row">
               <div class="col" v-if="currentUser" style="text-align:left;">
                   <input v-model="playerName" class="app-input" placeholder="Name" disabled="disabled">
                   <button v-on:click="showProfileEdit()" type="button" class="app-btn app-btn-tertiary"
                           style="float:right; position:relative; top:-61px; left:-6px; margin-bottom:-61px; width:84px; font-size:20px; height:45px;"
                           @mouseenter="bme">
                       <i class="fa fa-edit"></i> Edit
                   </button>
               </div>
               <div class="col" v-if="!currentUser">
                   <input v-model="playerName" class="app-input" placeholder="Name" @blur="onNameInputBlur">
               </div>
               <div class="col">
                   <select class="app-input" v-model="selectedRegion">
                       <option disabled value="">Select a Region</option>
                       <option v-for="region in regionOptions" v-bind:value="region.code">
                           {{ region.name }}<!--({{ region.playerCount }} Players)-->
                       </option>
                   </select>
               </div>
           </div>
           <div v-if="!currentMenu">
               <div class="row">
                   <div class="col">
                       <div class="app-card-solid app-card-solid-clickable app-play-gamemode-icon"
                            v-on:click="startMatchmaking('conquest')" @mouseenter="bme">
                           Conquest
                           <img src="/assets/menu/menu_splash_conquest.png">
                       </div>
                   </div>
                   <div class="col">
                       <div class="app-card-solid app-play-gamemode-icon"
                            v-on:click="!battleModeDisabled && startMatchmaking('battle')"
                            v-bind:class="{'app-card-solid-clickable': !battleModeDisabled, 'app-card-solid-disabled': battleModeDisabled}"
                            @mouseenter="!battleModeDisabled && bme()">
                           Battle
                           <img src="/assets/menu/menu_splash_battle.png">

                           <div class="app-card-overlay" v-if="battleModeDisabled">
                               <div class="app-card-overlay-text">
                                   <i class="fa fa-lock fa-2x"></i><br>
                                   Unlocks at<br>
                                   Rank 5
                               </div>
                           </div>
                       </div>
                   </div>
                   <div class="col">
                       <div v-if="currentRandomGamemode" class="app-card-solid app-play-gamemode-icon"
                            v-on:click="!randomModeDisabled && startMatchmaking('random')"
                            v-bind:class="{'app-card-solid-clickable': !randomModeDisabled, 'app-card-solid-disabled': randomModeDisabled}"
                            @mouseenter="!randomModeDisabled && bme()">
                           {{currentRandomGamemode.title}}
                           <img style="border-radius:10px;"
                                :src="'/assets/menu/menu_splash_' + currentRandomGamemode.key + '.png'">

                           <div class="app-card-overlay" v-if="randomModeDisabled && !randomModeUnlockTime">
                               <div class="app-card-overlay-text">
                                   <i class="fa fa-lock fa-2x"></i><br>
                                   Sign in<br>
                                   to Unlock
                               </div>
                           </div>
                           <div class="app-card-overlay" v-if="randomModeDisabled && randomModeUnlockTime">
                               <div class="app-card-overlay-text">
                                   <i class="fa fa-lock fa-2x"></i><br>
                                   Unlocks in<br>
                                   {{randomModeUnlockTime}}
                               </div>
                           </div>
                           <div class="app-card-overlay" style="background:none;"
                                v-if="!randomModeDisabled && randomModeUnlockTime">
                               <div class="app-card-overlay-text">
                                   <br>
                                   Locks in<br>
                                   {{randomModeUnlockTime}}
                               </div>
                           </div>
                       </div>
                   </div>
                   <div class="col align-self-center">
                       <div class="row">
                           <div class="col">
                               <div class="app-card-solid app-card-solid-clickable" v-on:click="showGameList()"
                                    @mouseenter="bme">
                                   Game List
                                   <img src="/assets/menu/menu_splash_serverlist.png">
                               </div>
                           </div>
                       </div>
                       <div class="row">
                           <div class="col">
                               <div class="app-card-solid app-card-solid-clickable" v-on:click="startTutorial()"
                                    @mouseenter="bme">
                                   Tutorial
                                   <img src="/assets/menu/menu_splash_tutorial.png">
                               </div>
                           </div>
                       </div>
                   </div>
               </div>
               <div style="text-align:left; width:550px; margin-left:auto; margin-right:auto;">
                   <input v-model="inviteCode" maxlength="35" class="app-input" placeholder="Game Invite Code">
                   <button v-on:click="joinInviteCode()" type="button" class="app-btn app-btn-tertiary"
                           style="float:right; position:relative; top:-61px; left:-6px; margin-bottom:-61px; width:84px; font-size:20px; height:45px;"
                           @mouseenter="bme">
                       <i class="fa fa-sign-in"></i> Join
                   </button>
               </div>
               <div class="row" style="margin:22px;">
                   <div class="col-6">
                       <div v-if="featuredVideoId">
                           <iframe v-bind:src="'https://www.youtube.com/embed/' + featuredVideoId" width="420"
                                   height="240" allowfullscreen frameborder="0"></iframe>
                       </div>
                   </div>
                   <div class="col-6" style="overflow:hidden; height:240px;">
                       <app-game-challenges style="transform:scale(0.65); margin-top:-62px; margin-bottom:0;"></app-game-challenges>
                   </div>
               </div>
               <div class="row">
                   <div class="col">
                       <button type="button" class="app-btn app-btn-tertiary" style="padding:12px;"
                               v-on:click="showRecordings()" @mouseenter="bme">
                           <i class="fa fa-video-camera"></i> Replays
                       </button>
                   </div>
                   <div class="col" v-if="newUpdates">
                       <a href="#" class="app-btn app-btn-tertiary new-update-message"
                          style="padding:12px; cursor:default;" v-on:click="$event.preventDefault(); openChangeLog()"
                          data-toggle="modal" data-target="#changeLogModal" @mouseenter="bme">
                           <i class="fa fa-exclamation bounce"></i> New Updates
                       </a>
                   </div>
                   <div class="col" v-if="!newUpdates">
                       <a href="#" class="app-btn app-btn-tertiary" style="padding:12px; cursor:default;"
                          v-on:click="$event.preventDefault(); openChangeLog()" data-toggle="modal"
                          data-target="#changeLogModal" @mouseenter="bme">
                           <i class="fa fa-list"></i> Change Log
                       </a>
                   </div>
               </div>
               <div class="app-footer row">
                   <div class="col-3">
                       <a target="_blank" class="app-social-button social-tiktok float-right"
                          href="https://www.tiktok.com/@stug_game" @mouseenter="bme" v-on:click="bmc()">
                           <img src="assets/social/tiktok.png">
                       </a>
                       <a target="_blank" class="app-social-button social-youtube float-right"
                          href="https://www.youtube.com/@stug_game" @mouseenter="bme" v-on:click="bmc()">
                           <i class="fa fa-youtube-play" aria-hidden="true"></i>
                       </a>
                       <!-- <div v-if="ADSDK !== 'steam'"> -->
                       <a target="_blank" class="app-social-button social-steam float-right"
                          href="https://store.steampowered.com/app/1920500/STUG/" @mouseenter="bme" v-on:click="bmc()">
                           <img src="assets/social/steam.png">
                       </a>
                   </div>
                   <div class="col-6 app-footer-mid">
                       <a href="#" onclick="event.preventDefault();" data-toggle="modal" data-target="#aboutModal">About</a>
                       <div class="line-insert"></div>
                       <a href="https://bombsightgames.com/legal/tos" target="_blank">Terms of Service</a>
                       <div class="line-insert"></div>
                       <a href="https://bombsightgames.com/legal/privacy_policy" target="_blank">Privacy Policy</a>
                       <div class="line-insert"></div>
                       <a href="https://bombsightgames.com/legal/cookie_policy" target="_blank">Cookie Policy</a>
                       <br>
                       <small><a href="https://bombsightgames.com/" target="_blank" style="letter-spacing: 1px;">Copyright
                           © 2023 Bombsight Games. All Rights Reserved.</a></small>
                   </div>
                   <div class="col-3">
                       <a href="https://discord.gg/JqhpCJrvA9" target="_blank" class="app-social-button social-discord"
                          @mouseenter="bme" v-on:click="bmc()">
                           <img src="assets/social/discord.png">
                       </a>
                       <a href="https://www.reddit.com/r/stugio/" target="_blank"
                          class="app-social-button social-reddit" @mouseenter="bme" v-on:click="bmc()">
                           <i class="fa fa-reddit-alien" aria-hidden="true"></i>
                       </a>
                       <a href="https://twitter.com/bombsightgames" target="_blank"
                          class="app-social-button social-twitter" @mouseenter="bme" v-on:click="bmc()">
                           <i class="fa fa-twitter" aria-hidden="true"></i>
                       </a>
                   </div>
               </div>
           </div>
           <div v-if="currentMenu === 'gameList'">
               <br>
               <div v-if="gameListLoading">
                   <img width="128" height="128" src="assets/loading.gif"><br><br>
                   <h4>LOADING</h4>
               </div>
               <div v-if="!gameListLoading">
                   <h3 v-if="gameList.length <= 0">No games found.</h3>
                   <div v-for="game in gameList" class="app-card app-card-clickable" v-on:click="joinGame(game)">
                       <div class="row">
                           <div class="col text-left">
                               <b>Game #{{ game.id }}</b>
                               <i v-if="game.isPrivate" class="fa fa-lock"></i>
                               <span v-if="game.averageClientXP >= 125000 && game.averageClientXP < 2000000">
                                   <div class="rank-icon" v-bind:style="getRankStyle(60)"></div>
                                   <span style="color:#e0bd0f; position:relative; top:-1px;">Medium Rank</span>
                               </span>
                               <span v-if="game.averageClientXP >= 2000000">
                                   <div class="rank-icon" v-bind:style="getRankStyle(200)"></div>
                                   <span style="color:#e00f0f; position:relative; top:-1px;">High Rank</span>
                               </span>
                               <br>
                               {{game.gamemode}} - {{ game.state === 'lobby' ? 'In Lobby' : 'Playing' }}
                           </div>
                           <div class="col pull-right text-right">
                               <b><i class="fa fa-user"></i> {{ game.players }}/{{ game.maxPlayers }}</b><br>
                               <i class="fa fa-globe"></i> {{ game.region.name }}
                           </div>
                       </div>
                   </div>
               </div>
               <br>
               <button type="button" class="app-btn app-btn-secondary" v-if="currentUser"
                       v-on:click="currentMenu='createGame'; bmc();" @mouseenter="bme">
                   <i class="fa fa-plus"></i> Create Game
               </button>
               <button type="button" class="app-btn app-btn-danger" v-on:click="returnToMainMenu()" @mouseenter="bme">
                   <i class="fa fa-arrow-left"></i> Return
               </button>
               <br><br>
           </div>
           <div v-if="currentMenu === 'createGame'">
               <br>
               <div class="app-card text-center">
                   <h1><i class="fa fa-plus"></i> Create Game</h1>
                   <p>Create a new private game lobby instead of joining an existing game.</p>
                   <br>
                   <div v-if="isDev" class="row" style="margin: 20px;">
                       <div class="col-sm-1">
                           <input class="app-input" type="checkbox" id="checkbox" v-model="createGameData.privateGame">
                       </div>
                       <div class="col text-left">
                           <label>
                               <i class="fa fa-lock"></i> Private game?
                           </label>
                           <p>(Other players can only join a private game with an invite link, but you cannot earn XP
                               or complete challenges.)</p>
                       </div>
                   </div>
                   <div class="row">
                       <div class="col text-left">
                           <h4>Gamemode</h4>
                           <select class="app-input" v-model="createGameData.gamemode">
                               <option value="conquest">Conquest</option>
                               <option value="battle">Battle</option>
                               <option value="tank_game">Tank Game</option>
                               <option value="tank_ball">Tank Ball</option>
                               <option value="tiger_hunt">Tiger Hunt</option>
                               <option value="capture_the_flag">Capture the Flag</option>
                               <option value="team_deathmatch">Team Deathmatch</option>
                               <option value="free_for_all">Free for All</option>
                               <option value="mystery_tanks">Mystery Tanks</option>
                           </select>
                       </div>
                       <div class="col text-left">
                           <h4>Settings</h4>
                           <label>
                               <input type="checkbox" id="checkbox" v-model="createGameData.disableBots">
                               Disable Bots
                           </label>
                       </div>
                   </div>
                   <br>
               </div>
               <br>
               <button type="button" class="app-btn app-btn-secondary" v-on:click="createGame();" @mouseenter="bme">
                   <i class="fa fa-plus"></i> Create Game
               </button>
               <button type="button" class="app-btn app-btn-danger" v-on:click="currentMenu='gameList'; bmc();"
                       @mouseenter="bme">
                   <i class="fa fa-arrow-left"></i> Return
               </button>
               <br><br>
           </div>
       </div>
   `
});

function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {
   let R = 6371; // Radius of the earth in km
   let dLat = Math.deg2rad(lat2-lat1);  // deg2rad below
   let dLon = Math.deg2rad(lon2-lon1);
   let a =
       Math.sin(dLat/2) * Math.sin(dLat/2) +
       Math.cos(Math.deg2rad(lat1)) * Math.cos(Math.deg2rad(lat2)) *
       Math.sin(dLon/2) * Math.sin(dLon/2)
   ;
   let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
   return R * c;
}

game.startTutorial = function(type) {
   game['disableTutorialAsk' + type] = true;
   if (!type) {
       type = true;
   }
   game.startSingleplayer(type);
};

game.verifyName = function(name) {
   if (!name) {
       game.showGrowl('Please enter a name.', {type: 'danger'});
       return false;
   } else if (/[^a-zA-Z0-9\[\]]/.test(name)) {
       game.showGrowl('Names can only have letters and numbers.', {type: 'danger'});
       return false;
   } else if (name.length <= 2) {
       game.showGrowl('Name is too short.', {type: 'danger'});
       return false;
   } else if (name.length > 16) {
       game.showGrowl('Name is too long.', {type: 'danger'});
       return false
   }
   return true;
};

function checkShouldPlayTutorial(gamemode) {
   let type = '';
   if (gamemode === 'tank_ball') {
       type = gamemode;
   }

   if (game.queryData && game.queryData.i) {
       game['disableTutorialAsk' + type] = true;
   } else if (type === '' && game.environment === 'test') {
       game['disableTutorialAsk' + type] = true;
   } else if (type === '' && game.services.user.currentUser && game.services.user.currentUser.currentXp >= 1000) {
       game['disableTutorialAsk' + type] = true;
   } else if (!game['disableTutorialAsk' + type]) {
       try {
           game['disableTutorialAsk' + type] = window.localStorage.getItem('disableTutorialAsk' + type) === 'true';
       } catch (e) {
           game['disableTutorialAsk' + type] = Cookies.get('disableTutorialAsk' + type) === 'true';
       }
   }

   if (!game['disableTutorialAsk' + type]) {
       try {
           if (window.localStorage) {
               window.localStorage.setItem('disableTutorialAsk' + type, 'true');
           } else {
               Cookies.set('disableTutorialAsk' + type, game['disableTutorialAsk' + type], {expires: 365, path: '/', domain: window.location.host});
           }
       } catch (e) {
           Cookies.set('disableTutorialAsk' + type, game['disableTutorialAsk' + type], {expires: 365, path: '/', domain: window.location.host});
       }

       try {
           game.startTutorial(type);
           return true;
       } catch (e) {}
   }
}

let lastPlayData = {};
game.play = function(createData, playData, token, force) {
   if (!playData) {
       playData = lastPlayData;
   }
   if (!playData) {
       playData = {};
   }
   lastPlayData = playData;
   let name = playData.playerName;
   if (!name && window.localStorage) {
       name = window.localStorage.getItem('name');
   }

   if (!token) {
       if (!name) {
           name = 'Guest';
       }

       if (!game.verifyName(name)) {
           return;
       }
   }

   if (!createData && !token && !force) {
       if (!(game.queryData && game.queryData.i) && game.services.ad.checkShowVideoAd()) {
           waitingToPlay = true;
           return;
       }
   }

   let tutorialStarted = checkShouldPlayTutorial(playData?.gamemode === 'random' ? playData?.currentRandomGamemode : playData?.gamemode);
   if (tutorialStarted) {
       return;
   }
   if (playData?.currentRandomGamemode) {
       delete playData.currentRandomGamemode;
   }

   let session = '';
   if (Cookies.get('token')) {
       session = '&session=' + Cookies.get('token')
   }

   let regionCode = playData.regionCode;
   if (!regionCode) {
       regionCode = 'NA1';
   }

   let inviteQuery = '';
   if (game.queryData && game.queryData.i) {
       inviteQuery = '&invite=' + game.queryData.i;
       delete game.queryData.i;
   }

   let gamemodeQuery = '';
   if (playData && playData.gamemode) {
       gamemodeQuery = '&gamemode=' + playData.gamemode;
   }

   function goToPlayScreen(data) {
       Cookies.set('lastUpdateSeen', window.gameServer.sharedConstants.VERSION, {expires: 365, path: '/', domain: window.location.host});

       game.services.api.recordEvent(session ? 'playAsUser' : 'playAsGuest', {
           event_category: 'Menu'
       });

       if (createData && createData.privateGame) {
           game.services.api.recordEvent('createPrivateGame', {
               event_category: 'Menu'
           });
       }

       game.stopGame();
       game.queryData = data;
       game.startPlayScreen(false, false, false);
       game.init();
   }

   $('#loading-overlay').show();
   let data = null;
   if (token) {
       data = token;
       goToPlayScreen(data);
       $('#loading-overlay').hide();
   } else {
       try {
           axios.post(API_URL + '/token?name=' + name + '&region=' + regionCode + '&version=' + window.gameServer.sharedConstants.VERSION + session + gamemodeQuery + inviteQuery, createData).then((res) => {
               data = res.data;
               if (data.success) {
                   goToPlayScreen(data);
               } else {
                   $('#loading-overlay').hide();
                   game.showGrowl(data.message, {type: 'danger'});
               }

               game.showLoading(false);
           });
       } catch (e) {
           game.showGrowl('Failed to connect to game server.', {type: 'danger'});
           $('#loading-overlay').hide();
       }
   }
};

let waitingToPlay = false;
let waitingToPlaySingleplayer = null;
game.videoComplete = function() {
   if (waitingToPlay) {
       game.play();
       waitingToPlay = false;
   }

   if (waitingToPlaySingleplayer) {
       game.startSingleplayer(false, waitingToPlaySingleplayer.isSandbox);
       waitingToPlaySingleplayer = null;
   }
};

function startSingleplayer(isTutorial, isSandbox, isGarage, isInMenu, isReplay, mapName, callback) {
   /*
   if (!isTutorial && game.services.ad.checkShowVideoAd()) {
       waitingToPlaySingleplayer = {
           isSandbox: isSandbox
       };
       return;
   }
   */

   game.resetGame();

   game.loadSounds();

   if (game.server) {
       game.server.stopGame();
       game.server = null;
   }

   let fakeGlobalSocket = {
       to: function() {
           return fakeGlobalSocket;
       },
       emit: function(name, data) {
           if (game.fakeSockets && game.fakeSockets.clientSocket && game.fakeSockets.clientSocket.socketEvents[name]) {
               game.fakeSockets.clientSocket.socketEvents[name](data);
           }
       },
       sendGlobalMessage: function(name, data) {
           if (game.fakeSockets && game.fakeSockets.clientSocket && game.fakeSockets.clientSocket.socketEvents[name]) {
               game.fakeSockets.clientSocket.socketEvents[name](data);
           }
       },
       sendSnapshot: function(buffer) {
           if (buffer && buffer.buffer) {
               game.onSnapshot(buffer.buffer);
           }
       },
       disconnect: function() {
           window.location.reload();
       }
   };
   game.isMapEditor = game.isMapEditor && isSandbox;
   let serverConfig = {
       isSingleplayer: true,
       isTutorial: !!isTutorial,
       tutorialType: isTutorial,
       isSandbox: isSandbox,
       isGarage: isGarage,
       isInMenu: isInMenu,
       isReplay: isReplay,
       skipGameLobby: !isReplay,
       isMapEditor: game.isMapEditor
   };
   if (mapName) {
       serverConfig.mapOverride = mapName;
   }
   let server = new window.gameServer.Server(fakeGlobalSocket, 1, () => {}, {}, null, null, serverConfig, null);
   server.startGame();

   let eventAction = 'playSingleplayer';
   if (isSandbox) {
       eventAction = null;
   }
   if (isReplay) {
       eventAction = 'watchReplay';
   }
   if (isTutorial) {
       game.services.api.recordEvent('tutorial_begin');
   } else if (!isInMenu && eventAction) {
       game.services.api.recordEvent(eventAction, {
           event_category: 'Menu'
       });
   }

   game.fakeSockets = {
       serverSocket: {
           connected: true,
           on: function(name, fn) {
               game.fakeSockets.serverSocket.socketEvents[name] = fn;
           },
           emit: function(name, data) {
               if (game.fakeSockets.clientSocket && game.fakeSockets.clientSocket.socketEvents[name]) {
                   game.fakeSockets.clientSocket.socketEvents[name](data);
               }
           },
           snapSocket: {
               connected: true,
               destroyed: false,
               send: function(data) {
                   game.onSnapshot(data.buffer);
               }
           },
           socketEvents: {},
           disconnect: function() {
               window.location.reload();
           }
       }
   };

   game.server = server;
   startPlayScreen(true, isSandbox, isInMenu);
   game.init();

   game.fakeSockets.serverSocket.name = 'Player';
   game.fakeSockets.serverSocket.user = {
       isDev: false
   };
   server.onClientConnected(game.fakeSockets.serverSocket);

   if (!game.isInMenu) {
       game.tryGameFocus();
   }

   setTimeout(() => {
       game.singleplayerLoaded = true;
       if (callback) {
           callback();
       }
   }, 1);
}
game.startSingleplayer = startSingleplayer;

//// playerMenu.js
Vue.component('app-game-player-menu', {
   mounted: function() {
       game.playerMenuComponent = this;
   },
   data: function() {
       return {
           shouldShowModal: false,
           state: null,
           reportReason: '',
           player: null,
           canKickPlayer: false
       };
   },
   methods: {
       showModal: function(val) {
           this.shouldShowModal = val;
       },
       openPlayerMenu: function(player, currentPlayer) {
           this.player = player; // this refers to the player the modal was opened on
           this.state = null;
           this.reportReason = '';
           this.reportDetails = '';
           this.canKickPlayer = !!(currentPlayer && currentPlayer.isTeamLeader && currentPlayer.team === player.team);
           this.showModal(true);
       },
       kick: function() {
           game.mainSocket.emit('lobbyKickPlayer', this.player.clientId);
           this.showModal(false);
       },
       report: function() {
           this.state = 'report';
       },
       sendReport: function() {
           if (this.reportDetails && this.reportDetails.length > 12) {
               game.mainSocket.emit('reportPlayer', {
                   clientId: this.player.clientId,
                   reason: this.reportReason + '\nDetails: ' + this.reportDetails
               });
               this.reportReason = '';
               this.reportDetails = '';
               this.showModal(false);
           } else {
               game.showGrowl('Report reason must be longer than 12 characters.', {type: 'danger'});
           }
       }
   },
   template: `
   <div class="game-modal" v-if="shouldShowModal">
       <div class="game-modal-content game-modal-content-sm">
           <button type="button" v-on:click="showModal(false)" class="close" data-dismiss="modal" aria-label="Close">
               <span aria-hidden="true">&times;</span>
           </button>
           <div v-if="!state">
               <h2><i class="fa fa-user"></i> {{player.name}}</h2>
               <button type="button" v-if="canKickPlayer" class="app-btn app-btn-secondary" v-on:click="kick()">
                   <i class="fa fa-ban"></i> Kick Player
               </button>
               <button type="button" class="app-btn app-btn-secondary" v-on:click="report()">
                   <i class="fa fa-flag"></i> Report Player
               </button>
               <br><br>
               <button type="button" class="app-btn app-btn-danger" v-on:click="showModal(false)">
                   <i class="fa fa-close"></i> Close
               </button>
           </div>
           <div v-if="state === 'report'">
               <h2><i class="fa fa-flag"></i> Report Player</h2>
               <p>Report a player for misconduct, including but not limited to:</p>
               <ul>
                   <li>Insulting or harassing others</li>
                   <li>Sabotaging or griefing their own team</li>
                   <li>Using cheats</li>
               </ul>
               <p>Reports are taken seriously, and could result in a ban. Do not abuse the report system, false reports may also result in a ban.</p>
               <br>
               <h4>Player: {{player.name}}</h4>

               <div class="form-group">
                   <select class="app-input" v-model="reportReason">
                       <option value="">- Select a Reason -</option>
                       <option>Insulting or harassing others</option>
                       <option>Sabotaging or griefing their own team</option>
                       <option>Using cheats</option>
                   </select>
                   <label style="width:100%;" v-if="reportReason">
                       <b>Report Reason:</b>
                       <textarea class="form-control" v-model="reportDetails" name="reportMessage"></textarea>
                   </label>
               </div>
               <br>
               <button type="button" class="app-btn app-btn-secondary" v-on:click="sendReport()">
                   <i class="fa fa-flag"></i> Send Report
               </button>
               <br><br>
               <button type="button" class="app-btn app-btn-danger" v-on:click="state = null">
                   <i class="fa fa-close"></i> Cancel
               </button>
           </div>
       </div>
   </div>
   `
})

//// profile.js
Vue.component('state-profile', {
   data: function() {
       if (!game.services.user.isLoggedIn()) {
           this.$root.$emit('changeState', 'state-signin');
           return {};
       }

       game.services.user.getSettings().then((settings) => {
           if (settings && settings.stats) {
               this.stats = settings.stats;
               this.$forceUpdate();
           }
       });

       let stateData = this.$root.getCurrentStateData();
       return {
           editProfile: stateData && stateData.editProfile,
           profileName: game.services.user.currentUser ? game.services.user.currentUser.name : '',
           currentUser: game.services.user.currentUser,
           stats: null
       };
   },
   methods: {
       signIn: function() {
           this.$root.$emit('changeState', 'state-signin');
       },
       signOut: function() {
           this.bmc();
           game.services.user.logout();
       },
       changePassword: function(e) {
           e.preventDefault();
           game.playSound('button_click');
           this.$root.$emit('changeState', 'state-forgot-password-initiate');
       },
       saveProfile: function() {
           this.bmc();
           let token = Cookies.get('token');
           $('#loading-overlay').show();
           axios.post(API_URL + '/profile?token=' + token, {profileName: this.profileName}).then((res) => {
               let data = res.data;
               if (data.success) {
                   game.services.user.currentUser.name = this.profileName;
                   this.editProfile = false;
                   game.showGrowl('Profile saved successfully.', {type: 'success'});
               } else {
                   if (data.message) {
                       game.showGrowl(data.message, {type: 'danger'});
                   } else {
                       game.showGrowl('Failed to save profile.', {type: 'danger'});
                   }
               }
               $('#loading-overlay').hide();
           }, () => {
               $('#loading-overlay').hide();
               game.showGrowl('Failed to save profile.', {type: 'danger'});
           });
       },
       showRecordings: function() {
           this.$root.$emit('changeState', 'state-recordings');
       },
       openMapEditor: function() {
           this.$root.$emit('changeState', 'state-map-editor');
       },
       showGlobalRecordings: function() {
           game.appComponent.changeState('state-recordings', {
               globalRecordings: true
           });
       },
   },
   template: `
   <div v-bind:class="{'vertical-center': !currentUser || editProfile}">
       <div v-if="!currentUser">
           <h1><i class="fa fa-user fa-2x"></i></h1>
           <h3>Sign in to view your profile.</h3>
           <button type="button" class="app-btn app-btn-secondary" v-on:click="signIn()" @mouseenter="bme"><i class="fa fa-sign-in"></i> Sign In</button>
           <br><br>
           <button type="button" class="app-btn app-btn-secondary" v-on:click="showRecordings()" @mouseenter="bme">
               <i class="fa fa-video-camera"></i> Replays
           </button>
       </div>
       <div v-if="currentUser">
           <div class="app-card text-center">
               <div v-if="!editProfile">
                   <h1><i class="fa fa-user"></i> {{currentUser.name}}</h1>
                   <span title="Rank">
                       <div class="rank-icon" v-bind:style="getRankStyle(currentUser.currentRank)"></div>
                       <span id="rank">{{currentUser.currentRank}}</span>
                   </span>
                   &nbsp;&nbsp;&nbsp;&nbsp;
                   <span title="Coins">
                       <img style="margin-top:-5px;" src="/assets/goldicon.png">
                       <span id="coins">{{currentUser.goldCount}}</span>
                   </span><br>
                   <br>
                   <h3>Next Rank: {{currentUser.currentRank + 1}}</h3>
                   <div class="xp-bar">
                       <div class="xp-bar-inner">
                           {{currentUser.nextRankPercentage}}%
                       </div>
                       <div class="xp-bar-inner-fill" v-bind:style="{width: currentUser.nextRankPercentage + '%'}"></div>
                   </div>
                   <small>{{currentUser.currentXp}} XP</small>
                   <br><br>
                   <button type="button" class="app-btn app-btn-secondary" v-on:click="showGlobalRecordings()" @mouseenter="bme">
                       <i class="fa fa-video-camera"></i> Global Top Replays
                   </button>
                   <button type="button" class="app-btn app-btn-secondary" v-on:click="showRecordings()" @mouseenter="bme">
                       <i class="fa fa-video-camera"></i> Replays
                   </button>
                   <br><br>
                   <!--
                   <button type="button" class="app-btn app-btn-secondary" v-on:click="openMapEditor()" @mouseenter="bme">
                       <i class="fa fa-edit"></i> Map Editor
                   </button>
                   <br><br>
                   -->
                   <button type="button" class="app-btn app-btn-secondary" v-on:click="editProfile=true; bmc();" @mouseenter="bme">
                       <i class="fa fa-edit"></i> Edit Profile
                   </button>
                   <button type="button" class="app-btn app-btn-secondary" v-on:click="changePassword" @mouseenter="bme">
                       <i class="fa fa-edit"></i> Change Password
                   </button>
                   <button type="button" class="app-btn app-btn-danger" v-on:click="signOut()" @mouseenter="bme">
                       <i class="fa fa-sign-out"></i> Sign Out
                   </button>
                   <div v-if="isDesktopApp">
                       <br>
                       <button type="button" class="app-btn app-btn-danger" v-on:click="game.quitGame()" @mouseenter="bme">
                           <i class="fa fa-close"></i> Exit Game
                       </button>
                   </div>
                   
                   <div>
                       <br><br>
                       <h3>Statistics</h3>
                       <app-game-statistics v-if="stats" v-bind:stats="stats"></app-game-statistics>
                       <h5 v-if="!stats">No statistics recorded yet, go fight some tanks!</h5>
                   </div>
               </div>
               <div v-if="editProfile">
                   <h1><i class="fa fa-user"></i> Edit Profile</h1>
                   <label class="app-input-label">
                       Display Name
                       <input v-model="profileName" class="app-input" placeholder="Name">
                   </label>
                   <br>
                   <label class="app-input-label">
                       Email
                       <input v-model="currentUser.email" disabled="disabled" class="app-input" placeholder="Email">
                   </label>
                   <br><br>
                   <button type="button" class="app-btn app-btn-secondary" v-on:click="saveProfile" @mouseenter="bme">
                       <i class="fa fa-save"></i> Save
                   </button>
                   <button type="button" class="app-btn app-btn-danger" v-on:click="editProfile=false; bmc();" @mouseenter="bme">
                       <i class="fa fa-times"></i> Cancel
                   </button>
               </div>
           </div>
       </div>
       <br><br>
   </div>
   `
})

//// register.js
Vue.component('state-register', {
   data: function() {
       let name = '';
       if (window.localStorage) {
           name = window.localStorage.getItem('name');
       }
       if (name === 'Guest') {
           name = '';
       }
       return {
           loading: false,
           profileName: name,
           email: '',
           password: '',
           passwordRetype: ''
       };
   },
   methods: {
       submit: async function(e) {
           e.preventDefault();
           game.playSound('button_click');
           if (!game.verifyName(this.profileName)) {
               return;
           }
           if (this.password.trim() !== this.passwordRetype.trim()) {
               game.showGrowl('Passwords do not match.', {type: 'danger'});
               return;
           }

           $('#loading-overlay').show();
           let analyticsId = await game.services.user.getAnalyticsId();
           this.loading = true;
           axios.post(API_URL + '/register', {
               profileName: this.profileName,
               email: this.email,
               password: this.password
           }).then((res) => {
               if (res.data.success) {
                   game.services.user.login('bsg', {
                       email: this.email,
                       password: this.password,
                       analyticsId: analyticsId
                   }, this).then(() => {
                       $('#loading-overlay').hide();
                   }, () => {
                       this.loading = false;
                       $('#loading-overlay').hide();
                   });
               } else {
                   this.loading = false;
                   game.showGrowl('Error: ' + res.data.message, {type: 'danger'});
                   $('#loading-overlay').hide();
               }
           }, () => {
               this.loading = false;
               game.showGrowl('Error: Failed to register.', {type: 'danger'});
               $('#loading-overlay').hide();
           });
       },
   },
   template: `
   <div class="vertical-center">
       <div v-if="loading">
           <img width="128" height="128" src="assets/loading.gif"><br><br>
           <h4>LOADING</h4>
       </div>
       <div v-if="!loading">
           <div class="app-card text-center">
               <form @submit="submit">
                   <h1><i class="fa fa-user"></i> Register</h1>
                   <label class="app-input-label">
                       Display Name
                       <input v-model="profileName" required="required" type="text" class="app-input" placeholder="Name">
                   </label>
                   <br>
                   <label class="app-input-label">
                       Email
                       <input v-model="email" required="required" type="email" class="app-input" placeholder="Email">
                   </label>
                   <br>
                   <label class="app-input-label">
                       Password
                       <input v-model="password" minlength="6" required="required" type="password" class="app-input" placeholder="Password">
                   </label>
                   <label class="app-input-label">
                       Retype Password
                       <input v-model="passwordRetype" required="required" type="password" class="app-input" placeholder="Retype Password">
                   </label>
                   <br>
                   <br>
                   <button type="submit" class="app-btn app-btn-secondary btn-sm" @mouseenter="bme" v-on:click="bmc();">
                       <i class="fa fa-sign-in"></i> Submit
                   </button>
               </form>
           </div>
           <h4>By registering or signing in you agree to our <a href="https://bombsightgames.com/legal/tos" target="_blank"><u>Terms of Service</u></a>.</h4>
           <div v-if="ADSDK === 'steam'">
               <br>
               <div class="app-btn app-btn-danger" @mouseenter="bme" style="width:500px; padding:12px;" v-on:click="$root.$emit('changeState', 'state-signin')">
                   <i class="fa fa-arrow-left"></i> Return
               </div>
           </div>
       </div>
   </div>
   `
})

//// research.js
const tabs = [
   {
       key: 'research_tree_starter',
       name: 'GLACIS Defensive Pact',
       description: 'The Global Armored Combat Institute was a multinational peacekeeping force headquartered in Shellgium. They deployed a variety of vehicles in dozens of conflicts all over the world.',
       classes: {
           'research-tree-tab-starter': true
       }
   },
   {
       key: 'research_tree_us',
       name: 'United Armored States (UAS)',
       description: 'The UAS was a continent of 5 megastates surrounding the capitol city Armorden. The facilities at the Armorden Proving Ground formed the backbone of the UAS\'s tank producing might.',
       classes: {
           'research-tree-tab-us': true
       }
   },
   {
       key: 'research_tree_russia',
       name: 'Vulgrad Revolutionary Republic (VRRK)',
       description: 'Vulgrad originated as an agrarian community of tractor builders, but became the center of a vast empire after the Tank Revolution. There, the VRRK produced huge quantities of vehicles during a period of booming industrialization.',
       classes: {
           'research-tree-tab-russia': true
       }
   },
   {
       key: 'research_tree_germany',
       name: 'Bundesrepublik Panzerschland (BRP)',
       description: 'Most vehicles used by Panzerschland were made by the Pümmeler family dynasty of armaments manufacturers.',
       classes: {
           'research-tree-tab-germany': true
       }
   },
   {
       key: 'research_tree_britain',
       classes: {
           'research-tree-tab-britain': true
       },
       disabled: true
   },
   {
       key: 'research_tree_france',
       classes: {
           'research-tree-tab-france': true
       },
       disabled: true
   },
   {
       key: 'research_tree_japan',
       classes: {
           'research-tree-tab-japan': true
       },
       disabled: true
   },
];
Vue.component('state-research', {
   mounted: function () {
       game.researchComponent = this;
   },
   data: function() {
       let stateData = this.$root.getCurrentStateData();
       this.changeTree((stateData && stateData.tree) ? stateData.tree : 'research_tree_starter');

       this.refresh();

       let tabMap = {};
       for (let i=0; i<tabs.length; i++) {
           let tab = tabs[i];
           tabMap[tab.key] = tab;
       }

       return {
           loading: this.loading,
           needToSelectResearch: false,
           tabs: tabs,
           tabMap: tabMap,
           currentTree: this.currentTree,
           researchGraphics: this.researchGraphics,
           currentUser: game.services.user.currentUser,
           vehicleList: this.vehicleList,
           garageLocked: game.services.user.currentUser ? game.services.user.currentUser.currentRank < 2 : true,
           otherTreesLocked: game.services.user.currentUser ? game.services.user.currentUser.currentRank < 12 : true,
       };
   },
   methods: {
       refresh: async function() {
           this.vehicleList = [];
           this.loading = true;

           this.refreshSettings();

           let token = Cookies.get('token');
           if (token) {
               let res = await axios.get(API_URL + '/garage/vehicleInventory?token=' + token);
               this.vehicleInventory = res.data;
           } else {
               this.vehicleInventory = [];
           }

           let userSettings = {};
           if (token) {
               userSettings = await game.services.user.getSettings();
           }
           let vehicleList = JSON.parse(JSON.stringify(window.gameServer.vehicleList));
           for (let i=0; i<vehicleList.length; i++) {
               let vehicle = vehicleList[i];
               vehicle.researchStatus = 'locked';
               vehicle.appliedXP = 0;
               vehicle.requiredXP = window.gameServer.vehicleListMap[vehicle.key].xp;

               for (let j=0; j<this.vehicleInventory.length; j++) {
                   let vi = this.vehicleInventory[j];
                   if (vi.skuSlug === 'vehicle-' + vehicle.key) {
                       if (vi.data) {
                           if (vi.data.researched) {
                               vehicle.researchStatus = 'unlocked';
                           } else {
                               vehicle.appliedXP = vi.data.appliedXP ? vi.data.appliedXP : 0;
                           }
                       }
                       break;
                   }
               }

               if (vehicle.key === 'medium_tank' || (freeVehicles.includes(vehicle.key) && (game.services.user.currentUser && game.services.user.currentUser.currentRank >= 2))) {
                   vehicle.researchStatus = 'unlocked';
               }

               if (vehicle.researchStatus === 'locked') {
                   if (userSettings.currentResearch === vehicle.key) {
                       vehicle.researchStatus = 'researching';
                   }
               }
           }
           this.vehicleList = vehicleList;
           this.loading = false;
       },
       changeTree: function(key) {
           this.currentTree = key;

           const treeScale = 1.6;
           let researchGraphics = [];
           for (let i=0; i<window.gameServer.researchTrees[this.currentTree].objects.length; i++) {
               let object = window.gameServer.researchTrees[this.currentTree].objects[i];
               if (object) {
                   if (object.group === 'Graphics') {
                       object.style = {
                           display: 'block',
                           'background-color': 'white',
                           width: (object.width * treeScale) + 'px',
                           height: (object.height * treeScale) + 'px',
                           position: 'absolute',
                           top: ((object.y - (object.height/2)) * treeScale) + 'px',
                           left: (((object.x - (object.width/2)) + 8) * treeScale) + 'px',
                           transform: 'rotate(' + Math.rad2deg(object.rotation) +  'deg)'
                       };
                       researchGraphics.push(object);
                   }
               }
           }
           this.researchGraphics = researchGraphics;
       },
       selectVehicleInfo: function(vehicle) {
           this.bmc();
           game.vehicleInfoModal.showModal('research', vehicle, this.vehicleInventory);
       },
       refreshSettings: async function() {
           if (game.services.user.isLoggedIn()) {
               let userSettings = await game.services.user.getSettings();
               this.needToSelectResearch = !userSettings.currentResearch;
           }
       },
   },
   template: `
   <div style="padding:5px; height:878px; overflow:hidden;">
       <div v-if="loading">
           <img width="128" height="128" src="assets/loading.gif"><br><br>
           <h4>LOADING</h4>
       </div>
       <div v-if="!loading">
           <div class="research-tree-tabs">
               <div v-for="(tab, index) in tabs" class="research-tree-tab" v-bind:class="{'research-tree-tab-active': currentTree === tab.key, 'research-tree-tab-clickable': !tab.disabled}" v-on:click="!tab.disabled && (bmc() || changeTree(tab.key))" @mouseenter="!tab.disabled && bme()" v-bind:title="tab.name">
                   <div class="research-tree-tab-image" v-bind:class="tab.classes"></div>
               </div>
           </div>
           <div class="research-tree" v-dragscroll>
               <div v-if="!garageLocked && needToSelectResearch" class="text-center">
                   <br>
                   <h3 style="color:#c91313;">No Research Selected!</h3>
                   <p>Select a locked vehicle below to start researching and unlock new vehicles.</p>
               </div>
               <h2 v-if="currentTree === 'research_tree_starter' && garageLocked" style="color:#e8e805;">
                   <br>
                   <i class="fa fa-lock"></i> Rank 2 required to unlock this tree.
                   <br>
                   <br>
               </h2>
               <h2 v-if="currentTree !== 'research_tree_starter' && otherTreesLocked" style="color:#e8e805;">
                   <br>
                   <i class="fa fa-lock"></i> Rank 12 required to unlock this tree.
                   <br>
                   <br>
               </h2>
               <div v-if="tabMap[currentTree]" style="padding-top:5px;">
                   <h2>{{tabMap[currentTree].name}}</h2>
                   <small style="display:inline-block; width:78%">{{tabMap[currentTree].description}}</small>
               </div>
               <div style="transform:scale(0.8)">
                   <div v-for="(graphic, index) in researchGraphics" v-bind:style="graphic.style"></div>
                   <div v-for="(vehicle, index) in vehicleList" v-bind:style="vehicle.style" v-if="vehicle.tree === currentTree && !vehicle.base">
                       <div class="app-card app-card-clickable shop-item" @mouseenter="bme" v-on:click="selectVehicleInfo(vehicle)">
                           <h5>{{vehicle.properties.name}}</h5>
                           <div>
                               <img class="vehicle-thumbnail" :src="'assets/vehicles/' + vehicle.key + '/' + vehicle.key + '_thumbnail.png'">
                           </div>
                           <div class="garage-overlay">
                               <h4 v-if="vehicle.researchStatus === 'researching'" style="color:#58a3fd;">
                                   <br><br><br>
                                   <i class="fa fa-flask fa-2x"></i><br>
                                   Researching<br>
                                   <div class="research-bar">
                                       <div v-bind:style="{width: Math.floor((vehicle.appliedXP/vehicle.requiredXP) * 100) + '%'}" class="research-bar-inner"></div>
                                       <div class="research-bar-text">{{Math.floor((vehicle.appliedXP/vehicle.requiredXP) * 100)}}%</div>
                                   </div>
                               </h4>
                           </div>
                           <div class="garage-locked" v-if="vehicle.researchStatus === 'locked'">
                               <h4>
                                   <br><br><br>
                                   <i class="fa fa-lock fa-2x"></i><br>
                                   Locked
                               </h4>
                           </div>
                       </div>
                   </div>
               </div>
           </div>
       </div>
   </div>
   `
});

//// roundEnd.js
Vue.component('app-game-round-end', {
   mounted: function() {
       game.roundEndComponent = this;

       this.$root.$on('signIn', () => {
           this.loggedIn = true;

           if (game.services.user.currentUser && this.data && this.data.currentRank) {
               game.services.user.currentUser.currentRank = this.data.currentRank;
           }
       });
   },
   beforeDestroy: function() {
       clearInterval(this.timer);
   },
   data: function() {
       return {
           shouldShowModal: false,
           loggedIn: false,
           data: {},
           unlocks: null,
           playUnlocksAnimation: false,
           showBonusXP: false,
           showUnlocks: false,
           showMedals: false,
           showKills: false,
           showAssists: false,
           timer: null,
           nextRoundStart: null,
           nextRoundTimer: 32,
           currentResearch: null,
       };
   },
   methods: {
       showModal: function(val) {
           this.shouldShowModal = val;
           game.roundEnded = val;
           game.resetZoom();
           if (!this.shouldShowModal) {
               this.unlocks = null;
               clearInterval(this.timer);
           }
       },
       updateMusic: function() {
           if (game.sounds['theme_round_ending']) {
               game.sounds['theme_round_ending'].stop();
           }

           if (!this.data || game.settings.disableMusic || !this.shouldShowModal || this.isScoreboard) {
               if (game.sounds['theme_victory']) {
                   game.sounds['theme_victory'].stop();
               }
               if (game.sounds['theme_defeat']) {
                   game.sounds['theme_defeat'].stop();
               }
           } else {
               if (this.data.didWin && game.sounds['theme_victory'] && !game.sounds['theme_victory'].playing()) {
                   game.sounds['theme_victory'].play();
               } else if (!this.data.didWin && game.sounds['theme_defeat'] && !game.sounds['theme_defeat'].playing()) {
                   game.sounds['theme_defeat'].play();
               }
           }
       },
       showRoundEnd: function(data) {
           this.data = data;
           this.playUnlocksAnimation = false;
           this.showUnlocks = false;
           this.showMedals = false;
           this.showKills = false;
           this.showAssists = false;
           this.showBonusXP = false;
           this.currentResearch = null;
           this.loggedIn = !!Cookies.get('token');
           this.data.xpGain = 0;
           this.data.coinGain = 0;
           this.data.rankedUp = false;
           this.data.nextRank = 0;
           this.data.nextRankPercentage = 0;
           this.nextRoundTimer = 32;
           this.showModal(true);

           clearInterval(this.timer);
           this.nextRoundStart = Date.now() + (32 * 1000);
           this.timer = setInterval(() => {
               if (this.nextRoundStart) {
                   let seconds = Math.round((this.nextRoundStart - Date.now())/1000);
                   if (seconds <= 0) {
                       seconds = 0;
                       clearInterval(this.timer);
                   }
                   this.nextRoundTimer = seconds;
               }
           }, 1000);

           if (this.data.stats && this.data.stats.totals) {
               this.data.stats = this.data.stats.totals;
           }

           this.updateMusic();

           if (!this.data.stats) {
               this.data.stats = {};
           }

           let xp = 0;
           let coins = 0;
           if (data.awards) {
               xp = data.awards.xp;
               coins = data.awards.coins;
           }

           let lastRank = game.services.user.calculateRank(data.lastXP);
           let rankRaw = window.gameServer.sharedConstants.RANK_CONSTANT * Math.sqrt(data.lastXP + xp);
           let rank = Math.floor(rankRaw);
           let nextRank = rankRaw - rank;

           if (rank < 2) {
               this.data.currentResearchProgress = 0;
           }

           this.data.currentRank = rank;
           this.data.nextRank = rank + 1;

           if (game.services.user.currentUser && this.data && this.data.currentRank) {
               game.services.user.currentUser.currentRank = this.data.currentRank;
           }

           this.$forceUpdate();

           if (ADSDK === 'kongregate') {
               try {
                   kongregate.stats.submit('Rank', rank);
                   kongregate.stats.submit('Kills', this.data.stats['Kill']);
                   kongregate.stats.submit('Assists', this.data.stats['Assist']);
                   kongregate.stats.submit('Deaths', this.data.stats['Death']);
                   kongregate.stats.submit('Wins', this.data.stats['Win']);
                   kongregate.stats.submit('Draws', this.data.stats['Draw']);
                   kongregate.stats.submit('Losses', this.data.stats['Loss']);
                   kongregate.stats.submit('Ram Kills', this.data.stats['Ram Kill']);
                   kongregate.stats.submit('Ricochet Kills', this.data.stats['Ricochet Kill']);
                   kongregate.stats.submit('Rear Armor Kills', this.data.stats['Rear Armor Hit Kill']);
                   kongregate.stats.submit('Boosting Kills', this.data.stats['Boosting Kill']);
               } catch (e) {
                   console.error('Failed to submit Kongregate stats:', e);
               }
           }

           setTimeout(() => {
               if (xp) {
                   let soundPlayTimer = 0;
                   let pitchTest = 0.8;
                   let updateGain = (selector, count, counter) => {
                       setTimeout(() => {
                           this.data[selector] = count;
                           soundPlayTimer--;
                           if (soundPlayTimer <= 0) {
                               game.sounds['xp_collect'].rate(pitchTest);
                               pitchTest += 0.05;
                               game.sounds['xp_collect'].play();
                               soundPlayTimer = 2;
                           }
                           this.$forceUpdate();
                       }, counter * 75);
                   };

                   let counter = 0;
                   let increaseAmount = Math.round(xp/15);
                   if (increaseAmount < 50) {
                       increaseAmount = 50;
                   }
                   for (let i = 0; i <= xp + increaseAmount; i += increaseAmount) {
                       let count = i;
                       if (count > xp) {
                           count = xp;
                       }
                       updateGain('xpGain', count, counter);
                       counter++;
                   }

                   if (xp && game.getLastVehicleUsed()) {
                       game.services.api.recordEvent('post_score', {
                           score: xp,
                           level: rank,
                           character: game.getLastVehicleUsed()
                       });
                   }

                   setTimeout(() => {
                       counter = 0;
                       for (let i = 0; i <= coins + 5; i += 5) {
                           let count = i;
                           if (count > coins) {
                               count = coins;
                           }
                           updateGain('coinGain', count, counter);
                           counter++;
                       }

                       if (this.data.clientAwardData && this.data.clientAwardData.bonusXP) {
                           setTimeout(() => {
                               let consumable = window.gameServer.itemListMap[this.data.clientAwardData.activatedConsumable];
                               if (consumable && consumable.sound) {
                                   game.sounds[consumable.sound].play();
                               } else {
                                   game.sounds['xp_collect'].rate(1.4);
                                   game.sounds['xp_collect'].play();
                               }
                               this.showBonusXP = true;
                           }, 400);
                       }

                       setTimeout(() => {
                           this.data.nextRankPercentage = Math.round(nextRank * 100);

                           if (rank > lastRank) {
                               setTimeout(() => {

                                   game.sounds['rank_up'].play();
                                   setTimeout(() => {
                                       this.data.rankedUp = true;
                                   }, 200);
                                   this.$forceUpdate();

                                   game.services.api.recordEvent('level_up', {
                                       level: rank
                                   });

                                   setTimeout(() => {
                                       this.playUnlocksAnimation = true;
                                       this.playUserUnlocksAnimation();
                                   }, 750);
                               }, 500);
                           } else {
                               setTimeout(() => {
                                   this.playUnlocksAnimation = true;
                                   this.playUserUnlocksAnimation();
                               }, 750);
                           }
                       }, (counter * 75) + 100);

                   }, (counter * 75) + 100);
               }
           }, 600);

           if (!game.isInMenu) {
               try {
                   if (ADSDK === 'crazygames') {
                       const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                       crazysdk.gameplayStop();
                   }
               } catch (e) {}
           }
       },
       showUserUnlocks: function(unlocks) {
           let formattedUnlocks = [];
           let currentResearch = null;
           if (unlocks) {
               for (let i=0; i<unlocks.length; i++) {
                   let unlock = unlocks[i];
                   if (unlock.type === 'vehicle') {
                       unlock.vehicleData = window.gameServer.vehicleData[unlock.key];
                       if (unlock.researchProgress !== undefined && unlock.researchProgress !== null) {
                           currentResearch = unlock;
                           continue;
                       }
                   } else if (unlock.type === 'skin') {
                       unlock.skinData = window.gameServer.skinListMap[unlock.key];
                       unlock.vehicleData = window.gameServer.vehicleData[unlock.vehicle];
                   }
                   if (unlock.xp) {
                       if (!this.data.clientAwardData) {
                           this.data.clientAwardData = {};
                       }
                       if (!this.data.clientAwardData.bonusXP) {
                           this.data.clientAwardData.bonusXP = 0;
                       }
                       this.data.clientAwardData.bonusXP += unlock.xp;
                   }
                   formattedUnlocks.push(unlock);
               }
           }


           setTimeout(() => {
               if (currentResearch) {
                   this.currentResearch = currentResearch;
                   this.data.currentResearchProgress = this.currentResearch.researchProgress;
               } else if (this.data.currentRank < 2) {
                   let totalXP = this.data.lastXP + (this.data.awards ? this.data.awards.xp : 0);
                   this.data.currentResearchProgress = Math.floor((totalXP/6400) * 100);
               }
           }, 25);

           this.unlocks = formattedUnlocks;
           this.playUserUnlocksAnimation();
       },
       playUserUnlocksAnimation: function() {
           if (this.playUnlocksAnimation) {
               this.playUnlocksAnimation = false;
               this.showUnlocks = true;

               if (this.unlocks && this.unlocks.length) {
                   for (let i = 0; i < this.unlocks.length; i++) {
                       let unlock = this.unlocks[i];
                       if (unlock) {
                           setTimeout(() => {
                               unlock.show = true;
                               if (!unlock.researchProgress) {
                                   setTimeout(() => {
                                       if (this.$refs.unlockList) {
                                           this.$refs.unlockList.scrollLeft = this.$refs.unlockList.scrollWidth;
                                       }
                                       game.sounds['powerup_reload'].play();

                                       try {
                                           if (ADSDK === 'crazygames' && unlock.key.indexOf('Vehicle Garage') !== -1) {
                                               const crazysdk = window.CrazyGames.CrazySDK.getInstance();
                                               crazysdk.happytime();
                                           }
                                       } catch (e) {}
                                   }, 200);
                               }
                               this.$forceUpdate();
                           }, 750 * i);
                       }
                   }
               }

               if (!this.showMedals) {
                   this.showMedals = true;
                   setTimeout(() => {
                       if (this.data.stats['Kill'] && this.data.stats['Kill'] > 0) {
                           this.showKills = true;
                           setTimeout(() => {
                               game.sounds['kill'].play();
                           }, 400);
                       }

                       if (this.data.stats['Assist'] && this.data.stats['Assist'] > 0) {
                           setTimeout(() => {
                               this.showAssists = true;
                               setTimeout(() => {
                                   game.sounds['assist'].play();
                               }, 400);
                           }, this.showKills ? 1200 : 0);
                       }
                   }, (750 * (this.unlocks ? this.unlocks.length : 0)) + 200);
               }
           }
       },
       goToSignIn: function() {
           this.bmc();
           if (ADSDK === 'kongregate') {
               game.signInKongregate(true);
           } else {
               game.gameSignInComponent.showModal(true);
           }
       },
       selectNewResearch: function() {
           this.bmc();
           game.stateModalComponent.showModal(true, 'state-research');
       },
       onResearchSelected: function(vehicle) {
           try {
               game.stateModalComponent.showModal(false);
               this.currentResearch = vehicle;
               if (this.data) {
                   this.data.currentResearchProgress = 0;
               }
               this.$forceUpdate();
           } catch (e) {
               console.error('Failed to run research selection function:', e);
           }
       },
       onRightClick: function() {
           game.toggleEmoteWheel()
       }
   },
   template: html`
   <div id="round-end-modal" class="game-modal game-modal-trans" style="pointer-events:none;" @contextmenu="onRightClick" v-if="shouldShowModal">
       <div id="round-end-player-stats">
           <h1 v-if="data && Object.keys(data).length >= 1" :class="{'roundend-victory': data.didWin, 'roundend-defeat': !data.didWin}" class="round-end-stats-header">{{data.message}}</h1>
           <h1 v-if="!data || Object.keys(data).length < 1" class="round-end-stats-header">ROUND ENDED</h1>
           <div v-if="currentResearch" class="round-end-research-vehicle animate__animated animate__fadeIn" v-bind:style="{backgroundImage:'url(' + 'assets/vehicles/' + currentResearch.key + '/' + currentResearch.key + '_thumbnail.png' + ')'}">
           </div>
           <div v-if="!currentResearch && showUnlocks" class="round-end-research-vehicle animate__animated animate__fadeIn">
               <div v-if="data.currentRank >= 2" style="font-size:25px; margin-top:-6px; margin-left:-5px">No Current Research</div>
               <div v-if="data.currentRank < 2" style="font-size:25px; margin-top:0px; margin-left:-5px">
                   <i class="fa fa-wrench fa-2x"></i><h4>Vehicle Garage</h4>
               </div>
           </div>
           <div class="round-end-player-stats-info justify-content-center">
               <div v-if="showMedals" class="round-end-player-game-stats">
                   <div v-if="showKills" class="h-50 d-flex justify-content-left align-items-center animate__animated animate__flipInY">
                       <div class="medal medal-kill"></div>
                       <h3>{{data.stats['Kill']}} Kills</h3>
                   </div>
                   <div v-if="showAssists" class="h-50 d-flex justify-content-left align-items-center animate__animated animate__flipInY">
                       <div class="medal medal-assist"></div>
                       <h3>{{data.stats['Assist']}} Assists</h3>
                   </div>
               </div>
               <div class="round-end-general-info align-self-center">
                   <h1 v-if="data && Object.keys(data).length >= 1" class="round-end-timer-message">Next Round in {{nextRoundTimer}}</h1>
                   <h1 v-if="!data || Object.keys(data).length < 1" class="round-end-timer-message">Waiting for next round to start...</h1>
                   <div v-if="showUnlocks" class="animate__animated animate__fadeIn">
                       <div v-if="!loggedIn">
                           <button type="button" class="app-btn app-btn-primary" style="margin-top:-5px; width:500px;" v-on:click="goToSignIn()" @mouseenter="bme">
                               <i class="fa fa-sign-in"></i> Sign In to Save Progress
                           </button>
                           <h4>If you leave without signing in all progress is lost!</h4>
                       </div>
                       <div v-if="loggedIn && currentResearch" class="animate__animated animate__fadeIn">
                           <h2>Researching:</h2>
                           <h2>{{currentResearch.vehicleData.properties.name}}</h2>
                       </div>
                       <div v-if="loggedIn && !currentResearch">
                           <button v-if="data.currentRank >= 2" type="button" class="app-btn app-btn-primary" style="width:400px;" v-on:click="selectNewResearch()" @mouseenter="bme">
                               <i class="fa fa-flask"></i> Select New Research
                           </button>
                           <div v-else>
                               <h2>Researching:</h2>
                               <h2><i class="fa fa-wrench"></i> Vehicle Garage</h2>
                           </div>
                       </div>
                   </div>
               </div>
               <div class="round-end-player-xp-info">
                   <h2 v-if="data.xpGain">+{{data.xpGain}} XP</h2>
                   <h2 v-if="showBonusXP && data.clientAwardData && data.clientAwardData.bonusXP">+{{data.clientAwardData.bonusXP}} Bonus XP</h2>
               </div>
           </div>
           <div class="round-end-research-bar">
               <h2 v-if="showUnlocks && !loggedIn && data.currentRank >= 2" class="animate__animated animate__fadeIn">
                   Sign In to Research New Vehicles!
               </h2>
               <h2 v-if="showUnlocks && data.currentResearchProgress !== undefined" class="animate__animated animate__fadeIn">
                   {{Math.round(data.currentResearchProgress)}}%
               </h2>
               <h2 v-if="showUnlocks && loggedIn && data.currentResearchProgress === undefined" class="animate__animated animate__fadeIn">
                   No Current Research
               </h2>
               <div v-bind:style="{width: (showUnlocks && data.currentResearchProgress ? (Math.round(data.currentResearchProgress)) : 0) + '%'}"></div>
           </div>
           <div class="round-end-rank-info">
               <div class="round-end-current-rank d-flex justify-content-center align-items-center">
                   <div class="rank-icon" v-bind:style="getRankStyle(data.currentRank)"></div>
                   <h2>{{data.currentRank}}</h2>
               </div>
               <div class="round-end-rank-bar">
                   <h2 v-if="data.rankedUp" class="animate__animated animate__bounceIn" style="color:yellow;"><i class="fa fa-arrow-circle-up"></i> Rank Up!</h2>
                   <h2 v-if="showUnlocks && !data.rankedUp" class="animate__animated animate__fadeIn">{{data.nextRankPercentage}}%</h2>
                   <div v-bind:style="{width: data.nextRankPercentage + '%'}"></div>
               </div>
               <div class="round-end-next-rank d-flex justify-content-center align-items-center">
                   <div class="rank-icon" v-bind:style="getRankStyle(data.nextRank)"></div>
                   <h2>{{data.nextRank}}</h2>
               </div>
           </div>
       </div>
       <!-- TODO: Show a limit of six cards. When there are more than six, fade out the last unlock and keep pushing them down the line until we're out of unlocks. -->
       <div v-if="showUnlocks" class="round-end-show-unlocks" ref="unlockList">
           <div style="width:max-content;">
               <template v-for="(unlock, index) in unlocks" v-if="unlock.show">
                   <!-- TODO: Update to support research bar percentage. -->
                   <div :class="{'round-end-html-unlock': unlock.type === 'html', 'round-end-camo-unlock': unlock.type === 'skin', 'round-end-vehicle-unlock': unlock.type === 'vehicle', 'round-end-item-unlocked': !unlock.researchProgress}" class="animate__animated animate__flipInY">
                       <div class="round-end-item-background"></div>
                       <div v-if="unlock.type === 'html'" class="round-end-html-unlock-wrapper d-flex flex-column justify-content-center" v-html="unlock.key"></div>
                       <template v-if="unlock.type === 'skin'">
                           <div class="round-end-unlock-info d-flex flex-column justify-content-center">
                               <h3 style="overflow:hidden; text-overflow:ellipsis;">{{unlock.skinData.name}}</h3>
                               <h5 style="overflow:hidden; text-overflow:ellipsis;" v-if="unlock.vehicleData">for {{unlock.vehicleData.properties.name}}</h5>
                           </div>
                           <div class="round-end-unlock-thumbnail" v-bind:style="unlock.skinData.style"></div>
                       </template>
                       <template v-else-if="unlock.type === 'vehicle'">
                           <div class="round-end-unlock-thumbnail" v-bind:style="{backgroundImage:'url(' + 'assets/vehicles/' + unlock.key + '/' + unlock.key + '_thumbnail.png' + ')'}"></div>
                           <div class="round-end-unlock-info d-flex justify-content-center align-items-center">
                               <h4>{{unlock.vehicleData.properties.name}}</h4>
                           </div>
                       </template>
                       <h3 v-if="!unlock.researchProgress" class="round-end-item-status">{{unlock.text ? unlock.text : 'Unlocked!'}}</h3>
                       <!--
                       <div class="research-bar" style="width:180px; margin-top:-2px;" v-if="unlock.researchProgress">
                           <div v-bind:style="{width: unlock.researchProgress + '%'}" class="research-bar-inner"></div>
                           <div class="research-bar-text" style="margin-top:-28px;">{{unlock.researchProgress}}%</div>
                       </div>
                       -->
                   </div>
               </template>
           </div>
       </div>
   </div>
   `
});

//// serverBuilt.js
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){

},{}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],3:[function(require,module,exports){
(function (Buffer){(function (){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species != null &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayLike(value)
  }

  if (value == null) {
    throw TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  var valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  var b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(
      value[Symbol.toPrimitive]('string'), encodingOrOffset, length
    )
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      buf = Buffer.from(buf)
    }
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  var len = string.length
  var mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  var strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
        : (firstByte > 0xBF) ? 2
          : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (var i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    var len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this)}).call(this,require("buffer").Buffer)
},{"base64-js":2,"buffer":3,"ieee754":4}],4:[function(require,module,exports){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],5:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],6:[function(require,module,exports){
(function (setImmediate,clearImmediate){(function (){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this)}).call(this,require("timers").setImmediate,require("timers").clearImmediate)
},{"process/browser.js":5,"timers":6}],7:[function(require,module,exports){
const localList = require('./lang.json').words;
const baseList = require('badwords-list').array;

class Filter {

  /**
   * Filter constructor.
   * @constructor
   * @param {object} options - Filter instance options
   * @param {boolean} options.emptyList - Instantiate filter with no blacklist
   * @param {array} options.list - Instantiate filter with custom list
   * @param {string} options.placeHolder - Character used to replace profane words.
   * @param {string} options.regex - Regular expression used to sanitize words before comparing them to blacklist.
   * @param {string} options.replaceRegex - Regular expression used to replace profane words with placeHolder.
   * @param {string} options.splitRegex - Regular expression used to split a string into words.
   */
  constructor(options = {}) {
    Object.assign(this, {
      list: options.emptyList && [] || Array.prototype.concat.apply(localList, [baseList, options.list || []]),
      exclude: options.exclude || [],
      splitRegex: options.splitRegex || /\b/,
      placeHolder: options.placeHolder || '*',
      regex: options.regex || /[^a-zA-Z0-9|\$|\@]|\^/g,
      replaceRegex: options.replaceRegex || /\w/g
    })
  }

  /**
   * Determine if a string contains profane language.
   * @param {string} string - String to evaluate for profanity.
   */
  isProfane(string) {
    return this.list
      .filter((word) => {
        const wordExp = new RegExp(`\\b${word.replace(/(\W)/g, '\\$1')}\\b`, 'gi');
        return !this.exclude.includes(word.toLowerCase()) && wordExp.test(string);
      })
      .length > 0 || false;
  }

  /**
   * Replace a word with placeHolder characters;
   * @param {string} string - String to replace.
   */
  replaceWord(string) {
    return string
      .replace(this.regex, '')
      .replace(this.replaceRegex, this.placeHolder);
  }

  /**
   * Evaluate a string for profanity and return an edited version.
   * @param {string} string - Sentence to filter.
   */
  clean(string) {
    return string.split(this.splitRegex).map((word) => {
      return this.isProfane(word) ? this.replaceWord(word) : word;
    }).join(this.splitRegex.exec(string)[0]);
  }

  /**
   * Add word(s) to blacklist filter / remove words from whitelist filter
   * @param {...string} word - Word(s) to add to blacklist
   */
  addWords() {
    let words = Array.from(arguments);

    this.list.push(...words);

    words
      .map(word => word.toLowerCase())
      .forEach((word) => {
        if (this.exclude.includes(word)) {
          this.exclude.splice(this.exclude.indexOf(word), 1);
        }
      });
  }

  /**
   * Add words to whitelist filter
   * @param {...string} word - Word(s) to add to whitelist.
   */
  removeWords() {
    this.exclude.push(...Array.from(arguments).map(word => word.toLowerCase()));
  }
}

module.exports = Filter;
},{"./lang.json":8,"badwords-list":10}],8:[function(require,module,exports){
module.exports={
  "words":[
    "ahole",
    "anus",
    "ash0le",
    "ash0les",
    "asholes",
    "ass",
    "Ass Monkey",
    "Assface",
    "assh0le",
    "assh0lez",
    "asshole",
    "assholes",
    "assholz",
    "asswipe",
    "azzhole",
    "bassterds",
    "bastard",
    "bastards",
    "bastardz",
    "basterds",
    "basterdz",
    "Biatch",
    "bitch",
    "bitches",
    "Blow Job",
    "boffing",
    "butthole",
    "buttwipe",
    "c0ck",
    "c0cks",
    "c0k",
    "Carpet Muncher",
    "cawk",
    "cawks",
    "Clit",
    "cnts",
    "cntz",
    "cock",
    "cockhead",
    "cock-head",
    "cocks",
    "CockSucker",
    "cock-sucker",
    "crap",
    "cum",
    "cunt",
    "cunts",
    "cuntz",
    "dick",
    "dild0",
    "dild0s",
    "dildo",
    "dildos",
    "dilld0",
    "dilld0s",
    "dominatricks",
    "dominatrics",
    "dominatrix",
    "dyke",
    "enema",
    "f u c k",
    "f u c k e r",
    "fag",
    "fag1t",
    "faget",
    "fagg1t",
    "faggit",
    "faggot",
    "fagg0t",
    "fagit",
    "fags",
    "fagz",
    "faig",
    "faigs",
    "fart",
    "flipping the bird",
    "fuck",
    "fucker",
    "fuckin",
    "fucking",
    "fucks",
    "Fudge Packer",
    "fuk",
    "Fukah",
    "Fuken",
    "fuker",
    "Fukin",
    "Fukk",
    "Fukkah",
    "Fukken",
    "Fukker",
    "Fukkin",
    "g00k",
    "God-damned",
    "h00r",
    "h0ar",
    "h0re",
    "hells",
    "hoar",
    "hoor",
    "hoore",
    "jackoff",
    "jap",
    "japs",
    "jerk-off",
    "jisim",
    "jiss",
    "jizm",
    "jizz",
    "knob",
    "knobs",
    "knobz",
    "kunt",
    "kunts",
    "kuntz",
    "Lezzian",
    "Lipshits",
    "Lipshitz",
    "masochist",
    "masokist",
    "massterbait",
    "masstrbait",
    "masstrbate",
    "masterbaiter",
    "masterbate",
    "masterbates",
    "Motha Fucker",
    "Motha Fuker",
    "Motha Fukkah",
    "Motha Fukker",
    "Mother Fucker",
    "Mother Fukah",
    "Mother Fuker",
    "Mother Fukkah",
    "Mother Fukker",
    "mother-fucker",
    "Mutha Fucker",
    "Mutha Fukah",
    "Mutha Fuker",
    "Mutha Fukkah",
    "Mutha Fukker",
    "n1gr",
    "nastt",
    "nigger;",
    "nigur;",
    "niiger;",
    "niigr;",
    "orafis",
    "orgasim;",
    "orgasm",
    "orgasum",
    "oriface",
    "orifice",
    "orifiss",
    "packi",
    "packie",
    "packy",
    "paki",
    "pakie",
    "paky",
    "pecker",
    "peeenus",
    "peeenusss",
    "peenus",
    "peinus",
    "pen1s",
    "penas",
    "penis",
    "penis-breath",
    "penus",
    "penuus",
    "Phuc",
    "Phuck",
    "Phuk",
    "Phuker",
    "Phukker",
    "polac",
    "polack",
    "polak",
    "Poonani",
    "pr1c",
    "pr1ck",
    "pr1k",
    "pusse",
    "pussee",
    "pussy",
    "puuke",
    "puuker",
    "qweir",
    "recktum",
    "rectum",
    "retard",
    "sadist",
    "scank",
    "schlong",
    "screwing",
    "semen",
    "sex",
    "sexy",
    "Sh!t",
    "sh1t",
    "sh1ter",
    "sh1ts",
    "sh1tter",
    "sh1tz",
    "shit",
    "shits",
    "shitter",
    "Shitty",
    "Shity",
    "shitz",
    "Shyt",
    "Shyte",
    "Shytty",
    "Shyty",
    "skanck",
    "skank",
    "skankee",
    "skankey",
    "skanks",
    "Skanky",
    "slag",
    "slut",
    "sluts",
    "Slutty",
    "slutz",
    "son-of-a-bitch",
    "tit",
    "turd",
    "va1jina",
    "vag1na",
    "vagiina",
    "vagina",
    "vaj1na",
    "vajina",
    "vullva",
    "vulva",
    "w0p",
    "wh00r",
    "wh0re",
    "whore",
    "xrated",
    "xxx",
    "b!+ch",
    "bitch",
    "blowjob",
    "clit",
    "arschloch",
    "fuck",
    "shit",
    "ass",
    "asshole",
    "b!tch",
    "b17ch",
    "b1tch",
    "bastard",
    "bi+ch",
    "boiolas",
    "buceta",
    "c0ck",
    "cawk",
    "chink",
    "cipa",
    "clits",
    "cock",
    "cum",
    "cunt",
    "dildo",
    "dirsa",
    "ejakulate",
    "fatass",
    "fcuk",
    "fuk",
    "fux0r",
    "hoer",
    "hore",
    "jism",
    "kawk",
    "l3itch",
    "l3i+ch",
    "masturbate",
    "masterbat*",
    "masterbat3",
    "motherfucker",
    "s.o.b.",
    "mofo",
    "nazi",
    "nigga",
    "nigger",
    "nutsack",
    "phuck",
    "pimpis",
    "pusse",
    "pussy",
    "scrotum",
    "sh!t",
    "shemale",
    "shi+",
    "sh!+",
    "slut",
    "smut",
    "teets",
    "tits",
    "boobs",
    "b00bs",
    "teez",
    "testical",
    "testicle",
    "titt",
    "w00se",
    "jackoff",
    "wank",
    "whoar",
    "whore",
    "*damn",
    "*dyke",
    "*fuck*",
    "*shit*",
    "@$$",
    "amcik",
    "andskota",
    "arse*",
    "assrammer",
    "ayir",
    "bi7ch",
    "bitch*",
    "bollock*",
    "breasts",
    "butt-pirate",
    "cabron",
    "cazzo",
    "chraa",
    "chuj",
    "Cock*",
    "cunt*",
    "d4mn",
    "daygo",
    "dego",
    "dick*",
    "dike*",
    "dupa",
    "dziwka",
    "ejackulate",
    "Ekrem*",
    "Ekto",
    "enculer",
    "faen",
    "fag*",
    "fanculo",
    "fanny",
    "feces",
    "feg",
    "Felcher",
    "ficken",
    "fitt*",
    "Flikker",
    "foreskin",
    "Fotze",
    "Fu(*",
    "fuk*",
    "futkretzn",
    "gook",
    "guiena",
    "h0r",
    "h4x0r",
    "hell",
    "helvete",
    "hoer*",
    "honkey",
    "Huevon",
    "hui",
    "injun",
    "jizz",
    "kanker*",
    "kike",
    "klootzak",
    "kraut",
    "knulle",
    "kuk",
    "kuksuger",
    "Kurac",
    "kurwa",
    "kusi*",
    "kyrpa*",
    "lesbo",
    "mamhoon",
    "masturbat*",
    "merd*",
    "mibun",
    "monkleigh",
    "mouliewop",
    "muie",
    "mulkku",
    "muschi",
    "nazis",
    "nepesaurio",
    "nigger*",
    "orospu",
    "paska*",
    "perse",
    "picka",
    "pierdol*",
    "pillu*",
    "pimmel",
    "piss*",
    "pizda",
    "poontsee",
    "poop",
    "porn",
    "p0rn",
    "pr0n",
    "preteen",
    "pula",
    "pule",
    "puta",
    "puto",
    "qahbeh",
    "queef*",
    "rautenberg",
    "schaffer",
    "scheiss*",
    "schlampe",
    "schmuck",
    "screw",
    "sh!t*",
    "sharmuta",
    "sharmute",
    "shipal",
    "shiz",
    "skribz",
    "skurwysyn",
    "sphencter",
    "spic",
    "spierdalaj",
    "splooge",
    "suka",
    "b00b*",
    "testicle*",
    "titt*",
    "twat",
    "vittu",
    "wank*",
    "wetback*",
    "wichser",
    "wop*",
    "yed",
    "zabourah"
  ]
}

},{}],9:[function(require,module,exports){
module.exports = ["4r5e", "5h1t", "5hit", "a55", "anal", "anus", "ar5e", "arrse", "arse", "ass", "ass-fucker", "asses", "assfucker", "assfukka", "asshole", "assholes", "asswhole", "a_s_s", "b!tch", "b00bs", "b17ch", "b1tch", "ballbag", "balls", "ballsack", "bastard", "beastial", "beastiality", "bellend", "bestial", "bestiality", "bi+ch", "biatch", "bitch", "bitcher", "bitchers", "bitches", "bitchin", "bitching", "bloody", "blow job", "blowjob", "blowjobs", "boiolas", "bollock", "bollok", "boner", "boob", "boobs", "booobs", "boooobs", "booooobs", "booooooobs", "breasts", "buceta", "bugger", "bum", "bunny fucker", "butt", "butthole", "buttmuch", "buttplug", "c0ck", "c0cksucker", "carpet muncher", "cawk", "chink", "cipa", "cl1t", "clit", "clitoris", "clits", "cnut", "cock", "cock-sucker", "cockface", "cockhead", "cockmunch", "cockmuncher", "cocks", "cocksuck", "cocksucked", "cocksucker", "cocksucking", "cocksucks", "cocksuka", "cocksukka", "cok", "cokmuncher", "coksucka", "coon", "cox", "crap", "cum", "cummer", "cumming", "cums", "cumshot", "cunilingus", "cunillingus", "cunnilingus", "cunt", "cuntlick", "cuntlicker", "cuntlicking", "cunts", "cyalis", "cyberfuc", "cyberfuck", "cyberfucked", "cyberfucker", "cyberfuckers", "cyberfucking", "d1ck", "damn", "dick", "dickhead", "dildo", "dildos", "dink", "dinks", "dirsa", "dlck", "dog-fucker", "doggin", "dogging", "donkeyribber", "doosh", "duche", "dyke", "ejaculate", "ejaculated", "ejaculates", "ejaculating", "ejaculatings", "ejaculation", "ejakulate", "f u c k", "f u c k e r", "f4nny", "fag", "fagging", "faggitt", "faggot", "faggs", "fagot", "fagots", "fags", "fanny", "fannyflaps", "fannyfucker", "fanyy", "fatass", "fcuk", "fcuker", "fcuking", "feck", "fecker", "felching", "fellate", "fellatio", "fingerfuck", "fingerfucked", "fingerfucker", "fingerfuckers", "fingerfucking", "fingerfucks", "fistfuck", "fistfucked", "fistfucker", "fistfuckers", "fistfucking", "fistfuckings", "fistfucks", "flange", "fook", "fooker", "fuck", "fucka", "fucked", "fucker", "fuckers", "fuckhead", "fuckheads", "fuckin", "fucking", "fuckings", "fuckingshitmotherfucker", "fuckme", "fucks", "fuckwhit", "fuckwit", "fudge packer", "fudgepacker", "fuk", "fuker", "fukker", "fukkin", "fuks", "fukwhit", "fukwit", "fux", "fux0r", "f_u_c_k", "gangbang", "gangbanged", "gangbangs", "gaylord", "gaysex", "goatse", "God", "god-dam", "god-damned", "goddamn", "goddamned", "hardcoresex", "hell", "heshe", "hoar", "hoare", "hoer", "homo", "hore", "horniest", "horny", "hotsex", "jack-off", "jackoff", "jap", "jerk-off", "jism", "jiz", "jizm", "jizz", "kawk", "knob", "knobead", "knobed", "knobend", "knobhead", "knobjocky", "knobjokey", "kock", "kondum", "kondums", "kum", "kummer", "kumming", "kums", "kunilingus", "l3i+ch", "l3itch", "labia", "lust", "lusting", "m0f0", "m0fo", "m45terbate", "ma5terb8", "ma5terbate", "masochist", "master-bate", "masterb8", "masterbat*", "masterbat3", "masterbate", "masterbation", "masterbations", "masturbate", "mo-fo", "mof0", "mofo", "mothafuck", "mothafucka", "mothafuckas", "mothafuckaz", "mothafucked", "mothafucker", "mothafuckers", "mothafuckin", "mothafucking", "mothafuckings", "mothafucks", "mother fucker", "motherfuck", "motherfucked", "motherfucker", "motherfuckers", "motherfuckin", "motherfucking", "motherfuckings", "motherfuckka", "motherfucks", "muff", "mutha", "muthafecker", "muthafuckker", "muther", "mutherfucker", "n1gga", "n1gger", "nazi", "nigg3r", "nigg4h", "nigga", "niggah", "niggas", "niggaz", "nigger", "niggers", "nob", "nob jokey", "nobhead", "nobjocky", "nobjokey", "numbnuts", "nutsack", "orgasim", "orgasims", "orgasm", "orgasms", "p0rn", "pawn", "pecker", "penis", "penisfucker", "phonesex", "phuck", "phuk", "phuked", "phuking", "phukked", "phukking", "phuks", "phuq", "pigfucker", "pimpis", "piss", "pissed", "pisser", "pissers", "pisses", "pissflaps", "pissin", "pissing", "pissoff", "poop", "porn", "porno", "pornography", "pornos", "prick", "pricks", "pron", "pube", "pusse", "pussi", "pussies", "pussy", "pussys", "rectum", "retard", "rimjaw", "rimming", "s hit", "s.o.b.", "sadist", "schlong", "screwing", "scroat", "scrote", "scrotum", "semen", "sex", "sh!+", "sh!t", "sh1t", "shag", "shagger", "shaggin", "shagging", "shemale", "shi+", "shit", "shitdick", "shite", "shited", "shitey", "shitfuck", "shitfull", "shithead", "shiting", "shitings", "shits", "shitted", "shitter", "shitters", "shitting", "shittings", "shitty", "skank", "slut", "sluts", "smegma", "smut", "snatch", "son-of-a-bitch", "spac", "spunk", "s_h_i_t", "t1tt1e5", "t1tties", "teets", "teez", "testical", "testicle", "tit", "titfuck", "tits", "titt", "tittie5", "tittiefucker", "titties", "tittyfuck", "tittywank", "titwank", "tosser", "turd", "tw4t", "twat", "twathead", "twatty", "twunt", "twunter", "v14gra", "v1gra", "vagina", "viagra", "vulva", "w00se", "wang", "wank", "wanker", "wanky", "whoar", "whore", "willies", "willy", "xrated", "xxx"];
},{}],10:[function(require,module,exports){
module.exports = {
  object: require('./object'),
  array: require('./array'),
  regex: require('./regexp')
};
},{"./array":9,"./object":11,"./regexp":12}],11:[function(require,module,exports){
module.exports = {"4r5e": 1, "5h1t": 1, "5hit": 1, "a55": 1, "anal": 1, "anus": 1, "ar5e": 1, "arrse": 1, "arse": 1, "ass": 1, "ass-fucker": 1, "asses": 1, "assfucker": 1, "assfukka": 1, "asshole": 1, "assholes": 1, "asswhole": 1, "a_s_s": 1, "b!tch": 1, "b00bs": 1, "b17ch": 1, "b1tch": 1, "ballbag": 1, "balls": 1, "ballsack": 1, "bastard": 1, "beastial": 1, "beastiality": 1, "bellend": 1, "bestial": 1, "bestiality": 1, "bi+ch": 1, "biatch": 1, "bitch": 1, "bitcher": 1, "bitchers": 1, "bitches": 1, "bitchin": 1, "bitching": 1, "bloody": 1, "blow job": 1, "blowjob": 1, "blowjobs": 1, "boiolas": 1, "bollock": 1, "bollok": 1, "boner": 1, "boob": 1, "boobs": 1, "booobs": 1, "boooobs": 1, "booooobs": 1, "booooooobs": 1, "breasts": 1, "buceta": 1, "bugger": 1, "bum": 1, "bunny fucker": 1, "butt": 1, "butthole": 1, "buttmuch": 1, "buttplug": 1, "c0ck": 1, "c0cksucker": 1, "carpet muncher": 1, "cawk": 1, "chink": 1, "cipa": 1, "cl1t": 1, "clit": 1, "clitoris": 1, "clits": 1, "cnut": 1, "cock": 1, "cock-sucker": 1, "cockface": 1, "cockhead": 1, "cockmunch": 1, "cockmuncher": 1, "cocks": 1, "cocksuck": 1, "cocksucked": 1, "cocksucker": 1, "cocksucking": 1, "cocksucks": 1, "cocksuka": 1, "cocksukka": 1, "cok": 1, "cokmuncher": 1, "coksucka": 1, "coon": 1, "cox": 1, "crap": 1, "cum": 1, "cummer": 1, "cumming": 1, "cums": 1, "cumshot": 1, "cunilingus": 1, "cunillingus": 1, "cunnilingus": 1, "cunt": 1, "cuntlick": 1, "cuntlicker": 1, "cuntlicking": 1, "cunts": 1, "cyalis": 1, "cyberfuc": 1, "cyberfuck": 1, "cyberfucked": 1, "cyberfucker": 1, "cyberfuckers": 1, "cyberfucking": 1, "d1ck": 1, "damn": 1, "dick": 1, "dickhead": 1, "dildo": 1, "dildos": 1, "dink": 1, "dinks": 1, "dirsa": 1, "dlck": 1, "dog-fucker": 1, "doggin": 1, "dogging": 1, "donkeyribber": 1, "doosh": 1, "duche": 1, "dyke": 1, "ejaculate": 1, "ejaculated": 1, "ejaculates": 1, "ejaculating": 1, "ejaculatings": 1, "ejaculation": 1, "ejakulate": 1, "f u c k": 1, "f u c k e r": 1, "f4nny": 1, "fag": 1, "fagging": 1, "faggitt": 1, "faggot": 1, "faggs": 1, "fagot": 1, "fagots": 1, "fags": 1, "fanny": 1, "fannyflaps": 1, "fannyfucker": 1, "fanyy": 1, "fatass": 1, "fcuk": 1, "fcuker": 1, "fcuking": 1, "feck": 1, "fecker": 1, "felching": 1, "fellate": 1, "fellatio": 1, "fingerfuck": 1, "fingerfucked": 1, "fingerfucker": 1, "fingerfuckers": 1, "fingerfucking": 1, "fingerfucks": 1, "fistfuck": 1, "fistfucked": 1, "fistfucker": 1, "fistfuckers": 1, "fistfucking": 1, "fistfuckings": 1, "fistfucks": 1, "flange": 1, "fook": 1, "fooker": 1, "fuck": 1, "fucka": 1, "fucked": 1, "fucker": 1, "fuckers": 1, "fuckhead": 1, "fuckheads": 1, "fuckin": 1, "fucking": 1, "fuckings": 1, "fuckingshitmotherfucker": 1, "fuckme": 1, "fucks": 1, "fuckwhit": 1, "fuckwit": 1, "fudge packer": 1, "fudgepacker": 1, "fuk": 1, "fuker": 1, "fukker": 1, "fukkin": 1, "fuks": 1, "fukwhit": 1, "fukwit": 1, "fux": 1, "fux0r": 1, "f_u_c_k": 1, "gangbang": 1, "gangbanged": 1, "gangbangs": 1, "gaylord": 1, "gaysex": 1, "goatse": 1, "God": 1, "god-dam": 1, "god-damned": 1, "goddamn": 1, "goddamned": 1, "hardcoresex": 1, "hell": 1, "heshe": 1, "hoar": 1, "hoare": 1, "hoer": 1, "homo": 1, "hore": 1, "horniest": 1, "horny": 1, "hotsex": 1, "jack-off": 1, "jackoff": 1, "jap": 1, "jerk-off": 1, "jism": 1, "jiz": 1, "jizm": 1, "jizz": 1, "kawk": 1, "knob": 1, "knobead": 1, "knobed": 1, "knobend": 1, "knobhead": 1, "knobjocky": 1, "knobjokey": 1, "kock": 1, "kondum": 1, "kondums": 1, "kum": 1, "kummer": 1, "kumming": 1, "kums": 1, "kunilingus": 1, "l3i+ch": 1, "l3itch": 1, "labia": 1, "lust": 1, "lusting": 1, "m0f0": 1, "m0fo": 1, "m45terbate": 1, "ma5terb8": 1, "ma5terbate": 1, "masochist": 1, "master-bate": 1, "masterb8": 1, "masterbat*": 1, "masterbat3": 1, "masterbate": 1, "masterbation": 1, "masterbations": 1, "masturbate": 1, "mo-fo": 1, "mof0": 1, "mofo": 1, "mothafuck": 1, "mothafucka": 1, "mothafuckas": 1, "mothafuckaz": 1, "mothafucked": 1, "mothafucker": 1, "mothafuckers": 1, "mothafuckin": 1, "mothafucking": 1, "mothafuckings": 1, "mothafucks": 1, "mother fucker": 1, "motherfuck": 1, "motherfucked": 1, "motherfucker": 1, "motherfuckers": 1, "motherfuckin": 1, "motherfucking": 1, "motherfuckings": 1, "motherfuckka": 1, "motherfucks": 1, "muff": 1, "mutha": 1, "muthafecker": 1, "muthafuckker": 1, "muther": 1, "mutherfucker": 1, "n1gga": 1, "n1gger": 1, "nazi": 1, "nigg3r": 1, "nigg4h": 1, "nigga": 1, "niggah": 1, "niggas": 1, "niggaz": 1, "nigger": 1, "niggers": 1, "nob": 1, "nob jokey": 1, "nobhead": 1, "nobjocky": 1, "nobjokey": 1, "numbnuts": 1, "nutsack": 1, "orgasim": 1, "orgasims": 1, "orgasm": 1, "orgasms": 1, "p0rn": 1, "pawn": 1, "pecker": 1, "penis": 1, "penisfucker": 1, "phonesex": 1, "phuck": 1, "phuk": 1, "phuked": 1, "phuking": 1, "phukked": 1, "phukking": 1, "phuks": 1, "phuq": 1, "pigfucker": 1, "pimpis": 1, "piss": 1, "pissed": 1, "pisser": 1, "pissers": 1, "pisses": 1, "pissflaps": 1, "pissin": 1, "pissing": 1, "pissoff": 1, "poop": 1, "porn": 1, "porno": 1, "pornography": 1, "pornos": 1, "prick": 1, "pricks": 1, "pron": 1, "pube": 1, "pusse": 1, "pussi": 1, "pussies": 1, "pussy": 1, "pussys": 1, "rectum": 1, "retard": 1, "rimjaw": 1, "rimming": 1, "s hit": 1, "s.o.b.": 1, "sadist": 1, "schlong": 1, "screwing": 1, "scroat": 1, "scrote": 1, "scrotum": 1, "semen": 1, "sex": 1, "sh!+": 1, "sh!t": 1, "sh1t": 1, "shag": 1, "shagger": 1, "shaggin": 1, "shagging": 1, "shemale": 1, "shi+": 1, "shit": 1, "shitdick": 1, "shite": 1, "shited": 1, "shitey": 1, "shitfuck": 1, "shitfull": 1, "shithead": 1, "shiting": 1, "shitings": 1, "shits": 1, "shitted": 1, "shitter": 1, "shitters": 1, "shitting": 1, "shittings": 1, "shitty": 1, "skank": 1, "slut": 1, "sluts": 1, "smegma": 1, "smut": 1, "snatch": 1, "son-of-a-bitch": 1, "spac": 1, "spunk": 1, "s_h_i_t": 1, "t1tt1e5": 1, "t1tties": 1, "teets": 1, "teez": 1, "testical": 1, "testicle": 1, "tit": 1, "titfuck": 1, "tits": 1, "titt": 1, "tittie5": 1, "tittiefucker": 1, "titties": 1, "tittyfuck": 1, "tittywank": 1, "titwank": 1, "tosser": 1, "turd": 1, "tw4t": 1, "twat": 1, "twathead": 1, "twatty": 1, "twunt": 1, "twunter": 1, "v14gra": 1, "v1gra": 1, "vagina": 1, "viagra": 1, "vulva": 1, "w00se": 1, "wang": 1, "wank": 1, "wanker": 1, "wanky": 1, "whoar": 1, "whore": 1, "willies": 1, "willy": 1, "xrated": 1, "xxx": 1};
},{}],12:[function(require,module,exports){
module.exports = /\b(4r5e|5h1t|5hit|a55|anal|anus|ar5e|arrse|arse|ass|ass-fucker|asses|assfucker|assfukka|asshole|assholes|asswhole|a_s_s|b!tch|b00bs|b17ch|b1tch|ballbag|balls|ballsack|bastard|beastial|beastiality|bellend|bestial|bestiality|bi\+ch|biatch|bitch|bitcher|bitchers|bitches|bitchin|bitching|bloody|blow job|blowjob|blowjobs|boiolas|bollock|bollok|boner|boob|boobs|booobs|boooobs|booooobs|booooooobs|breasts|buceta|bugger|bum|bunny fucker|butt|butthole|buttmuch|buttplug|c0ck|c0cksucker|carpet muncher|cawk|chink|cipa|cl1t|clit|clitoris|clits|cnut|cock|cock-sucker|cockface|cockhead|cockmunch|cockmuncher|cocks|cocksuck|cocksucked|cocksucker|cocksucking|cocksucks|cocksuka|cocksukka|cok|cokmuncher|coksucka|coon|cox|crap|cum|cummer|cumming|cums|cumshot|cunilingus|cunillingus|cunnilingus|cunt|cuntlick|cuntlicker|cuntlicking|cunts|cyalis|cyberfuc|cyberfuck|cyberfucked|cyberfucker|cyberfuckers|cyberfucking|d1ck|damn|dick|dickhead|dildo|dildos|dink|dinks|dirsa|dlck|dog-fucker|doggin|dogging|donkeyribber|doosh|duche|dyke|ejaculate|ejaculated|ejaculates|ejaculating|ejaculatings|ejaculation|ejakulate|f u c k|f u c k e r|f4nny|fag|fagging|faggitt|faggot|faggs|fagot|fagots|fags|fanny|fannyflaps|fannyfucker|fanyy|fatass|fcuk|fcuker|fcuking|feck|fecker|felching|fellate|fellatio|fingerfuck|fingerfucked|fingerfucker|fingerfuckers|fingerfucking|fingerfucks|fistfuck|fistfucked|fistfucker|fistfuckers|fistfucking|fistfuckings|fistfucks|flange|fook|fooker|fuck|fucka|fucked|fucker|fuckers|fuckhead|fuckheads|fuckin|fucking|fuckings|fuckingshitmotherfucker|fuckme|fucks|fuckwhit|fuckwit|fudge packer|fudgepacker|fuk|fuker|fukker|fukkin|fuks|fukwhit|fukwit|fux|fux0r|f_u_c_k|gangbang|gangbanged|gangbangs|gaylord|gaysex|goatse|God|god-dam|god-damned|goddamn|goddamned|hardcoresex|hell|heshe|hoar|hoare|hoer|homo|hore|horniest|horny|hotsex|jack-off|jackoff|jap|jerk-off|jism|jiz|jizm|jizz|kawk|knob|knobead|knobed|knobend|knobhead|knobjocky|knobjokey|kock|kondum|kondums|kum|kummer|kumming|kums|kunilingus|l3i\+ch|l3itch|labia|lust|lusting|m0f0|m0fo|m45terbate|ma5terb8|ma5terbate|masochist|master-bate|masterb8|masterbat*|masterbat3|masterbate|masterbation|masterbations|masturbate|mo-fo|mof0|mofo|mothafuck|mothafucka|mothafuckas|mothafuckaz|mothafucked|mothafucker|mothafuckers|mothafuckin|mothafucking|mothafuckings|mothafucks|mother fucker|motherfuck|motherfucked|motherfucker|motherfuckers|motherfuckin|motherfucking|motherfuckings|motherfuckka|motherfucks|muff|mutha|muthafecker|muthafuckker|muther|mutherfucker|n1gga|n1gger|nazi|nigg3r|nigg4h|nigga|niggah|niggas|niggaz|nigger|niggers|nob|nob jokey|nobhead|nobjocky|nobjokey|numbnuts|nutsack|orgasim|orgasims|orgasm|orgasms|p0rn|pawn|pecker|penis|penisfucker|phonesex|phuck|phuk|phuked|phuking|phukked|phukking|phuks|phuq|pigfucker|pimpis|piss|pissed|pisser|pissers|pisses|pissflaps|pissin|pissing|pissoff|poop|porn|porno|pornography|pornos|prick|pricks|pron|pube|pusse|pussi|pussies|pussy|pussys|rectum|retard|rimjaw|rimming|s hit|s.o.b.|sadist|schlong|screwing|scroat|scrote|scrotum|semen|sex|sh!\+|sh!t|sh1t|shag|shagger|shaggin|shagging|shemale|shi\+|shit|shitdick|shite|shited|shitey|shitfuck|shitfull|shithead|shiting|shitings|shits|shitted|shitter|shitters|shitting|shittings|shitty|skank|slut|sluts|smegma|smut|snatch|son-of-a-bitch|spac|spunk|s_h_i_t|t1tt1e5|t1tties|teets|teez|testical|testicle|tit|titfuck|tits|titt|tittie5|tittiefucker|titties|tittyfuck|tittywank|titwank|tosser|turd|tw4t|twat|twathead|twatty|twunt|twunter|v14gra|v1gra|vagina|viagra|vulva|w00se|wang|wank|wanker|wanky|whoar|whore|willies|willy|xrated|xxx)\b/gi;
},{}],13:[function(require,module,exports){
'use strict';
//parse Empty Node as self closing node
const buildOptions = require('./util').buildOptions;

const defaultOptions = {
  attributeNamePrefix: '@_',
  attrNodeName: false,
  textNodeName: '#text',
  ignoreAttributes: true,
  cdataTagName: false,
  cdataPositionChar: '\\c',
  format: false,
  indentBy: '  ',
  supressEmptyNode: false,
  tagValueProcessor: function(a) {
    return a;
  },
  attrValueProcessor: function(a) {
    return a;
  },
};

const props = [
  'attributeNamePrefix',
  'attrNodeName',
  'textNodeName',
  'ignoreAttributes',
  'cdataTagName',
  'cdataPositionChar',
  'format',
  'indentBy',
  'supressEmptyNode',
  'tagValueProcessor',
  'attrValueProcessor',
  'rootNodeName', //when array as root
];

function Parser(options) {
  this.options = buildOptions(options, defaultOptions, props);
  if (this.options.ignoreAttributes || this.options.attrNodeName) {
    this.isAttribute = function(/*a*/) {
      return false;
    };
  } else {
    this.attrPrefixLen = this.options.attributeNamePrefix.length;
    this.isAttribute = isAttribute;
  }
  if (this.options.cdataTagName) {
    this.isCDATA = isCDATA;
  } else {
    this.isCDATA = function(/*a*/) {
      return false;
    };
  }
  this.replaceCDATAstr = replaceCDATAstr;
  this.replaceCDATAarr = replaceCDATAarr;

  this.processTextOrObjNode = processTextOrObjNode

  if (this.options.format) {
    this.indentate = indentate;
    this.tagEndChar = '>\n';
    this.newLine = '\n';
  } else {
    this.indentate = function() {
      return '';
    };
    this.tagEndChar = '>';
    this.newLine = '';
  }

  if (this.options.supressEmptyNode) {
    this.buildTextNode = buildEmptyTextNode;
    this.buildObjNode = buildEmptyObjNode;
  } else {
    this.buildTextNode = buildTextValNode;
    this.buildObjNode = buildObjectNode;
  }

  this.buildTextValNode = buildTextValNode;
  this.buildObjectNode = buildObjectNode;
}

Parser.prototype.parse = function(jObj) {
  if(Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1){
    jObj = {
      [this.options.rootNodeName] : jObj
    }
  }
  return this.j2x(jObj, 0).val;
};

Parser.prototype.j2x = function(jObj, level) {
  let attrStr = '';
  let val = '';
  for (let key in jObj) {
    if (typeof jObj[key] === 'undefined') {
      // supress undefined node
    } else if (jObj[key] === null) {
      val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
    } else if (jObj[key] instanceof Date) {
      val += this.buildTextNode(jObj[key], key, '', level);
    } else if (typeof jObj[key] !== 'object') {
      //premitive type
      const attr = this.isAttribute(key);
      if (attr) {
        attrStr += ' ' + attr + '="' + this.options.attrValueProcessor('' + jObj[key]) + '"';
      } else if (this.isCDATA(key)) {
        if (jObj[this.options.textNodeName]) {
          val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
        } else {
          val += this.replaceCDATAstr('', jObj[key]);
        }
      } else {
        //tag value
        if (key === this.options.textNodeName) {
          if (jObj[this.options.cdataTagName]) {
            //value will added while processing cdata
          } else {
            val += this.options.tagValueProcessor('' + jObj[key]);
          }
        } else {
          val += this.buildTextNode(jObj[key], key, '', level);
        }
      }
    } else if (Array.isArray(jObj[key])) {
      //repeated nodes
      if (this.isCDATA(key)) {
        val += this.indentate(level);
        if (jObj[this.options.textNodeName]) {
          val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
        } else {
          val += this.replaceCDATAarr('', jObj[key]);
        }
      } else {
        //nested nodes
        const arrLen = jObj[key].length;
        for (let j = 0; j < arrLen; j++) {
          const item = jObj[key][j];
          if (typeof item === 'undefined') {
            // supress undefined node
          } else if (item === null) {
            val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;
          } else if (typeof item === 'object') {
            val += this.processTextOrObjNode(item, key, level)
          } else {
            val += this.buildTextNode(item, key, '', level);
          }
        }
      }
    } else {
      //nested node
      if (this.options.attrNodeName && key === this.options.attrNodeName) {
        const Ks = Object.keys(jObj[key]);
        const L = Ks.length;
        for (let j = 0; j < L; j++) {
          attrStr += ' ' + Ks[j] + '="' + this.options.attrValueProcessor('' + jObj[key][Ks[j]]) + '"';
        }
      } else {
        val += this.processTextOrObjNode(jObj[key], key, level)
      }
    }
  }
  return {attrStr: attrStr, val: val};
};

function processTextOrObjNode (object, key, level) {
  const result = this.j2x(object, level + 1);
  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {
    return this.buildTextNode(result.val, key, result.attrStr, level);
  } else {
    return this.buildObjNode(result.val, key, result.attrStr, level);
  }
}

function replaceCDATAstr(str, cdata) {
  str = this.options.tagValueProcessor('' + str);
  if (this.options.cdataPositionChar === '' || str === '') {
    return str + '<![CDATA[' + cdata + ']]' + this.tagEndChar;
  } else {
    return str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata + ']]' + this.tagEndChar);
  }
}

function replaceCDATAarr(str, cdata) {
  str = this.options.tagValueProcessor('' + str);
  if (this.options.cdataPositionChar === '' || str === '') {
    return str + '<![CDATA[' + cdata.join(']]><![CDATA[') + ']]' + this.tagEndChar;
  } else {
    for (let v in cdata) {
      str = str.replace(this.options.cdataPositionChar, '<![CDATA[' + cdata[v] + ']]>');
    }
    return str + this.newLine;
  }
}

function buildObjectNode(val, key, attrStr, level) {
  if (attrStr && val.indexOf('<') === -1) {
    return (
      this.indentate(level) +
      '<' +
      key +
      attrStr +
      '>' +
      val +
      //+ this.newLine
      // + this.indentate(level)
      '</' +
      key +
      this.tagEndChar
    );
  } else {
    return (
      this.indentate(level) +
      '<' +
      key +
      attrStr +
      this.tagEndChar +
      val +
      //+ this.newLine
      this.indentate(level) +
      '</' +
      key +
      this.tagEndChar
    );
  }
}

function buildEmptyObjNode(val, key, attrStr, level) {
  if (val !== '') {
    return this.buildObjectNode(val, key, attrStr, level);
  } else {
    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
    //+ this.newLine
  }
}

function buildTextValNode(val, key, attrStr, level) {
  return (
    this.indentate(level) +
    '<' +
    key +
    attrStr +
    '>' +
    this.options.tagValueProcessor(val) +
    '</' +
    key +
    this.tagEndChar
  );
}

function buildEmptyTextNode(val, key, attrStr, level) {
  if (val !== '') {
    return this.buildTextValNode(val, key, attrStr, level);
  } else {
    return this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;
  }
}

function indentate(level) {
  return this.options.indentBy.repeat(level);
}

function isAttribute(name /*, options*/) {
  if (name.startsWith(this.options.attributeNamePrefix)) {
    return name.substr(this.attrPrefixLen);
  } else {
    return false;
  }
}

function isCDATA(name) {
  return name === this.options.cdataTagName;
}

//formatting
//indentation
//\n after each closing or self closing tag

module.exports = Parser;

},{"./util":18}],14:[function(require,module,exports){
'use strict';
const char = function(a) {
  return String.fromCharCode(a);
};

const chars = {
  nilChar: char(176),
  missingChar: char(201),
  nilPremitive: char(175),
  missingPremitive: char(200),

  emptyChar: char(178),
  emptyValue: char(177), //empty Premitive

  boundryChar: char(179),

  objStart: char(198),
  arrStart: char(204),
  arrayEnd: char(185),
};

const charsArr = [
  chars.nilChar,
  chars.nilPremitive,
  chars.missingChar,
  chars.missingPremitive,
  chars.boundryChar,
  chars.emptyChar,
  chars.emptyValue,
  chars.arrayEnd,
  chars.objStart,
  chars.arrStart,
];

const _e = function(node, e_schema, options) {
  if (typeof e_schema === 'string') {
    //premitive
    if (node && node[0] && node[0].val !== undefined) {
      return getValue(node[0].val, e_schema);
    } else {
      return getValue(node, e_schema);
    }
  } else {
    const hasValidData = hasData(node);
    if (hasValidData === true) {
      let str = '';
      if (Array.isArray(e_schema)) {
        //attributes can't be repeated. hence check in children tags only
        str += chars.arrStart;
        const itemSchema = e_schema[0];
        //const itemSchemaType = itemSchema;
        const arr_len = node.length;

        if (typeof itemSchema === 'string') {
          for (let arr_i = 0; arr_i < arr_len; arr_i++) {
            const r = getValue(node[arr_i].val, itemSchema);
            str = processValue(str, r);
          }
        } else {
          for (let arr_i = 0; arr_i < arr_len; arr_i++) {
            const r = _e(node[arr_i], itemSchema, options);
            str = processValue(str, r);
          }
        }
        str += chars.arrayEnd; //indicates that next item is not array item
      } else {
        //object
        str += chars.objStart;
        const keys = Object.keys(e_schema);
        if (Array.isArray(node)) {
          node = node[0];
        }
        for (let i in keys) {
          const key = keys[i];
          //a property defined in schema can be present either in attrsMap or children tags
          //options.textNodeName will not present in both maps, take it's value from val
          //options.attrNodeName will be present in attrsMap
          let r;
          if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) {
            r = _e(node.attrsMap[key], e_schema[key], options);
          } else if (key === options.textNodeName) {
            r = _e(node.val, e_schema[key], options);
          } else {
            r = _e(node.child[key], e_schema[key], options);
          }
          str = processValue(str, r);
        }
      }
      return str;
    } else {
      return hasValidData;
    }
  }
};

const getValue = function(a /*, type*/) {
  switch (a) {
    case undefined:
      return chars.missingPremitive;
    case null:
      return chars.nilPremitive;
    case '':
      return chars.emptyValue;
    default:
      return a;
  }
};

const processValue = function(str, r) {
  if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) {
    str += chars.boundryChar;
  }
  return str + r;
};

const isAppChar = function(ch) {
  return charsArr.indexOf(ch) !== -1;
};

function hasData(jObj) {
  if (jObj === undefined) {
    return chars.missingChar;
  } else if (jObj === null) {
    return chars.nilChar;
  } else if (
    jObj.child &&
    Object.keys(jObj.child).length === 0 &&
    (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)
  ) {
    return chars.emptyChar;
  } else {
    return true;
  }
}

const x2j = require('./xmlstr2xmlnode');
const buildOptions = require('./util').buildOptions;

const convert2nimn = function(node, e_schema, options) {
  options = buildOptions(options, x2j.defaultOptions, x2j.props);
  return _e(node, e_schema, options);
};

exports.convert2nimn = convert2nimn;

},{"./util":18,"./xmlstr2xmlnode":21}],15:[function(require,module,exports){
'use strict';

const util = require('./util');

const convertToJson = function(node, options, parentTagName) {
  const jObj = {};

  // when no child node or attr is present
  if (!options.alwaysCreateTextNode && (!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) {
    return util.isExist(node.val) ? node.val : '';
  }

  // otherwise create a textnode if node has some text
  if (util.isExist(node.val) && !(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
    const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName)
    jObj[options.textNodeName] = asArray ? [node.val] : node.val;
  }

  util.merge(jObj, node.attrsMap, options.arrayMode);

  const keys = Object.keys(node.child);
  for (let index = 0; index < keys.length; index++) {
    const tagName = keys[index];
    if (node.child[tagName] && node.child[tagName].length > 1) {
      jObj[tagName] = [];
      for (let tag in node.child[tagName]) {
        if (node.child[tagName].hasOwnProperty(tag)) {
          jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
        }
      }
    } else {
      const result = convertToJson(node.child[tagName][0], options, tagName);
      const asArray = (options.arrayMode === true && typeof result === 'object') || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
      jObj[tagName] = asArray ? [result] : result;
    }
  }

  //add value
  return jObj;
};

exports.convertToJson = convertToJson;

},{"./util":18}],16:[function(require,module,exports){
'use strict';

const util = require('./util');
const buildOptions = require('./util').buildOptions;
const x2j = require('./xmlstr2xmlnode');

//TODO: do it later
const convertToJsonString = function(node, options) {
  options = buildOptions(options, x2j.defaultOptions, x2j.props);

  options.indentBy = options.indentBy || '';
  return _cToJsonStr(node, options, 0);
};

const _cToJsonStr = function(node, options, level) {
  let jObj = '{';

  //traver through all the children
  const keys = Object.keys(node.child);

  for (let index = 0; index < keys.length; index++) {
    const tagname = keys[index];
    if (node.child[tagname] && node.child[tagname].length > 1) {
      jObj += '"' + tagname + '" : [ ';
      for (let tag in node.child[tagname]) {
        jObj += _cToJsonStr(node.child[tagname][tag], options) + ' , ';
      }
      jObj = jObj.substr(0, jObj.length - 1) + ' ] '; //remove extra comma in last
    } else {
      jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + ' ,';
    }
  }
  util.merge(jObj, node.attrsMap);
  //add attrsMap as new children
  if (util.isEmptyObject(jObj)) {
    return util.isExist(node.val) ? node.val : '';
  } else {
    if (util.isExist(node.val)) {
      if (!(typeof node.val === 'string' && (node.val === '' || node.val === options.cdataPositionChar))) {
        jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
      }
    }
  }
  //add value
  if (jObj[jObj.length - 1] === ',') {
    jObj = jObj.substr(0, jObj.length - 2);
  }
  return jObj + '}';
};

function stringval(v) {
  if (v === true || v === false || !isNaN(v)) {
    return v;
  } else {
    return '"' + v + '"';
  }
}

function indentate(options, level) {
  return options.indentBy.repeat(level);
}

exports.convertToJsonString = convertToJsonString;

},{"./util":18,"./xmlstr2xmlnode":21}],17:[function(require,module,exports){
'use strict';

const nodeToJson = require('./node2json');
const xmlToNodeobj = require('./xmlstr2xmlnode');
const x2xmlnode = require('./xmlstr2xmlnode');
const buildOptions = require('./util').buildOptions;
const validator = require('./validator');

exports.parse = function(xmlData, givenOptions = {}, validationOption) {
  if( validationOption){
    if(validationOption === true) validationOption = {}
    
    const result = validator.validate(xmlData, validationOption);
    if (result !== true) {
      throw Error( result.err.msg)
    }
  }
  if(givenOptions.parseTrueNumberOnly 
    && givenOptions.parseNodeValue !== false
    && !givenOptions.numParseOptions){
    
      givenOptions.numParseOptions = {
        leadingZeros: false,
      }
  }
  let options = buildOptions(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);

  const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options)
  //print(traversableObj, "  ");
  return nodeToJson.convertToJson(traversableObj, options);
};
exports.convertTonimn = require('./nimndata').convert2nimn;
exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
exports.convertToJson = nodeToJson.convertToJson;
exports.convertToJsonString = require('./node2json_str').convertToJsonString;
exports.validate = validator.validate;
exports.j2xParser = require('./json2xml');
exports.parseToNimn = function(xmlData, schema, options) {
  return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
};


function print(xmlNode, indentation){
  if(xmlNode){
    console.log(indentation + "{")
    console.log(indentation + "  \"tagName\": \"" + xmlNode.tagname + "\", ");
    if(xmlNode.parent){
      console.log(indentation + "  \"parent\": \"" + xmlNode.parent.tagname  + "\", ");
    }
    console.log(indentation + "  \"val\": \"" + xmlNode.val  + "\", ");
    console.log(indentation + "  \"attrs\": " + JSON.stringify(xmlNode.attrsMap,null,4)  + ", ");

    if(xmlNode.child){
      console.log(indentation + "\"child\": {")
      const indentation2 = indentation + indentation;
      Object.keys(xmlNode.child).forEach( function(key) {
        const node = xmlNode.child[key];

        if(Array.isArray(node)){
          console.log(indentation +  "\""+key+"\" :[")
          node.forEach( function(item,index) {
            //console.log(indentation + " \""+index+"\" : [")
            print(item, indentation2);
          })
          console.log(indentation + "],")  
        }else{
          console.log(indentation + " \""+key+"\" : {")
          print(node, indentation2);
          console.log(indentation + "},")  
        }
      });
      console.log(indentation + "},")
    }
    console.log(indentation + "},")
  }
}

},{"./json2xml":13,"./nimndata":14,"./node2json":15,"./node2json_str":16,"./util":18,"./validator":19,"./xmlstr2xmlnode":21}],18:[function(require,module,exports){
'use strict';

const nameStartChar = ':A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
const nameChar = nameStartChar + '\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
const nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'
const regexName = new RegExp('^' + nameRegexp + '$');

const getAllMatches = function(string, regex) {
  const matches = [];
  let match = regex.exec(string);
  while (match) {
    const allmatches = [];
    allmatches.startIndex = regex.lastIndex - match[0].length;
    const len = match.length;
    for (let index = 0; index < len; index++) {
      allmatches.push(match[index]);
    }
    matches.push(allmatches);
    match = regex.exec(string);
  }
  return matches;
};

const isName = function(string) {
  const match = regexName.exec(string);
  return !(match === null || typeof match === 'undefined');
};

exports.isExist = function(v) {
  return typeof v !== 'undefined';
};

exports.isEmptyObject = function(obj) {
  return Object.keys(obj).length === 0;
};

/**
 * Copy all the properties of a into b.
 * @param {*} target
 * @param {*} a
 */
exports.merge = function(target, a, arrayMode) {
  if (a) {
    const keys = Object.keys(a); // will return an array of own properties
    const len = keys.length; //don't make it inline
    for (let i = 0; i < len; i++) {
      if (arrayMode === 'strict') {
        target[keys[i]] = [ a[keys[i]] ];
      } else {
        target[keys[i]] = a[keys[i]];
      }
    }
  }
};
/* exports.merge =function (b,a){
  return Object.assign(b,a);
} */

exports.getValue = function(v) {
  if (exports.isExist(v)) {
    return v;
  } else {
    return '';
  }
};

// const fakeCall = function(a) {return a;};
// const fakeCallNoReturn = function() {};

exports.buildOptions = function(options, defaultOptions, props) {
  let newOptions = {};
  if (!options) {
    return defaultOptions; //if there are not options
  }

  for (let i = 0; i < props.length; i++) {
    if (options[props[i]] !== undefined) {
      newOptions[props[i]] = options[props[i]];
    } else {
      newOptions[props[i]] = defaultOptions[props[i]];
    }
  }
  return newOptions;
};

/**
 * Check if a tag name should be treated as array
 *
 * @param tagName the node tagname
 * @param arrayMode the array mode option
 * @param parentTagName the parent tag name
 * @returns {boolean} true if node should be parsed as array
 */
exports.isTagNameInArrayMode = function (tagName, arrayMode, parentTagName) {
  if (arrayMode === false) {
    return false;
  } else if (arrayMode instanceof RegExp) {
    return arrayMode.test(tagName);
  } else if (typeof arrayMode === 'function') {
    return !!arrayMode(tagName, parentTagName);
  }

  return arrayMode === "strict";
}

exports.isName = isName;
exports.getAllMatches = getAllMatches;
exports.nameRegexp = nameRegexp;

},{}],19:[function(require,module,exports){
'use strict';

const util = require('./util');

const defaultOptions = {
  allowBooleanAttributes: false, //A tag can have attributes without any value
};

const props = ['allowBooleanAttributes'];

//const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
exports.validate = function (xmlData, options) {
  options = util.buildOptions(options, defaultOptions, props);

  //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
  //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
  //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
  const tags = [];
  let tagFound = false;

  //indicates that the root tag has been closed (aka. depth 0 has been reached)
  let reachedRoot = false;

  if (xmlData[0] === '\ufeff') {
    // check for byte order mark (BOM)
    xmlData = xmlData.substr(1);
  }

  for (let i = 0; i < xmlData.length; i++) {

    if (xmlData[i] === '<' && xmlData[i+1] === '?') {
      i+=2;
      i = readPI(xmlData,i);
      if (i.err) return i;
    }else if (xmlData[i] === '<') {
      //starting of tag
      //read until you reach to '>' avoiding any '>' in attribute value
      let tagStartPos = i;
      i++;
      
      if (xmlData[i] === '!') {
        i = readCommentAndCDATA(xmlData, i);
        continue;
      } else {
        let closingTag = false;
        if (xmlData[i] === '/') {
          //closing tag
          closingTag = true;
          i++;
        }
        //read tagname
        let tagName = '';
        for (; i < xmlData.length &&
          xmlData[i] !== '>' &&
          xmlData[i] !== ' ' &&
          xmlData[i] !== '\t' &&
          xmlData[i] !== '\n' &&
          xmlData[i] !== '\r'; i++
        ) {
          tagName += xmlData[i];
        }
        tagName = tagName.trim();
        //console.log(tagName);

        if (tagName[tagName.length - 1] === '/') {
          //self closing tag without attributes
          tagName = tagName.substring(0, tagName.length - 1);
          //continue;
          i--;
        }
        if (!validateTagName(tagName)) {
          let msg;
          if (tagName.trim().length === 0) {
            msg = "Invalid space after '<'.";
          } else {
            msg = "Tag '"+tagName+"' is an invalid name.";
          }
          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));
        }

        const result = readAttributeStr(xmlData, i);
        if (result === false) {
          return getErrorObject('InvalidAttr', "Attributes for '"+tagName+"' have open quote.", getLineNumberForPosition(xmlData, i));
        }
        let attrStr = result.value;
        i = result.index;

        if (attrStr[attrStr.length - 1] === '/') {
          //self closing tag
          const attrStrStart = i - attrStr.length;
          attrStr = attrStr.substring(0, attrStr.length - 1);
          const isValid = validateAttributeString(attrStr, options);
          if (isValid === true) {
            tagFound = true;
            //continue; //text may presents after self closing tag
          } else {
            //the result from the nested function returns the position of the error within the attribute
            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
            //this gives us the absolute index in the entire xml, which we can use to find the line at last
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
          }
        } else if (closingTag) {
          if (!result.tagClosed) {
            return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
          } else if (attrStr.trim().length > 0) {
            return getErrorObject('InvalidTag', "Closing tag '"+tagName+"' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
          } else {
            const otg = tags.pop();
            if (tagName !== otg.tagName) {
              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
              return getErrorObject('InvalidTag',
                "Expected closing tag '"+otg.tagName+"' (opened in line "+openPos.line+", col "+openPos.col+") instead of closing tag '"+tagName+"'.",
                getLineNumberForPosition(xmlData, tagStartPos));
            }

            //when there are no more tags, we reached the root level.
            if (tags.length == 0) {
              reachedRoot = true;
            }
          }
        } else {
          const isValid = validateAttributeString(attrStr, options);
          if (isValid !== true) {
            //the result from the nested function returns the position of the error within the attribute
            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
            //this gives us the absolute index in the entire xml, which we can use to find the line at last
            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
          }

          //if the root level has been reached before ...
          if (reachedRoot === true) {
            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));
          } else {
            tags.push({tagName, tagStartPos});
          }
          tagFound = true;
        }

        //skip tag text value
        //It may include comments and CDATA value
        for (i++; i < xmlData.length; i++) {
          if (xmlData[i] === '<') {
            if (xmlData[i + 1] === '!') {
              //comment or CADATA
              i++;
              i = readCommentAndCDATA(xmlData, i);
              continue;
            } else if (xmlData[i+1] === '?') {
              i = readPI(xmlData, ++i);
              if (i.err) return i;
            } else{
              break;
            }
          } else if (xmlData[i] === '&') {
            const afterAmp = validateAmpersand(xmlData, i);
            if (afterAmp == -1)
              return getErrorObject('InvalidChar', "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
            i = afterAmp;
          }
        } //end of reading tag text value
        if (xmlData[i] === '<') {
          i--;
        }
      }
    } else {
      if (xmlData[i] === ' ' || xmlData[i] === '\t' || xmlData[i] === '\n' || xmlData[i] === '\r') {
        continue;
      }
      return getErrorObject('InvalidChar', "char '"+xmlData[i]+"' is not expected.", getLineNumberForPosition(xmlData, i));
    }
  }

  if (!tagFound) {
    return getErrorObject('InvalidXml', 'Start tag expected.', 1);
  }else if (tags.length == 1) {
      return getErrorObject('InvalidTag', "Unclosed tag '"+tags[0].tagName+"'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
  }else if (tags.length > 0) {
      return getErrorObject('InvalidXml', "Invalid '"+
          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\r?\n/g, '')+
          "' found.", {line: 1, col: 1});
  }

  return true;
};

/**
 * Read Processing insstructions and skip
 * @param {*} xmlData
 * @param {*} i
 */
function readPI(xmlData, i) {
  const start = i;
  for (; i < xmlData.length; i++) {
    if (xmlData[i] == '?' || xmlData[i] == ' ') {
      //tagname
      const tagname = xmlData.substr(start, i - start);
      if (i > 5 && tagname === 'xml') {
        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));
      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {
        //check if valid attribut string
        i++;
        break;
      } else {
        continue;
      }
    }
  }
  return i;
}

function readCommentAndCDATA(xmlData, i) {
  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {
    //comment
    for (i += 3; i < xmlData.length; i++) {
      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {
        i += 2;
        break;
      }
    }
  } else if (
    xmlData.length > i + 8 &&
    xmlData[i + 1] === 'D' &&
    xmlData[i + 2] === 'O' &&
    xmlData[i + 3] === 'C' &&
    xmlData[i + 4] === 'T' &&
    xmlData[i + 5] === 'Y' &&
    xmlData[i + 6] === 'P' &&
    xmlData[i + 7] === 'E'
  ) {
    let angleBracketsCount = 1;
    for (i += 8; i < xmlData.length; i++) {
      if (xmlData[i] === '<') {
        angleBracketsCount++;
      } else if (xmlData[i] === '>') {
        angleBracketsCount--;
        if (angleBracketsCount === 0) {
          break;
        }
      }
    }
  } else if (
    xmlData.length > i + 9 &&
    xmlData[i + 1] === '[' &&
    xmlData[i + 2] === 'C' &&
    xmlData[i + 3] === 'D' &&
    xmlData[i + 4] === 'A' &&
    xmlData[i + 5] === 'T' &&
    xmlData[i + 6] === 'A' &&
    xmlData[i + 7] === '['
  ) {
    for (i += 8; i < xmlData.length; i++) {
      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {
        i += 2;
        break;
      }
    }
  }

  return i;
}

const doubleQuote = '"';
const singleQuote = "'";

/**
 * Keep reading xmlData until '<' is found outside the attribute value.
 * @param {string} xmlData
 * @param {number} i
 */
function readAttributeStr(xmlData, i) {
  let attrStr = '';
  let startChar = '';
  let tagClosed = false;
  for (; i < xmlData.length; i++) {
    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
      if (startChar === '') {
        startChar = xmlData[i];
      } else if (startChar !== xmlData[i]) {
        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa
      } else {
        startChar = '';
      }
    } else if (xmlData[i] === '>') {
      if (startChar === '') {
        tagClosed = true;
        break;
      }
    }
    attrStr += xmlData[i];
  }
  if (startChar !== '') {
    return false;
  }

  return {
    value: attrStr,
    index: i,
    tagClosed: tagClosed
  };
}

/**
 * Select all the attributes whether valid or invalid.
 */
const validAttrStrRegxp = new RegExp('(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?', 'g');

//attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""

function validateAttributeString(attrStr, options) {
  //console.log("start:"+attrStr+":end");

  //if(attrStr.trim().length === 0) return true; //empty string

  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
  const attrNames = {};

  for (let i = 0; i < matches.length; i++) {
    if (matches[i][1].length === 0) {
      //nospace before attribute name: a="sd"b="saf"
      return getErrorObject('InvalidAttr', "Attribute '"+matches[i][2]+"' has no space in starting.", getPositionFromMatch(matches[i]))
    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {
      //independent attribute: ab
      return getErrorObject('InvalidAttr', "boolean attribute '"+matches[i][2]+"' is not allowed.", getPositionFromMatch(matches[i]));
    }
    /* else if(matches[i][6] === undefined){//attribute without value: ab=
                    return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                } */
    const attrName = matches[i][2];
    if (!validateAttrName(attrName)) {
      return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is an invalid name.", getPositionFromMatch(matches[i]));
    }
    if (!attrNames.hasOwnProperty(attrName)) {
      //check for duplicate attribute.
      attrNames[attrName] = 1;
    } else {
      return getErrorObject('InvalidAttr', "Attribute '"+attrName+"' is repeated.", getPositionFromMatch(matches[i]));
    }
  }

  return true;
}

function validateNumberAmpersand(xmlData, i) {
  let re = /\d/;
  if (xmlData[i] === 'x') {
    i++;
    re = /[\da-fA-F]/;
  }
  for (; i < xmlData.length; i++) {
    if (xmlData[i] === ';')
      return i;
    if (!xmlData[i].match(re))
      break;
  }
  return -1;
}

function validateAmpersand(xmlData, i) {
  // https://www.w3.org/TR/xml/#dt-charref
  i++;
  if (xmlData[i] === ';')
    return -1;
  if (xmlData[i] === '#') {
    i++;
    return validateNumberAmpersand(xmlData, i);
  }
  let count = 0;
  for (; i < xmlData.length; i++, count++) {
    if (xmlData[i].match(/\w/) && count < 20)
      continue;
    if (xmlData[i] === ';')
      break;
    return -1;
  }
  return i;
}

function getErrorObject(code, message, lineNumber) {
  return {
    err: {
      code: code,
      msg: message,
      line: lineNumber.line || lineNumber,
      col: lineNumber.col,
    },
  };
}

function validateAttrName(attrName) {
  return util.isName(attrName);
}

// const startsWithXML = /^xml/i;

function validateTagName(tagname) {
  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;
}

//this function returns the line number for the character at the given index
function getLineNumberForPosition(xmlData, index) {
  const lines = xmlData.substring(0, index).split(/\r?\n/);
  return {
    line: lines.length,

    // column number is last line's length + 1, because column numbering starts at 1:
    col: lines[lines.length - 1].length + 1
  };
}

//this function returns the position of the first character of match within attrStr
function getPositionFromMatch(match) {
  return match.startIndex + match[1].length;
}

},{"./util":18}],20:[function(require,module,exports){
'use strict';

module.exports = function(tagname, parent, val) {
  this.tagname = tagname;
  this.parent = parent;
  this.child = {}; //child tags
  this.attrsMap = {}; //attributes map
  this.val = val; //text only
  this.addChild = function(child) {
    if (Array.isArray(this.child[child.tagname])) {
      //already presents
      this.child[child.tagname].push(child);
    } else {
      this.child[child.tagname] = [child];
    }
  };
};

},{}],21:[function(require,module,exports){
'use strict';

const util = require('./util');
const buildOptions = require('./util').buildOptions;
const xmlNode = require('./xmlNode');
const toNumber = require("strnum");

const regx =
  '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'
  .replace(/NAME/g, util.nameRegexp);

//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");

//polyfill
if (!Number.parseInt && window.parseInt) {
  Number.parseInt = window.parseInt;
}
if (!Number.parseFloat && window.parseFloat) {
  Number.parseFloat = window.parseFloat;
}

const defaultOptions = {
  attributeNamePrefix: '@_',
  attrNodeName: false,
  textNodeName: '#text',
  ignoreAttributes: true,
  ignoreNameSpace: false,
  allowBooleanAttributes: false, //a tag can have attributes without any value
  //ignoreRootElement : false,
  parseNodeValue: true,
  parseAttributeValue: false,
  arrayMode: false,
  trimValues: true, //Trim string values of tag and attributes
  cdataTagName: false,
  cdataPositionChar: '\\c',
  numParseOptions: {
    hex: true,
    leadingZeros: true
  },
  tagValueProcessor: function(a, tagName) {
    return a;
  },
  attrValueProcessor: function(a, attrName) {
    return a;
  },
  stopNodes: [],
  alwaysCreateTextNode: false
  //decodeStrict: false,
};

exports.defaultOptions = defaultOptions;

const props = [
  'attributeNamePrefix',
  'attrNodeName',
  'textNodeName',
  'ignoreAttributes',
  'ignoreNameSpace',
  'allowBooleanAttributes',
  'parseNodeValue',
  'parseAttributeValue',
  'arrayMode',
  'trimValues',
  'cdataTagName',
  'cdataPositionChar',
  'tagValueProcessor',
  'attrValueProcessor',
  'parseTrueNumberOnly',
  'numParseOptions',
  'stopNodes',
  'alwaysCreateTextNode'
];
exports.props = props;

/**
 * Trim -> valueProcessor -> parse value
 * @param {string} tagName
 * @param {string} val
 * @param {object} options
 */
function processTagValue(tagName, val, options) {
  if (val) {
    if (options.trimValues) {
      val = val.trim();
    }
    val = options.tagValueProcessor(val, tagName);
    val = parseValue(val, options.parseNodeValue, options.numParseOptions);
  }

  return val;
}

function resolveNameSpace(tagname, options) {
  if (options.ignoreNameSpace) {
    const tags = tagname.split(':');
    const prefix = tagname.charAt(0) === '/' ? '/' : '';
    if (tags[0] === 'xmlns') {
      return '';
    }
    if (tags.length === 2) {
      tagname = prefix + tags[1];
    }
  }
  return tagname;
}

function parseValue(val, shouldParse, options) {
  if (shouldParse && typeof val === 'string') {
    //console.log(options)
    const newval = val.trim();
    if(newval === 'true' ) return true;
    else if(newval === 'false' ) return false;
    else return toNumber(val, options);
  } else {
    if (util.isExist(val)) {
      return val;
    } else {
      return '';
    }
  }
}

//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])(.*?)\\3)?', 'g');

function buildAttributesMap(attrStr, options) {
  if (!options.ignoreAttributes && typeof attrStr === 'string') {
    attrStr = attrStr.replace(/\r?\n/g, ' ');
    //attrStr = attrStr || attrStr.trim();

    const matches = util.getAllMatches(attrStr, attrsRegx);
    const len = matches.length; //don't make it inline
    const attrs = {};
    for (let i = 0; i < len; i++) {
      const attrName = resolveNameSpace(matches[i][1], options);
      if (attrName.length) {
        if (matches[i][4] !== undefined) {
          if (options.trimValues) {
            matches[i][4] = matches[i][4].trim();
          }
          matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
          attrs[options.attributeNamePrefix + attrName] = parseValue(
            matches[i][4],
            options.parseAttributeValue,
            options.numParseOptions
          );
        } else if (options.allowBooleanAttributes) {
          attrs[options.attributeNamePrefix + attrName] = true;
        }
      }
    }
    if (!Object.keys(attrs).length) {
      return;
    }
    if (options.attrNodeName) {
      const attrCollection = {};
      attrCollection[options.attrNodeName] = attrs;
      return attrCollection;
    }
    return attrs;
  }
}

const getTraversalObj = function(xmlData, options) {
  xmlData = xmlData.replace(/\r\n?/g, "\n");
  options = buildOptions(options, defaultOptions, props);
  const xmlObj = new xmlNode('!xml');
  let currentNode = xmlObj;
  let textData = "";

//function match(xmlData){
  for(let i=0; i< xmlData.length; i++){
    const ch = xmlData[i];
    if(ch === '<'){
      if( xmlData[i+1] === '/') {//Closing Tag
        const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.")
        let tagName = xmlData.substring(i+2,closeIndex).trim();

        if(options.ignoreNameSpace){
          const colonIndex = tagName.indexOf(":");
          if(colonIndex !== -1){
            tagName = tagName.substr(colonIndex+1);
          }
        }

        /* if (currentNode.parent) {
          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);
        } */
        if(currentNode){
          if(currentNode.val){
            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(tagName, textData , options);
          }else{
            currentNode.val = processTagValue(tagName, textData , options);
          }
        }

        if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
          currentNode.child = []
          if (currentNode.attrsMap == undefined) { currentNode.attrsMap = {}}
          currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1)
        }
        currentNode = currentNode.parent;
        textData = "";
        i = closeIndex;
      } else if( xmlData[i+1] === '?') {
        i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.")
      } else if(xmlData.substr(i + 1, 3) === '!--') {
        i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.")
      } else if( xmlData.substr(i + 1, 2) === '!D') {
        const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.")
        const tagExp = xmlData.substring(i, closeIndex);
        if(tagExp.indexOf("[") >= 0){
          i = xmlData.indexOf("]>", i) + 1;
        }else{
          i = closeIndex;
        }
      }else if(xmlData.substr(i + 1, 2) === '![') {
        const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2
        const tagExp = xmlData.substring(i + 9,closeIndex);

        //considerations
        //1. CDATA will always have parent node
        //2. A tag with CDATA is not a leaf node so it's value would be string type.
        if(textData){
          currentNode.val = util.getValue(currentNode.val) + '' + processTagValue(currentNode.tagname, textData , options);
          textData = "";
        }

        if (options.cdataTagName) {
          //add cdata node
          const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
          currentNode.addChild(childNode);
          //for backtracking
          currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
          //add rest value to parent node
          if (tagExp) {
            childNode.val = tagExp;
          }
        } else {
          currentNode.val = (currentNode.val || '') + (tagExp || '');
        }

        i = closeIndex + 2;
      }else {//Opening tag
        const result = closingIndexForOpeningTag(xmlData, i+1)
        let tagExp = result.data;
        const closeIndex = result.index;
        const separatorIndex = tagExp.indexOf(" ");
        let tagName = tagExp;
        let shouldBuildAttributesMap = true;
        if(separatorIndex !== -1){
          tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, '');
          tagExp = tagExp.substr(separatorIndex + 1);
        }

        if(options.ignoreNameSpace){
          const colonIndex = tagName.indexOf(":");
          if(colonIndex !== -1){
            tagName = tagName.substr(colonIndex+1);
            shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
          }
        }

        //save text to parent node
        if (currentNode && textData) {
          if(currentNode.tagname !== '!xml'){
            currentNode.val = util.getValue(currentNode.val) + '' + processTagValue( currentNode.tagname, textData, options);
          }
        }

        if(tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1){//selfClosing tag

          if(tagName[tagName.length - 1] === "/"){ //remove trailing '/'
            tagName = tagName.substr(0, tagName.length - 1);
            tagExp = tagName;
          }else{
            tagExp = tagExp.substr(0, tagExp.length - 1);
          }

          const childNode = new xmlNode(tagName, currentNode, '');
          if(tagName !== tagExp){
            childNode.attrsMap = buildAttributesMap(tagExp, options);
          }
          currentNode.addChild(childNode);
        }else{//opening tag

          const childNode = new xmlNode( tagName, currentNode );
          if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) {
            childNode.startIndex=closeIndex;
          }
          if(tagName !== tagExp && shouldBuildAttributesMap){
            childNode.attrsMap = buildAttributesMap(tagExp, options);
          }
          currentNode.addChild(childNode);
          currentNode = childNode;
        }
        textData = "";
        i = closeIndex;
      }
    }else{
      textData += xmlData[i];
    }
  }
  return xmlObj;
}

function closingIndexForOpeningTag(data, i){
  let attrBoundary;
  let tagExp = "";
  for (let index = i; index < data.length; index++) {
    let ch = data[index];
    if (attrBoundary) {
        if (ch === attrBoundary) attrBoundary = "";//reset
    } else if (ch === '"' || ch === "'") {
        attrBoundary = ch;
    } else if (ch === '>') {
        return {
          data: tagExp,
          index: index
        }
    } else if (ch === '\t') {
      ch = " "
    }
    tagExp += ch;
  }
}

function findClosingIndex(xmlData, str, i, errMsg){
  const closingIndex = xmlData.indexOf(str, i);
  if(closingIndex === -1){
    throw new Error(errMsg)
  }else{
    return closingIndex + str.length - 1;
  }
}

exports.getTraversalObj = getTraversalObj;

},{"./util":18,"./xmlNode":20,"strnum":107}],22:[function(require,module,exports){
module.exports = require('./lib/heap');

},{"./lib/heap":23}],23:[function(require,module,exports){
// Generated by CoffeeScript 1.8.0
(function() {
  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;

  floor = Math.floor, min = Math.min;


  /*
  Default comparison function to be used
   */

  defaultCmp = function(x, y) {
    if (x < y) {
      return -1;
    }
    if (x > y) {
      return 1;
    }
    return 0;
  };


  /*
  Insert item x in list a, and keep it sorted assuming a is sorted.
  
  If x is already in a, insert it to the right of the rightmost x.
  
  Optional args lo (default 0) and hi (default a.length) bound the slice
  of a to be searched.
   */

  insort = function(a, x, lo, hi, cmp) {
    var mid;
    if (lo == null) {
      lo = 0;
    }
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (lo < 0) {
      throw new Error('lo must be non-negative');
    }
    if (hi == null) {
      hi = a.length;
    }
    while (lo < hi) {
      mid = floor((lo + hi) / 2);
      if (cmp(x, a[mid]) < 0) {
        hi = mid;
      } else {
        lo = mid + 1;
      }
    }
    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);
  };


  /*
  Push item onto heap, maintaining the heap invariant.
   */

  heappush = function(array, item, cmp) {
    if (cmp == null) {
      cmp = defaultCmp;
    }
    array.push(item);
    return _siftdown(array, 0, array.length - 1, cmp);
  };


  /*
  Pop the smallest item off the heap, maintaining the heap invariant.
   */

  heappop = function(array, cmp) {
    var lastelt, returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    lastelt = array.pop();
    if (array.length) {
      returnitem = array[0];
      array[0] = lastelt;
      _siftup(array, 0, cmp);
    } else {
      returnitem = lastelt;
    }
    return returnitem;
  };


  /*
  Pop and return the current smallest value, and add the new item.
  
  This is more efficient than heappop() followed by heappush(), and can be
  more appropriate when using a fixed size heap. Note that the value
  returned may be larger than item! That constrains reasonable use of
  this routine unless written as part of a conditional replacement:
      if item > array[0]
        item = heapreplace(array, item)
   */

  heapreplace = function(array, item, cmp) {
    var returnitem;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    returnitem = array[0];
    array[0] = item;
    _siftup(array, 0, cmp);
    return returnitem;
  };


  /*
  Fast version of a heappush followed by a heappop.
   */

  heappushpop = function(array, item, cmp) {
    var _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (array.length && cmp(array[0], item) < 0) {
      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];
      _siftup(array, 0, cmp);
    }
    return item;
  };


  /*
  Transform list into a heap, in-place, in O(array.length) time.
   */

  heapify = function(array, cmp) {
    var i, _i, _j, _len, _ref, _ref1, _results, _results1;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    _ref1 = (function() {
      _results1 = [];
      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this).reverse();
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      i = _ref1[_i];
      _results.push(_siftup(array, i, cmp));
    }
    return _results;
  };


  /*
  Update the position of the given item in the heap.
  This function should be called every time the item is being modified.
   */

  updateItem = function(array, item, cmp) {
    var pos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    pos = array.indexOf(item);
    if (pos === -1) {
      return;
    }
    _siftdown(array, 0, pos, cmp);
    return _siftup(array, pos, cmp);
  };


  /*
  Find the n largest elements in a dataset.
   */

  nlargest = function(array, n, cmp) {
    var elem, result, _i, _len, _ref;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    result = array.slice(0, n);
    if (!result.length) {
      return result;
    }
    heapify(result, cmp);
    _ref = array.slice(n);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      elem = _ref[_i];
      heappushpop(result, elem, cmp);
    }
    return result.sort(cmp).reverse();
  };


  /*
  Find the n smallest elements in a dataset.
   */

  nsmallest = function(array, n, cmp) {
    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    if (n * 10 <= array.length) {
      result = array.slice(0, n).sort(cmp);
      if (!result.length) {
        return result;
      }
      los = result[result.length - 1];
      _ref = array.slice(n);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        elem = _ref[_i];
        if (cmp(elem, los) < 0) {
          insort(result, elem, 0, null, cmp);
          result.pop();
          los = result[result.length - 1];
        }
      }
      return result;
    }
    heapify(array, cmp);
    _results = [];
    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
      _results.push(heappop(array, cmp));
    }
    return _results;
  };

  _siftdown = function(array, startpos, pos, cmp) {
    var newitem, parent, parentpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    newitem = array[pos];
    while (pos > startpos) {
      parentpos = (pos - 1) >> 1;
      parent = array[parentpos];
      if (cmp(newitem, parent) < 0) {
        array[pos] = parent;
        pos = parentpos;
        continue;
      }
      break;
    }
    return array[pos] = newitem;
  };

  _siftup = function(array, pos, cmp) {
    var childpos, endpos, newitem, rightpos, startpos;
    if (cmp == null) {
      cmp = defaultCmp;
    }
    endpos = array.length;
    startpos = pos;
    newitem = array[pos];
    childpos = 2 * pos + 1;
    while (childpos < endpos) {
      rightpos = childpos + 1;
      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {
        childpos = rightpos;
      }
      array[pos] = array[childpos];
      pos = childpos;
      childpos = 2 * pos + 1;
    }
    array[pos] = newitem;
    return _siftdown(array, startpos, pos, cmp);
  };

  Heap = (function() {
    Heap.push = heappush;

    Heap.pop = heappop;

    Heap.replace = heapreplace;

    Heap.pushpop = heappushpop;

    Heap.heapify = heapify;

    Heap.updateItem = updateItem;

    Heap.nlargest = nlargest;

    Heap.nsmallest = nsmallest;

    function Heap(cmp) {
      this.cmp = cmp != null ? cmp : defaultCmp;
      this.nodes = [];
    }

    Heap.prototype.push = function(x) {
      return heappush(this.nodes, x, this.cmp);
    };

    Heap.prototype.pop = function() {
      return heappop(this.nodes, this.cmp);
    };

    Heap.prototype.peek = function() {
      return this.nodes[0];
    };

    Heap.prototype.contains = function(x) {
      return this.nodes.indexOf(x) !== -1;
    };

    Heap.prototype.replace = function(x) {
      return heapreplace(this.nodes, x, this.cmp);
    };

    Heap.prototype.pushpop = function(x) {
      return heappushpop(this.nodes, x, this.cmp);
    };

    Heap.prototype.heapify = function() {
      return heapify(this.nodes, this.cmp);
    };

    Heap.prototype.updateItem = function(x) {
      return updateItem(this.nodes, x, this.cmp);
    };

    Heap.prototype.clear = function() {
      return this.nodes = [];
    };

    Heap.prototype.empty = function() {
      return this.nodes.length === 0;
    };

    Heap.prototype.size = function() {
      return this.nodes.length;
    };

    Heap.prototype.clone = function() {
      var heap;
      heap = new Heap();
      heap.nodes = this.nodes.slice(0);
      return heap;
    };

    Heap.prototype.toArray = function() {
      return this.nodes.slice(0);
    };

    Heap.prototype.insert = Heap.prototype.push;

    Heap.prototype.top = Heap.prototype.peek;

    Heap.prototype.front = Heap.prototype.peek;

    Heap.prototype.has = Heap.prototype.contains;

    Heap.prototype.copy = Heap.prototype.clone;

    return Heap;

  })();

  if (typeof module !== "undefined" && module !== null ? module.exports : void 0) {
    module.exports = Heap;
  } else {
    window.Heap = Heap;
  }

}).call(this);

},{}],24:[function(require,module,exports){
module.exports={
  "name": "p2",
  "version": "0.7.1",
  "description": "A JavaScript 2D physics engine.",
  "author": "Stefan Hedman <schteppe@gmail.com> (http://steffe.se)",
  "keywords": [
    "p2.js",
    "p2",
    "physics",
    "engine",
    "2d"
  ],
  "main": "./src/p2.js",
  "engines": {
    "node": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/schteppe/p2.js.git"
  },
  "bugs": {
    "url": "https://github.com/schteppe/p2.js/issues"
  },
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "devDependencies": {
    "grunt": "^0.4.5",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-nodeunit": "^0.4.1",
    "grunt-contrib-uglify": "~0.4.0",
    "grunt-contrib-watch": "~0.5.0",
    "grunt-browserify": "~2.0.1",
    "grunt-contrib-concat": "^0.4.0"
  },
  "dependencies": {
    "poly-decomp": "0.1.1"
  }
}

},{}],25:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Utils = require('../utils/Utils');

module.exports = AABB;

/**
 * Axis aligned bounding box class.
 * @class AABB
 * @constructor
 * @param {Object}  [options]
 * @param {Array}   [options.upperBound]
 * @param {Array}   [options.lowerBound]
 */
function AABB(options){

    /**
     * The lower bound of the bounding box.
     * @property lowerBound
     * @type {Array}
     */
    this.lowerBound = vec2.create();
    if(options && options.lowerBound){
        vec2.copy(this.lowerBound, options.lowerBound);
    }

    /**
     * The upper bound of the bounding box.
     * @property upperBound
     * @type {Array}
     */
    this.upperBound = vec2.create();
    if(options && options.upperBound){
        vec2.copy(this.upperBound, options.upperBound);
    }
}

var tmp = vec2.create();

/**
 * Set the AABB bounds from a set of points, transformed by the given position and angle.
 * @method setFromPoints
 * @param {Array} points An array of vec2's.
 * @param {Array} position
 * @param {number} angle
 * @param {number} skinSize Some margin to be added to the AABB.
 */
AABB.prototype.setFromPoints = function(points, position, angle, skinSize){
    var l = this.lowerBound,
        u = this.upperBound;

    if(typeof(angle) !== "number"){
        angle = 0;
    }

    // Set to the first point
    if(angle !== 0){
        vec2.rotate(l, points[0], angle);
    } else {
        vec2.copy(l, points[0]);
    }
    vec2.copy(u, l);

    // Compute cosines and sines just once
    var cosAngle = Math.cos(angle),
        sinAngle = Math.sin(angle);
    for(var i = 1; i<points.length; i++){
        var p = points[i];

        if(angle !== 0){
            var x = p[0],
                y = p[1];
            tmp[0] = cosAngle * x -sinAngle * y;
            tmp[1] = sinAngle * x +cosAngle * y;
            p = tmp;
        }

        for(var j=0; j<2; j++){
            if(p[j] > u[j]){
                u[j] = p[j];
            }
            if(p[j] < l[j]){
                l[j] = p[j];
            }
        }
    }

    // Add offset
    if(position){
        vec2.add(this.lowerBound, this.lowerBound, position);
        vec2.add(this.upperBound, this.upperBound, position);
    }

    if(skinSize){
        this.lowerBound[0] -= skinSize;
        this.lowerBound[1] -= skinSize;
        this.upperBound[0] += skinSize;
        this.upperBound[1] += skinSize;
    }
};

/**
 * Copy bounds from an AABB to this AABB
 * @method copy
 * @param  {AABB} aabb
 */
AABB.prototype.copy = function(aabb){
    vec2.copy(this.lowerBound, aabb.lowerBound);
    vec2.copy(this.upperBound, aabb.upperBound);
};

/**
 * Extend this AABB so that it covers the given AABB too.
 * @method extend
 * @param  {AABB} aabb
 */
AABB.prototype.extend = function(aabb){
    // Loop over x and y
    var i = 2;
    while(i--){
        // Extend lower bound
        var l = aabb.lowerBound[i];
        if(this.lowerBound[i] > l){
            this.lowerBound[i] = l;
        }

        // Upper
        var u = aabb.upperBound[i];
        if(this.upperBound[i] < u){
            this.upperBound[i] = u;
        }
    }
};

/**
 * Returns true if the given AABB overlaps this AABB.
 * @method overlaps
 * @param  {AABB} aabb
 * @return {Boolean}
 */
AABB.prototype.overlaps = function(aabb){
    var l1 = this.lowerBound,
        u1 = this.upperBound,
        l2 = aabb.lowerBound,
        u2 = aabb.upperBound;

    //      l2        u2
    //      |---------|
    // |--------|
    // l1       u1

    return ((l2[0] <= u1[0] && u1[0] <= u2[0]) || (l1[0] <= u2[0] && u2[0] <= u1[0])) &&
           ((l2[1] <= u1[1] && u1[1] <= u2[1]) || (l1[1] <= u2[1] && u2[1] <= u1[1]));
};

/**
 * @method containsPoint
 * @param  {Array} point
 * @return {boolean}
 */
AABB.prototype.containsPoint = function(point){
    var l = this.lowerBound,
        u = this.upperBound;
    return l[0] <= point[0] && point[0] <= u[0] && l[1] <= point[1] && point[1] <= u[1];
};

/**
 * Check if the AABB is hit by a ray.
 * @method overlapsRay
 * @param  {Ray} ray
 * @return {number} -1 if no hit, a number between 0 and 1 if hit.
 */
AABB.prototype.overlapsRay = function(ray){
    var t = 0;

    // ray.direction is unit direction vector of ray
    var dirFracX = 1 / ray.direction[0];
    var dirFracY = 1 / ray.direction[1];

    // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner
    var t1 = (this.lowerBound[0] - ray.from[0]) * dirFracX;
    var t2 = (this.upperBound[0] - ray.from[0]) * dirFracX;
    var t3 = (this.lowerBound[1] - ray.from[1]) * dirFracY;
    var t4 = (this.upperBound[1] - ray.from[1]) * dirFracY;

    var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));
    var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));

    // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us
    if (tmax < 0){
        //t = tmax;
        return -1;
    }

    // if tmin > tmax, ray doesn't intersect AABB
    if (tmin > tmax){
        //t = tmax;
        return -1;
    }

    return tmin;
};
},{"../math/vec2":48,"../utils/Utils":75}],26:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Body = require('../objects/Body');

module.exports = Broadphase;

/**
 * Base class for broadphase implementations.
 * @class Broadphase
 * @constructor
 */
function Broadphase(type){

    this.type = type;

    /**
     * The resulting overlapping pairs. Will be filled with results during .getCollisionPairs().
     * @property result
     * @type {Array}
     */
    this.result = [];

    /**
     * The world to search for collision pairs in. To change it, use .setWorld()
     * @property world
     * @type {World}
     * @readOnly
     */
    this.world = null;

    /**
     * The bounding volume type to use in the broadphase algorithms. Should be set to Broadphase.AABB or Broadphase.BOUNDING_CIRCLE.
     * @property {Number} boundingVolumeType
     */
    this.boundingVolumeType = Broadphase.AABB;
}

/**
 * Axis aligned bounding box type.
 * @static
 * @property {Number} AABB
 */
Broadphase.AABB = 1;

/**
 * Bounding circle type.
 * @static
 * @property {Number} BOUNDING_CIRCLE
 */
Broadphase.BOUNDING_CIRCLE = 2;

/**
 * Set the world that we are searching for collision pairs in.
 * @method setWorld
 * @param  {World} world
 */
Broadphase.prototype.setWorld = function(world){
    this.world = world;
};

/**
 * Get all potential intersecting body pairs.
 * @method getCollisionPairs
 * @param  {World} world The world to search in.
 * @return {Array} An array of the bodies, ordered in pairs. Example: A result of [a,b,c,d] means that the potential pairs are: (a,b), (c,d).
 */
Broadphase.prototype.getCollisionPairs = function(world){};

var dist = vec2.create();

/**
 * Check whether the bounding radius of two bodies overlap.
 * @method  boundingRadiusCheck
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.boundingRadiusCheck = function(bodyA, bodyB){
    vec2.sub(dist, bodyA.position, bodyB.position);
    var d2 = vec2.squaredLength(dist),
        r = bodyA.boundingRadius + bodyB.boundingRadius;
    return d2 <= r*r;
};

/**
 * Check whether the bounding radius of two bodies overlap.
 * @method  boundingRadiusCheck
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.aabbCheck = function(bodyA, bodyB){
    return bodyA.getAABB().overlaps(bodyB.getAABB());
};

/**
 * Check whether the bounding radius of two bodies overlap.
 * @method  boundingRadiusCheck
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.prototype.boundingVolumeCheck = function(bodyA, bodyB){
    var result;

    switch(this.boundingVolumeType){
    case Broadphase.BOUNDING_CIRCLE:
        result =  Broadphase.boundingRadiusCheck(bodyA,bodyB);
        break;
    case Broadphase.AABB:
        result = Broadphase.aabbCheck(bodyA,bodyB);
        break;
    default:
        throw new Error('Bounding volume type not recognized: '+this.boundingVolumeType);
    }
    return result;
};

/**
 * Check whether two bodies are allowed to collide at all.
 * @method  canCollide
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Broadphase.canCollide = function(bodyA, bodyB){
    var KINEMATIC = Body.KINEMATIC;
    var STATIC = Body.STATIC;

    // Cannot collide static bodies
    if(bodyA.type === STATIC && bodyB.type === STATIC){
        return false;
    }

    // Cannot collide static vs kinematic bodies
    if( (bodyA.type === KINEMATIC && bodyB.type === STATIC) ||
        (bodyA.type === STATIC    && bodyB.type === KINEMATIC)){
        return false;
    }

    // Cannot collide kinematic vs kinematic
    if(bodyA.type === KINEMATIC && bodyB.type === KINEMATIC){
        return false;
    }

    // Cannot collide both sleeping bodies
    if(bodyA.sleepState === Body.SLEEPING && bodyB.sleepState === Body.SLEEPING){
        return false;
    }

    // Cannot collide if one is static and the other is sleeping
    if( (bodyA.sleepState === Body.SLEEPING && bodyB.type === STATIC) ||
        (bodyB.sleepState === Body.SLEEPING && bodyA.type === STATIC)){
        return false;
    }

    return true;
};

Broadphase.NAIVE = 1;
Broadphase.SAP = 2;

},{"../math/vec2":48,"../objects/Body":49}],27:[function(require,module,exports){
var Circle = require('../shapes/Circle'),
    Plane = require('../shapes/Plane'),
    Shape = require('../shapes/Shape'),
    Particle = require('../shapes/Particle'),
    Broadphase = require('../collision/Broadphase'),
    vec2 = require('../math/vec2');

module.exports = NaiveBroadphase;

/**
 * Naive broadphase implementation. Does N^2 tests.
 *
 * @class NaiveBroadphase
 * @constructor
 * @extends Broadphase
 */
function NaiveBroadphase(){
    Broadphase.call(this, Broadphase.NAIVE);
}
NaiveBroadphase.prototype = new Broadphase();
NaiveBroadphase.prototype.constructor = NaiveBroadphase;

/**
 * Get the colliding pairs
 * @method getCollisionPairs
 * @param  {World} world
 * @return {Array}
 */
NaiveBroadphase.prototype.getCollisionPairs = function(world){
    var bodies = world.bodies,
        result = this.result;

    result.length = 0;

    for(var i=0, Ncolliding=bodies.length; i!==Ncolliding; i++){
        var bi = bodies[i];

        for(var j=0; j<i; j++){
            var bj = bodies[j];

            if(Broadphase.canCollide(bi,bj) && this.boundingVolumeCheck(bi,bj)){
                result.push(bi,bj);
            }
        }
    }

    return result;
};

/**
 * Returns all the bodies within an AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @param {array} result An array to store resulting bodies in.
 * @return {array}
 */
NaiveBroadphase.prototype.aabbQuery = function(world, aabb, result){
    result = result || [];

    var bodies = world.bodies;
    for(var i = 0; i < bodies.length; i++){
        var b = bodies[i];

        if(b.aabbNeedsUpdate){
            b.updateAABB();
        }

        if(b.aabb.overlaps(aabb)){
            result.push(b);
        }
    }

    return result;
};
},{"../collision/Broadphase":26,"../math/vec2":48,"../shapes/Circle":57,"../shapes/Particle":61,"../shapes/Plane":62,"../shapes/Shape":63}],28:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   sub = vec2.sub
,   add = vec2.add
,   dot = vec2.dot
,   Utils = require('../utils/Utils')
,   ContactEquationPool = require('../utils/ContactEquationPool')
,   FrictionEquationPool = require('../utils/FrictionEquationPool')
,   TupleDictionary = require('../utils/TupleDictionary')
,   Equation = require('../equations/Equation')
,   ContactEquation = require('../equations/ContactEquation')
,   FrictionEquation = require('../equations/FrictionEquation')
,   Circle = require('../shapes/Circle')
,   Convex = require('../shapes/Convex')
,   Shape = require('../shapes/Shape')
,   Body = require('../objects/Body')
,   Box = require('../shapes/Box');

module.exports = Narrowphase;

// Temp things
var yAxis = vec2.fromValues(0,1);

var tmp1 = vec2.fromValues(0,0)
,   tmp2 = vec2.fromValues(0,0)
,   tmp3 = vec2.fromValues(0,0)
,   tmp4 = vec2.fromValues(0,0)
,   tmp5 = vec2.fromValues(0,0)
,   tmp6 = vec2.fromValues(0,0)
,   tmp7 = vec2.fromValues(0,0)
,   tmp8 = vec2.fromValues(0,0)
,   tmp9 = vec2.fromValues(0,0)
,   tmp10 = vec2.fromValues(0,0)
,   tmp11 = vec2.fromValues(0,0)
,   tmp12 = vec2.fromValues(0,0)
,   tmp13 = vec2.fromValues(0,0)
,   tmp14 = vec2.fromValues(0,0)
,   tmp15 = vec2.fromValues(0,0)
,   tmp16 = vec2.fromValues(0,0)
,   tmp17 = vec2.fromValues(0,0)
,   tmp18 = vec2.fromValues(0,0)
,   tmpArray = [];

/**
 * Narrowphase. Creates contacts and friction given shapes and transforms.
 * @class Narrowphase
 * @constructor
 */
function Narrowphase(){

    /**
     * @property contactEquations
     * @type {Array}
     */
    this.contactEquations = [];

    /**
     * @property frictionEquations
     * @type {Array}
     */
    this.frictionEquations = [];

    /**
     * Whether to make friction equations in the upcoming contacts.
     * @property enableFriction
     * @type {Boolean}
     */
    this.enableFriction = true;

    /**
     * Whether to make equations enabled in upcoming contacts.
     * @property enabledEquations
     * @type {Boolean}
     */
    this.enabledEquations = true;

    /**
     * The friction slip force to use when creating friction equations.
     * @property slipForce
     * @type {Number}
     */
    this.slipForce = 10.0;

    /**
     * The friction value to use in the upcoming friction equations.
     * @property frictionCoefficient
     * @type {Number}
     */
    this.frictionCoefficient = 0.3;

    /**
     * Will be the .relativeVelocity in each produced FrictionEquation.
     * @property {Number} surfaceVelocity
     */
    this.surfaceVelocity = 0;

    /**
     * Keeps track of the allocated ContactEquations.
     * @property {ContactEquationPool} contactEquationPool
     *
     * @example
     *
     *     // Allocate a few equations before starting the simulation.
     *     // This way, no contact objects need to be created on the fly in the game loop.
     *     world.narrowphase.contactEquationPool.resize(1024);
     *     world.narrowphase.frictionEquationPool.resize(1024);
     */
    this.contactEquationPool = new ContactEquationPool({ size: 32 });

    /**
     * Keeps track of the allocated ContactEquations.
     * @property {FrictionEquationPool} frictionEquationPool
     */
    this.frictionEquationPool = new FrictionEquationPool({ size: 64 });

    /**
     * The restitution value to use in the next contact equations.
     * @property restitution
     * @type {Number}
     */
    this.restitution = 0;

    /**
     * The stiffness value to use in the next contact equations.
     * @property {Number} stiffness
     */
    this.stiffness = Equation.DEFAULT_STIFFNESS;

    /**
     * The stiffness value to use in the next contact equations.
     * @property {Number} stiffness
     */
    this.relaxation = Equation.DEFAULT_RELAXATION;

    /**
     * The stiffness value to use in the next friction equations.
     * @property frictionStiffness
     * @type {Number}
     */
    this.frictionStiffness = Equation.DEFAULT_STIFFNESS;

    /**
     * The relaxation value to use in the next friction equations.
     * @property frictionRelaxation
     * @type {Number}
     */
    this.frictionRelaxation = Equation.DEFAULT_RELAXATION;

    /**
     * Enable reduction of friction equations. If disabled, a box on a plane will generate 2 contact equations and 2 friction equations. If enabled, there will be only one friction equation. Same kind of simplifications are made  for all collision types.
     * @property enableFrictionReduction
     * @type {Boolean}
     * @deprecated This flag will be removed when the feature is stable enough.
     * @default true
     */
    this.enableFrictionReduction = true;

    /**
     * Keeps track of the colliding bodies last step.
     * @private
     * @property collidingBodiesLastStep
     * @type {TupleDictionary}
     */
    this.collidingBodiesLastStep = new TupleDictionary();

    /**
     * Contact skin size value to use in the next contact equations.
     * @property {Number} contactSkinSize
     * @default 0.01
     */
    this.contactSkinSize = 0.01;
}

var bodiesOverlap_shapePositionA = vec2.create();
var bodiesOverlap_shapePositionB = vec2.create();

/**
 * @method bodiesOverlap
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 * @todo shape world transforms are wrong
 */
Narrowphase.prototype.bodiesOverlap = function(bodyA, bodyB){
    var shapePositionA = bodiesOverlap_shapePositionA;
    var shapePositionB = bodiesOverlap_shapePositionB;

    // Loop over all shapes of bodyA
    for(var k=0, Nshapesi=bodyA.shapes.length; k!==Nshapesi; k++){
        var shapeA = bodyA.shapes[k];

        bodyA.toWorldFrame(shapePositionA, shapeA.position);

        // All shapes of body j
        for(var l=0, Nshapesj=bodyB.shapes.length; l!==Nshapesj; l++){
            var shapeB = bodyB.shapes[l];

            bodyB.toWorldFrame(shapePositionB, shapeB.position);

            if(this[shapeA.type | shapeB.type](
                bodyA,
                shapeA,
                shapePositionA,
                shapeA.angle + bodyA.angle,
                bodyB,
                shapeB,
                shapePositionB,
                shapeB.angle + bodyB.angle,
                true
            )){
                return true;
            }
        }
    }

    return false;
};

/**
 * Check if the bodies were in contact since the last reset().
 * @method collidedLastStep
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {Boolean}
 */
Narrowphase.prototype.collidedLastStep = function(bodyA, bodyB){
    var id1 = bodyA.id|0,
        id2 = bodyB.id|0;
    return !!this.collidingBodiesLastStep.get(id1, id2);
};

/**
 * Throws away the old equations and gets ready to create new
 * @method reset
 */
Narrowphase.prototype.reset = function(){
    this.collidingBodiesLastStep.reset();

    var eqs = this.contactEquations;
    var l = eqs.length;
    while(l--){
        var eq = eqs[l],
            id1 = eq.bodyA.id,
            id2 = eq.bodyB.id;
        this.collidingBodiesLastStep.set(id1, id2, true);
    }

    var ce = this.contactEquations,
        fe = this.frictionEquations;
    for(var i=0; i<ce.length; i++){
        this.contactEquationPool.release(ce[i]);
    }
    for(var i=0; i<fe.length; i++){
        this.frictionEquationPool.release(fe[i]);
    }

    // Reset
    this.contactEquations.length = this.frictionEquations.length = 0;
};

/**
 * Creates a ContactEquation, either by reusing an existing object or creating a new one.
 * @method createContactEquation
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {ContactEquation}
 */
Narrowphase.prototype.createContactEquation = function(bodyA, bodyB, shapeA, shapeB){
    var c = this.contactEquationPool.get();
    c.bodyA = bodyA;
    c.bodyB = bodyB;
    c.shapeA = shapeA;
    c.shapeB = shapeB;
    c.restitution = this.restitution;
    c.firstImpact = !this.collidedLastStep(bodyA,bodyB);
    c.stiffness = this.stiffness;
    c.relaxation = this.relaxation;
    c.needsUpdate = true;
    c.enabled = this.enabledEquations;
    c.offset = this.contactSkinSize;

    return c;
};

/**
 * Creates a FrictionEquation, either by reusing an existing object or creating a new one.
 * @method createFrictionEquation
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {FrictionEquation}
 */
Narrowphase.prototype.createFrictionEquation = function(bodyA, bodyB, shapeA, shapeB){
    var c = this.frictionEquationPool.get();
    c.bodyA = bodyA;
    c.bodyB = bodyB;
    c.shapeA = shapeA;
    c.shapeB = shapeB;
    c.setSlipForce(this.slipForce);
    c.frictionCoefficient = this.frictionCoefficient;
    c.relativeVelocity = this.surfaceVelocity;
    c.enabled = this.enabledEquations;
    c.needsUpdate = true;
    c.stiffness = this.frictionStiffness;
    c.relaxation = this.frictionRelaxation;
    c.contactEquations.length = 0;
    return c;
};

/**
 * Creates a FrictionEquation given the data in the ContactEquation. Uses same offset vectors ri and rj, but the tangent vector will be constructed from the collision normal.
 * @method createFrictionFromContact
 * @param  {ContactEquation} contactEquation
 * @return {FrictionEquation}
 */
Narrowphase.prototype.createFrictionFromContact = function(c){
    var eq = this.createFrictionEquation(c.bodyA, c.bodyB, c.shapeA, c.shapeB);
    vec2.copy(eq.contactPointA, c.contactPointA);
    vec2.copy(eq.contactPointB, c.contactPointB);
    vec2.rotate90cw(eq.t, c.normalA);
    eq.contactEquations.push(c);
    return eq;
};

// Take the average N latest contact point on the plane.
Narrowphase.prototype.createFrictionFromAverage = function(numContacts){
    var c = this.contactEquations[this.contactEquations.length - 1];
    var eq = this.createFrictionEquation(c.bodyA, c.bodyB, c.shapeA, c.shapeB);
    var bodyA = c.bodyA;
    var bodyB = c.bodyB;
    vec2.set(eq.contactPointA, 0, 0);
    vec2.set(eq.contactPointB, 0, 0);
    vec2.set(eq.t, 0, 0);
    for(var i=0; i!==numContacts; i++){
        c = this.contactEquations[this.contactEquations.length - 1 - i];
        if(c.bodyA === bodyA){
            vec2.add(eq.t, eq.t, c.normalA);
            vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointA);
            vec2.add(eq.contactPointB, eq.contactPointB, c.contactPointB);
        } else {
            vec2.sub(eq.t, eq.t, c.normalA);
            vec2.add(eq.contactPointA, eq.contactPointA, c.contactPointB);
            vec2.add(eq.contactPointB, eq.contactPointB, c.contactPointA);
        }
        eq.contactEquations.push(c);
    }

    var invNumContacts = 1/numContacts;
    vec2.scale(eq.contactPointA, eq.contactPointA, invNumContacts);
    vec2.scale(eq.contactPointB, eq.contactPointB, invNumContacts);
    vec2.normalize(eq.t, eq.t);
    vec2.rotate90cw(eq.t, eq.t);
    return eq;
};

/**
 * Convex/line narrowphase
 * @method convexLine
 * @param  {Body}       convexBody
 * @param  {Convex}     convexShape
 * @param  {Array}      convexOffset
 * @param  {Number}     convexAngle
 * @param  {Body}       lineBody
 * @param  {Line}       lineShape
 * @param  {Array}      lineOffset
 * @param  {Number}     lineAngle
 * @param {boolean}     justTest
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.LINE | Shape.CONVEX] =
Narrowphase.prototype.convexLine = function(
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    lineBody,
    lineShape,
    lineOffset,
    lineAngle,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

/**
 * Line/box narrowphase
 * @method lineBox
 * @param  {Body}       lineBody
 * @param  {Line}       lineShape
 * @param  {Array}      lineOffset
 * @param  {Number}     lineAngle
 * @param  {Body}       boxBody
 * @param  {Box}  boxShape
 * @param  {Array}      boxOffset
 * @param  {Number}     boxAngle
 * @param  {Boolean}    justTest
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.LINE | Shape.BOX] =
Narrowphase.prototype.lineBox = function(
    lineBody,
    lineShape,
    lineOffset,
    lineAngle,
    boxBody,
    boxShape,
    boxOffset,
    boxAngle,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

function setConvexToCapsuleShapeMiddle(convexShape, capsuleShape){
    vec2.set(convexShape.vertices[0], -capsuleShape.length * 0.5, -capsuleShape.radius);
    vec2.set(convexShape.vertices[1],  capsuleShape.length * 0.5, -capsuleShape.radius);
    vec2.set(convexShape.vertices[2],  capsuleShape.length * 0.5,  capsuleShape.radius);
    vec2.set(convexShape.vertices[3], -capsuleShape.length * 0.5,  capsuleShape.radius);
}

var convexCapsule_tempRect = new Box({ width: 1, height: 1 }),
    convexCapsule_tempVec = vec2.create();

/**
 * Convex/capsule narrowphase
 * @method convexCapsule
 * @param  {Body}       convexBody
 * @param  {Convex}     convexShape
 * @param  {Array}      convexPosition
 * @param  {Number}     convexAngle
 * @param  {Body}       capsuleBody
 * @param  {Capsule}    capsuleShape
 * @param  {Array}      capsulePosition
 * @param  {Number}     capsuleAngle
 */
Narrowphase.prototype[Shape.CAPSULE | Shape.CONVEX] =
Narrowphase.prototype[Shape.CAPSULE | Shape.BOX] =
Narrowphase.prototype.convexCapsule = function(
    convexBody,
    convexShape,
    convexPosition,
    convexAngle,
    capsuleBody,
    capsuleShape,
    capsulePosition,
    capsuleAngle,
    justTest
){

    // Check the circles
    // Add offsets!
    var circlePos = convexCapsule_tempVec;
    vec2.set(circlePos, capsuleShape.length/2,0);
    vec2.rotate(circlePos,circlePos,capsuleAngle);
    vec2.add(circlePos,circlePos,capsulePosition);
    var result1 = this.circleConvex(capsuleBody,capsuleShape,circlePos,capsuleAngle, convexBody,convexShape,convexPosition,convexAngle, justTest, capsuleShape.radius);

    vec2.set(circlePos,-capsuleShape.length/2, 0);
    vec2.rotate(circlePos,circlePos,capsuleAngle);
    vec2.add(circlePos,circlePos,capsulePosition);
    var result2 = this.circleConvex(capsuleBody,capsuleShape,circlePos,capsuleAngle, convexBody,convexShape,convexPosition,convexAngle, justTest, capsuleShape.radius);

    if(justTest && (result1 || result2)){
        return true;
    }

    // Check center rect
    var r = convexCapsule_tempRect;
    setConvexToCapsuleShapeMiddle(r,capsuleShape);
    var result = this.convexConvex(convexBody,convexShape,convexPosition,convexAngle, capsuleBody,r,capsulePosition,capsuleAngle, justTest);

    return result + result1 + result2;
};

/**
 * Capsule/line narrowphase
 * @method lineCapsule
 * @param  {Body}       lineBody
 * @param  {Line}       lineShape
 * @param  {Array}      linePosition
 * @param  {Number}     lineAngle
 * @param  {Body}       capsuleBody
 * @param  {Capsule}    capsuleShape
 * @param  {Array}      capsulePosition
 * @param  {Number}     capsuleAngle
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.CAPSULE | Shape.LINE] =
Narrowphase.prototype.lineCapsule = function(
    lineBody,
    lineShape,
    linePosition,
    lineAngle,
    capsuleBody,
    capsuleShape,
    capsulePosition,
    capsuleAngle,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

var capsuleCapsule_tempVec1 = vec2.create();
var capsuleCapsule_tempVec2 = vec2.create();
var capsuleCapsule_tempRect1 = new Box({ width: 1, height: 1 });

/**
 * Capsule/capsule narrowphase
 * @method capsuleCapsule
 * @param  {Body}       bi
 * @param  {Capsule}    si
 * @param  {Array}      xi
 * @param  {Number}     ai
 * @param  {Body}       bj
 * @param  {Capsule}    sj
 * @param  {Array}      xj
 * @param  {Number}     aj
 */
Narrowphase.prototype[Shape.CAPSULE | Shape.CAPSULE] =
Narrowphase.prototype.capsuleCapsule = function(bi,si,xi,ai, bj,sj,xj,aj, justTest){

    var enableFrictionBefore;

    // Check the circles
    // Add offsets!
    var circlePosi = capsuleCapsule_tempVec1,
        circlePosj = capsuleCapsule_tempVec2;

    var numContacts = 0;


    // Need 4 circle checks, between all
    for(var i=0; i<2; i++){

        vec2.set(circlePosi,(i===0?-1:1)*si.length/2,0);
        vec2.rotate(circlePosi,circlePosi,ai);
        vec2.add(circlePosi,circlePosi,xi);

        for(var j=0; j<2; j++){

            vec2.set(circlePosj,(j===0?-1:1)*sj.length/2, 0);
            vec2.rotate(circlePosj,circlePosj,aj);
            vec2.add(circlePosj,circlePosj,xj);

            // Temporarily turn off friction
            if(this.enableFrictionReduction){
                enableFrictionBefore = this.enableFriction;
                this.enableFriction = false;
            }

            var result = this.circleCircle(bi,si,circlePosi,ai, bj,sj,circlePosj,aj, justTest, si.radius, sj.radius);

            if(this.enableFrictionReduction){
                this.enableFriction = enableFrictionBefore;
            }

            if(justTest && result){
                return true;
            }

            numContacts += result;
        }
    }

    if(this.enableFrictionReduction){
        // Temporarily turn off friction
        enableFrictionBefore = this.enableFriction;
        this.enableFriction = false;
    }

    // Check circles against the center boxs
    var rect = capsuleCapsule_tempRect1;
    setConvexToCapsuleShapeMiddle(rect,si);
    var result1 = this.convexCapsule(bi,rect,xi,ai, bj,sj,xj,aj, justTest);

    if(this.enableFrictionReduction){
        this.enableFriction = enableFrictionBefore;
    }

    if(justTest && result1){
        return true;
    }
    numContacts += result1;

    if(this.enableFrictionReduction){
        // Temporarily turn off friction
        var enableFrictionBefore = this.enableFriction;
        this.enableFriction = false;
    }

    setConvexToCapsuleShapeMiddle(rect,sj);
    var result2 = this.convexCapsule(bj,rect,xj,aj, bi,si,xi,ai, justTest);

    if(this.enableFrictionReduction){
        this.enableFriction = enableFrictionBefore;
    }

    if(justTest && result2){
        return true;
    }
    numContacts += result2;

    if(this.enableFrictionReduction){
        if(numContacts && this.enableFriction){
            this.frictionEquations.push(this.createFrictionFromAverage(numContacts));
        }
    }

    return numContacts;
};

/**
 * Line/line narrowphase
 * @method lineLine
 * @param  {Body}       bodyA
 * @param  {Line}       shapeA
 * @param  {Array}      positionA
 * @param  {Number}     angleA
 * @param  {Body}       bodyB
 * @param  {Line}       shapeB
 * @param  {Array}      positionB
 * @param  {Number}     angleB
 * @todo Implement me!
 */
Narrowphase.prototype[Shape.LINE | Shape.LINE] =
Narrowphase.prototype.lineLine = function(
    bodyA,
    shapeA,
    positionA,
    angleA,
    bodyB,
    shapeB,
    positionB,
    angleB,
    justTest
){
    // TODO
    if(justTest){
        return false;
    } else {
        return 0;
    }
};

/**
 * Plane/line Narrowphase
 * @method planeLine
 * @param  {Body}   planeBody
 * @param  {Plane}  planeShape
 * @param  {Array}  planeOffset
 * @param  {Number} planeAngle
 * @param  {Body}   lineBody
 * @param  {Line}   lineShape
 * @param  {Array}  lineOffset
 * @param  {Number} lineAngle
 */
Narrowphase.prototype[Shape.PLANE | Shape.LINE] =
Narrowphase.prototype.planeLine = function(planeBody, planeShape, planeOffset, planeAngle,
                                           lineBody,  lineShape,  lineOffset,  lineAngle, justTest){
    var worldVertex0 = tmp1,
        worldVertex1 = tmp2,
        worldVertex01 = tmp3,
        worldVertex11 = tmp4,
        worldEdge = tmp5,
        worldEdgeUnit = tmp6,
        dist = tmp7,
        worldNormal = tmp8,
        worldTangent = tmp9,
        verts = tmpArray,
        numContacts = 0;

    // Get start and end points
    vec2.set(worldVertex0, -lineShape.length/2, 0);
    vec2.set(worldVertex1,  lineShape.length/2, 0);

    // Not sure why we have to use worldVertex*1 here, but it won't work otherwise. Tired.
    vec2.rotate(worldVertex01, worldVertex0, lineAngle);
    vec2.rotate(worldVertex11, worldVertex1, lineAngle);

    add(worldVertex01, worldVertex01, lineOffset);
    add(worldVertex11, worldVertex11, lineOffset);

    vec2.copy(worldVertex0,worldVertex01);
    vec2.copy(worldVertex1,worldVertex11);

    // Get vector along the line
    sub(worldEdge, worldVertex1, worldVertex0);
    vec2.normalize(worldEdgeUnit, worldEdge);

    // Get tangent to the edge.
    vec2.rotate90cw(worldTangent, worldEdgeUnit);

    vec2.rotate(worldNormal, yAxis, planeAngle);

    // Check line ends
    verts[0] = worldVertex0;
    verts[1] = worldVertex1;
    for(var i=0; i<verts.length; i++){
        var v = verts[i];

        sub(dist, v, planeOffset);

        var d = dot(dist,worldNormal);

        if(d < 0){

            if(justTest){
                return true;
            }

            var c = this.createContactEquation(planeBody,lineBody,planeShape,lineShape);
            numContacts++;

            vec2.copy(c.normalA, worldNormal);
            vec2.normalize(c.normalA,c.normalA);

            // distance vector along plane normal
            vec2.scale(dist, worldNormal, d);

            // Vector from plane center to contact
            sub(c.contactPointA, v, dist);
            sub(c.contactPointA, c.contactPointA, planeBody.position);

            // From line center to contact
            sub(c.contactPointB, v,    lineOffset);
            add(c.contactPointB, c.contactPointB, lineOffset);
            sub(c.contactPointB, c.contactPointB, lineBody.position);

            this.contactEquations.push(c);

            if(!this.enableFrictionReduction){
                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }
            }
        }
    }

    if(justTest){
        return false;
    }

    if(!this.enableFrictionReduction){
        if(numContacts && this.enableFriction){
            this.frictionEquations.push(this.createFrictionFromAverage(numContacts));
        }
    }

    return numContacts;
};

Narrowphase.prototype[Shape.PARTICLE | Shape.CAPSULE] =
Narrowphase.prototype.particleCapsule = function(
    particleBody,
    particleShape,
    particlePosition,
    particleAngle,
    capsuleBody,
    capsuleShape,
    capsulePosition,
    capsuleAngle,
    justTest
){
    return this.circleLine(particleBody,particleShape,particlePosition,particleAngle, capsuleBody,capsuleShape,capsulePosition,capsuleAngle, justTest, capsuleShape.radius, 0);
};

/**
 * Circle/line Narrowphase
 * @method circleLine
 * @param  {Body} circleBody
 * @param  {Circle} circleShape
 * @param  {Array} circleOffset
 * @param  {Number} circleAngle
 * @param  {Body} lineBody
 * @param  {Line} lineShape
 * @param  {Array} lineOffset
 * @param  {Number} lineAngle
 * @param {Boolean} justTest If set to true, this function will return the result (intersection or not) without adding equations.
 * @param {Number} lineRadius Radius to add to the line. Can be used to test Capsules.
 * @param {Number} circleRadius If set, this value overrides the circle shape radius.
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.LINE] =
Narrowphase.prototype.circleLine = function(
    circleBody,
    circleShape,
    circleOffset,
    circleAngle,
    lineBody,
    lineShape,
    lineOffset,
    lineAngle,
    justTest,
    lineRadius,
    circleRadius
){
    var lineRadius = lineRadius || 0,
        circleRadius = typeof(circleRadius)!=="undefined" ? circleRadius : circleShape.radius,

        orthoDist = tmp1,
        lineToCircleOrthoUnit = tmp2,
        projectedPoint = tmp3,
        centerDist = tmp4,
        worldTangent = tmp5,
        worldEdge = tmp6,
        worldEdgeUnit = tmp7,
        worldVertex0 = tmp8,
        worldVertex1 = tmp9,
        worldVertex01 = tmp10,
        worldVertex11 = tmp11,
        dist = tmp12,
        lineToCircle = tmp13,
        lineEndToLineRadius = tmp14,

        verts = tmpArray;

    // Get start and end points
    vec2.set(worldVertex0, -lineShape.length/2, 0);
    vec2.set(worldVertex1,  lineShape.length/2, 0);

    // Not sure why we have to use worldVertex*1 here, but it won't work otherwise. Tired.
    vec2.rotate(worldVertex01, worldVertex0, lineAngle);
    vec2.rotate(worldVertex11, worldVertex1, lineAngle);

    add(worldVertex01, worldVertex01, lineOffset);
    add(worldVertex11, worldVertex11, lineOffset);

    vec2.copy(worldVertex0,worldVertex01);
    vec2.copy(worldVertex1,worldVertex11);

    // Get vector along the line
    sub(worldEdge, worldVertex1, worldVertex0);
    vec2.normalize(worldEdgeUnit, worldEdge);

    // Get tangent to the edge.
    vec2.rotate90cw(worldTangent, worldEdgeUnit);

    // Check distance from the plane spanned by the edge vs the circle
    sub(dist, circleOffset, worldVertex0);
    var d = dot(dist, worldTangent); // Distance from center of line to circle center
    sub(centerDist, worldVertex0, lineOffset);

    sub(lineToCircle, circleOffset, lineOffset);

    var radiusSum = circleRadius + lineRadius;

    if(Math.abs(d) < radiusSum){

        // Now project the circle onto the edge
        vec2.scale(orthoDist, worldTangent, d);
        sub(projectedPoint, circleOffset, orthoDist);

        // Add the missing line radius
        vec2.scale(lineToCircleOrthoUnit, worldTangent, dot(worldTangent, lineToCircle));
        vec2.normalize(lineToCircleOrthoUnit,lineToCircleOrthoUnit);
        vec2.scale(lineToCircleOrthoUnit, lineToCircleOrthoUnit, lineRadius);
        add(projectedPoint,projectedPoint,lineToCircleOrthoUnit);

        // Check if the point is within the edge span
        var pos =  dot(worldEdgeUnit, projectedPoint);
        var pos0 = dot(worldEdgeUnit, worldVertex0);
        var pos1 = dot(worldEdgeUnit, worldVertex1);

        if(pos > pos0 && pos < pos1){
            // We got contact!

            if(justTest){
                return true;
            }

            var c = this.createContactEquation(circleBody,lineBody,circleShape,lineShape);

            vec2.scale(c.normalA, orthoDist, -1);
            vec2.normalize(c.normalA, c.normalA);

            vec2.scale( c.contactPointA, c.normalA,  circleRadius);
            add(c.contactPointA, c.contactPointA, circleOffset);
            sub(c.contactPointA, c.contactPointA, circleBody.position);

            sub(c.contactPointB, projectedPoint, lineOffset);
            add(c.contactPointB, c.contactPointB, lineOffset);
            sub(c.contactPointB, c.contactPointB, lineBody.position);

            this.contactEquations.push(c);

            if(this.enableFriction){
                this.frictionEquations.push(this.createFrictionFromContact(c));
            }

            return 1;
        }
    }

    // Add corner
    verts[0] = worldVertex0;
    verts[1] = worldVertex1;

    for(var i=0; i<verts.length; i++){
        var v = verts[i];

        sub(dist, v, circleOffset);

        if(vec2.squaredLength(dist) < Math.pow(radiusSum, 2)){

            if(justTest){
                return true;
            }

            var c = this.createContactEquation(circleBody,lineBody,circleShape,lineShape);

            vec2.copy(c.normalA, dist);
            vec2.normalize(c.normalA,c.normalA);

            // Vector from circle to contact point is the normal times the circle radius
            vec2.scale(c.contactPointA, c.normalA, circleRadius);
            add(c.contactPointA, c.contactPointA, circleOffset);
            sub(c.contactPointA, c.contactPointA, circleBody.position);

            sub(c.contactPointB, v, lineOffset);
            vec2.scale(lineEndToLineRadius, c.normalA, -lineRadius);
            add(c.contactPointB, c.contactPointB, lineEndToLineRadius);
            add(c.contactPointB, c.contactPointB, lineOffset);
            sub(c.contactPointB, c.contactPointB, lineBody.position);

            this.contactEquations.push(c);

            if(this.enableFriction){
                this.frictionEquations.push(this.createFrictionFromContact(c));
            }

            return 1;
        }
    }

    return 0;
};

/**
 * Circle/capsule Narrowphase
 * @method circleCapsule
 * @param  {Body}   bi
 * @param  {Circle} si
 * @param  {Array}  xi
 * @param  {Number} ai
 * @param  {Body}   bj
 * @param  {Line}   sj
 * @param  {Array}  xj
 * @param  {Number} aj
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.CAPSULE] =
Narrowphase.prototype.circleCapsule = function(bi,si,xi,ai, bj,sj,xj,aj, justTest){
    return this.circleLine(bi,si,xi,ai, bj,sj,xj,aj, justTest, sj.radius);
};

/**
 * Circle/convex Narrowphase.
 * @method circleConvex
 * @param  {Body} circleBody
 * @param  {Circle} circleShape
 * @param  {Array} circleOffset
 * @param  {Number} circleAngle
 * @param  {Body} convexBody
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param  {Boolean} justTest
 * @param  {Number} circleRadius
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.CONVEX] =
Narrowphase.prototype[Shape.CIRCLE | Shape.BOX] =
Narrowphase.prototype.circleConvex = function(
    circleBody,
    circleShape,
    circleOffset,
    circleAngle,
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    justTest,
    circleRadius
){
    var circleRadius = typeof(circleRadius)==="number" ? circleRadius : circleShape.radius;

    var worldVertex0 = tmp1,
        worldVertex1 = tmp2,
        worldEdge = tmp3,
        worldEdgeUnit = tmp4,
        worldNormal = tmp5,
        centerDist = tmp6,
        convexToCircle = tmp7,
        orthoDist = tmp8,
        projectedPoint = tmp9,
        dist = tmp10,
        worldVertex = tmp11,

        closestEdge = -1,
        closestEdgeDistance = null,
        closestEdgeOrthoDist = tmp12,
        closestEdgeProjectedPoint = tmp13,
        candidate = tmp14,
        candidateDist = tmp15,
        minCandidate = tmp16,

        found = false,
        minCandidateDistance = Number.MAX_VALUE;

    var numReported = 0;

    // New algorithm:
    // 1. Check so center of circle is not inside the polygon. If it is, this wont work...
    // 2. For each edge
    // 2. 1. Get point on circle that is closest to the edge (scale normal with -radius)
    // 2. 2. Check if point is inside.

    var verts = convexShape.vertices;

    // Check all edges first
    for(var i=0; i!==verts.length+1; i++){
        var v0 = verts[i%verts.length],
            v1 = verts[(i+1)%verts.length];

        vec2.rotate(worldVertex0, v0, convexAngle);
        vec2.rotate(worldVertex1, v1, convexAngle);
        add(worldVertex0, worldVertex0, convexOffset);
        add(worldVertex1, worldVertex1, convexOffset);
        sub(worldEdge, worldVertex1, worldVertex0);

        vec2.normalize(worldEdgeUnit, worldEdge);

        // Get tangent to the edge. Points out of the Convex
        vec2.rotate90cw(worldNormal, worldEdgeUnit);

        // Get point on circle, closest to the polygon
        vec2.scale(candidate,worldNormal,-circleShape.radius);
        add(candidate,candidate,circleOffset);

        if(pointInConvex(candidate,convexShape,convexOffset,convexAngle)){

            vec2.sub(candidateDist,worldVertex0,candidate);
            var candidateDistance = Math.abs(vec2.dot(candidateDist,worldNormal));

            if(candidateDistance < minCandidateDistance){
                vec2.copy(minCandidate,candidate);
                minCandidateDistance = candidateDistance;
                vec2.scale(closestEdgeProjectedPoint,worldNormal,candidateDistance);
                vec2.add(closestEdgeProjectedPoint,closestEdgeProjectedPoint,candidate);
                found = true;
            }
        }
    }

    if(found){

        if(justTest){
            return true;
        }

        var c = this.createContactEquation(circleBody,convexBody,circleShape,convexShape);
        vec2.sub(c.normalA, minCandidate, circleOffset);
        vec2.normalize(c.normalA, c.normalA);

        vec2.scale(c.contactPointA,  c.normalA, circleRadius);
        add(c.contactPointA, c.contactPointA, circleOffset);
        sub(c.contactPointA, c.contactPointA, circleBody.position);

        sub(c.contactPointB, closestEdgeProjectedPoint, convexOffset);
        add(c.contactPointB, c.contactPointB, convexOffset);
        sub(c.contactPointB, c.contactPointB, convexBody.position);

        this.contactEquations.push(c);

        if(this.enableFriction){
            this.frictionEquations.push( this.createFrictionFromContact(c) );
        }

        return 1;
    }

    // Check all vertices
    if(circleRadius > 0){
        for(var i=0; i<verts.length; i++){
            var localVertex = verts[i];
            vec2.rotate(worldVertex, localVertex, convexAngle);
            add(worldVertex, worldVertex, convexOffset);

            sub(dist, worldVertex, circleOffset);
            if(vec2.squaredLength(dist) < Math.pow(circleRadius, 2)){

                if(justTest){
                    return true;
                }

                var c = this.createContactEquation(circleBody,convexBody,circleShape,convexShape);

                vec2.copy(c.normalA, dist);
                vec2.normalize(c.normalA,c.normalA);

                // Vector from circle to contact point is the normal times the circle radius
                vec2.scale(c.contactPointA, c.normalA, circleRadius);
                add(c.contactPointA, c.contactPointA, circleOffset);
                sub(c.contactPointA, c.contactPointA, circleBody.position);

                sub(c.contactPointB, worldVertex, convexOffset);
                add(c.contactPointB, c.contactPointB, convexOffset);
                sub(c.contactPointB, c.contactPointB, convexBody.position);

                this.contactEquations.push(c);

                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }

                return 1;
            }
        }
    }

    return 0;
};

var pic_worldVertex0 = vec2.create(),
    pic_worldVertex1 = vec2.create(),
    pic_r0 = vec2.create(),
    pic_r1 = vec2.create();

/*
 * Check if a point is in a polygon
 */
function pointInConvex(worldPoint,convexShape,convexOffset,convexAngle){
    var worldVertex0 = pic_worldVertex0,
        worldVertex1 = pic_worldVertex1,
        r0 = pic_r0,
        r1 = pic_r1,
        point = worldPoint,
        verts = convexShape.vertices,
        lastCross = null;
    for(var i=0; i!==verts.length+1; i++){
        var v0 = verts[i%verts.length],
            v1 = verts[(i+1)%verts.length];

        // Transform vertices to world
        // @todo The point should be transformed to local coordinates in the convex, no need to transform each vertex
        vec2.rotate(worldVertex0, v0, convexAngle);
        vec2.rotate(worldVertex1, v1, convexAngle);
        add(worldVertex0, worldVertex0, convexOffset);
        add(worldVertex1, worldVertex1, convexOffset);

        sub(r0, worldVertex0, point);
        sub(r1, worldVertex1, point);
        var cross = vec2.crossLength(r0,r1);

        if(lastCross===null){
            lastCross = cross;
        }

        // If we got a different sign of the distance vector, the point is out of the polygon
        if(cross*lastCross <= 0){
            return false;
        }
        lastCross = cross;
    }
    return true;
}

/**
 * Particle/convex Narrowphase
 * @method particleConvex
 * @param  {Body} particleBody
 * @param  {Particle} particleShape
 * @param  {Array} particleOffset
 * @param  {Number} particleAngle
 * @param  {Body} convexBody
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param {Boolean} justTest
 * @todo use pointInConvex and code more similar to circleConvex
 * @todo don't transform each vertex, but transform the particle position to convex-local instead
 */
Narrowphase.prototype[Shape.PARTICLE | Shape.CONVEX] =
Narrowphase.prototype[Shape.PARTICLE | Shape.BOX] =
Narrowphase.prototype.particleConvex = function(
    particleBody,
    particleShape,
    particleOffset,
    particleAngle,
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    justTest
){
    var worldVertex0 = tmp1,
        worldVertex1 = tmp2,
        worldEdge = tmp3,
        worldEdgeUnit = tmp4,
        worldTangent = tmp5,
        centerDist = tmp6,
        convexToparticle = tmp7,
        orthoDist = tmp8,
        projectedPoint = tmp9,
        dist = tmp10,
        worldVertex = tmp11,
        closestEdge = -1,
        closestEdgeDistance = null,
        closestEdgeOrthoDist = tmp12,
        closestEdgeProjectedPoint = tmp13,
        r0 = tmp14, // vector from particle to vertex0
        r1 = tmp15,
        localPoint = tmp16,
        candidateDist = tmp17,
        minEdgeNormal = tmp18,
        minCandidateDistance = Number.MAX_VALUE;

    var numReported = 0,
        found = false,
        verts = convexShape.vertices;

    // Check if the particle is in the polygon at all
    if(!pointInConvex(particleOffset,convexShape,convexOffset,convexAngle)){
        return 0;
    }

    if(justTest){
        return true;
    }

    // Check edges first
    var lastCross = null;
    for(var i=0; i!==verts.length+1; i++){
        var v0 = verts[i%verts.length],
            v1 = verts[(i+1)%verts.length];

        // Transform vertices to world
        vec2.rotate(worldVertex0, v0, convexAngle);
        vec2.rotate(worldVertex1, v1, convexAngle);
        add(worldVertex0, worldVertex0, convexOffset);
        add(worldVertex1, worldVertex1, convexOffset);

        // Get world edge
        sub(worldEdge, worldVertex1, worldVertex0);
        vec2.normalize(worldEdgeUnit, worldEdge);

        // Get tangent to the edge. Points out of the Convex
        vec2.rotate90cw(worldTangent, worldEdgeUnit);

        // Check distance from the infinite line (spanned by the edge) to the particle
        sub(dist, particleOffset, worldVertex0);
        var d = dot(dist, worldTangent);
        sub(centerDist, worldVertex0, convexOffset);

        sub(convexToparticle, particleOffset, convexOffset);

        vec2.sub(candidateDist,worldVertex0,particleOffset);
        var candidateDistance = Math.abs(vec2.dot(candidateDist,worldTangent));

        if(candidateDistance < minCandidateDistance){
            minCandidateDistance = candidateDistance;
            vec2.scale(closestEdgeProjectedPoint,worldTangent,candidateDistance);
            vec2.add(closestEdgeProjectedPoint,closestEdgeProjectedPoint,particleOffset);
            vec2.copy(minEdgeNormal,worldTangent);
            found = true;
        }
    }

    if(found){
        var c = this.createContactEquation(particleBody,convexBody,particleShape,convexShape);

        vec2.scale(c.normalA, minEdgeNormal, -1);
        vec2.normalize(c.normalA, c.normalA);

        // Particle has no extent to the contact point
        vec2.set(c.contactPointA,  0, 0);
        add(c.contactPointA, c.contactPointA, particleOffset);
        sub(c.contactPointA, c.contactPointA, particleBody.position);

        // From convex center to point
        sub(c.contactPointB, closestEdgeProjectedPoint, convexOffset);
        add(c.contactPointB, c.contactPointB, convexOffset);
        sub(c.contactPointB, c.contactPointB, convexBody.position);

        this.contactEquations.push(c);

        if(this.enableFriction){
            this.frictionEquations.push( this.createFrictionFromContact(c) );
        }

        return 1;
    }


    return 0;
};

/**
 * Circle/circle Narrowphase
 * @method circleCircle
 * @param  {Body} bodyA
 * @param  {Circle} shapeA
 * @param  {Array} offsetA
 * @param  {Number} angleA
 * @param  {Body} bodyB
 * @param  {Circle} shapeB
 * @param  {Array} offsetB
 * @param  {Number} angleB
 * @param {Boolean} justTest
 * @param {Number} [radiusA] Optional radius to use for shapeA
 * @param {Number} [radiusB] Optional radius to use for shapeB
 */
Narrowphase.prototype[Shape.CIRCLE] =
Narrowphase.prototype.circleCircle = function(
    bodyA,
    shapeA,
    offsetA,
    angleA,
    bodyB,
    shapeB,
    offsetB,
    angleB,
    justTest,
    radiusA,
    radiusB
){

    var dist = tmp1,
        radiusA = radiusA || shapeA.radius,
        radiusB = radiusB || shapeB.radius;

    sub(dist,offsetA,offsetB);
    var r = radiusA + radiusB;
    if(vec2.squaredLength(dist) > Math.pow(r,2)){
        return 0;
    }

    if(justTest){
        return true;
    }

    var c = this.createContactEquation(bodyA,bodyB,shapeA,shapeB);
    sub(c.normalA, offsetB, offsetA);
    vec2.normalize(c.normalA,c.normalA);

    vec2.scale( c.contactPointA, c.normalA,  radiusA);
    vec2.scale( c.contactPointB, c.normalA, -radiusB);

    add(c.contactPointA, c.contactPointA, offsetA);
    sub(c.contactPointA, c.contactPointA, bodyA.position);

    add(c.contactPointB, c.contactPointB, offsetB);
    sub(c.contactPointB, c.contactPointB, bodyB.position);

    this.contactEquations.push(c);

    if(this.enableFriction){
        this.frictionEquations.push(this.createFrictionFromContact(c));
    }
    return 1;
};

/**
 * Plane/Convex Narrowphase
 * @method planeConvex
 * @param  {Body} planeBody
 * @param  {Plane} planeShape
 * @param  {Array} planeOffset
 * @param  {Number} planeAngle
 * @param  {Body} convexBody
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param {Boolean} justTest
 */
Narrowphase.prototype[Shape.PLANE | Shape.CONVEX] =
Narrowphase.prototype[Shape.PLANE | Shape.BOX] =
Narrowphase.prototype.planeConvex = function(
    planeBody,
    planeShape,
    planeOffset,
    planeAngle,
    convexBody,
    convexShape,
    convexOffset,
    convexAngle,
    justTest
){
    var worldVertex = tmp1,
        worldNormal = tmp2,
        dist = tmp3;

    var numReported = 0;
    vec2.rotate(worldNormal, yAxis, planeAngle);

    for(var i=0; i!==convexShape.vertices.length; i++){
        var v = convexShape.vertices[i];
        vec2.rotate(worldVertex, v, convexAngle);
        add(worldVertex, worldVertex, convexOffset);

        sub(dist, worldVertex, planeOffset);

        if(dot(dist,worldNormal) <= 0){

            if(justTest){
                return true;
            }

            // Found vertex
            numReported++;

            var c = this.createContactEquation(planeBody,convexBody,planeShape,convexShape);

            sub(dist, worldVertex, planeOffset);

            vec2.copy(c.normalA, worldNormal);

            var d = dot(dist, c.normalA);
            vec2.scale(dist, c.normalA, d);

            // rj is from convex center to contact
            sub(c.contactPointB, worldVertex, convexBody.position);


            // ri is from plane center to contact
            sub( c.contactPointA, worldVertex, dist);
            sub( c.contactPointA, c.contactPointA, planeBody.position);

            this.contactEquations.push(c);

            if(!this.enableFrictionReduction){
                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }
            }
        }
    }

    if(this.enableFrictionReduction){
        if(this.enableFriction && numReported){
            this.frictionEquations.push(this.createFrictionFromAverage(numReported));
        }
    }

    return numReported;
};

/**
 * Narrowphase for particle vs plane
 * @method particlePlane
 * @param  {Body}       particleBody
 * @param  {Particle}   particleShape
 * @param  {Array}      particleOffset
 * @param  {Number}     particleAngle
 * @param  {Body}       planeBody
 * @param  {Plane}      planeShape
 * @param  {Array}      planeOffset
 * @param  {Number}     planeAngle
 * @param {Boolean}     justTest
 */
Narrowphase.prototype[Shape.PARTICLE | Shape.PLANE] =
Narrowphase.prototype.particlePlane = function(
    particleBody,
    particleShape,
    particleOffset,
    particleAngle,
    planeBody,
    planeShape,
    planeOffset,
    planeAngle,
    justTest
){
    var dist = tmp1,
        worldNormal = tmp2;

    planeAngle = planeAngle || 0;

    sub(dist, particleOffset, planeOffset);
    vec2.rotate(worldNormal, yAxis, planeAngle);

    var d = dot(dist, worldNormal);

    if(d > 0){
        return 0;
    }
    if(justTest){
        return true;
    }

    var c = this.createContactEquation(planeBody,particleBody,planeShape,particleShape);

    vec2.copy(c.normalA, worldNormal);
    vec2.scale( dist, c.normalA, d );
    // dist is now the distance vector in the normal direction

    // ri is the particle position projected down onto the plane, from the plane center
    sub( c.contactPointA, particleOffset, dist);
    sub( c.contactPointA, c.contactPointA, planeBody.position);

    // rj is from the body center to the particle center
    sub( c.contactPointB, particleOffset, particleBody.position );

    this.contactEquations.push(c);

    if(this.enableFriction){
        this.frictionEquations.push(this.createFrictionFromContact(c));
    }
    return 1;
};

/**
 * Circle/Particle Narrowphase
 * @method circleParticle
 * @param  {Body} circleBody
 * @param  {Circle} circleShape
 * @param  {Array} circleOffset
 * @param  {Number} circleAngle
 * @param  {Body} particleBody
 * @param  {Particle} particleShape
 * @param  {Array} particleOffset
 * @param  {Number} particleAngle
 * @param  {Boolean} justTest
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.PARTICLE] =
Narrowphase.prototype.circleParticle = function(
    circleBody,
    circleShape,
    circleOffset,
    circleAngle,
    particleBody,
    particleShape,
    particleOffset,
    particleAngle,
    justTest
){
    var dist = tmp1;

    sub(dist, particleOffset, circleOffset);
    if(vec2.squaredLength(dist) > Math.pow(circleShape.radius, 2)){
        return 0;
    }
    if(justTest){
        return true;
    }

    var c = this.createContactEquation(circleBody,particleBody,circleShape,particleShape);
    vec2.copy(c.normalA, dist);
    vec2.normalize(c.normalA,c.normalA);

    // Vector from circle to contact point is the normal times the circle radius
    vec2.scale(c.contactPointA, c.normalA, circleShape.radius);
    add(c.contactPointA, c.contactPointA, circleOffset);
    sub(c.contactPointA, c.contactPointA, circleBody.position);

    // Vector from particle center to contact point is zero
    sub(c.contactPointB, particleOffset, particleBody.position);

    this.contactEquations.push(c);

    if(this.enableFriction){
        this.frictionEquations.push(this.createFrictionFromContact(c));
    }

    return 1;
};

var planeCapsule_tmpCircle = new Circle({ radius: 1 }),
    planeCapsule_tmp1 = vec2.create(),
    planeCapsule_tmp2 = vec2.create(),
    planeCapsule_tmp3 = vec2.create();

/**
 * @method planeCapsule
 * @param  {Body} planeBody
 * @param  {Circle} planeShape
 * @param  {Array} planeOffset
 * @param  {Number} planeAngle
 * @param  {Body} capsuleBody
 * @param  {Particle} capsuleShape
 * @param  {Array} capsuleOffset
 * @param  {Number} capsuleAngle
 * @param {Boolean} justTest
 */
Narrowphase.prototype[Shape.PLANE | Shape.CAPSULE] =
Narrowphase.prototype.planeCapsule = function(
    planeBody,
    planeShape,
    planeOffset,
    planeAngle,
    capsuleBody,
    capsuleShape,
    capsuleOffset,
    capsuleAngle,
    justTest
){
    var end1 = planeCapsule_tmp1,
        end2 = planeCapsule_tmp2,
        circle = planeCapsule_tmpCircle,
        dst = planeCapsule_tmp3;

    // Compute world end positions
    vec2.set(end1, -capsuleShape.length/2, 0);
    vec2.rotate(end1,end1,capsuleAngle);
    add(end1,end1,capsuleOffset);

    vec2.set(end2,  capsuleShape.length/2, 0);
    vec2.rotate(end2,end2,capsuleAngle);
    add(end2,end2,capsuleOffset);

    circle.radius = capsuleShape.radius;

    var enableFrictionBefore;

    // Temporarily turn off friction
    if(this.enableFrictionReduction){
        enableFrictionBefore = this.enableFriction;
        this.enableFriction = false;
    }

    // Do Narrowphase as two circles
    var numContacts1 = this.circlePlane(capsuleBody,circle,end1,0, planeBody,planeShape,planeOffset,planeAngle, justTest),
        numContacts2 = this.circlePlane(capsuleBody,circle,end2,0, planeBody,planeShape,planeOffset,planeAngle, justTest);

    // Restore friction
    if(this.enableFrictionReduction){
        this.enableFriction = enableFrictionBefore;
    }

    if(justTest){
        return numContacts1 || numContacts2;
    } else {
        var numTotal = numContacts1 + numContacts2;
        if(this.enableFrictionReduction){
            if(numTotal){
                this.frictionEquations.push(this.createFrictionFromAverage(numTotal));
            }
        }
        return numTotal;
    }
};

/**
 * Creates ContactEquations and FrictionEquations for a collision.
 * @method circlePlane
 * @param  {Body}    bi     The first body that should be connected to the equations.
 * @param  {Circle}  si     The circle shape participating in the collision.
 * @param  {Array}   xi     Extra offset to take into account for the Shape, in addition to the one in circleBody.position. Will *not* be rotated by circleBody.angle (maybe it should, for sake of homogenity?). Set to null if none.
 * @param  {Body}    bj     The second body that should be connected to the equations.
 * @param  {Plane}   sj     The Plane shape that is participating
 * @param  {Array}   xj     Extra offset for the plane shape.
 * @param  {Number}  aj     Extra angle to apply to the plane
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.PLANE] =
Narrowphase.prototype.circlePlane = function(   bi,si,xi,ai, bj,sj,xj,aj, justTest ){
    var circleBody = bi,
        circleShape = si,
        circleOffset = xi, // Offset from body center, rotated!
        planeBody = bj,
        shapeB = sj,
        planeOffset = xj,
        planeAngle = aj;

    planeAngle = planeAngle || 0;

    // Vector from plane to circle
    var planeToCircle = tmp1,
        worldNormal = tmp2,
        temp = tmp3;

    sub(planeToCircle, circleOffset, planeOffset);

    // World plane normal
    vec2.rotate(worldNormal, yAxis, planeAngle);

    // Normal direction distance
    var d = dot(worldNormal, planeToCircle);

    if(d > circleShape.radius){
        return 0; // No overlap. Abort.
    }

    if(justTest){
        return true;
    }

    // Create contact
    var contact = this.createContactEquation(planeBody,circleBody,sj,si);

    // ni is the plane world normal
    vec2.copy(contact.normalA, worldNormal);

    // rj is the vector from circle center to the contact point
    vec2.scale(contact.contactPointB, contact.normalA, -circleShape.radius);
    add(contact.contactPointB, contact.contactPointB, circleOffset);
    sub(contact.contactPointB, contact.contactPointB, circleBody.position);

    // ri is the distance from plane center to contact.
    vec2.scale(temp, contact.normalA, d);
    sub(contact.contactPointA, planeToCircle, temp ); // Subtract normal distance vector from the distance vector
    add(contact.contactPointA, contact.contactPointA, planeOffset);
    sub(contact.contactPointA, contact.contactPointA, planeBody.position);

    this.contactEquations.push(contact);

    if(this.enableFriction){
        this.frictionEquations.push( this.createFrictionFromContact(contact) );
    }

    return 1;
};

/**
 * Convex/convex Narrowphase.See <a href="http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/">this article</a> for more info.
 * @method convexConvex
 * @param  {Body} bi
 * @param  {Convex} si
 * @param  {Array} xi
 * @param  {Number} ai
 * @param  {Body} bj
 * @param  {Convex} sj
 * @param  {Array} xj
 * @param  {Number} aj
 */
Narrowphase.prototype[Shape.CONVEX] =
Narrowphase.prototype[Shape.CONVEX | Shape.BOX] =
Narrowphase.prototype[Shape.BOX] =
Narrowphase.prototype.convexConvex = function(  bi,si,xi,ai, bj,sj,xj,aj, justTest, precision ){
    var sepAxis = tmp1,
        worldPoint = tmp2,
        worldPoint0 = tmp3,
        worldPoint1 = tmp4,
        worldEdge = tmp5,
        projected = tmp6,
        penetrationVec = tmp7,
        dist = tmp8,
        worldNormal = tmp9,
        numContacts = 0,
        precision = typeof(precision) === 'number' ? precision : 0;

    var found = Narrowphase.findSeparatingAxis(si,xi,ai,sj,xj,aj,sepAxis);
    if(!found){
        return 0;
    }

    // Make sure the separating axis is directed from shape i to shape j
    sub(dist,xj,xi);
    if(dot(sepAxis,dist) > 0){
        vec2.scale(sepAxis,sepAxis,-1);
    }

    // Find edges with normals closest to the separating axis
    var closestEdge1 = Narrowphase.getClosestEdge(si,ai,sepAxis,true), // Flipped axis
        closestEdge2 = Narrowphase.getClosestEdge(sj,aj,sepAxis);

    if(closestEdge1 === -1 || closestEdge2 === -1){
        return 0;
    }

    // Loop over the shapes
    for(var k=0; k<2; k++){

        var closestEdgeA = closestEdge1,
            closestEdgeB = closestEdge2,
            shapeA =  si, shapeB =  sj,
            offsetA = xi, offsetB = xj,
            angleA = ai, angleB = aj,
            bodyA = bi, bodyB = bj;

        if(k === 0){
            // Swap!
            var tmp;
            tmp = closestEdgeA;
            closestEdgeA = closestEdgeB;
            closestEdgeB = tmp;

            tmp = shapeA;
            shapeA = shapeB;
            shapeB = tmp;

            tmp = offsetA;
            offsetA = offsetB;
            offsetB = tmp;

            tmp = angleA;
            angleA = angleB;
            angleB = tmp;

            tmp = bodyA;
            bodyA = bodyB;
            bodyB = tmp;
        }

        // Loop over 2 points in convex B
        for(var j=closestEdgeB; j<closestEdgeB+2; j++){

            // Get world point
            var v = shapeB.vertices[(j+shapeB.vertices.length)%shapeB.vertices.length];
            vec2.rotate(worldPoint, v, angleB);
            add(worldPoint, worldPoint, offsetB);

            var insideNumEdges = 0;

            // Loop over the 3 closest edges in convex A
            for(var i=closestEdgeA-1; i<closestEdgeA+2; i++){

                var v0 = shapeA.vertices[(i  +shapeA.vertices.length)%shapeA.vertices.length],
                    v1 = shapeA.vertices[(i+1+shapeA.vertices.length)%shapeA.vertices.length];

                // Construct the edge
                vec2.rotate(worldPoint0, v0, angleA);
                vec2.rotate(worldPoint1, v1, angleA);
                add(worldPoint0, worldPoint0, offsetA);
                add(worldPoint1, worldPoint1, offsetA);

                sub(worldEdge, worldPoint1, worldPoint0);

                vec2.rotate90cw(worldNormal, worldEdge); // Normal points out of convex 1
                vec2.normalize(worldNormal,worldNormal);

                sub(dist, worldPoint, worldPoint0);

                var d = dot(worldNormal,dist);

                if((i === closestEdgeA && d <= precision) || (i !== closestEdgeA && d <= 0)){
                    insideNumEdges++;
                }
            }

            if(insideNumEdges >= 3){

                if(justTest){
                    return true;
                }

                // worldPoint was on the "inside" side of each of the 3 checked edges.
                // Project it to the center edge and use the projection direction as normal

                // Create contact
                var c = this.createContactEquation(bodyA,bodyB,shapeA,shapeB);
                numContacts++;

                // Get center edge from body A
                var v0 = shapeA.vertices[(closestEdgeA)   % shapeA.vertices.length],
                    v1 = shapeA.vertices[(closestEdgeA+1) % shapeA.vertices.length];

                // Construct the edge
                vec2.rotate(worldPoint0, v0, angleA);
                vec2.rotate(worldPoint1, v1, angleA);
                add(worldPoint0, worldPoint0, offsetA);
                add(worldPoint1, worldPoint1, offsetA);

                sub(worldEdge, worldPoint1, worldPoint0);

                vec2.rotate90cw(c.normalA, worldEdge); // Normal points out of convex A
                vec2.normalize(c.normalA,c.normalA);

                sub(dist, worldPoint, worldPoint0); // From edge point to the penetrating point
                var d = dot(c.normalA,dist);             // Penetration
                vec2.scale(penetrationVec, c.normalA, d);     // Vector penetration

                sub(c.contactPointA, worldPoint, offsetA);
                sub(c.contactPointA, c.contactPointA, penetrationVec);
                add(c.contactPointA, c.contactPointA, offsetA);
                sub(c.contactPointA, c.contactPointA, bodyA.position);

                sub(c.contactPointB, worldPoint, offsetB);
                add(c.contactPointB, c.contactPointB, offsetB);
                sub(c.contactPointB, c.contactPointB, bodyB.position);

                this.contactEquations.push(c);

                // Todo reduce to 1 friction equation if we have 2 contact points
                if(!this.enableFrictionReduction){
                    if(this.enableFriction){
                        this.frictionEquations.push(this.createFrictionFromContact(c));
                    }
                }
            }
        }
    }

    if(this.enableFrictionReduction){
        if(this.enableFriction && numContacts){
            this.frictionEquations.push(this.createFrictionFromAverage(numContacts));
        }
    }

    return numContacts;
};

// .projectConvex is called by other functions, need local tmp vectors
var pcoa_tmp1 = vec2.fromValues(0,0);

/**
 * Project a Convex onto a world-oriented axis
 * @method projectConvexOntoAxis
 * @static
 * @param  {Convex} convexShape
 * @param  {Array} convexOffset
 * @param  {Number} convexAngle
 * @param  {Array} worldAxis
 * @param  {Array} result
 */
Narrowphase.projectConvexOntoAxis = function(convexShape, convexOffset, convexAngle, worldAxis, result){
    var max=null,
        min=null,
        v,
        value,
        localAxis = pcoa_tmp1;

    // Convert the axis to local coords of the body
    vec2.rotate(localAxis, worldAxis, -convexAngle);

    // Get projected position of all vertices
    for(var i=0; i<convexShape.vertices.length; i++){
        v = convexShape.vertices[i];
        value = dot(v,localAxis);
        if(max === null || value > max){
            max = value;
        }
        if(min === null || value < min){
            min = value;
        }
    }

    if(min > max){
        var t = min;
        min = max;
        max = t;
    }

    // Project the position of the body onto the axis - need to add this to the result
    var offset = dot(convexOffset, worldAxis);

    vec2.set( result, min + offset, max + offset);
};

// .findSeparatingAxis is called by other functions, need local tmp vectors
var fsa_tmp1 = vec2.fromValues(0,0)
,   fsa_tmp2 = vec2.fromValues(0,0)
,   fsa_tmp3 = vec2.fromValues(0,0)
,   fsa_tmp4 = vec2.fromValues(0,0)
,   fsa_tmp5 = vec2.fromValues(0,0)
,   fsa_tmp6 = vec2.fromValues(0,0);

/**
 * Find a separating axis between the shapes, that maximizes the separating distance between them.
 * @method findSeparatingAxis
 * @static
 * @param  {Convex}     c1
 * @param  {Array}      offset1
 * @param  {Number}     angle1
 * @param  {Convex}     c2
 * @param  {Array}      offset2
 * @param  {Number}     angle2
 * @param  {Array}      sepAxis     The resulting axis
 * @return {Boolean}                Whether the axis could be found.
 */
Narrowphase.findSeparatingAxis = function(c1,offset1,angle1,c2,offset2,angle2,sepAxis){
    var maxDist = null,
        overlap = false,
        found = false,
        edge = fsa_tmp1,
        worldPoint0 = fsa_tmp2,
        worldPoint1 = fsa_tmp3,
        normal = fsa_tmp4,
        span1 = fsa_tmp5,
        span2 = fsa_tmp6;

    if(c1 instanceof Box && c2 instanceof Box){

        for(var j=0; j!==2; j++){
            var c = c1,
                angle = angle1;
            if(j===1){
                c = c2;
                angle = angle2;
            }

            for(var i=0; i!==2; i++){

                // Get the world edge
                if(i === 0){
                    vec2.set(normal, 0, 1);
                } else if(i === 1) {
                    vec2.set(normal, 1, 0);
                }
                if(angle !== 0){
                    vec2.rotate(normal, normal, angle);
                }

                // Project hulls onto that normal
                Narrowphase.projectConvexOntoAxis(c1,offset1,angle1,normal,span1);
                Narrowphase.projectConvexOntoAxis(c2,offset2,angle2,normal,span2);

                // Order by span position
                var a=span1,
                    b=span2,
                    swapped = false;
                if(span1[0] > span2[0]){
                    b=span1;
                    a=span2;
                    swapped = true;
                }

                // Get separating distance
                var dist = b[0] - a[1];
                overlap = (dist <= 0);

                if(maxDist===null || dist > maxDist){
                    vec2.copy(sepAxis, normal);
                    maxDist = dist;
                    found = overlap;
                }
            }
        }

    } else {

        for(var j=0; j!==2; j++){
            var c = c1,
                angle = angle1;
            if(j===1){
                c = c2;
                angle = angle2;
            }

            for(var i=0; i!==c.vertices.length; i++){
                // Get the world edge
                vec2.rotate(worldPoint0, c.vertices[i], angle);
                vec2.rotate(worldPoint1, c.vertices[(i+1)%c.vertices.length], angle);

                sub(edge, worldPoint1, worldPoint0);

                // Get normal - just rotate 90 degrees since vertices are given in CCW
                vec2.rotate90cw(normal, edge);
                vec2.normalize(normal,normal);

                // Project hulls onto that normal
                Narrowphase.projectConvexOntoAxis(c1,offset1,angle1,normal,span1);
                Narrowphase.projectConvexOntoAxis(c2,offset2,angle2,normal,span2);

                // Order by span position
                var a=span1,
                    b=span2,
                    swapped = false;
                if(span1[0] > span2[0]){
                    b=span1;
                    a=span2;
                    swapped = true;
                }

                // Get separating distance
                var dist = b[0] - a[1];
                overlap = (dist <= 0);

                if(maxDist===null || dist > maxDist){
                    vec2.copy(sepAxis, normal);
                    maxDist = dist;
                    found = overlap;
                }
            }
        }
    }


    /*
    // Needs to be tested some more
    for(var j=0; j!==2; j++){
        var c = c1,
            angle = angle1;
        if(j===1){
            c = c2;
            angle = angle2;
        }

        for(var i=0; i!==c.axes.length; i++){

            var normal = c.axes[i];

            // Project hulls onto that normal
            Narrowphase.projectConvexOntoAxis(c1, offset1, angle1, normal, span1);
            Narrowphase.projectConvexOntoAxis(c2, offset2, angle2, normal, span2);

            // Order by span position
            var a=span1,
                b=span2,
                swapped = false;
            if(span1[0] > span2[0]){
                b=span1;
                a=span2;
                swapped = true;
            }

            // Get separating distance
            var dist = b[0] - a[1];
            overlap = (dist <= Narrowphase.convexPrecision);

            if(maxDist===null || dist > maxDist){
                vec2.copy(sepAxis, normal);
                maxDist = dist;
                found = overlap;
            }
        }
    }
    */

    return found;
};

// .getClosestEdge is called by other functions, need local tmp vectors
var gce_tmp1 = vec2.fromValues(0,0)
,   gce_tmp2 = vec2.fromValues(0,0)
,   gce_tmp3 = vec2.fromValues(0,0);

/**
 * Get the edge that has a normal closest to an axis.
 * @method getClosestEdge
 * @static
 * @param  {Convex}     c
 * @param  {Number}     angle
 * @param  {Array}      axis
 * @param  {Boolean}    flip
 * @return {Number}             Index of the edge that is closest. This index and the next spans the resulting edge. Returns -1 if failed.
 */
Narrowphase.getClosestEdge = function(c,angle,axis,flip){
    var localAxis = gce_tmp1,
        edge = gce_tmp2,
        normal = gce_tmp3;

    // Convert the axis to local coords of the body
    vec2.rotate(localAxis, axis, -angle);
    if(flip){
        vec2.scale(localAxis,localAxis,-1);
    }

    var closestEdge = -1,
        N = c.vertices.length,
        maxDot = -1;
    for(var i=0; i!==N; i++){
        // Get the edge
        sub(edge, c.vertices[(i+1)%N], c.vertices[i%N]);

        // Get normal - just rotate 90 degrees since vertices are given in CCW
        vec2.rotate90cw(normal, edge);
        vec2.normalize(normal,normal);

        var d = dot(normal,localAxis);
        if(closestEdge === -1 || d > maxDot){
            closestEdge = i % N;
            maxDot = d;
        }
    }

    return closestEdge;
};

var circleHeightfield_candidate = vec2.create(),
    circleHeightfield_dist = vec2.create(),
    circleHeightfield_v0 = vec2.create(),
    circleHeightfield_v1 = vec2.create(),
    circleHeightfield_minCandidate = vec2.create(),
    circleHeightfield_worldNormal = vec2.create(),
    circleHeightfield_minCandidateNormal = vec2.create();

/**
 * @method circleHeightfield
 * @param  {Body}           bi
 * @param  {Circle}         si
 * @param  {Array}          xi
 * @param  {Body}           bj
 * @param  {Heightfield}    sj
 * @param  {Array}          xj
 * @param  {Number}         aj
 */
Narrowphase.prototype[Shape.CIRCLE | Shape.HEIGHTFIELD] =
Narrowphase.prototype.circleHeightfield = function( circleBody,circleShape,circlePos,circleAngle,
                                                    hfBody,hfShape,hfPos,hfAngle, justTest, radius ){
    var data = hfShape.heights,
        radius = radius || circleShape.radius,
        w = hfShape.elementWidth,
        dist = circleHeightfield_dist,
        candidate = circleHeightfield_candidate,
        minCandidate = circleHeightfield_minCandidate,
        minCandidateNormal = circleHeightfield_minCandidateNormal,
        worldNormal = circleHeightfield_worldNormal,
        v0 = circleHeightfield_v0,
        v1 = circleHeightfield_v1;

    // Get the index of the points to test against
    var idxA = Math.floor( (circlePos[0] - radius - hfPos[0]) / w ),
        idxB = Math.ceil(  (circlePos[0] + radius - hfPos[0]) / w );

    /*if(idxB < 0 || idxA >= data.length)
        return justTest ? false : 0;*/

    if(idxA < 0){
        idxA = 0;
    }
    if(idxB >= data.length){
        idxB = data.length-1;
    }

    // Get max and min
    var max = data[idxA],
        min = data[idxB];
    for(var i=idxA; i<idxB; i++){
        if(data[i] < min){
            min = data[i];
        }
        if(data[i] > max){
            max = data[i];
        }
    }

    if(circlePos[1]-radius > max){
        return justTest ? false : 0;
    }

    /*
    if(circlePos[1]+radius < min){
        // Below the minimum point... We can just guess.
        // TODO
    }
    */

    // 1. Check so center of circle is not inside the field. If it is, this wont work...
    // 2. For each edge
    // 2. 1. Get point on circle that is closest to the edge (scale normal with -radius)
    // 2. 2. Check if point is inside.

    var found = false;

    // Check all edges first
    for(var i=idxA; i<idxB; i++){

        // Get points
        vec2.set(v0,     i*w, data[i]  );
        vec2.set(v1, (i+1)*w, data[i+1]);
        vec2.add(v0,v0,hfPos);
        vec2.add(v1,v1,hfPos);

        // Get normal
        vec2.sub(worldNormal, v1, v0);
        vec2.rotate(worldNormal, worldNormal, Math.PI/2);
        vec2.normalize(worldNormal,worldNormal);

        // Get point on circle, closest to the edge
        vec2.scale(candidate,worldNormal,-radius);
        vec2.add(candidate,candidate,circlePos);

        // Distance from v0 to the candidate point
        vec2.sub(dist,candidate,v0);

        // Check if it is in the element "stick"
        var d = vec2.dot(dist,worldNormal);
        if(candidate[0] >= v0[0] && candidate[0] < v1[0] && d <= 0){

            if(justTest){
                return true;
            }

            found = true;

            // Store the candidate point, projected to the edge
            vec2.scale(dist,worldNormal,-d);
            vec2.add(minCandidate,candidate,dist);
            vec2.copy(minCandidateNormal,worldNormal);

            var c = this.createContactEquation(hfBody,circleBody,hfShape,circleShape);

            // Normal is out of the heightfield
            vec2.copy(c.normalA, minCandidateNormal);

            // Vector from circle to heightfield
            vec2.scale(c.contactPointB,  c.normalA, -radius);
            add(c.contactPointB, c.contactPointB, circlePos);
            sub(c.contactPointB, c.contactPointB, circleBody.position);

            vec2.copy(c.contactPointA, minCandidate);
            vec2.sub(c.contactPointA, c.contactPointA, hfBody.position);

            this.contactEquations.push(c);

            if(this.enableFriction){
                this.frictionEquations.push( this.createFrictionFromContact(c) );
            }
        }
    }

    // Check all vertices
    found = false;
    if(radius > 0){
        for(var i=idxA; i<=idxB; i++){

            // Get point
            vec2.set(v0, i*w, data[i]);
            vec2.add(v0,v0,hfPos);

            vec2.sub(dist, circlePos, v0);

            if(vec2.squaredLength(dist) < Math.pow(radius, 2)){

                if(justTest){
                    return true;
                }

                found = true;

                var c = this.createContactEquation(hfBody,circleBody,hfShape,circleShape);

                // Construct normal - out of heightfield
                vec2.copy(c.normalA, dist);
                vec2.normalize(c.normalA,c.normalA);

                vec2.scale(c.contactPointB, c.normalA, -radius);
                add(c.contactPointB, c.contactPointB, circlePos);
                sub(c.contactPointB, c.contactPointB, circleBody.position);

                sub(c.contactPointA, v0, hfPos);
                add(c.contactPointA, c.contactPointA, hfPos);
                sub(c.contactPointA, c.contactPointA, hfBody.position);

                this.contactEquations.push(c);

                if(this.enableFriction){
                    this.frictionEquations.push(this.createFrictionFromContact(c));
                }
            }
        }
    }

    if(found){
        return 1;
    }

    return 0;

};

var convexHeightfield_v0 = vec2.create(),
    convexHeightfield_v1 = vec2.create(),
    convexHeightfield_tilePos = vec2.create(),
    convexHeightfield_tempConvexShape = new Convex({ vertices: [vec2.create(),vec2.create(),vec2.create(),vec2.create()] });
/**
 * @method circleHeightfield
 * @param  {Body}           bi
 * @param  {Circle}         si
 * @param  {Array}          xi
 * @param  {Body}           bj
 * @param  {Heightfield}    sj
 * @param  {Array}          xj
 * @param  {Number}         aj
 */
Narrowphase.prototype[Shape.BOX | Shape.HEIGHTFIELD] =
Narrowphase.prototype[Shape.CONVEX | Shape.HEIGHTFIELD] =
Narrowphase.prototype.convexHeightfield = function( convexBody,convexShape,convexPos,convexAngle,
                                                    hfBody,hfShape,hfPos,hfAngle, justTest ){
    var data = hfShape.heights,
        w = hfShape.elementWidth,
        v0 = convexHeightfield_v0,
        v1 = convexHeightfield_v1,
        tilePos = convexHeightfield_tilePos,
        tileConvex = convexHeightfield_tempConvexShape;

    // Get the index of the points to test against
    var idxA = Math.floor( (convexBody.aabb.lowerBound[0] - hfPos[0]) / w ),
        idxB = Math.ceil(  (convexBody.aabb.upperBound[0] - hfPos[0]) / w );

    if(idxA < 0){
        idxA = 0;
    }
    if(idxB >= data.length){
        idxB = data.length-1;
    }

    // Get max and min
    var max = data[idxA],
        min = data[idxB];
    for(var i=idxA; i<idxB; i++){
        if(data[i] < min){
            min = data[i];
        }
        if(data[i] > max){
            max = data[i];
        }
    }

    if(convexBody.aabb.lowerBound[1] > max){
        return justTest ? false : 0;
    }

    var found = false;
    var numContacts = 0;

    // Loop over all edges
    // TODO: If possible, construct a convex from several data points (need o check if the points make a convex shape)
    for(var i=idxA; i<idxB; i++){

        // Get points
        vec2.set(v0,     i*w, data[i]  );
        vec2.set(v1, (i+1)*w, data[i+1]);
        vec2.add(v0,v0,hfPos);
        vec2.add(v1,v1,hfPos);

        // Construct a convex
        var tileHeight = 100; // todo
        vec2.set(tilePos, (v1[0] + v0[0])*0.5, (v1[1] + v0[1] - tileHeight)*0.5);

        vec2.sub(tileConvex.vertices[0], v1, tilePos);
        vec2.sub(tileConvex.vertices[1], v0, tilePos);
        vec2.copy(tileConvex.vertices[2], tileConvex.vertices[1]);
        vec2.copy(tileConvex.vertices[3], tileConvex.vertices[0]);
        tileConvex.vertices[2][1] -= tileHeight;
        tileConvex.vertices[3][1] -= tileHeight;

        // Do convex collision
        numContacts += this.convexConvex(   convexBody, convexShape, convexPos, convexAngle,
                                            hfBody, tileConvex, tilePos, 0, justTest);
    }

    return numContacts;
};
},{"../equations/ContactEquation":39,"../equations/Equation":40,"../equations/FrictionEquation":41,"../math/vec2":48,"../objects/Body":49,"../shapes/Box":55,"../shapes/Circle":57,"../shapes/Convex":58,"../shapes/Shape":63,"../utils/ContactEquationPool":66,"../utils/FrictionEquationPool":67,"../utils/TupleDictionary":74,"../utils/Utils":75}],29:[function(require,module,exports){
module.exports = Ray;

var vec2 = require('../math/vec2');
var RaycastResult = require('../collision/RaycastResult');
var Shape = require('../shapes/Shape');
var AABB = require('../collision/AABB');

/**
 * A line with a start and end point that is used to intersect shapes. For an example, see {{#crossLink "World/raycast:method"}}World.raycast{{/crossLink}}
 * @class Ray
 * @constructor
 * @param {object} [options]
 * @param {array} [options.from]
 * @param {array} [options.to]
 * @param {boolean} [options.checkCollisionResponse=true]
 * @param {boolean} [options.skipBackfaces=false]
 * @param {number} [options.collisionMask=-1]
 * @param {number} [options.collisionGroup=-1]
 * @param {number} [options.mode=Ray.ANY]
 * @param {number} [options.callback]
 */
function Ray(options){
    options = options || {};

    /**
     * Ray start point.
     * @property {array} from
     */
    this.from = options.from ? vec2.fromValues(options.from[0], options.from[1]) : vec2.create();

    /**
     * Ray end point
     * @property {array} to
     */
    this.to = options.to ? vec2.fromValues(options.to[0], options.to[1]) : vec2.create();

    /**
     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.
     * @property {Boolean} checkCollisionResponse
     */
    this.checkCollisionResponse = options.checkCollisionResponse !== undefined ? options.checkCollisionResponse : true;

    /**
     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.
     * @property {Boolean} skipBackfaces
     */
    this.skipBackfaces = !!options.skipBackfaces;

    /**
     * @property {number} collisionMask
     * @default -1
     */
    this.collisionMask = options.collisionMask !== undefined ? options.collisionMask : -1;

    /**
     * @property {number} collisionGroup
     * @default -1
     */
    this.collisionGroup = options.collisionGroup !== undefined ? options.collisionGroup : -1;

    /**
     * The intersection mode. Should be {{#crossLink "Ray/ANY:property"}}Ray.ANY{{/crossLink}}, {{#crossLink "Ray/ALL:property"}}Ray.ALL{{/crossLink}} or {{#crossLink "Ray/CLOSEST:property"}}Ray.CLOSEST{{/crossLink}}.
     * @property {number} mode
     */
    this.mode = options.mode !== undefined ? options.mode : Ray.ANY;

    /**
     * Current, user-provided result callback. Will be used if mode is Ray.ALL.
     * @property {Function} callback
     */
    this.callback = options.callback || function(result){};

    /**
     * @readOnly
     * @property {array} direction
     */
    this.direction = vec2.create();

    /**
     * Length of the ray
     * @readOnly
     * @property {number} length
     */
    this.length = 1;

    this.update();
}
Ray.prototype.constructor = Ray;

/**
 * This raycasting mode will make the Ray traverse through all intersection points and only return the closest one.
 * @static
 * @property {Number} CLOSEST
 */
Ray.CLOSEST = 1;

/**
 * This raycasting mode will make the Ray stop when it finds the first intersection point.
 * @static
 * @property {Number} ANY
 */
Ray.ANY = 2;

/**
 * This raycasting mode will traverse all intersection points and executes a callback for each one.
 * @static
 * @property {Number} ALL
 */
Ray.ALL = 4;

/**
 * Should be called if you change the from or to point.
 * @method update
 */
Ray.prototype.update = function(){

    // Update .direction and .length
    var d = this.direction;
    vec2.sub(d, this.to, this.from);
    this.length = vec2.length(d);
    vec2.normalize(d, d);

};

/**
 * @method intersectBodies
 * @param {Array} bodies An array of Body objects.
 */
Ray.prototype.intersectBodies = function (result, bodies) {
    for (var i = 0, l = bodies.length; !result.shouldStop(this) && i < l; i++) {
        var body = bodies[i];
        var aabb = body.getAABB();
        if(aabb.overlapsRay(this) >= 0 || aabb.containsPoint(this.from)){
            this.intersectBody(result, body);
        }
    }
};

var intersectBody_worldPosition = vec2.create();

/**
 * Shoot a ray at a body, get back information about the hit.
 * @method intersectBody
 * @private
 * @param {Body} body
 */
Ray.prototype.intersectBody = function (result, body) {
    var checkCollisionResponse = this.checkCollisionResponse;

    if(checkCollisionResponse && !body.collisionResponse){
        return;
    }

    var worldPosition = intersectBody_worldPosition;

    for (var i = 0, N = body.shapes.length; i < N; i++) {
        var shape = body.shapes[i];

        if(checkCollisionResponse && !shape.collisionResponse){
            continue; // Skip
        }

        if((this.collisionGroup & shape.collisionMask) === 0 || (shape.collisionGroup & this.collisionMask) === 0){
            continue;
        }

        // Get world angle and position of the shape
        vec2.rotate(worldPosition, shape.position, body.angle);
        vec2.add(worldPosition, worldPosition, body.position);
        var worldAngle = shape.angle + body.angle;

        this.intersectShape(
            result,
            shape,
            worldAngle,
            worldPosition,
            body
        );

        if(result.shouldStop(this)){
            break;
        }
    }
};

/**
 * @method intersectShape
 * @private
 * @param {Shape} shape
 * @param {number} angle
 * @param {array} position
 * @param {Body} body
 */
Ray.prototype.intersectShape = function(result, shape, angle, position, body){
    var from = this.from;

    // Checking radius
    var distance = distanceFromIntersectionSquared(from, this.direction, position);
    if (distance > shape.boundingRadius * shape.boundingRadius) {
        return;
    }

    this._currentBody = body;
    this._currentShape = shape;

    shape.raycast(result, this, position, angle);

    this._currentBody = this._currentShape = null;
};

/**
 * Get the AABB of the ray.
 * @method getAABB
 * @param  {AABB} aabb
 */
Ray.prototype.getAABB = function(result){
    var to = this.to;
    var from = this.from;
    vec2.set(
        result.lowerBound,
        Math.min(to[0], from[0]),
        Math.min(to[1], from[1])
    );
    vec2.set(
        result.upperBound,
        Math.max(to[0], from[0]),
        Math.max(to[1], from[1])
    );
};

var hitPointWorld = vec2.create();

/**
 * @method reportIntersection
 * @private
 * @param  {number} fraction
 * @param  {array} normal
 * @param  {number} [faceIndex=-1]
 * @return {boolean} True if the intersections should continue
 */
Ray.prototype.reportIntersection = function(result, fraction, normal, faceIndex){
    var from = this.from;
    var to = this.to;
    var shape = this._currentShape;
    var body = this._currentBody;

    // Skip back faces?
    if(this.skipBackfaces && vec2.dot(normal, this.direction) > 0){
        return;
    }

    switch(this.mode){

    case Ray.ALL:
        result.set(
            normal,
            shape,
            body,
            fraction,
            faceIndex
        );
        this.callback(result);
        break;

    case Ray.CLOSEST:

        // Store if closer than current closest
        if(fraction < result.fraction || !result.hasHit()){
            result.set(
                normal,
                shape,
                body,
                fraction,
                faceIndex
            );
        }
        break;

    case Ray.ANY:

        // Report and stop.
        result.set(
            normal,
            shape,
            body,
            fraction,
            faceIndex
        );
        break;
    }
};

var v0 = vec2.create(),
    intersect = vec2.create();
function distanceFromIntersectionSquared(from, direction, position) {

    // v0 is vector from from to position
    vec2.sub(v0, position, from);
    var dot = vec2.dot(v0, direction);

    // intersect = direction * dot + from
    vec2.scale(intersect, direction, dot);
    vec2.add(intersect, intersect, from);

    return vec2.squaredDistance(position, intersect);
}


},{"../collision/AABB":25,"../collision/RaycastResult":30,"../math/vec2":48,"../shapes/Shape":63}],30:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Ray = require('../collision/Ray');

module.exports = RaycastResult;

/**
 * Storage for Ray casting hit data.
 * @class RaycastResult
 * @constructor
 */
function RaycastResult(){

	/**
	 * The normal of the hit, oriented in world space.
	 * @property {array} normal
	 */
	this.normal = vec2.create();

	/**
	 * The hit shape, or null.
	 * @property {Shape} shape
	 */
	this.shape = null;

	/**
	 * The hit body, or null.
	 * @property {Body} body
	 */
	this.body = null;

	/**
	 * The index of the hit triangle, if the hit shape was indexable.
	 * @property {number} faceIndex
	 * @default -1
	 */
	this.faceIndex = -1;

	/**
	 * Distance to the hit, as a fraction. 0 is at the "from" point, 1 is at the "to" point. Will be set to -1 if there was no hit yet.
	 * @property {number} fraction
	 * @default -1
	 */
	this.fraction = -1;

	/**
	 * If the ray should stop traversing.
	 * @readonly
	 * @property {Boolean} isStopped
	 */
	this.isStopped = false;
}

/**
 * Reset all result data. Must be done before re-using the result object.
 * @method reset
 */
RaycastResult.prototype.reset = function () {
	vec2.set(this.normal, 0, 0);
	this.shape = null;
	this.body = null;
	this.faceIndex = -1;
	this.fraction = -1;
	this.isStopped = false;
};

/**
 * Get the distance to the hit point.
 * @method getHitDistance
 * @param {Ray} ray
 */
RaycastResult.prototype.getHitDistance = function (ray) {
	return vec2.distance(ray.from, ray.to) * this.fraction;
};

/**
 * Returns true if the ray hit something since the last reset().
 * @method hasHit
 */
RaycastResult.prototype.hasHit = function () {
	return this.fraction !== -1;
};

/**
 * Get world hit point.
 * @method getHitPoint
 * @param {array} out
 * @param {Ray} ray
 */
RaycastResult.prototype.getHitPoint = function (out, ray) {
	vec2.lerp(out, ray.from, ray.to, this.fraction);
};

/**
 * Can be called while iterating over hits to stop searching for hit points.
 * @method stop
 */
RaycastResult.prototype.stop = function(){
	this.isStopped = true;
};

/**
 * @method shouldStop
 * @private
 * @param {Ray} ray
 * @return {boolean}
 */
RaycastResult.prototype.shouldStop = function(ray){
	return this.isStopped || (this.fraction !== -1 && ray.mode === Ray.ANY);
};

/**
 * @method set
 * @private
 * @param {array} normal
 * @param {Shape} shape
 * @param {Body} body
 * @param {number} fraction
 */
RaycastResult.prototype.set = function(
	normal,
	shape,
	body,
	fraction,
	faceIndex
){
	vec2.copy(this.normal, normal);
	this.shape = shape;
	this.body = body;
	this.fraction = fraction;
	this.faceIndex = faceIndex;
};
},{"../collision/Ray":29,"../math/vec2":48}],31:[function(require,module,exports){
var Utils = require('../utils/Utils')
,   Broadphase = require('../collision/Broadphase');

module.exports = SAPBroadphase;

/**
 * Sweep and prune broadphase along one axis.
 *
 * @class SAPBroadphase
 * @constructor
 * @extends Broadphase
 */
function SAPBroadphase(){
    Broadphase.call(this,Broadphase.SAP);

    /**
     * List of bodies currently in the broadphase.
     * @property axisList
     * @type {Array}
     */
    this.axisList = [];

    /**
     * The axis to sort along. 0 means x-axis and 1 y-axis. If your bodies are more spread out over the X axis, set axisIndex to 0, and you will gain some performance.
     * @property axisIndex
     * @type {Number}
     */
    this.axisIndex = 0;

    var that = this;
    this._addBodyHandler = function(e){
        that.axisList.push(e.body);
    };

    this._removeBodyHandler = function(e){
        // Remove from list
        var idx = that.axisList.indexOf(e.body);
        if(idx !== -1){
            that.axisList.splice(idx,1);
        }
    };
}
SAPBroadphase.prototype = new Broadphase();
SAPBroadphase.prototype.constructor = SAPBroadphase;

/**
 * Change the world
 * @method setWorld
 * @param {World} world
 */
SAPBroadphase.prototype.setWorld = function(world){
    // Clear the old axis array
    this.axisList.length = 0;

    // Add all bodies from the new world
    Utils.appendArray(this.axisList, world.bodies);

    // Remove old handlers, if any
    world
        .off("addBody",this._addBodyHandler)
        .off("removeBody",this._removeBodyHandler);

    // Add handlers to update the list of bodies.
    world.on("addBody",this._addBodyHandler).on("removeBody",this._removeBodyHandler);

    this.world = world;
};

/**
 * Sorts bodies along an axis.
 * @method sortAxisList
 * @param {Array} a
 * @param {number} axisIndex
 * @return {Array}
 */
SAPBroadphase.sortAxisList = function(a, axisIndex){
    axisIndex = axisIndex|0;
    for(var i=1,l=a.length; i<l; i++) {
        var v = a[i];
        for(var j=i - 1;j>=0;j--) {
            if(a[j].aabb.lowerBound[axisIndex] <= v.aabb.lowerBound[axisIndex]){
                break;
            }
            a[j+1] = a[j];
        }
        a[j+1] = v;
    }
    return a;
};

SAPBroadphase.prototype.sortList = function(){
    var bodies = this.axisList,
    axisIndex = this.axisIndex;

    // Sort the lists
    SAPBroadphase.sortAxisList(bodies, axisIndex);
};

/**
 * Get the colliding pairs
 * @method getCollisionPairs
 * @param  {World} world
 * @return {Array}
 */
SAPBroadphase.prototype.getCollisionPairs = function(world){
    var bodies = this.axisList,
        result = this.result,
        axisIndex = this.axisIndex;

    result.length = 0;

    // Update all AABBs if needed
    var l = bodies.length;
    while(l--){
        var b = bodies[l];
        if(b.aabbNeedsUpdate){
            b.updateAABB();
        }
    }

    // Sort the lists
    this.sortList();

    // Look through the X list
    for(var i=0, N=bodies.length|0; i!==N; i++){
        var bi = bodies[i];

        for(var j=i+1; j<N; j++){
            var bj = bodies[j];

            // Bounds overlap?
            var overlaps = (bj.aabb.lowerBound[axisIndex] <= bi.aabb.upperBound[axisIndex]);
            if(!overlaps){
                break;
            }

            if(Broadphase.canCollide(bi,bj) && this.boundingVolumeCheck(bi,bj)){
                result.push(bi,bj);
            }
        }
    }

    return result;
};

/**
 * Returns all the bodies within an AABB.
 * @method aabbQuery
 * @param  {World} world
 * @param  {AABB} aabb
 * @param {array} result An array to store resulting bodies in.
 * @return {array}
 */
SAPBroadphase.prototype.aabbQuery = function(world, aabb, result){
    result = result || [];

    this.sortList();

    var axisIndex = this.axisIndex;
    var axis = 'x';
    if(axisIndex === 1){ axis = 'y'; }
    if(axisIndex === 2){ axis = 'z'; }

    var axisList = this.axisList;
    var lower = aabb.lowerBound[axis];
    var upper = aabb.upperBound[axis];
    for(var i = 0; i < axisList.length; i++){
        var b = axisList[i];

        if(b.aabbNeedsUpdate){
            b.updateAABB();
        }

        if(b.aabb.overlaps(aabb)){
            result.push(b);
        }
    }

    return result;
};
},{"../collision/Broadphase":26,"../utils/Utils":75}],32:[function(require,module,exports){
module.exports = Constraint;

var Utils = require('../utils/Utils');

/**
 * Base constraint class.
 *
 * @class Constraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} type
 * @param {Object} [options]
 * @param {Object} [options.collideConnected=true]
 */
function Constraint(bodyA, bodyB, type, options){

    /**
     * The type of constraint. May be one of Constraint.DISTANCE, Constraint.GEAR, Constraint.LOCK, Constraint.PRISMATIC or Constraint.REVOLUTE.
     * @property {number} type
     */
    this.type = type;

    options = Utils.defaults(options,{
        collideConnected : true,
        wakeUpBodies : true,
    });

    /**
     * Equations to be solved in this constraint
     *
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * First body participating in the constraint.
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second body participating in the constraint.
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;

    /**
     * Set to true if you want the connected bodies to collide.
     * @property collideConnected
     * @type {Boolean}
     * @default true
     */
    this.collideConnected = options.collideConnected;

    // Wake up bodies when connected
    if(options.wakeUpBodies){
        if(bodyA){
            bodyA.wakeUp();
        }
        if(bodyB){
            bodyB.wakeUp();
        }
    }
}

/**
 * Updates the internal constraint parameters before solve.
 * @method update
 */
Constraint.prototype.update = function(){
    throw new Error("method update() not implmemented in this Constraint subclass!");
};

/**
 * @static
 * @property {number} DISTANCE
 */
Constraint.DISTANCE = 1;

/**
 * @static
 * @property {number} GEAR
 */
Constraint.GEAR = 2;

/**
 * @static
 * @property {number} LOCK
 */
Constraint.LOCK = 3;

/**
 * @static
 * @property {number} PRISMATIC
 */
Constraint.PRISMATIC = 4;

/**
 * @static
 * @property {number} REVOLUTE
 */
Constraint.REVOLUTE = 5;

/**
 * Set stiffness for this constraint.
 * @method setStiffness
 * @param {Number} stiffness
 */
Constraint.prototype.setStiffness = function(stiffness){
    var eqs = this.equations;
    for(var i=0; i !== eqs.length; i++){
        var eq = eqs[i];
        eq.stiffness = stiffness;
        eq.needsUpdate = true;
    }
};

/**
 * Set relaxation for this constraint.
 * @method setRelaxation
 * @param {Number} relaxation
 */
Constraint.prototype.setRelaxation = function(relaxation){
    var eqs = this.equations;
    for(var i=0; i !== eqs.length; i++){
        var eq = eqs[i];
        eq.relaxation = relaxation;
        eq.needsUpdate = true;
    }
};

},{"../utils/Utils":75}],33:[function(require,module,exports){
var Constraint = require('./Constraint')
,   Equation = require('../equations/Equation')
,   vec2 = require('../math/vec2')
,   Utils = require('../utils/Utils');

module.exports = DistanceConstraint;

/**
 * Constraint that tries to keep the distance between two bodies constant.
 *
 * @class DistanceConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {object} [options]
 * @param {number} [options.distance] The distance to keep between the anchor points. Defaults to the current distance between the bodies.
 * @param {Array} [options.localAnchorA] The anchor point for bodyA, defined locally in bodyA frame. Defaults to [0,0].
 * @param {Array} [options.localAnchorB] The anchor point for bodyB, defined locally in bodyB frame. Defaults to [0,0].
 * @param {object} [options.maxForce=Number.MAX_VALUE] Maximum force to apply.
 * @extends Constraint
 *
 * @example
 *     // If distance is not given as an option, then the current distance between the bodies is used.
 *     // In this example, the bodies will be constrained to have a distance of 2 between their centers.
 *     var bodyA = new Body({ mass: 1, position: [-1, 0] });
 *     var bodyB = new Body({ mass: 1, position: [1, 0] });
 *     var constraint = new DistanceConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 *
 * @example
 *     // Manually set the distance and anchors
 *     var constraint = new DistanceConstraint(bodyA, bodyB, {
 *         distance: 1,          // Distance to keep between the points
 *         localAnchorA: [1, 0], // Point on bodyA
 *         localAnchorB: [-1, 0] // Point on bodyB
 *     });
 *     world.addConstraint(constraint);
 */
function DistanceConstraint(bodyA,bodyB,options){
    options = Utils.defaults(options,{
        localAnchorA:[0,0],
        localAnchorB:[0,0]
    });

    Constraint.call(this,bodyA,bodyB,Constraint.DISTANCE,options);

    /**
     * Local anchor in body A.
     * @property localAnchorA
     * @type {Array}
     */
    this.localAnchorA = vec2.fromValues(options.localAnchorA[0], options.localAnchorA[1]);

    /**
     * Local anchor in body B.
     * @property localAnchorB
     * @type {Array}
     */
    this.localAnchorB = vec2.fromValues(options.localAnchorB[0], options.localAnchorB[1]);

    var localAnchorA = this.localAnchorA;
    var localAnchorB = this.localAnchorB;

    /**
     * The distance to keep.
     * @property distance
     * @type {Number}
     */
    this.distance = 0;

    if(typeof(options.distance) === 'number'){
        this.distance = options.distance;
    } else {
        // Use the current world distance between the world anchor points.
        var worldAnchorA = vec2.create(),
            worldAnchorB = vec2.create(),
            r = vec2.create();

        // Transform local anchors to world
        vec2.rotate(worldAnchorA, localAnchorA, bodyA.angle);
        vec2.rotate(worldAnchorB, localAnchorB, bodyB.angle);

        vec2.add(r, bodyB.position, worldAnchorB);
        vec2.sub(r, r, worldAnchorA);
        vec2.sub(r, r, bodyA.position);

        this.distance = vec2.length(r);
    }

    var maxForce;
    if(typeof(options.maxForce)==="undefined" ){
        maxForce = Number.MAX_VALUE;
    } else {
        maxForce = options.maxForce;
    }

    var normal = new Equation(bodyA,bodyB,-maxForce,maxForce); // Just in the normal direction
    this.equations = [ normal ];

    /**
     * Max force to apply.
     * @property {number} maxForce
     */
    this.maxForce = maxForce;

    // g = (xi - xj).dot(n)
    // dg/dt = (vi - vj).dot(n) = G*W = [n 0 -n 0] * [vi wi vj wj]'

    // ...and if we were to include offset points:
    // g =
    //      (xj + rj - xi - ri).dot(n) - distance
    //
    // dg/dt =
    //      (vj + wj x rj - vi - wi x ri).dot(n) =
    //      { term 2 is near zero } =
    //      [-n   -ri x n   n   rj x n] * [vi wi vj wj]' =
    //      G * W
    //
    // => G = [-n -rixn n rjxn]

    var r = vec2.create();
    var ri = vec2.create(); // worldAnchorA
    var rj = vec2.create(); // worldAnchorB
    var that = this;
    normal.computeGq = function(){
        var bodyA = this.bodyA,
            bodyB = this.bodyB,
            xi = bodyA.position,
            xj = bodyB.position;

        // Transform local anchors to world
        vec2.rotate(ri, localAnchorA, bodyA.angle);
        vec2.rotate(rj, localAnchorB, bodyB.angle);

        vec2.add(r, xj, rj);
        vec2.sub(r, r, ri);
        vec2.sub(r, r, xi);

        //vec2.sub(r, bodyB.position, bodyA.position);
        return vec2.length(r) - that.distance;
    };

    // Make the contact constraint bilateral
    this.setMaxForce(maxForce);

    /**
     * If the upper limit is enabled or not.
     * @property {Boolean} upperLimitEnabled
     */
    this.upperLimitEnabled = false;

    /**
     * The upper constraint limit.
     * @property {number} upperLimit
     */
    this.upperLimit = 1;

    /**
     * If the lower limit is enabled or not.
     * @property {Boolean} lowerLimitEnabled
     */
    this.lowerLimitEnabled = false;

    /**
     * The lower constraint limit.
     * @property {number} lowerLimit
     */
    this.lowerLimit = 0;

    /**
     * Current constraint position. This is equal to the current distance between the world anchor points.
     * @property {number} position
     */
    this.position = 0;
}
DistanceConstraint.prototype = new Constraint();
DistanceConstraint.prototype.constructor = DistanceConstraint;

/**
 * Update the constraint equations. Should be done if any of the bodies changed position, before solving.
 * @method update
 */
var n = vec2.create();
var ri = vec2.create(); // worldAnchorA
var rj = vec2.create(); // worldAnchorB
DistanceConstraint.prototype.update = function(){
    var normal = this.equations[0],
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        distance = this.distance,
        xi = bodyA.position,
        xj = bodyB.position,
        normalEquation = this.equations[0],
        G = normal.G;

    // Transform local anchors to world
    vec2.rotate(ri, this.localAnchorA, bodyA.angle);
    vec2.rotate(rj, this.localAnchorB, bodyB.angle);

    // Get world anchor points and normal
    vec2.add(n, xj, rj);
    vec2.sub(n, n, ri);
    vec2.sub(n, n, xi);
    this.position = vec2.length(n);

    var violating = false;
    if(this.upperLimitEnabled){
        if(this.position > this.upperLimit){
            normalEquation.maxForce = 0;
            normalEquation.minForce = -this.maxForce;
            this.distance = this.upperLimit;
            violating = true;
        }
    }

    if(this.lowerLimitEnabled){
        if(this.position < this.lowerLimit){
            normalEquation.maxForce = this.maxForce;
            normalEquation.minForce = 0;
            this.distance = this.lowerLimit;
            violating = true;
        }
    }

    if((this.lowerLimitEnabled || this.upperLimitEnabled) && !violating){
        // No constraint needed.
        normalEquation.enabled = false;
        return;
    }

    normalEquation.enabled = true;

    vec2.normalize(n,n);

    // Caluclate cross products
    var rixn = vec2.crossLength(ri, n),
        rjxn = vec2.crossLength(rj, n);

    // G = [-n -rixn n rjxn]
    G[0] = -n[0];
    G[1] = -n[1];
    G[2] = -rixn;
    G[3] = n[0];
    G[4] = n[1];
    G[5] = rjxn;
};

/**
 * Set the max force to be used
 * @method setMaxForce
 * @param {Number} maxForce
 */
DistanceConstraint.prototype.setMaxForce = function(maxForce){
    var normal = this.equations[0];
    normal.minForce = -maxForce;
    normal.maxForce =  maxForce;
};

/**
 * Get the max force
 * @method getMaxForce
 * @return {Number}
 */
DistanceConstraint.prototype.getMaxForce = function(){
    var normal = this.equations[0];
    return normal.maxForce;
};

},{"../equations/Equation":40,"../math/vec2":48,"../utils/Utils":75,"./Constraint":32}],34:[function(require,module,exports){
var Constraint = require('./Constraint')
,   Equation = require('../equations/Equation')
,   AngleLockEquation = require('../equations/AngleLockEquation')
,   vec2 = require('../math/vec2');

module.exports = GearConstraint;

/**
 * Constrains the angle of two bodies to each other to be equal. If a gear ratio is not one, the angle of bodyA must be a multiple of the angle of bodyB.
 * @class GearConstraint
 * @constructor
 * @author schteppe
 * @param {Body}            bodyA
 * @param {Body}            bodyB
 * @param {Object}          [options]
 * @param {Number}          [options.angle=0] Relative angle between the bodies. Will be set to the current angle between the bodies (the gear ratio is accounted for).
 * @param {Number}          [options.ratio=1] Gear ratio.
 * @param {Number}          [options.maxTorque] Maximum torque to apply.
 * @extends Constraint
 *
 * @example
 *     var constraint = new GearConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 *
 * @example
 *     var constraint = new GearConstraint(bodyA, bodyB, {
 *         ratio: 2,
 *         maxTorque: 1000
 *     });
 *     world.addConstraint(constraint);
 */
function GearConstraint(bodyA, bodyB, options){
    options = options || {};

    Constraint.call(this, bodyA, bodyB, Constraint.GEAR, options);

    /**
     * The gear ratio.
     * @property ratio
     * @type {Number}
     */
    this.ratio = options.ratio !== undefined ? options.ratio : 1;

    /**
     * The relative angle
     * @property angle
     * @type {Number}
     */
    this.angle = options.angle !== undefined ? options.angle : bodyB.angle - this.ratio * bodyA.angle;

    // Send same parameters to the equation
    options.angle = this.angle;
    options.ratio = this.ratio;

    this.equations = [
        new AngleLockEquation(bodyA,bodyB,options),
    ];

    // Set max torque
    if(options.maxTorque !== undefined){
        this.setMaxTorque(options.maxTorque);
    }
}
GearConstraint.prototype = new Constraint();
GearConstraint.prototype.constructor = GearConstraint;

GearConstraint.prototype.update = function(){
    var eq = this.equations[0];
    if(eq.ratio !== this.ratio){
        eq.setRatio(this.ratio);
    }
    eq.angle = this.angle;
};

/**
 * Set the max torque for the constraint.
 * @method setMaxTorque
 * @param {Number} torque
 */
GearConstraint.prototype.setMaxTorque = function(torque){
    this.equations[0].setMaxTorque(torque);
};

/**
 * Get the max torque for the constraint.
 * @method getMaxTorque
 * @return {Number}
 */
GearConstraint.prototype.getMaxTorque = function(torque){
    return this.equations[0].maxForce;
};
},{"../equations/AngleLockEquation":38,"../equations/Equation":40,"../math/vec2":48,"./Constraint":32}],35:[function(require,module,exports){
var Constraint = require('./Constraint')
,   vec2 = require('../math/vec2')
,   Equation = require('../equations/Equation');

module.exports = LockConstraint;

/**
 * Locks the relative position and rotation between two bodies.
 *
 * @class LockConstraint
 * @constructor
 * @author schteppe
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {Array}  [options.localOffsetB] The offset of bodyB in bodyA's frame. If not given the offset is computed from current positions.
 * @param {number} [options.localAngleB] The angle of bodyB in bodyA's frame. If not given, the angle is computed from current angles.
 * @param {number} [options.maxForce]
 * @extends Constraint
 *
 * @example
 *     // Locks the relative position and rotation between bodyA and bodyB
 *     var constraint = new LockConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 */
function LockConstraint(bodyA, bodyB, options){
    options = options || {};

    Constraint.call(this,bodyA,bodyB,Constraint.LOCK,options);

    var maxForce = ( typeof(options.maxForce)==="undefined" ? Number.MAX_VALUE : options.maxForce );

    var localAngleB = options.localAngleB || 0;

    // Use 3 equations:
    // gx =   (xj - xi - l) * xhat = 0
    // gy =   (xj - xi - l) * yhat = 0
    // gr =   (xi - xj + r) * that = 0
    //
    // ...where:
    //   l is the localOffsetB vector rotated to world in bodyA frame
    //   r is the same vector but reversed and rotated from bodyB frame
    //   xhat, yhat are world axis vectors
    //   that is the tangent of r
    //
    // For the first two constraints, we get
    // G*W = (vj - vi - ldot  ) * xhat
    //     = (vj - vi - wi x l) * xhat
    //
    // Since (wi x l) * xhat = (l x xhat) * wi, we get
    // G*W = [ -1   0   (-l x xhat)  1   0   0] * [vi wi vj wj]
    //
    // The last constraint gives
    // GW = (vi - vj + wj x r) * that
    //    = [  that   0  -that  (r x t) ]

    var x =     new Equation(bodyA,bodyB,-maxForce,maxForce),
        y =     new Equation(bodyA,bodyB,-maxForce,maxForce),
        rot =   new Equation(bodyA,bodyB,-maxForce,maxForce);

    var l = vec2.create(),
        g = vec2.create(),
        that = this;
    x.computeGq = function(){
        vec2.rotate(l, that.localOffsetB, bodyA.angle);
        vec2.sub(g, bodyB.position, bodyA.position);
        vec2.sub(g, g, l);
        return g[0];
    };
    y.computeGq = function(){
        vec2.rotate(l, that.localOffsetB, bodyA.angle);
        vec2.sub(g, bodyB.position, bodyA.position);
        vec2.sub(g, g, l);
        return g[1];
    };
    var r = vec2.create(),
        t = vec2.create();
    rot.computeGq = function(){
        vec2.rotate(r, that.localOffsetB, bodyB.angle - that.localAngleB);
        vec2.scale(r,r,-1);
        vec2.sub(g,bodyA.position,bodyB.position);
        vec2.add(g,g,r);
        vec2.rotate(t,r,-Math.PI/2);
        vec2.normalize(t,t);
        return vec2.dot(g,t);
    };

    /**
     * The offset of bodyB in bodyA's frame.
     * @property {Array} localOffsetB
     */
    this.localOffsetB = vec2.create();
    if(options.localOffsetB){
        vec2.copy(this.localOffsetB, options.localOffsetB);
    } else {
        // Construct from current positions
        vec2.sub(this.localOffsetB, bodyB.position, bodyA.position);
        vec2.rotate(this.localOffsetB, this.localOffsetB, -bodyA.angle);
    }

    /**
     * The offset angle of bodyB in bodyA's frame.
     * @property {Number} localAngleB
     */
    this.localAngleB = 0;
    if(typeof(options.localAngleB) === 'number'){
        this.localAngleB = options.localAngleB;
    } else {
        // Construct
        this.localAngleB = bodyB.angle - bodyA.angle;
    }

    this.equations.push(x, y, rot);
    this.setMaxForce(maxForce);
}
LockConstraint.prototype = new Constraint();
LockConstraint.prototype.constructor = LockConstraint;

/**
 * Set the maximum force to be applied.
 * @method setMaxForce
 * @param {Number} force
 */
LockConstraint.prototype.setMaxForce = function(force){
    var eqs = this.equations;
    for(var i=0; i<this.equations.length; i++){
        eqs[i].maxForce =  force;
        eqs[i].minForce = -force;
    }
};

/**
 * Get the max force.
 * @method getMaxForce
 * @return {Number}
 */
LockConstraint.prototype.getMaxForce = function(){
    return this.equations[0].maxForce;
};

var l = vec2.create();
var r = vec2.create();
var t = vec2.create();
var xAxis = vec2.fromValues(1,0);
var yAxis = vec2.fromValues(0,1);
LockConstraint.prototype.update = function(){
    var x =   this.equations[0],
        y =   this.equations[1],
        rot = this.equations[2],
        bodyA = this.bodyA,
        bodyB = this.bodyB;

    vec2.rotate(l,this.localOffsetB,bodyA.angle);
    vec2.rotate(r,this.localOffsetB,bodyB.angle - this.localAngleB);
    vec2.scale(r,r,-1);

    vec2.rotate(t,r,Math.PI/2);
    vec2.normalize(t,t);

    x.G[0] = -1;
    x.G[1] =  0;
    x.G[2] = -vec2.crossLength(l,xAxis);
    x.G[3] =  1;

    y.G[0] =  0;
    y.G[1] = -1;
    y.G[2] = -vec2.crossLength(l,yAxis);
    y.G[4] =  1;

    rot.G[0] =  -t[0];
    rot.G[1] =  -t[1];
    rot.G[3] =  t[0];
    rot.G[4] =  t[1];
    rot.G[5] =  vec2.crossLength(r,t);
};

},{"../equations/Equation":40,"../math/vec2":48,"./Constraint":32}],36:[function(require,module,exports){
var Constraint = require('./Constraint')
,   ContactEquation = require('../equations/ContactEquation')
,   Equation = require('../equations/Equation')
,   vec2 = require('../math/vec2')
,   RotationalLockEquation = require('../equations/RotationalLockEquation');

module.exports = PrismaticConstraint;

/**
 * Constraint that only allows bodies to move along a line, relative to each other. See <a href="http://www.iforce2d.net/b2dtut/joints-prismatic">this tutorial</a>. Also called "slider constraint".
 *
 * @class PrismaticConstraint
 * @constructor
 * @extends Constraint
 * @author schteppe
 * @param {Body}    bodyA
 * @param {Body}    bodyB
 * @param {Object}  [options]
 * @param {Number}  [options.maxForce]                Max force to be applied by the constraint
 * @param {Array}   [options.localAnchorA]            Body A's anchor point, defined in its own local frame.
 * @param {Array}   [options.localAnchorB]            Body B's anchor point, defined in its own local frame.
 * @param {Array}   [options.localAxisA]              An axis, defined in body A frame, that body B's anchor point may slide along.
 * @param {Boolean} [options.disableRotationalLock]   If set to true, bodyB will be free to rotate around its anchor point.
 * @param {Number}  [options.upperLimit]
 * @param {Number}  [options.lowerLimit]
 * @todo Ability to create using only a point and a worldAxis
 */
function PrismaticConstraint(bodyA, bodyB, options){
    options = options || {};
    Constraint.call(this,bodyA,bodyB,Constraint.PRISMATIC,options);

    // Get anchors
    var localAnchorA = vec2.fromValues(0,0),
        localAxisA = vec2.fromValues(1,0),
        localAnchorB = vec2.fromValues(0,0);
    if(options.localAnchorA){ vec2.copy(localAnchorA, options.localAnchorA); }
    if(options.localAxisA){ vec2.copy(localAxisA,   options.localAxisA); }
    if(options.localAnchorB){ vec2.copy(localAnchorB, options.localAnchorB); }

    /**
     * @property localAnchorA
     * @type {Array}
     */
    this.localAnchorA = localAnchorA;

    /**
     * @property localAnchorB
     * @type {Array}
     */
    this.localAnchorB = localAnchorB;

    /**
     * @property localAxisA
     * @type {Array}
     */
    this.localAxisA = localAxisA;

    /*

    The constraint violation for the common axis point is

        g = ( xj + rj - xi - ri ) * t   :=  gg*t

    where r are body-local anchor points, and t is a tangent to the constraint axis defined in body i frame.

        gdot =  ( vj + wj x rj - vi - wi x ri ) * t + ( xj + rj - xi - ri ) * ( wi x t )

    Note the use of the chain rule. Now we identify the jacobian

        G*W = [ -t      -ri x t + t x gg     t    rj x t ] * [vi wi vj wj]

    The rotational part is just a rotation lock.

     */

    var maxForce = this.maxForce = typeof(options.maxForce)!=="undefined" ? options.maxForce : Number.MAX_VALUE;

    // Translational part
    var trans = new Equation(bodyA,bodyB,-maxForce,maxForce);
    var ri = new vec2.create(),
        rj = new vec2.create(),
        gg = new vec2.create(),
        t =  new vec2.create();
    trans.computeGq = function(){
        // g = ( xj + rj - xi - ri ) * t
        return vec2.dot(gg,t);
    };
    trans.updateJacobian = function(){
        var G = this.G,
            xi = bodyA.position,
            xj = bodyB.position;
        vec2.rotate(ri,localAnchorA,bodyA.angle);
        vec2.rotate(rj,localAnchorB,bodyB.angle);
        vec2.add(gg,xj,rj);
        vec2.sub(gg,gg,xi);
        vec2.sub(gg,gg,ri);
        vec2.rotate(t,localAxisA,bodyA.angle+Math.PI/2);

        G[0] = -t[0];
        G[1] = -t[1];
        G[2] = -vec2.crossLength(ri,t) + vec2.crossLength(t,gg);
        G[3] = t[0];
        G[4] = t[1];
        G[5] = vec2.crossLength(rj,t);
    };
    this.equations.push(trans);

    // Rotational part
    if(!options.disableRotationalLock){
        var rot = new RotationalLockEquation(bodyA,bodyB,-maxForce,maxForce);
        this.equations.push(rot);
    }

    /**
     * The position of anchor A relative to anchor B, along the constraint axis.
     * @property position
     * @type {Number}
     */
    this.position = 0;

    // Is this one used at all?
    this.velocity = 0;

    /**
     * Set to true to enable lower limit.
     * @property lowerLimitEnabled
     * @type {Boolean}
     */
    this.lowerLimitEnabled = typeof(options.lowerLimit)!=="undefined" ? true : false;

    /**
     * Set to true to enable upper limit.
     * @property upperLimitEnabled
     * @type {Boolean}
     */
    this.upperLimitEnabled = typeof(options.upperLimit)!=="undefined" ? true : false;

    /**
     * Lower constraint limit. The constraint position is forced to be larger than this value.
     * @property lowerLimit
     * @type {Number}
     */
    this.lowerLimit = typeof(options.lowerLimit)!=="undefined" ? options.lowerLimit : 0;

    /**
     * Upper constraint limit. The constraint position is forced to be smaller than this value.
     * @property upperLimit
     * @type {Number}
     */
    this.upperLimit = typeof(options.upperLimit)!=="undefined" ? options.upperLimit : 1;

    // Equations used for limits
    this.upperLimitEquation = new ContactEquation(bodyA,bodyB);
    this.lowerLimitEquation = new ContactEquation(bodyA,bodyB);

    // Set max/min forces
    this.upperLimitEquation.minForce = this.lowerLimitEquation.minForce = 0;
    this.upperLimitEquation.maxForce = this.lowerLimitEquation.maxForce = maxForce;

    /**
     * Equation used for the motor.
     * @property motorEquation
     * @type {Equation}
     */
    this.motorEquation = new Equation(bodyA,bodyB);

    /**
     * The current motor state. Enable or disable the motor using .enableMotor
     * @property motorEnabled
     * @type {Boolean}
     */
    this.motorEnabled = false;

    /**
     * Set the target speed for the motor.
     * @property motorSpeed
     * @type {Number}
     */
    this.motorSpeed = 0;

    var that = this;
    var motorEquation = this.motorEquation;
    var old = motorEquation.computeGW;
    motorEquation.computeGq = function(){ return 0; };
    motorEquation.computeGW = function(){
        var G = this.G,
            bi = this.bodyA,
            bj = this.bodyB,
            vi = bi.velocity,
            vj = bj.velocity,
            wi = bi.angularVelocity,
            wj = bj.angularVelocity;
        return this.gmult(G,vi,wi,vj,wj) + that.motorSpeed;
    };
}

PrismaticConstraint.prototype = new Constraint();
PrismaticConstraint.prototype.constructor = PrismaticConstraint;

var worldAxisA = vec2.create(),
    worldAnchorA = vec2.create(),
    worldAnchorB = vec2.create(),
    orientedAnchorA = vec2.create(),
    orientedAnchorB = vec2.create(),
    tmp = vec2.create();

/**
 * Update the constraint equations. Should be done if any of the bodies changed position, before solving.
 * @method update
 */
PrismaticConstraint.prototype.update = function(){
    var eqs = this.equations,
        trans = eqs[0],
        upperLimit = this.upperLimit,
        lowerLimit = this.lowerLimit,
        upperLimitEquation = this.upperLimitEquation,
        lowerLimitEquation = this.lowerLimitEquation,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        localAxisA = this.localAxisA,
        localAnchorA = this.localAnchorA,
        localAnchorB = this.localAnchorB;

    trans.updateJacobian();

    // Transform local things to world
    vec2.rotate(worldAxisA,      localAxisA,      bodyA.angle);
    vec2.rotate(orientedAnchorA, localAnchorA,    bodyA.angle);
    vec2.add(worldAnchorA,       orientedAnchorA, bodyA.position);
    vec2.rotate(orientedAnchorB, localAnchorB,    bodyB.angle);
    vec2.add(worldAnchorB,       orientedAnchorB, bodyB.position);

    var relPosition = this.position = vec2.dot(worldAnchorB,worldAxisA) - vec2.dot(worldAnchorA,worldAxisA);

    // Motor
    if(this.motorEnabled){
        // G = [ a     a x ri   -a   -a x rj ]
        var G = this.motorEquation.G;
        G[0] = worldAxisA[0];
        G[1] = worldAxisA[1];
        G[2] = vec2.crossLength(worldAxisA,orientedAnchorB);
        G[3] = -worldAxisA[0];
        G[4] = -worldAxisA[1];
        G[5] = -vec2.crossLength(worldAxisA,orientedAnchorA);
    }

    /*
        Limits strategy:
        Add contact equation, with normal along the constraint axis.
        min/maxForce is set so the constraint is repulsive in the correct direction.
        Some offset is added to either equation.contactPointA or .contactPointB to get the correct upper/lower limit.

                 ^
                 |
      upperLimit x
                 |    ------
         anchorB x<---|  B |
                 |    |    |
        ------   |    ------
        |    |   |
        |  A |-->x anchorA
        ------   |
                 x lowerLimit
                 |
                axis
     */


    if(this.upperLimitEnabled && relPosition > upperLimit){
        // Update contact constraint normal, etc
        vec2.scale(upperLimitEquation.normalA, worldAxisA, -1);
        vec2.sub(upperLimitEquation.contactPointA, worldAnchorA, bodyA.position);
        vec2.sub(upperLimitEquation.contactPointB, worldAnchorB, bodyB.position);
        vec2.scale(tmp,worldAxisA,upperLimit);
        vec2.add(upperLimitEquation.contactPointA,upperLimitEquation.contactPointA,tmp);
        if(eqs.indexOf(upperLimitEquation) === -1){
            eqs.push(upperLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(upperLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }

    if(this.lowerLimitEnabled && relPosition < lowerLimit){
        // Update contact constraint normal, etc
        vec2.scale(lowerLimitEquation.normalA, worldAxisA, 1);
        vec2.sub(lowerLimitEquation.contactPointA, worldAnchorA, bodyA.position);
        vec2.sub(lowerLimitEquation.contactPointB, worldAnchorB, bodyB.position);
        vec2.scale(tmp,worldAxisA,lowerLimit);
        vec2.sub(lowerLimitEquation.contactPointB,lowerLimitEquation.contactPointB,tmp);
        if(eqs.indexOf(lowerLimitEquation) === -1){
            eqs.push(lowerLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(lowerLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }
};

/**
 * Enable the motor
 * @method enableMotor
 */
PrismaticConstraint.prototype.enableMotor = function(){
    if(this.motorEnabled){
        return;
    }
    this.equations.push(this.motorEquation);
    this.motorEnabled = true;
};

/**
 * Disable the rotational motor
 * @method disableMotor
 */
PrismaticConstraint.prototype.disableMotor = function(){
    if(!this.motorEnabled){
        return;
    }
    var i = this.equations.indexOf(this.motorEquation);
    this.equations.splice(i,1);
    this.motorEnabled = false;
};

/**
 * Set the constraint limits.
 * @method setLimits
 * @param {number} lower Lower limit.
 * @param {number} upper Upper limit.
 */
PrismaticConstraint.prototype.setLimits = function (lower, upper) {
    if(typeof(lower) === 'number'){
        this.lowerLimit = lower;
        this.lowerLimitEnabled = true;
    } else {
        this.lowerLimit = lower;
        this.lowerLimitEnabled = false;
    }

    if(typeof(upper) === 'number'){
        this.upperLimit = upper;
        this.upperLimitEnabled = true;
    } else {
        this.upperLimit = upper;
        this.upperLimitEnabled = false;
    }
};


},{"../equations/ContactEquation":39,"../equations/Equation":40,"../equations/RotationalLockEquation":42,"../math/vec2":48,"./Constraint":32}],37:[function(require,module,exports){
var Constraint = require('./Constraint')
,   Equation = require('../equations/Equation')
,   RotationalVelocityEquation = require('../equations/RotationalVelocityEquation')
,   RotationalLockEquation = require('../equations/RotationalLockEquation')
,   vec2 = require('../math/vec2');

module.exports = RevoluteConstraint;

var worldPivotA = vec2.create(),
    worldPivotB = vec2.create(),
    xAxis = vec2.fromValues(1,0),
    yAxis = vec2.fromValues(0,1),
    g = vec2.create();

/**
 * Connects two bodies at given offset points, letting them rotate relative to each other around this point.
 * @class RevoluteConstraint
 * @constructor
 * @author schteppe
 * @param {Body}    bodyA
 * @param {Body}    bodyB
 * @param {Object}  [options]
 * @param {Array}   [options.worldPivot] A pivot point given in world coordinates. If specified, localPivotA and localPivotB are automatically computed from this value.
 * @param {Array}   [options.localPivotA] The point relative to the center of mass of bodyA which bodyA is constrained to.
 * @param {Array}   [options.localPivotB] See localPivotA.
 * @param {Number}  [options.maxForce] The maximum force that should be applied to constrain the bodies.
 * @extends Constraint
 *
 * @example
 *     // This will create a revolute constraint between two bodies with pivot point in between them.
 *     var bodyA = new Body({ mass: 1, position: [-1, 0] });
 *     var bodyB = new Body({ mass: 1, position: [1, 0] });
 *     var constraint = new RevoluteConstraint(bodyA, bodyB, {
 *         worldPivot: [0, 0]
 *     });
 *     world.addConstraint(constraint);
 *
 *     // Using body-local pivot points, the constraint could have been constructed like this:
 *     var constraint = new RevoluteConstraint(bodyA, bodyB, {
 *         localPivotA: [1, 0],
 *         localPivotB: [-1, 0]
 *     });
 */
function RevoluteConstraint(bodyA, bodyB, options){
    options = options || {};
    Constraint.call(this,bodyA,bodyB,Constraint.REVOLUTE,options);

    var maxForce = this.maxForce = typeof(options.maxForce) !== "undefined" ? options.maxForce : Number.MAX_VALUE;

    /**
     * @property {Array} pivotA
     */
    this.pivotA = vec2.create();

    /**
     * @property {Array} pivotB
     */
    this.pivotB = vec2.create();

    if(options.worldPivot){
        // Compute pivotA and pivotB
        vec2.sub(this.pivotA, options.worldPivot, bodyA.position);
        vec2.sub(this.pivotB, options.worldPivot, bodyB.position);
        // Rotate to local coordinate system
        vec2.rotate(this.pivotA, this.pivotA, -bodyA.angle);
        vec2.rotate(this.pivotB, this.pivotB, -bodyB.angle);
    } else {
        // Get pivotA and pivotB
        vec2.copy(this.pivotA, options.localPivotA);
        vec2.copy(this.pivotB, options.localPivotB);
    }

    // Equations to be fed to the solver
    var eqs = this.equations = [
        new Equation(bodyA,bodyB,-maxForce,maxForce),
        new Equation(bodyA,bodyB,-maxForce,maxForce),
    ];

    var x = eqs[0];
    var y = eqs[1];
    var that = this;

    x.computeGq = function(){
        vec2.rotate(worldPivotA, that.pivotA, bodyA.angle);
        vec2.rotate(worldPivotB, that.pivotB, bodyB.angle);
        vec2.add(g, bodyB.position, worldPivotB);
        vec2.sub(g, g, bodyA.position);
        vec2.sub(g, g, worldPivotA);
        return vec2.dot(g,xAxis);
    };

    y.computeGq = function(){
        vec2.rotate(worldPivotA, that.pivotA, bodyA.angle);
        vec2.rotate(worldPivotB, that.pivotB, bodyB.angle);
        vec2.add(g, bodyB.position, worldPivotB);
        vec2.sub(g, g, bodyA.position);
        vec2.sub(g, g, worldPivotA);
        return vec2.dot(g,yAxis);
    };

    y.minForce = x.minForce = -maxForce;
    y.maxForce = x.maxForce =  maxForce;

    this.motorEquation = new RotationalVelocityEquation(bodyA,bodyB);

    /**
     * Indicates whether the motor is enabled. Use .enableMotor() to enable the constraint motor.
     * @property {Boolean} motorEnabled
     * @readOnly
     */
    this.motorEnabled = false;

    /**
     * The constraint position.
     * @property angle
     * @type {Number}
     * @readOnly
     */
    this.angle = 0;

    /**
     * Set to true to enable lower limit
     * @property lowerLimitEnabled
     * @type {Boolean}
     */
    this.lowerLimitEnabled = false;

    /**
     * Set to true to enable upper limit
     * @property upperLimitEnabled
     * @type {Boolean}
     */
    this.upperLimitEnabled = false;

    /**
     * The lower limit on the constraint angle.
     * @property lowerLimit
     * @type {Boolean}
     */
    this.lowerLimit = 0;

    /**
     * The upper limit on the constraint angle.
     * @property upperLimit
     * @type {Boolean}
     */
    this.upperLimit = 0;

    this.upperLimitEquation = new RotationalLockEquation(bodyA,bodyB);
    this.lowerLimitEquation = new RotationalLockEquation(bodyA,bodyB);
    this.upperLimitEquation.minForce = 0;
    this.lowerLimitEquation.maxForce = 0;
}
RevoluteConstraint.prototype = new Constraint();
RevoluteConstraint.prototype.constructor = RevoluteConstraint;

/**
 * Set the constraint angle limits.
 * @method setLimits
 * @param {number} lower Lower angle limit.
 * @param {number} upper Upper angle limit.
 */
RevoluteConstraint.prototype.setLimits = function (lower, upper) {
    if(typeof(lower) === 'number'){
        this.lowerLimit = lower;
        this.lowerLimitEnabled = true;
    } else {
        this.lowerLimit = lower;
        this.lowerLimitEnabled = false;
    }

    if(typeof(upper) === 'number'){
        this.upperLimit = upper;
        this.upperLimitEnabled = true;
    } else {
        this.upperLimit = upper;
        this.upperLimitEnabled = false;
    }
};

RevoluteConstraint.prototype.update = function(){
    var bodyA =  this.bodyA,
        bodyB =  this.bodyB,
        pivotA = this.pivotA,
        pivotB = this.pivotB,
        eqs =    this.equations,
        normal = eqs[0],
        tangent= eqs[1],
        x = eqs[0],
        y = eqs[1],
        upperLimit = this.upperLimit,
        lowerLimit = this.lowerLimit,
        upperLimitEquation = this.upperLimitEquation,
        lowerLimitEquation = this.lowerLimitEquation;

    var relAngle = this.angle = bodyB.angle - bodyA.angle;

    if(this.upperLimitEnabled && relAngle > upperLimit){
        upperLimitEquation.angle = upperLimit;
        if(eqs.indexOf(upperLimitEquation) === -1){
            eqs.push(upperLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(upperLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }

    if(this.lowerLimitEnabled && relAngle < lowerLimit){
        lowerLimitEquation.angle = lowerLimit;
        if(eqs.indexOf(lowerLimitEquation) === -1){
            eqs.push(lowerLimitEquation);
        }
    } else {
        var idx = eqs.indexOf(lowerLimitEquation);
        if(idx !== -1){
            eqs.splice(idx,1);
        }
    }

    /*

    The constraint violation is

        g = xj + rj - xi - ri

    ...where xi and xj are the body positions and ri and rj world-oriented offset vectors. Differentiate:

        gdot = vj + wj x rj - vi - wi x ri

    We split this into x and y directions. (let x and y be unit vectors along the respective axes)

        gdot * x = ( vj + wj x rj - vi - wi x ri ) * x
                 = ( vj*x + (wj x rj)*x -vi*x -(wi x ri)*x
                 = ( vj*x + (rj x x)*wj -vi*x -(ri x x)*wi
                 = [ -x   -(ri x x)   x   (rj x x)] * [vi wi vj wj]
                 = G*W

    ...and similar for y. We have then identified the jacobian entries for x and y directions:

        Gx = [ x   (rj x x)   -x   -(ri x x)]
        Gy = [ y   (rj x y)   -y   -(ri x y)]

     */

    vec2.rotate(worldPivotA, pivotA, bodyA.angle);
    vec2.rotate(worldPivotB, pivotB, bodyB.angle);

    // todo: these are a bit sparse. We could save some computations on making custom eq.computeGW functions, etc

    x.G[0] = -1;
    x.G[1] =  0;
    x.G[2] = -vec2.crossLength(worldPivotA,xAxis);
    x.G[3] =  1;
    x.G[4] =  0;
    x.G[5] =  vec2.crossLength(worldPivotB,xAxis);

    y.G[0] =  0;
    y.G[1] = -1;
    y.G[2] = -vec2.crossLength(worldPivotA,yAxis);
    y.G[3] =  0;
    y.G[4] =  1;
    y.G[5] =  vec2.crossLength(worldPivotB,yAxis);
};

/**
 * Enable the rotational motor
 * @method enableMotor
 */
RevoluteConstraint.prototype.enableMotor = function(){
    if(this.motorEnabled){
        return;
    }
    this.equations.push(this.motorEquation);
    this.motorEnabled = true;
};

/**
 * Disable the rotational motor
 * @method disableMotor
 */
RevoluteConstraint.prototype.disableMotor = function(){
    if(!this.motorEnabled){
        return;
    }
    var i = this.equations.indexOf(this.motorEquation);
    this.equations.splice(i,1);
    this.motorEnabled = false;
};

/**
 * Check if the motor is enabled.
 * @method motorIsEnabled
 * @deprecated use property motorEnabled instead.
 * @return {Boolean}
 */
RevoluteConstraint.prototype.motorIsEnabled = function(){
    return !!this.motorEnabled;
};

/**
 * Set the speed of the rotational constraint motor
 * @method setMotorSpeed
 * @param  {Number} speed
 */
RevoluteConstraint.prototype.setMotorSpeed = function(speed){
    if(!this.motorEnabled){
        return;
    }
    var i = this.equations.indexOf(this.motorEquation);
    this.equations[i].relativeVelocity = speed;
};

/**
 * Get the speed of the rotational constraint motor
 * @method getMotorSpeed
 * @return {Number} The current speed, or false if the motor is not enabled.
 */
RevoluteConstraint.prototype.getMotorSpeed = function(){
    if(!this.motorEnabled){
        return false;
    }
    return this.motorEquation.relativeVelocity;
};

},{"../equations/Equation":40,"../equations/RotationalLockEquation":42,"../equations/RotationalVelocityEquation":43,"../math/vec2":48,"./Constraint":32}],38:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = AngleLockEquation;

/**
 * Locks the relative angle between two bodies. The constraint tries to keep the dot product between two vectors, local in each body, to zero. The local angle in body i is a parameter.
 *
 * @class AngleLockEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {Number} [options.angle] Angle to add to the local vector in body A.
 * @param {Number} [options.ratio] Gear ratio
 */
function AngleLockEquation(bodyA, bodyB, options){
    options = options || {};
    Equation.call(this,bodyA,bodyB,-Number.MAX_VALUE,Number.MAX_VALUE);
    this.angle = options.angle || 0;

    /**
     * The gear ratio.
     * @property {Number} ratio
     * @private
     * @see setRatio
     */
    this.ratio = typeof(options.ratio)==="number" ? options.ratio : 1;

    this.setRatio(this.ratio);
}
AngleLockEquation.prototype = new Equation();
AngleLockEquation.prototype.constructor = AngleLockEquation;

AngleLockEquation.prototype.computeGq = function(){
    return this.ratio * this.bodyA.angle - this.bodyB.angle + this.angle;
};

/**
 * Set the gear ratio for this equation
 * @method setRatio
 * @param {Number} ratio
 */
AngleLockEquation.prototype.setRatio = function(ratio){
    var G = this.G;
    G[2] =  ratio;
    G[5] = -1;
    this.ratio = ratio;
};

/**
 * Set the max force for the equation.
 * @method setMaxTorque
 * @param {Number} torque
 */
AngleLockEquation.prototype.setMaxTorque = function(torque){
    this.maxForce =  torque;
    this.minForce = -torque;
};

},{"../math/vec2":48,"./Equation":40}],39:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = ContactEquation;

/**
 * Non-penetration constraint equation. Tries to make the contactPointA and contactPointB vectors coincide, while keeping the applied force repulsive.
 *
 * @class ContactEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
function ContactEquation(bodyA, bodyB){
    Equation.call(this, bodyA, bodyB, 0, Number.MAX_VALUE);

    /**
     * Vector from body i center of mass to the contact point.
     * @property contactPointA
     * @type {Array}
     */
    this.contactPointA = vec2.create();
    this.penetrationVec = vec2.create();

    /**
     * World-oriented vector from body A center of mass to the contact point.
     * @property contactPointB
     * @type {Array}
     */
    this.contactPointB = vec2.create();

    /**
     * The normal vector, pointing out of body i
     * @property normalA
     * @type {Array}
     */
    this.normalA = vec2.create();

    /**
     * The restitution to use (0=no bounciness, 1=max bounciness).
     * @property restitution
     * @type {Number}
     */
    this.restitution = 0;

    /**
     * This property is set to true if this is the first impact between the bodies (not persistant contact).
     * @property firstImpact
     * @type {Boolean}
     * @readOnly
     */
    this.firstImpact = false;

    /**
     * The shape in body i that triggered this contact.
     * @property shapeA
     * @type {Shape}
     */
    this.shapeA = null;

    /**
     * The shape in body j that triggered this contact.
     * @property shapeB
     * @type {Shape}
     */
    this.shapeB = null;
}
ContactEquation.prototype = new Equation();
ContactEquation.prototype.constructor = ContactEquation;
ContactEquation.prototype.computeB = function(a,b,h){
    var bi = this.bodyA,
        bj = this.bodyB,
        ri = this.contactPointA,
        rj = this.contactPointB,
        xi = bi.position,
        xj = bj.position;

    var penetrationVec = this.penetrationVec,
        n = this.normalA,
        G = this.G;

    // Caluclate cross products
    var rixn = vec2.crossLength(ri,n),
        rjxn = vec2.crossLength(rj,n);

    // G = [-n -rixn n rjxn]
    G[0] = -n[0];
    G[1] = -n[1];
    G[2] = -rixn;
    G[3] = n[0];
    G[4] = n[1];
    G[5] = rjxn;

    // Calculate q = xj+rj -(xi+ri) i.e. the penetration vector
    vec2.add(penetrationVec,xj,rj);
    vec2.sub(penetrationVec,penetrationVec,xi);
    vec2.sub(penetrationVec,penetrationVec,ri);

    // Compute iteration
    var GW, Gq;
    if(this.firstImpact && this.restitution !== 0){
        Gq = 0;
        GW = (1/b)*(1+this.restitution) * this.computeGW();
    } else {
        Gq = vec2.dot(n,penetrationVec) + this.offset;
        GW = this.computeGW();
    }

    var GiMf = this.computeGiMf();
    var B = - Gq * a - GW * b - h*GiMf;

    return B;
};

var vi = vec2.create();
var vj = vec2.create();
var relVel = vec2.create();

/**
 * Get the relative velocity along the normal vector.
 * @return {number}
 */
ContactEquation.prototype.getVelocityAlongNormal = function(){

    this.bodyA.getVelocityAtPoint(vi, this.contactPointA);
    this.bodyB.getVelocityAtPoint(vj, this.contactPointB);

    vec2.subtract(relVel, vi, vj);

    return vec2.dot(this.normalA, relVel);
};
},{"../math/vec2":48,"./Equation":40}],40:[function(require,module,exports){
module.exports = Equation;

var vec2 = require('../math/vec2'),
    Utils = require('../utils/Utils'),
    Body = require('../objects/Body');

/**
 * Base class for constraint equations.
 * @class Equation
 * @constructor
 * @param {Body} bodyA First body participating in the equation
 * @param {Body} bodyB Second body participating in the equation
 * @param {number} minForce Minimum force to apply. Default: -Number.MAX_VALUE
 * @param {number} maxForce Maximum force to apply. Default: Number.MAX_VALUE
 */
function Equation(bodyA, bodyB, minForce, maxForce){

    /**
     * Minimum force to apply when solving.
     * @property minForce
     * @type {Number}
     */
    this.minForce = typeof(minForce)==="undefined" ? -Number.MAX_VALUE : minForce;

    /**
     * Max force to apply when solving.
     * @property maxForce
     * @type {Number}
     */
    this.maxForce = typeof(maxForce)==="undefined" ? Number.MAX_VALUE : maxForce;

    /**
     * First body participating in the constraint
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second body participating in the constraint
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;

    /**
     * The stiffness of this equation. Typically chosen to a large number (~1e7), but can be chosen somewhat freely to get a stable simulation.
     * @property stiffness
     * @type {Number}
     */
    this.stiffness = Equation.DEFAULT_STIFFNESS;

    /**
     * The number of time steps needed to stabilize the constraint equation. Typically between 3 and 5 time steps.
     * @property relaxation
     * @type {Number}
     */
    this.relaxation = Equation.DEFAULT_RELAXATION;

    /**
     * The Jacobian entry of this equation. 6 numbers, 3 per body (x,y,angle).
     * @property G
     * @type {Array}
     */
    this.G = new Utils.ARRAY_TYPE(6);
    for(var i=0; i<6; i++){
        this.G[i]=0;
    }

    this.offset = 0;

    this.a = 0;
    this.b = 0;
    this.epsilon = 0;
    this.timeStep = 1/60;

    /**
     * Indicates if stiffness or relaxation was changed.
     * @property {Boolean} needsUpdate
     */
    this.needsUpdate = true;

    /**
     * The resulting constraint multiplier from the last solve. This is mostly equivalent to the force produced by the constraint.
     * @property multiplier
     * @type {Number}
     */
    this.multiplier = 0;

    /**
     * Relative velocity.
     * @property {Number} relativeVelocity
     */
    this.relativeVelocity = 0;

    /**
     * Whether this equation is enabled or not. If true, it will be added to the solver.
     * @property {Boolean} enabled
     */
    this.enabled = true;
}
Equation.prototype.constructor = Equation;

/**
 * The default stiffness when creating a new Equation.
 * @static
 * @property {Number} DEFAULT_STIFFNESS
 * @default 1e6
 */
Equation.DEFAULT_STIFFNESS = 1e6;

/**
 * The default relaxation when creating a new Equation.
 * @static
 * @property {Number} DEFAULT_RELAXATION
 * @default 4
 */
Equation.DEFAULT_RELAXATION = 4;

/**
 * Compute SPOOK parameters .a, .b and .epsilon according to the current parameters. See equations 9, 10 and 11 in the <a href="http://www8.cs.umu.se/kurser/5DV058/VT09/lectures/spooknotes.pdf">SPOOK notes</a>.
 * @method update
 */
Equation.prototype.update = function(){
    var k = this.stiffness,
        d = this.relaxation,
        h = this.timeStep;

    this.a = 4.0 / (h * (1 + 4 * d));
    this.b = (4.0 * d) / (1 + 4 * d);
    this.epsilon = 4.0 / (h * h * k * (1 + 4 * d));

    this.needsUpdate = false;
};

/**
 * Multiply a jacobian entry with corresponding positions or velocities
 * @method gmult
 * @return {Number}
 */
Equation.prototype.gmult = function(G,vi,wi,vj,wj){
    return  G[0] * vi[0] +
            G[1] * vi[1] +
            G[2] * wi +
            G[3] * vj[0] +
            G[4] * vj[1] +
            G[5] * wj;
};

/**
 * Computes the RHS of the SPOOK equation
 * @method computeB
 * @return {Number}
 */
Equation.prototype.computeB = function(a,b,h){
    var GW = this.computeGW();
    var Gq = this.computeGq();
    var GiMf = this.computeGiMf();
    return - Gq * a - GW * b - GiMf*h;
};

/**
 * Computes G\*q, where q are the generalized body coordinates
 * @method computeGq
 * @return {Number}
 */
var qi = vec2.create(),
    qj = vec2.create();
Equation.prototype.computeGq = function(){
    var G = this.G,
        bi = this.bodyA,
        bj = this.bodyB,
        xi = bi.position,
        xj = bj.position,
        ai = bi.angle,
        aj = bj.angle;

    return this.gmult(G, qi, ai, qj, aj) + this.offset;
};

/**
 * Computes G\*W, where W are the body velocities
 * @method computeGW
 * @return {Number}
 */
Equation.prototype.computeGW = function(){
    var G = this.G,
        bi = this.bodyA,
        bj = this.bodyB,
        vi = bi.velocity,
        vj = bj.velocity,
        wi = bi.angularVelocity,
        wj = bj.angularVelocity;
    return this.gmult(G,vi,wi,vj,wj) + this.relativeVelocity;
};

/**
 * Computes G\*Wlambda, where W are the body velocities
 * @method computeGWlambda
 * @return {Number}
 */
Equation.prototype.computeGWlambda = function(){
    var G = this.G,
        bi = this.bodyA,
        bj = this.bodyB,
        vi = bi.vlambda,
        vj = bj.vlambda,
        wi = bi.wlambda,
        wj = bj.wlambda;
    return this.gmult(G,vi,wi,vj,wj);
};

/**
 * Computes G\*inv(M)\*f, where M is the mass matrix with diagonal blocks for each body, and f are the forces on the bodies.
 * @method computeGiMf
 * @return {Number}
 */
var iMfi = vec2.create(),
    iMfj = vec2.create();
Equation.prototype.computeGiMf = function(){
    var bi = this.bodyA,
        bj = this.bodyB,
        fi = bi.force,
        ti = bi.angularForce,
        fj = bj.force,
        tj = bj.angularForce,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaSolve,
        invIj = bj.invInertiaSolve,
        G = this.G;

    vec2.scale(iMfi, fi, invMassi);
    vec2.multiply(iMfi, bi.massMultiplier, iMfi);
    vec2.scale(iMfj, fj,invMassj);
    vec2.multiply(iMfj, bj.massMultiplier, iMfj);

    return this.gmult(G,iMfi,ti*invIi,iMfj,tj*invIj);
};

/**
 * Computes G\*inv(M)\*G'
 * @method computeGiMGt
 * @return {Number}
 */
Equation.prototype.computeGiMGt = function(){
    var bi = this.bodyA,
        bj = this.bodyB,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaSolve,
        invIj = bj.invInertiaSolve,
        G = this.G;

    return  G[0] * G[0] * invMassi * bi.massMultiplier[0] +
            G[1] * G[1] * invMassi * bi.massMultiplier[1] +
            G[2] * G[2] *    invIi +
            G[3] * G[3] * invMassj * bj.massMultiplier[0] +
            G[4] * G[4] * invMassj * bj.massMultiplier[1] +
            G[5] * G[5] *    invIj;
};

var addToWlambda_temp = vec2.create(),
    addToWlambda_Gi = vec2.create(),
    addToWlambda_Gj = vec2.create(),
    addToWlambda_ri = vec2.create(),
    addToWlambda_rj = vec2.create(),
    addToWlambda_Mdiag = vec2.create();

/**
 * Add constraint velocity to the bodies.
 * @method addToWlambda
 * @param {Number} deltalambda
 */
Equation.prototype.addToWlambda = function(deltalambda){
    var bi = this.bodyA,
        bj = this.bodyB,
        temp = addToWlambda_temp,
        Gi = addToWlambda_Gi,
        Gj = addToWlambda_Gj,
        ri = addToWlambda_ri,
        rj = addToWlambda_rj,
        invMassi = bi.invMassSolve,
        invMassj = bj.invMassSolve,
        invIi = bi.invInertiaSolve,
        invIj = bj.invInertiaSolve,
        Mdiag = addToWlambda_Mdiag,
        G = this.G;

    Gi[0] = G[0];
    Gi[1] = G[1];
    Gj[0] = G[3];
    Gj[1] = G[4];

    // Add to linear velocity
    // v_lambda += inv(M) * delta_lamba * G
    vec2.scale(temp, Gi, invMassi*deltalambda);
    vec2.multiply(temp, temp, bi.massMultiplier);
    vec2.add( bi.vlambda, bi.vlambda, temp);
    // This impulse is in the offset frame
    // Also add contribution to angular
    //bi.wlambda -= vec2.crossLength(temp,ri);
    bi.wlambda += invIi * G[2] * deltalambda;


    vec2.scale(temp, Gj, invMassj*deltalambda);
    vec2.multiply(temp, temp, bj.massMultiplier);
    vec2.add( bj.vlambda, bj.vlambda, temp);
    //bj.wlambda -= vec2.crossLength(temp,rj);
    bj.wlambda += invIj * G[5] * deltalambda;
};

/**
 * Compute the denominator part of the SPOOK equation: C = G\*inv(M)\*G' + eps
 * @method computeInvC
 * @param  {Number} eps
 * @return {Number}
 */
Equation.prototype.computeInvC = function(eps){
    return 1.0 / (this.computeGiMGt() + eps);
};

},{"../math/vec2":48,"../objects/Body":49,"../utils/Utils":75}],41:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Equation = require('./Equation')
,   Utils = require('../utils/Utils');

module.exports = FrictionEquation;

/**
 * Constrains the slipping in a contact along a tangent
 *
 * @class FrictionEquation
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Number} slipForce
 * @extends Equation
 */
function FrictionEquation(bodyA, bodyB, slipForce){
    Equation.call(this, bodyA, bodyB, -slipForce, slipForce);

    /**
     * Relative vector from center of body A to the contact point, world oriented.
     * @property contactPointA
     * @type {Array}
     */
    this.contactPointA = vec2.create();

    /**
     * Relative vector from center of body B to the contact point, world oriented.
     * @property contactPointB
     * @type {Array}
     */
    this.contactPointB = vec2.create();

    /**
     * Tangent vector that the friction force will act along. World oriented.
     * @property t
     * @type {Array}
     */
    this.t = vec2.create();

    /**
     * ContactEquations connected to this friction equation. The contact equations can be used to rescale the max force for the friction. If more than one contact equation is given, then the max force can be set to the average.
     * @property contactEquations
     * @type {ContactEquation}
     */
    this.contactEquations = [];

    /**
     * The shape in body i that triggered this friction.
     * @property shapeA
     * @type {Shape}
     * @todo Needed? The shape can be looked up via contactEquation.shapeA...
     */
    this.shapeA = null;

    /**
     * The shape in body j that triggered this friction.
     * @property shapeB
     * @type {Shape}
     * @todo Needed? The shape can be looked up via contactEquation.shapeB...
     */
    this.shapeB = null;

    /**
     * The friction coefficient to use.
     * @property frictionCoefficient
     * @type {Number}
     */
    this.frictionCoefficient = 0.3;
}
FrictionEquation.prototype = new Equation();
FrictionEquation.prototype.constructor = FrictionEquation;

/**
 * Set the slipping condition for the constraint. The friction force cannot be
 * larger than this value.
 * @method setSlipForce
 * @param  {Number} slipForce
 */
FrictionEquation.prototype.setSlipForce = function(slipForce){
    this.maxForce = slipForce;
    this.minForce = -slipForce;
};

/**
 * Get the max force for the constraint.
 * @method getSlipForce
 * @return {Number}
 */
FrictionEquation.prototype.getSlipForce = function(){
    return this.maxForce;
};

FrictionEquation.prototype.computeB = function(a,b,h){
    var bi = this.bodyA,
        bj = this.bodyB,
        ri = this.contactPointA,
        rj = this.contactPointB,
        t = this.t,
        G = this.G;

    // G = [-t -rixt t rjxt]
    // And remember, this is a pure velocity constraint, g is always zero!
    G[0] = -t[0];
    G[1] = -t[1];
    G[2] = -vec2.crossLength(ri,t);
    G[3] = t[0];
    G[4] = t[1];
    G[5] = vec2.crossLength(rj,t);

    var GW = this.computeGW(),
        GiMf = this.computeGiMf();

    var B = /* - g * a  */ - GW * b - h*GiMf;

    return B;
};

},{"../math/vec2":48,"../utils/Utils":75,"./Equation":40}],42:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = RotationalLockEquation;

/**
 * Locks the relative angle between two bodies. The constraint tries to keep the dot product between two vectors, local in each body, to zero. The local angle in body i is a parameter.
 *
 * @class RotationalLockEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {Number} [options.angle] Angle to add to the local vector in bodyA.
 */
function RotationalLockEquation(bodyA, bodyB, options){
    options = options || {};
    Equation.call(this, bodyA, bodyB, -Number.MAX_VALUE, Number.MAX_VALUE);

    /**
     * @property {number} angle
     */
    this.angle = options.angle || 0;

    var G = this.G;
    G[2] =  1;
    G[5] = -1;
}
RotationalLockEquation.prototype = new Equation();
RotationalLockEquation.prototype.constructor = RotationalLockEquation;

var worldVectorA = vec2.create(),
    worldVectorB = vec2.create(),
    xAxis = vec2.fromValues(1,0),
    yAxis = vec2.fromValues(0,1);
RotationalLockEquation.prototype.computeGq = function(){
    vec2.rotate(worldVectorA,xAxis,this.bodyA.angle+this.angle);
    vec2.rotate(worldVectorB,yAxis,this.bodyB.angle);
    return vec2.dot(worldVectorA,worldVectorB);
};

},{"../math/vec2":48,"./Equation":40}],43:[function(require,module,exports){
var Equation = require("./Equation"),
    vec2 = require('../math/vec2');

module.exports = RotationalVelocityEquation;

/**
 * Syncs rotational velocity of two bodies, or sets a relative velocity (motor).
 *
 * @class RotationalVelocityEquation
 * @constructor
 * @extends Equation
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
function RotationalVelocityEquation(bodyA, bodyB){
    Equation.call(this, bodyA, bodyB, -Number.MAX_VALUE, Number.MAX_VALUE);
    this.relativeVelocity = 1;
    this.ratio = 1;
}
RotationalVelocityEquation.prototype = new Equation();
RotationalVelocityEquation.prototype.constructor = RotationalVelocityEquation;
RotationalVelocityEquation.prototype.computeB = function(a,b,h){
    var G = this.G;
    G[2] = -1;
    G[5] = this.ratio;

    var GiMf = this.computeGiMf();
    var GW = this.computeGW();
    var B = - GW * b - h*GiMf;

    return B;
};

},{"../math/vec2":48,"./Equation":40}],44:[function(require,module,exports){
/**
 * Base class for objects that dispatches events.
 * @class EventEmitter
 * @constructor
 */
var EventEmitter = function () {};

module.exports = EventEmitter;

EventEmitter.prototype = {
    constructor: EventEmitter,

    /**
     * Add an event listener
     * @method on
     * @param  {String} type
     * @param  {Function} listener
     * @return {EventEmitter} The self object, for chainability.
     */
    on: function ( type, listener, context ) {
        listener.context = context || this;
        if ( this._listeners === undefined ){
            this._listeners = {};
        }
        var listeners = this._listeners;
        if ( listeners[ type ] === undefined ) {
            listeners[ type ] = [];
        }
        if ( listeners[ type ].indexOf( listener ) === - 1 ) {
            listeners[ type ].push( listener );
        }
        return this;
    },

    /**
     * Check if an event listener is added
     * @method has
     * @param  {String} type
     * @param  {Function} listener
     * @return {Boolean}
     */
    has: function ( type, listener ) {
        if ( this._listeners === undefined ){
            return false;
        }
        var listeners = this._listeners;
        if(listener){
            if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {
                return true;
            }
        } else {
            if ( listeners[ type ] !== undefined ) {
                return true;
            }
        }

        return false;
    },

    /**
     * Remove an event listener
     * @method off
     * @param  {String} type
     * @param  {Function} listener
     * @return {EventEmitter} The self object, for chainability.
     */
    off: function ( type, listener ) {
        if ( this._listeners === undefined ){
            return this;
        }
        var listeners = this._listeners;
        var index = listeners[ type ].indexOf( listener );
        if ( index !== - 1 ) {
            listeners[ type ].splice( index, 1 );
        }
        return this;
    },

    /**
     * Emit an event.
     * @method emit
     * @param  {Object} event
     * @param  {String} event.type
     * @return {EventEmitter} The self object, for chainability.
     */
    emit: function ( event ) {
        if ( this._listeners === undefined ){
            return this;
        }
        var listeners = this._listeners;
        var listenerArray = listeners[ event.type ];
        if ( listenerArray !== undefined ) {
            event.target = this;
            for ( var i = 0, l = listenerArray.length; i < l; i ++ ) {
                var listener = listenerArray[ i ];
                listener.call( listener.context, event );
            }
        }
        return this;
    }
};

},{}],45:[function(require,module,exports){
var Material = require('./Material');
var Equation = require('../equations/Equation');

module.exports = ContactMaterial;

/**
 * Defines what happens when two materials meet, such as what friction coefficient to use. You can also set other things such as restitution, surface velocity and constraint parameters.
 * @class ContactMaterial
 * @constructor
 * @param {Material} materialA
 * @param {Material} materialB
 * @param {Object}   [options]
 * @param {Number}   [options.friction=0.3]       Friction coefficient.
 * @param {Number}   [options.restitution=0]      Restitution coefficient aka "bounciness".
 * @param {Number}   [options.stiffness]          ContactEquation stiffness.
 * @param {Number}   [options.relaxation]         ContactEquation relaxation.
 * @param {Number}   [options.frictionStiffness]  FrictionEquation stiffness.
 * @param {Number}   [options.frictionRelaxation] FrictionEquation relaxation.
 * @param {Number}   [options.surfaceVelocity=0]  Surface velocity.
 * @author schteppe
 */
function ContactMaterial(materialA, materialB, options){
    options = options || {};

    if(!(materialA instanceof Material) || !(materialB instanceof Material)){
        throw new Error("First two arguments must be Material instances.");
    }

    /**
     * The contact material identifier
     * @property id
     * @type {Number}
     */
    this.id = ContactMaterial.idCounter++;

    /**
     * First material participating in the contact material
     * @property materialA
     * @type {Material}
     */
    this.materialA = materialA;

    /**
     * Second material participating in the contact material
     * @property materialB
     * @type {Material}
     */
    this.materialB = materialB;

    /**
     * Friction coefficient to use in the contact of these two materials. Friction = 0 will make the involved objects super slippery, and friction = 1 will make it much less slippery. A friction coefficient larger than 1 will allow for very large friction forces, which can be convenient for preventing car tires not slip on the ground.
     * @property friction
     * @type {Number}
     * @default 0.3
     */
    this.friction = typeof(options.friction) !== "undefined" ? Number(options.friction) : 0.3;

    /**
     * Restitution, or "bounciness" to use in the contact of these two materials. A restitution of 0 will make no bounce, while restitution=1 will approximately bounce back with the same velocity the object came with.
     * @property restitution
     * @type {Number}
     * @default 0
     */
    this.restitution = typeof(options.restitution) !== "undefined" ? Number(options.restitution) : 0;

    /**
     * Hardness of the contact. Less stiffness will make the objects penetrate more, and will make the contact act more like a spring than a contact force. Default value is {{#crossLink "Equation/DEFAULT_STIFFNESS:property"}}Equation.DEFAULT_STIFFNESS{{/crossLink}}.
     * @property stiffness
     * @type {Number}
     */
    this.stiffness = typeof(options.stiffness) !== "undefined" ? Number(options.stiffness) : Equation.DEFAULT_STIFFNESS;

    /**
     * Relaxation of the resulting ContactEquation that this ContactMaterial generate. Default value is {{#crossLink "Equation/DEFAULT_RELAXATION:property"}}Equation.DEFAULT_RELAXATION{{/crossLink}}.
     * @property relaxation
     * @type {Number}
     */
    this.relaxation = typeof(options.relaxation) !== "undefined" ? Number(options.relaxation) : Equation.DEFAULT_RELAXATION;

    /**
     * Stiffness of the resulting friction force. For most cases, the value of this property should be a large number. I cannot think of any case where you would want less frictionStiffness. Default value is {{#crossLink "Equation/DEFAULT_STIFFNESS:property"}}Equation.DEFAULT_STIFFNESS{{/crossLink}}.
     * @property frictionStiffness
     * @type {Number}
     */
    this.frictionStiffness = typeof(options.frictionStiffness) !== "undefined" ? Number(options.frictionStiffness) : Equation.DEFAULT_STIFFNESS;

    /**
     * Relaxation of the resulting friction force. The default value should be good for most simulations. Default value is {{#crossLink "Equation/DEFAULT_RELAXATION:property"}}Equation.DEFAULT_RELAXATION{{/crossLink}}.
     * @property frictionRelaxation
     * @type {Number}
     */
    this.frictionRelaxation = typeof(options.frictionRelaxation) !== "undefined" ? Number(options.frictionRelaxation)  : Equation.DEFAULT_RELAXATION;

    /**
     * Will add surface velocity to this material. If bodyA rests on top if bodyB, and the surface velocity is positive, bodyA will slide to the right.
     * @property {Number} surfaceVelocity
     * @default 0
     */
    this.surfaceVelocity = typeof(options.surfaceVelocity) !== "undefined" ? Number(options.surfaceVelocity) : 0;

    /**
     * Offset to be set on ContactEquations. A positive value will make the bodies penetrate more into each other. Can be useful in scenes where contacts need to be more persistent, for example when stacking. Aka "cure for nervous contacts".
     * @property contactSkinSize
     * @type {Number}
     */
    this.contactSkinSize = 0.005;
}

ContactMaterial.idCounter = 0;

},{"../equations/Equation":40,"./Material":46}],46:[function(require,module,exports){
module.exports = Material;

/**
 * Defines a physics material.
 * @class Material
 * @constructor
 * @param {number} id Material identifier
 * @author schteppe
 */
function Material(id){
    /**
     * The material identifier
     * @property id
     * @type {Number}
     */
    this.id = id || Material.idCounter++;
}

Material.idCounter = 0;

},{}],47:[function(require,module,exports){

    /*
        PolyK library
        url: http://polyk.ivank.net
        Released under MIT licence.

        Copyright (c) 2012 Ivan Kuckir

        Permission is hereby granted, free of charge, to any person
        obtaining a copy of this software and associated documentation
        files (the "Software"), to deal in the Software without
        restriction, including without limitation the rights to use,
        copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the
        Software is furnished to do so, subject to the following
        conditions:

        The above copyright notice and this permission notice shall be
        included in all copies or substantial portions of the Software.

        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
        EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
        OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
        NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
        HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
        WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
        OTHER DEALINGS IN THE SOFTWARE.
    */

    var PolyK = {};

    /*
        Is Polygon self-intersecting?

        O(n^2)
    */
    /*
    PolyK.IsSimple = function(p)
    {
        var n = p.length>>1;
        if(n<4) return true;
        var a1 = new PolyK._P(), a2 = new PolyK._P();
        var b1 = new PolyK._P(), b2 = new PolyK._P();
        var c = new PolyK._P();

        for(var i=0; i<n; i++)
        {
            a1.x = p[2*i  ];
            a1.y = p[2*i+1];
            if(i==n-1)  { a2.x = p[0    ];  a2.y = p[1    ]; }
            else        { a2.x = p[2*i+2];  a2.y = p[2*i+3]; }

            for(var j=0; j<n; j++)
            {
                if(Math.abs(i-j) < 2) continue;
                if(j==n-1 && i==0) continue;
                if(i==n-1 && j==0) continue;

                b1.x = p[2*j  ];
                b1.y = p[2*j+1];
                if(j==n-1)  { b2.x = p[0    ];  b2.y = p[1    ]; }
                else        { b2.x = p[2*j+2];  b2.y = p[2*j+3]; }

                if(PolyK._GetLineIntersection(a1,a2,b1,b2,c) != null) return false;
            }
        }
        return true;
    }

    PolyK.IsConvex = function(p)
    {
        if(p.length<6) return true;
        var l = p.length - 4;
        for(var i=0; i<l; i+=2)
            if(!PolyK._convex(p[i], p[i+1], p[i+2], p[i+3], p[i+4], p[i+5])) return false;
        if(!PolyK._convex(p[l  ], p[l+1], p[l+2], p[l+3], p[0], p[1])) return false;
        if(!PolyK._convex(p[l+2], p[l+3], p[0  ], p[1  ], p[2], p[3])) return false;
        return true;
    }
    */
    PolyK.GetArea = function(p)
    {
        if(p.length <6) return 0;
        var l = p.length - 2;
        var sum = 0;
        for(var i=0; i<l; i+=2)
            sum += (p[i+2]-p[i]) * (p[i+1]+p[i+3]);
        sum += (p[0]-p[l]) * (p[l+1]+p[1]);
        return - sum * 0.5;
    }
    /*
    PolyK.GetAABB = function(p)
    {
        var minx = Infinity;
        var miny = Infinity;
        var maxx = -minx;
        var maxy = -miny;
        for(var i=0; i<p.length; i+=2)
        {
            minx = Math.min(minx, p[i  ]);
            maxx = Math.max(maxx, p[i  ]);
            miny = Math.min(miny, p[i+1]);
            maxy = Math.max(maxy, p[i+1]);
        }
        return {x:minx, y:miny, width:maxx-minx, height:maxy-miny};
    }
    */

    PolyK.Triangulate = function(p)
    {
        var n = p.length>>1;
        if(n<3) return [];
        var tgs = [];
        var avl = [];
        for(var i=0; i<n; i++) avl.push(i);

        var i = 0;
        var al = n;
        while(al > 3)
        {
            var i0 = avl[(i+0)%al];
            var i1 = avl[(i+1)%al];
            var i2 = avl[(i+2)%al];

            var ax = p[2*i0],  ay = p[2*i0+1];
            var bx = p[2*i1],  by = p[2*i1+1];
            var cx = p[2*i2],  cy = p[2*i2+1];

            var earFound = false;
            if(PolyK._convex(ax, ay, bx, by, cx, cy))
            {
                earFound = true;
                for(var j=0; j<al; j++)
                {
                    var vi = avl[j];
                    if(vi==i0 || vi==i1 || vi==i2) continue;
                    if(PolyK._PointInTriangle(p[2*vi], p[2*vi+1], ax, ay, bx, by, cx, cy)) {earFound = false; break;}
                }
            }
            if(earFound)
            {
                tgs.push(i0, i1, i2);
                avl.splice((i+1)%al, 1);
                al--;
                i= 0;
            }
            else if(i++ > 3*al) break;      // no convex angles :(
        }
        tgs.push(avl[0], avl[1], avl[2]);
        return tgs;
    }
    /*
    PolyK.ContainsPoint = function(p, px, py)
    {
        var n = p.length>>1;
        var ax, ay, bx = p[2*n-2]-px, by = p[2*n-1]-py;
        var depth = 0;
        for(var i=0; i<n; i++)
        {
            ax = bx;  ay = by;
            bx = p[2*i  ] - px;
            by = p[2*i+1] - py;
            if(ay< 0 && by< 0) continue;    // both "up" or both "donw"
            if(ay>=0 && by>=0) continue;    // both "up" or both "donw"
            if(ax< 0 && bx< 0) continue;

            var lx = ax + (bx-ax)*(-ay)/(by-ay);
            if(lx>0) depth++;
        }
        return (depth & 1) == 1;
    }

    PolyK.Slice = function(p, ax, ay, bx, by)
    {
        if(PolyK.ContainsPoint(p, ax, ay) || PolyK.ContainsPoint(p, bx, by)) return [p.slice(0)];

        var a = new PolyK._P(ax, ay);
        var b = new PolyK._P(bx, by);
        var iscs = [];  // intersections
        var ps = [];    // points
        for(var i=0; i<p.length; i+=2) ps.push(new PolyK._P(p[i], p[i+1]));

        for(var i=0; i<ps.length; i++)
        {
            var isc = new PolyK._P(0,0);
            isc = PolyK._GetLineIntersection(a, b, ps[i], ps[(i+1)%ps.length], isc);

            if(isc)
            {
                isc.flag = true;
                iscs.push(isc);
                ps.splice(i+1,0,isc);
                i++;
            }
        }
        if(iscs.length == 0) return [p.slice(0)];
        var comp = function(u,v) {return PolyK._P.dist(a,u) - PolyK._P.dist(a,v); }
        iscs.sort(comp);

        var pgs = [];
        var dir = 0;
        while(iscs.length > 0)
        {
            var n = ps.length;
            var i0 = iscs[0];
            var i1 = iscs[1];
            var ind0 = ps.indexOf(i0);
            var ind1 = ps.indexOf(i1);
            var solved = false;

            if(PolyK._firstWithFlag(ps, ind0) == ind1) solved = true;
            else
            {
                i0 = iscs[1];
                i1 = iscs[0];
                ind0 = ps.indexOf(i0);
                ind1 = ps.indexOf(i1);
                if(PolyK._firstWithFlag(ps, ind0) == ind1) solved = true;
            }
            if(solved)
            {
                dir--;
                var pgn = PolyK._getPoints(ps, ind0, ind1);
                pgs.push(pgn);
                ps = PolyK._getPoints(ps, ind1, ind0);
                i0.flag = i1.flag = false;
                iscs.splice(0,2);
                if(iscs.length == 0) pgs.push(ps);
            }
            else { dir++; iscs.reverse(); }
            if(dir>1) break;
        }
        var result = [];
        for(var i=0; i<pgs.length; i++)
        {
            var pg = pgs[i];
            var npg = [];
            for(var j=0; j<pg.length; j++) npg.push(pg[j].x, pg[j].y);
            result.push(npg);
        }
        return result;
    }

    PolyK.Raycast = function(p, x, y, dx, dy, isc)
    {
        var l = p.length - 2;
        var tp = PolyK._tp;
        var a1 = tp[0], a2 = tp[1],
        b1 = tp[2], b2 = tp[3], c = tp[4];
        a1.x = x; a1.y = y;
        a2.x = x+dx; a2.y = y+dy;

        if(isc==null) isc = {dist:0, edge:0, norm:{x:0, y:0}, refl:{x:0, y:0}};
        isc.dist = Infinity;

        for(var i=0; i<l; i+=2)
        {
            b1.x = p[i  ];  b1.y = p[i+1];
            b2.x = p[i+2];  b2.y = p[i+3];
            var nisc = PolyK._RayLineIntersection(a1, a2, b1, b2, c);
            if(nisc) PolyK._updateISC(dx, dy, a1, b1, b2, c, i/2, isc);
        }
        b1.x = b2.x;  b1.y = b2.y;
        b2.x = p[0];  b2.y = p[1];
        var nisc = PolyK._RayLineIntersection(a1, a2, b1, b2, c);
        if(nisc) PolyK._updateISC(dx, dy, a1, b1, b2, c, p.length/2, isc);

        return (isc.dist != Infinity) ? isc : null;
    }

    PolyK.ClosestEdge = function(p, x, y, isc)
    {
        var l = p.length - 2;
        var tp = PolyK._tp;
        var a1 = tp[0],
        b1 = tp[2], b2 = tp[3], c = tp[4];
        a1.x = x; a1.y = y;

        if(isc==null) isc = {dist:0, edge:0, point:{x:0, y:0}, norm:{x:0, y:0}};
        isc.dist = Infinity;

        for(var i=0; i<l; i+=2)
        {
            b1.x = p[i  ];  b1.y = p[i+1];
            b2.x = p[i+2];  b2.y = p[i+3];
            PolyK._pointLineDist(a1, b1, b2, i>>1, isc);
        }
        b1.x = b2.x;  b1.y = b2.y;
        b2.x = p[0];  b2.y = p[1];
        PolyK._pointLineDist(a1, b1, b2, l>>1, isc);

        var idst = 1/isc.dist;
        isc.norm.x = (x-isc.point.x)*idst;
        isc.norm.y = (y-isc.point.y)*idst;
        return isc;
    }

    PolyK._pointLineDist = function(p, a, b, edge, isc)
    {
        var x = p.x, y = p.y, x1 = a.x, y1 = a.y, x2 = b.x, y2 = b.y;

        var A = x - x1;
        var B = y - y1;
        var C = x2 - x1;
        var D = y2 - y1;

        var dot = A * C + B * D;
        var len_sq = C * C + D * D;
        var param = dot / len_sq;

        var xx, yy;

        if (param < 0 || (x1 == x2 && y1 == y2)) {
            xx = x1;
            yy = y1;
        }
        else if (param > 1) {
            xx = x2;
            yy = y2;
        }
        else {
            xx = x1 + param * C;
            yy = y1 + param * D;
        }

        var dx = x - xx;
        var dy = y - yy;
        var dst = Math.sqrt(dx * dx + dy * dy);
        if(dst<isc.dist)
        {
            isc.dist = dst;
            isc.edge = edge;
            isc.point.x = xx;
            isc.point.y = yy;
        }
    }

    PolyK._updateISC = function(dx, dy, a1, b1, b2, c, edge, isc)
    {
        var nrl = PolyK._P.dist(a1, c);
        if(nrl<isc.dist)
        {
            var ibl = 1/PolyK._P.dist(b1, b2);
            var nx = -(b2.y-b1.y)*ibl;
            var ny =  (b2.x-b1.x)*ibl;
            var ddot = 2*(dx*nx+dy*ny);
            isc.dist = nrl;
            isc.norm.x = nx;
            isc.norm.y = ny;
            isc.refl.x = -ddot*nx+dx;
            isc.refl.y = -ddot*ny+dy;
            isc.edge = edge;
        }
    }

    PolyK._getPoints = function(ps, ind0, ind1)
    {
        var n = ps.length;
        var nps = [];
        if(ind1<ind0) ind1 += n;
        for(var i=ind0; i<= ind1; i++) nps.push(ps[i%n]);
        return nps;
    }

    PolyK._firstWithFlag = function(ps, ind)
    {
        var n = ps.length;
        while(true)
        {
            ind = (ind+1)%n;
            if(ps[ind].flag) return ind;
        }
    }
    */
    PolyK._PointInTriangle = function(px, py, ax, ay, bx, by, cx, cy)
    {
        var v0x = cx-ax;
        var v0y = cy-ay;
        var v1x = bx-ax;
        var v1y = by-ay;
        var v2x = px-ax;
        var v2y = py-ay;

        var dot00 = v0x*v0x+v0y*v0y;
        var dot01 = v0x*v1x+v0y*v1y;
        var dot02 = v0x*v2x+v0y*v2y;
        var dot11 = v1x*v1x+v1y*v1y;
        var dot12 = v1x*v2x+v1y*v2y;

        var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        var v = (dot00 * dot12 - dot01 * dot02) * invDenom;

        // Check if point is in triangle
        return (u >= 0) && (v >= 0) && (u + v < 1);
    }
    /*
    PolyK._RayLineIntersection = function(a1, a2, b1, b2, c)
    {
        var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);
        var day = (a1.y-a2.y), dby = (b1.y-b2.y);

        var Den = dax*dby - day*dbx;
        if (Den == 0) return null;  // parallel

        var A = (a1.x * a2.y - a1.y * a2.x);
        var B = (b1.x * b2.y - b1.y * b2.x);

        var I = c;
        var iDen = 1/Den;
        I.x = ( A*dbx - dax*B ) * iDen;
        I.y = ( A*dby - day*B ) * iDen;

        if(!PolyK._InRect(I, b1, b2)) return null;
        if((day>0 && I.y>a1.y) || (day<0 && I.y<a1.y)) return null;
        if((dax>0 && I.x>a1.x) || (dax<0 && I.x<a1.x)) return null;
        return I;
    }

    PolyK._GetLineIntersection = function(a1, a2, b1, b2, c)
    {
        var dax = (a1.x-a2.x), dbx = (b1.x-b2.x);
        var day = (a1.y-a2.y), dby = (b1.y-b2.y);

        var Den = dax*dby - day*dbx;
        if (Den == 0) return null;  // parallel

        var A = (a1.x * a2.y - a1.y * a2.x);
        var B = (b1.x * b2.y - b1.y * b2.x);

        var I = c;
        I.x = ( A*dbx - dax*B ) / Den;
        I.y = ( A*dby - day*B ) / Den;

        if(PolyK._InRect(I, a1, a2) && PolyK._InRect(I, b1, b2)) return I;
        return null;
    }

    PolyK._InRect = function(a, b, c)
    {
        if  (b.x == c.x) return (a.y>=Math.min(b.y, c.y) && a.y<=Math.max(b.y, c.y));
        if  (b.y == c.y) return (a.x>=Math.min(b.x, c.x) && a.x<=Math.max(b.x, c.x));

        if(a.x >= Math.min(b.x, c.x) && a.x <= Math.max(b.x, c.x)
        && a.y >= Math.min(b.y, c.y) && a.y <= Math.max(b.y, c.y))
        return true;
        return false;
    }
    */
    PolyK._convex = function(ax, ay, bx, by, cx, cy)
    {
        return (ay-by)*(cx-bx) + (bx-ax)*(cy-by) >= 0;
    }
    /*
    PolyK._P = function(x,y)
    {
        this.x = x;
        this.y = y;
        this.flag = false;
    }
    PolyK._P.prototype.toString = function()
    {
        return "Point ["+this.x+", "+this.y+"]";
    }
    PolyK._P.dist = function(a,b)
    {
        var dx = b.x-a.x;
        var dy = b.y-a.y;
        return Math.sqrt(dx*dx + dy*dy);
    }

    PolyK._tp = [];
    for(var i=0; i<10; i++) PolyK._tp.push(new PolyK._P(0,0));
        */

module.exports = PolyK;

},{}],48:[function(require,module,exports){
/* Copyright (c) 2013, Brandon Jones, Colin MacKenzie IV. All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice, this
    list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */

/**
 * The vec2 object from glMatrix, with some extensions and some removed methods. See http://glmatrix.net.
 * @class vec2
 */

var vec2 = module.exports = {};

var Utils = require('../utils/Utils');

/**
 * Make a cross product and only return the z component
 * @method crossLength
 * @static
 * @param  {Array} a
 * @param  {Array} b
 * @return {Number}
 */
vec2.crossLength = function(a,b){
    return a[0] * b[1] - a[1] * b[0];
};

/**
 * Cross product between a vector and the Z component of a vector
 * @method crossVZ
 * @static
 * @param  {Array} out
 * @param  {Array} vec
 * @param  {Number} zcomp
 * @return {Number}
 */
vec2.crossVZ = function(out, vec, zcomp){
    vec2.rotate(out,vec,-Math.PI/2);// Rotate according to the right hand rule
    vec2.scale(out,out,zcomp);      // Scale with z
    return out;
};

/**
 * Cross product between a vector and the Z component of a vector
 * @method crossZV
 * @static
 * @param  {Array} out
 * @param  {Number} zcomp
 * @param  {Array} vec
 * @return {Number}
 */
vec2.crossZV = function(out, zcomp, vec){
    vec2.rotate(out,vec,Math.PI/2); // Rotate according to the right hand rule
    vec2.scale(out,out,zcomp);      // Scale with z
    return out;
};

/**
 * Rotate a vector by an angle
 * @method rotate
 * @static
 * @param  {Array} out
 * @param  {Array} a
 * @param  {Number} angle
 */
vec2.rotate = function(out,a,angle){
    if(angle !== 0){
        var c = Math.cos(angle),
            s = Math.sin(angle),
            x = a[0],
            y = a[1];
        out[0] = c*x -s*y;
        out[1] = s*x +c*y;
    } else {
        out[0] = a[0];
        out[1] = a[1];
    }
};

/**
 * Rotate a vector 90 degrees clockwise
 * @method rotate90cw
 * @static
 * @param  {Array} out
 * @param  {Array} a
 * @param  {Number} angle
 */
vec2.rotate90cw = function(out, a) {
    var x = a[0];
    var y = a[1];
    out[0] = y;
    out[1] = -x;
};

/**
 * Transform a point position to local frame.
 * @method toLocalFrame
 * @param  {Array} out
 * @param  {Array} worldPoint
 * @param  {Array} framePosition
 * @param  {Number} frameAngle
 */
vec2.toLocalFrame = function(out, worldPoint, framePosition, frameAngle){
    vec2.copy(out, worldPoint);
    vec2.sub(out, out, framePosition);
    vec2.rotate(out, out, -frameAngle);
};

/**
 * Transform a point position to global frame.
 * @method toGlobalFrame
 * @param  {Array} out
 * @param  {Array} localPoint
 * @param  {Array} framePosition
 * @param  {Number} frameAngle
 */
vec2.toGlobalFrame = function(out, localPoint, framePosition, frameAngle){
    vec2.copy(out, localPoint);
    vec2.rotate(out, out, frameAngle);
    vec2.add(out, out, framePosition);
};

/**
 * Transform a vector to local frame.
 * @method vectorToLocalFrame
 * @param  {Array} out
 * @param  {Array} worldVector
 * @param  {Number} frameAngle
 */
vec2.vectorToLocalFrame = function(out, worldVector, frameAngle){
    vec2.rotate(out, worldVector, -frameAngle);
};

/**
 * Transform a point position to global frame.
 * @method toGlobalFrame
 * @param  {Array} out
 * @param  {Array} localVector
 * @param  {Number} frameAngle
 */
vec2.vectorToGlobalFrame = function(out, localVector, frameAngle){
    vec2.rotate(out, localVector, frameAngle);
};

/**
 * Compute centroid of a triangle spanned by vectors a,b,c. See http://easycalculation.com/analytical/learn-centroid.php
 * @method centroid
 * @static
 * @param  {Array} out
 * @param  {Array} a
 * @param  {Array} b
 * @param  {Array} c
 * @return  {Array} The out object
 */
vec2.centroid = function(out, a, b, c){
    vec2.add(out, a, b);
    vec2.add(out, out, c);
    vec2.scale(out, out, 1/3);
    return out;
};

/**
 * Creates a new, empty vec2
 * @static
 * @method create
 * @return {Array} a new 2D vector
 */
vec2.create = function() {
    var out = new Utils.ARRAY_TYPE(2);
    out[0] = 0;
    out[1] = 0;
    return out;
};

/**
 * Creates a new vec2 initialized with values from an existing vector
 * @static
 * @method clone
 * @param {Array} a vector to clone
 * @return {Array} a new 2D vector
 */
vec2.clone = function(a) {
    var out = new Utils.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Creates a new vec2 initialized with the given values
 * @static
 * @method fromValues
 * @param {Number} x X component
 * @param {Number} y Y component
 * @return {Array} a new 2D vector
 */
vec2.fromValues = function(x, y) {
    var out = new Utils.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Copy the values from one vec2 to another
 * @static
 * @method copy
 * @param {Array} out the receiving vector
 * @param {Array} a the source vector
 * @return {Array} out
 */
vec2.copy = function(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
};

/**
 * Set the components of a vec2 to the given values
 * @static
 * @method set
 * @param {Array} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @return {Array} out
 */
vec2.set = function(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
};

/**
 * Adds two vec2's
 * @static
 * @method add
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.add = function(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
};

/**
 * Subtracts two vec2's
 * @static
 * @method subtract
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.subtract = function(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
};

/**
 * Alias for vec2.subtract
 * @static
 * @method sub
 */
vec2.sub = vec2.subtract;

/**
 * Multiplies two vec2's
 * @static
 * @method multiply
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.multiply = function(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
};

/**
 * Alias for vec2.multiply
 * @static
 * @method mul
 */
vec2.mul = vec2.multiply;

/**
 * Divides two vec2's
 * @static
 * @method divide
 * @param {Array} out the receiving vector
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Array} out
 */
vec2.divide = function(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
};

/**
 * Alias for vec2.divide
 * @static
 * @method div
 */
vec2.div = vec2.divide;

/**
 * Scales a vec2 by a scalar number
 * @static
 * @method scale
 * @param {Array} out the receiving vector
 * @param {Array} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @return {Array} out
 */
vec2.scale = function(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
};

/**
 * Calculates the euclidian distance between two vec2's
 * @static
 * @method distance
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Number} distance between a and b
 */
vec2.distance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for vec2.distance
 * @static
 * @method dist
 */
vec2.dist = vec2.distance;

/**
 * Calculates the squared euclidian distance between two vec2's
 * @static
 * @method squaredDistance
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Number} squared distance between a and b
 */
vec2.squaredDistance = function(a, b) {
    var x = b[0] - a[0],
        y = b[1] - a[1];
    return x*x + y*y;
};

/**
 * Alias for vec2.squaredDistance
 * @static
 * @method sqrDist
 */
vec2.sqrDist = vec2.squaredDistance;

/**
 * Calculates the length of a vec2
 * @static
 * @method length
 * @param {Array} a vector to calculate length of
 * @return {Number} length of a
 */
vec2.length = function (a) {
    var x = a[0],
        y = a[1];
    return Math.sqrt(x*x + y*y);
};

/**
 * Alias for vec2.length
 * @method len
 * @static
 */
vec2.len = vec2.length;

/**
 * Calculates the squared length of a vec2
 * @static
 * @method squaredLength
 * @param {Array} a vector to calculate squared length of
 * @return {Number} squared length of a
 */
vec2.squaredLength = function (a) {
    var x = a[0],
        y = a[1];
    return x*x + y*y;
};

/**
 * Alias for vec2.squaredLength
 * @static
 * @method sqrLen
 */
vec2.sqrLen = vec2.squaredLength;

/**
 * Negates the components of a vec2
 * @static
 * @method negate
 * @param {Array} out the receiving vector
 * @param {Array} a vector to negate
 * @return {Array} out
 */
vec2.negate = function(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
};

/**
 * Normalize a vec2
 * @static
 * @method normalize
 * @param {Array} out the receiving vector
 * @param {Array} a vector to normalize
 * @return {Array} out
 */
vec2.normalize = function(out, a) {
    var x = a[0],
        y = a[1];
    var len = x*x + y*y;
    if (len > 0) {
        //TODO: evaluate use of glm_invsqrt here?
        len = 1 / Math.sqrt(len);
        out[0] = a[0] * len;
        out[1] = a[1] * len;
    }
    return out;
};

/**
 * Calculates the dot product of two vec2's
 * @static
 * @method dot
 * @param {Array} a the first operand
 * @param {Array} b the second operand
 * @return {Number} dot product of a and b
 */
vec2.dot = function (a, b) {
    return a[0] * b[0] + a[1] * b[1];
};

/**
 * Returns a string representation of a vector
 * @static
 * @method str
 * @param {Array} vec vector to represent as a string
 * @return {String} string representation of the vector
 */
vec2.str = function (a) {
    return 'vec2(' + a[0] + ', ' + a[1] + ')';
};

/**
 * Linearly interpolate/mix two vectors.
 * @static
 * @method lerp
 * @param {Array} out
 * @param {Array} a First vector
 * @param {Array} b Second vector
 * @param {number} t Lerp factor
 */
vec2.lerp = function (out, a, b, t) {
    var ax = a[0],
        ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
};

/**
 * Reflect a vector along a normal.
 * @static
 * @method reflect
 * @param {Array} out
 * @param {Array} vector
 * @param {Array} normal
 */
vec2.reflect = function(out, vector, normal){
    var dot = vector[0] * normal[0] + vector[1] * normal[1];
    out[0] = vector[0] - 2 * normal[0] * dot;
    out[1] = vector[1] - 2 * normal[1] * dot;
};

/**
 * Get the intersection point between two line segments.
 * @static
 * @method getLineSegmentsIntersection
 * @param  {Array} out
 * @param  {Array} p0
 * @param  {Array} p1
 * @param  {Array} p2
 * @param  {Array} p3
 * @return {boolean} True if there was an intersection, otherwise false.
 */
vec2.getLineSegmentsIntersection = function(out, p0, p1, p2, p3) {
    var t = vec2.getLineSegmentsIntersectionFraction(p0, p1, p2, p3);
    if(t < 0){
        return false;
    } else {
        out[0] = p0[0] + (t * (p1[0] - p0[0]));
        out[1] = p0[1] + (t * (p1[1] - p0[1]));
        return true;
    }
};

/**
 * Get the intersection fraction between two line segments. If successful, the intersection is at p0 + t * (p1 - p0)
 * @static
 * @method getLineSegmentsIntersectionFraction
 * @param  {Array} p0
 * @param  {Array} p1
 * @param  {Array} p2
 * @param  {Array} p3
 * @return {number} A number between 0 and 1 if there was an intersection, otherwise -1.
 */
vec2.getLineSegmentsIntersectionFraction = function(p0, p1, p2, p3) {
    var s1_x = p1[0] - p0[0];
    var s1_y = p1[1] - p0[1];
    var s2_x = p3[0] - p2[0];
    var s2_y = p3[1] - p2[1];

    var s, t;
    s = (-s1_y * (p0[0] - p2[0]) + s1_x * (p0[1] - p2[1])) / (-s2_x * s1_y + s1_x * s2_y);
    t = ( s2_x * (p0[1] - p2[1]) - s2_y * (p0[0] - p2[0])) / (-s2_x * s1_y + s1_x * s2_y);
    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) { // Collision detected
        return t;
    }
    return -1; // No collision
};

},{"../utils/Utils":75}],49:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   decomp = require('poly-decomp')
,   Convex = require('../shapes/Convex')
,   RaycastResult = require('../collision/RaycastResult')
,   Ray = require('../collision/Ray')
,   AABB = require('../collision/AABB')
,   EventEmitter = require('../events/EventEmitter');

module.exports = Body;

/**
 * A rigid body. Has got a center of mass, position, velocity and a number of
 * shapes that are used for collisions.
 *
 * @class Body
 * @constructor
 * @extends EventEmitter
 * @param {Object} [options]
 * @param {Array} [options.force]
 * @param {Array} [options.position]
 * @param {Array} [options.velocity]
 * @param {Boolean} [options.allowSleep]
 * @param {Boolean} [options.collisionResponse]
 * @param {Number} [options.angle=0]
 * @param {Number} [options.angularForce=0]
 * @param {Number} [options.angularVelocity=0]
 * @param {Number} [options.ccdIterations=10]
 * @param {Number} [options.ccdSpeedThreshold=-1]
 * @param {Number} [options.fixedRotation=false]
 * @param {Number} [options.gravityScale]
 * @param {Number} [options.id]
 * @param {Number} [options.mass=0] A number >= 0. If zero, the .type will be set to Body.STATIC.
 * @param {Number} [options.sleepSpeedLimit]
 * @param {Number} [options.sleepTimeLimit]
 *
 * @example
 *
 *     // Create a typical dynamic body
 *     var body = new Body({
 *         mass: 1,
 *         position: [0, 0],
 *         angle: 0,
 *         velocity: [0, 0],
 *         angularVelocity: 0
 *     });
 *
 *     // Add a circular shape to the body
 *     body.addShape(new Circle({ radius: 1 }));
 *
 *     // Add the body to the world
 *     world.addBody(body);
 */
function Body(options){
    options = options || {};

    EventEmitter.call(this);

    /**
     * The body identifyer
     * @property id
     * @type {Number}
     */
    this.id = options.id || ++Body._idCounter;

    /**
     * The world that this body is added to. This property is set to NULL if the body is not added to any world.
     * @property world
     * @type {World}
     */
    this.world = null;

    /**
     * The shapes of the body.
     *
     * @property shapes
     * @type {Array}
     */
    this.shapes = [];

    /**
     * The mass of the body.
     * @property mass
     * @type {number}
     */
    this.mass = options.mass || 0;

    /**
     * The inverse mass of the body.
     * @property invMass
     * @type {number}
     */
    this.invMass = 0;

    /**
     * The inertia of the body around the Z axis.
     * @property inertia
     * @type {number}
     */
    this.inertia = 0;

    /**
     * The inverse inertia of the body.
     * @property invInertia
     * @type {number}
     */
    this.invInertia = 0;

    this.invMassSolve = 0;
    this.invInertiaSolve = 0;

    /**
     * Set to true if you want to fix the rotation of the body.
     * @property fixedRotation
     * @type {Boolean}
     */
    this.fixedRotation = !!options.fixedRotation;

    /**
     * Set to true if you want to fix the body movement along the X axis. The body will still be able to move along Y.
     * @property {Boolean} fixedX
     */
    this.fixedX = !!options.fixedX;

    /**
     * Set to true if you want to fix the body movement along the Y axis. The body will still be able to move along X.
     * @property {Boolean} fixedY
     */
    this.fixedY = !!options.fixedY;

    /**
     * @private
     * @property {array} massMultiplier
     */
    this.massMultiplier = vec2.create();

    /**
     * The position of the body
     * @property position
     * @type {Array}
     */
    this.position = vec2.fromValues(0,0);
    if(options.position){
        vec2.copy(this.position, options.position);
    }

    /**
     * The interpolated position of the body. Use this for rendering.
     * @property interpolatedPosition
     * @type {Array}
     */
    this.interpolatedPosition = vec2.fromValues(0,0);

    /**
     * The interpolated angle of the body. Use this for rendering.
     * @property interpolatedAngle
     * @type {Number}
     */
    this.interpolatedAngle = 0;

    /**
     * The previous position of the body.
     * @property previousPosition
     * @type {Array}
     */
    this.previousPosition = vec2.fromValues(0,0);

    /**
     * The previous angle of the body.
     * @property previousAngle
     * @type {Number}
     */
    this.previousAngle = 0;

    /**
     * The current velocity of the body.
     * @property velocity
     * @type {Array}
     */
    this.velocity = vec2.fromValues(0,0);
    if(options.velocity){
        vec2.copy(this.velocity, options.velocity);
    }

    /**
     * Constraint velocity that was added to the body during the last step.
     * @property vlambda
     * @type {Array}
     */
    this.vlambda = vec2.fromValues(0,0);

    /**
     * Angular constraint velocity that was added to the body during last step.
     * @property wlambda
     * @type {Array}
     */
    this.wlambda = 0;

    /**
     * The angle of the body, in radians.
     * @property angle
     * @type {number}
     * @example
     *     // The angle property is not normalized to the interval 0 to 2*pi, it can be any value.
     *     // If you need a value between 0 and 2*pi, use the following function to normalize it.
     *     function normalizeAngle(angle){
     *         angle = angle % (2*Math.PI);
     *         if(angle < 0){
     *             angle += (2*Math.PI);
     *         }
     *         return angle;
     *     }
     */
    this.angle = options.angle || 0;

    /**
     * The angular velocity of the body, in radians per second.
     * @property angularVelocity
     * @type {number}
     */
    this.angularVelocity = options.angularVelocity || 0;

    /**
     * The force acting on the body. Since the body force (and {{#crossLink "Body/angularForce:property"}}{{/crossLink}}) will be zeroed after each step, so you need to set the force before each step.
     * @property force
     * @type {Array}
     *
     * @example
     *     // This produces a forcefield of 1 Newton in the positive x direction.
     *     for(var i=0; i<numSteps; i++){
     *         body.force[0] = 1;
     *         world.step(1/60);
     *     }
     *
     * @example
     *     // This will apply a rotational force on the body
     *     for(var i=0; i<numSteps; i++){
     *         body.angularForce = -3;
     *         world.step(1/60);
     *     }
     */
    this.force = vec2.create();
    if(options.force){
        vec2.copy(this.force, options.force);
    }

    /**
     * The angular force acting on the body. See {{#crossLink "Body/force:property"}}{{/crossLink}}.
     * @property angularForce
     * @type {number}
     */
    this.angularForce = options.angularForce || 0;

    /**
     * The linear damping acting on the body in the velocity direction. Should be a value between 0 and 1.
     * @property damping
     * @type {Number}
     * @default 0.1
     */
    this.damping = typeof(options.damping) === "number" ? options.damping : 0.1;

    /**
     * The angular force acting on the body. Should be a value between 0 and 1.
     * @property angularDamping
     * @type {Number}
     * @default 0.1
     */
    this.angularDamping = typeof(options.angularDamping) === "number" ? options.angularDamping : 0.1;

    /**
     * The type of motion this body has. Should be one of: {{#crossLink "Body/STATIC:property"}}Body.STATIC{{/crossLink}}, {{#crossLink "Body/DYNAMIC:property"}}Body.DYNAMIC{{/crossLink}} and {{#crossLink "Body/KINEMATIC:property"}}Body.KINEMATIC{{/crossLink}}.
     *
     * * Static bodies do not move, and they do not respond to forces or collision.
     * * Dynamic bodies body can move and respond to collisions and forces.
     * * Kinematic bodies only moves according to its .velocity, and does not respond to collisions or force.
     *
     * @property type
     * @type {number}
     *
     * @example
     *     // Bodies are static by default. Static bodies will never move.
     *     var body = new Body();
     *     console.log(body.type == Body.STATIC); // true
     *
     * @example
     *     // By setting the mass of a body to a nonzero number, the body
     *     // will become dynamic and will move and interact with other bodies.
     *     var dynamicBody = new Body({
     *         mass : 1
     *     });
     *     console.log(dynamicBody.type == Body.DYNAMIC); // true
     *
     * @example
     *     // Kinematic bodies will only move if you change their velocity.
     *     var kinematicBody = new Body({
     *         type: Body.KINEMATIC // Type can be set via the options object.
     *     });
     */
    this.type = Body.STATIC;

    if(typeof(options.type) !== 'undefined'){
        this.type = options.type;
    } else if(!options.mass){
        this.type = Body.STATIC;
    } else {
        this.type = Body.DYNAMIC;
    }

    /**
     * Bounding circle radius.
     * @property boundingRadius
     * @type {Number}
     */
    this.boundingRadius = 0;

    /**
     * Bounding box of this body.
     * @property aabb
     * @type {AABB}
     */
    this.aabb = new AABB();

    /**
     * Indicates if the AABB needs update. Update it with {{#crossLink "Body/updateAABB:method"}}.updateAABB(){{/crossLink}}.
     * @property aabbNeedsUpdate
     * @type {Boolean}
     * @see updateAABB
     *
     * @example
     *     // Force update the AABB
     *     body.aabbNeedsUpdate = true;
     *     body.updateAABB();
     *     console.log(body.aabbNeedsUpdate); // false
     */
    this.aabbNeedsUpdate = true;

    /**
     * If true, the body will automatically fall to sleep. Note that you need to enable sleeping in the {{#crossLink "World"}}{{/crossLink}} before anything will happen.
     * @property allowSleep
     * @type {Boolean}
     * @default true
     */
    this.allowSleep = options.allowSleep !== undefined ? options.allowSleep : true;

    this.wantsToSleep = false;

    /**
     * One of {{#crossLink "Body/AWAKE:property"}}Body.AWAKE{{/crossLink}}, {{#crossLink "Body/SLEEPY:property"}}Body.SLEEPY{{/crossLink}} and {{#crossLink "Body/SLEEPING:property"}}Body.SLEEPING{{/crossLink}}.
     *
     * The body is initially Body.AWAKE. If its velocity norm is below .sleepSpeedLimit, the sleepState will become Body.SLEEPY. If the body continues to be Body.SLEEPY for .sleepTimeLimit seconds, it will fall asleep (Body.SLEEPY).
     *
     * @property sleepState
     * @type {Number}
     * @default Body.AWAKE
     */
    this.sleepState = Body.AWAKE;

    /**
     * If the speed (the norm of the velocity) is smaller than this value, the body is considered sleepy.
     * @property sleepSpeedLimit
     * @type {Number}
     * @default 0.2
     */
    this.sleepSpeedLimit = options.sleepSpeedLimit !== undefined ? options.sleepSpeedLimit : 0.2;

    /**
     * If the body has been sleepy for this sleepTimeLimit seconds, it is considered sleeping.
     * @property sleepTimeLimit
     * @type {Number}
     * @default 1
     */
    this.sleepTimeLimit = options.sleepTimeLimit !== undefined ? options.sleepTimeLimit : 1;

    /**
     * Gravity scaling factor. If you want the body to ignore gravity, set this to zero. If you want to reverse gravity, set it to -1.
     * @property {Number} gravityScale
     * @default 1
     */
    this.gravityScale = options.gravityScale !== undefined ? options.gravityScale : 1;

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled. That means that this body will move through other bodies, but it will still trigger contact events, etc.
     * @property {Boolean} collisionResponse
     */
    this.collisionResponse = options.collisionResponse !== undefined ? options.collisionResponse : true;

    /**
     * How long the body has been sleeping.
     * @property {Number} idleTime
     */
    this.idleTime = 0;

    /**
     * The last time when the body went to SLEEPY state.
     * @property {Number} timeLastSleepy
     * @private
     */
    this.timeLastSleepy = 0;

    /**
     * If the body speed exceeds this threshold, CCD (continuous collision detection) will be enabled. Set it to a negative number to disable CCD completely for this body.
     * @property {number} ccdSpeedThreshold
     * @default -1
     */
    this.ccdSpeedThreshold = options.ccdSpeedThreshold !== undefined ? options.ccdSpeedThreshold : -1;

    /**
     * The number of iterations that should be used when searching for the time of impact during CCD. A larger number will assure that there's a small penetration on CCD collision, but a small number will give more performance.
     * @property {number} ccdIterations
     * @default 10
     */
    this.ccdIterations = options.ccdIterations !== undefined ? options.ccdIterations : 10;

    this.concavePath = null;

    this._wakeUpAfterNarrowphase = false;

    this.updateMassProperties();
}
Body.prototype = new EventEmitter();
Body.prototype.constructor = Body;

Body._idCounter = 0;

/**
 * @private
 * @method updateSolveMassProperties
 */
Body.prototype.updateSolveMassProperties = function(){
    if(this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC){
        this.invMassSolve = 0;
        this.invInertiaSolve = 0;
    } else {
        this.invMassSolve = this.invMass;
        this.invInertiaSolve = this.invInertia;
    }
};

/**
 * Set the total density of the body
 * @method setDensity
 * @param {number} density
 */
Body.prototype.setDensity = function(density) {
    var totalArea = this.getArea();
    this.mass = totalArea * density;
    this.updateMassProperties();
};

/**
 * Get the total area of all shapes in the body
 * @method getArea
 * @return {Number}
 */
Body.prototype.getArea = function() {
    var totalArea = 0;
    for(var i=0; i<this.shapes.length; i++){
        totalArea += this.shapes[i].area;
    }
    return totalArea;
};

/**
 * Get the AABB from the body. The AABB is updated if necessary.
 * @method getAABB
 * @return {AABB} The AABB instance (this.aabb)
 */
Body.prototype.getAABB = function(){
    if(this.aabbNeedsUpdate){
        this.updateAABB();
    }
    return this.aabb;
};

var shapeAABB = new AABB(),
    tmp = vec2.create();

/**
 * Updates the AABB of the Body, and set .aabbNeedsUpdate = false.
 * @method updateAABB
 */
Body.prototype.updateAABB = function() {
    var shapes = this.shapes,
        N = shapes.length,
        offset = tmp,
        bodyAngle = this.angle;

    for(var i=0; i!==N; i++){
        var shape = shapes[i],
            angle = shape.angle + bodyAngle;

        // Get shape world offset
        vec2.rotate(offset, shape.position, bodyAngle);
        vec2.add(offset, offset, this.position);

        // Get shape AABB
        shape.computeAABB(shapeAABB, offset, angle);

        if(i===0){
            this.aabb.copy(shapeAABB);
        } else {
            this.aabb.extend(shapeAABB);
        }
    }

    this.aabbNeedsUpdate = false;
};

/**
 * Update the bounding radius of the body (this.boundingRadius). Should be done if any of the shape dimensions or positions are changed.
 * @method updateBoundingRadius
 */
Body.prototype.updateBoundingRadius = function(){
    var shapes = this.shapes,
        N = shapes.length,
        radius = 0;

    for(var i=0; i!==N; i++){
        var shape = shapes[i],
            offset = vec2.length(shape.position),
            r = shape.boundingRadius;
        if(offset + r > radius){
            radius = offset + r;
        }
    }

    this.boundingRadius = radius;
};

/**
 * Add a shape to the body. You can pass a local transform when adding a shape,
 * so that the shape gets an offset and angle relative to the body center of mass.
 * Will automatically update the mass properties and bounding radius.
 *
 * @method addShape
 * @param  {Shape}              shape
 * @param  {Array} [offset] Local body offset of the shape.
 * @param  {Number}             [angle]  Local body angle.
 *
 * @example
 *     var body = new Body(),
 *         shape = new Circle({ radius: 1 });
 *
 *     // Add the shape to the body, positioned in the center
 *     body.addShape(shape);
 *
 *     // Add another shape to the body, positioned 1 unit length from the body center of mass along the local x-axis.
 *     body.addShape(shape,[1,0]);
 *
 *     // Add another shape to the body, positioned 1 unit length from the body center of mass along the local y-axis, and rotated 90 degrees CCW.
 *     body.addShape(shape,[0,1],Math.PI/2);
 */
Body.prototype.addShape = function(shape, offset, angle){
    if(shape.body){
        throw new Error('A shape can only be added to one body.');
    }
    shape.body = this;

    // Copy the offset vector
    if(offset){
        vec2.copy(shape.position, offset);
    } else {
        vec2.set(shape.position, 0, 0);
    }

    shape.angle = angle || 0;

    this.shapes.push(shape);
    this.updateMassProperties();
    this.updateBoundingRadius();

    this.aabbNeedsUpdate = true;
};

/**
 * Remove a shape
 * @method removeShape
 * @param  {Shape} shape
 * @return {Boolean} True if the shape was found and removed, else false.
 */
Body.prototype.removeShape = function(shape){
    var idx = this.shapes.indexOf(shape);

    if(idx !== -1){
        this.shapes.splice(idx,1);
        this.aabbNeedsUpdate = true;
        shape.body = null;
        return true;
    } else {
        return false;
    }
};

/**
 * Updates .inertia, .invMass, .invInertia for this Body. Should be called when
 * changing the structure or mass of the Body.
 *
 * @method updateMassProperties
 *
 * @example
 *     body.mass += 1;
 *     body.updateMassProperties();
 */
Body.prototype.updateMassProperties = function(){
    if(this.type === Body.STATIC || this.type === Body.KINEMATIC){

        this.mass = Number.MAX_VALUE;
        this.invMass = 0;
        this.inertia = Number.MAX_VALUE;
        this.invInertia = 0;

    } else {

        var shapes = this.shapes,
            N = shapes.length,
            m = this.mass / N,
            I = 0;

        if(!this.fixedRotation){
            for(var i=0; i<N; i++){
                var shape = shapes[i],
                    r2 = vec2.squaredLength(shape.position),
                    Icm = shape.computeMomentOfInertia(m);
                I += Icm + m*r2;
            }
            this.inertia = I;
            this.invInertia = I>0 ? 1/I : 0;

        } else {
            this.inertia = Number.MAX_VALUE;
            this.invInertia = 0;
        }

        // Inverse mass properties are easy
        this.invMass = 1 / this.mass;

        vec2.set(
            this.massMultiplier,
            this.fixedX ? 0 : 1,
            this.fixedY ? 0 : 1
        );
    }
};

var Body_applyForce_r = vec2.create();

/**
 * Apply force to a point relative to the center of mass of the body. This could for example be a point on the RigidBody surface. Applying force this way will add to Body.force and Body.angularForce. If relativePoint is zero, the force will be applied directly on the center of mass, and the torque produced will be zero.
 * @method applyForce
 * @param {Array} force The force to add.
 * @param {Array} [relativePoint] A world point to apply the force on.
 */
Body.prototype.applyForce = function(force, relativePoint){

    // Add linear force
    vec2.add(this.force, this.force, force);

    if(relativePoint){

        // Compute produced rotational force
        var rotForce = vec2.crossLength(relativePoint,force);

        // Add rotational force
        this.angularForce += rotForce;
    }
};

/**
 * Apply force to a body-local point.
 * @method applyForceLocal
 * @param  {Array} localForce The force vector to add, oriented in local body space.
 * @param  {Array} [localPoint] A point relative to the body in world space. If not given, it is set to zero and all of the impulse will be excerted on the center of mass.
 */
var Body_applyForce_forceWorld = vec2.create();
var Body_applyForce_pointWorld = vec2.create();
var Body_applyForce_pointLocal = vec2.create();
Body.prototype.applyForceLocal = function(localForce, localPoint){
    localPoint = localPoint || Body_applyForce_pointLocal;
    var worldForce = Body_applyForce_forceWorld;
    var worldPoint = Body_applyForce_pointWorld;
    this.vectorToWorldFrame(worldForce, localForce);
    this.vectorToWorldFrame(worldPoint, localPoint);
    this.applyForce(worldForce, worldPoint);
};

/**
 * Apply impulse to a point relative to the body. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
 * @method applyImpulse
 * @param  {Array} impulse The impulse vector to add, oriented in world space.
 * @param  {Array} [relativePoint] A point relative to the body in world space. If not given, it is set to zero and all of the impulse will be excerted on the center of mass.
 */
var Body_applyImpulse_velo = vec2.create();
Body.prototype.applyImpulse = function(impulseVector, relativePoint){
    if(this.type !== Body.DYNAMIC){
        return;
    }

    // Compute produced central impulse velocity
    var velo = Body_applyImpulse_velo;
    vec2.scale(velo, impulseVector, this.invMass);
    vec2.multiply(velo, this.massMultiplier, velo);

    // Add linear impulse
    vec2.add(this.velocity, velo, this.velocity);

    if(relativePoint){
        // Compute produced rotational impulse velocity
        var rotVelo = vec2.crossLength(relativePoint, impulseVector);
        rotVelo *= this.invInertia;

        // Add rotational Impulse
        this.angularVelocity += rotVelo;
    }
};

/**
 * Apply impulse to a point relative to the body. This could for example be a point on the Body surface. An impulse is a force added to a body during a short period of time (impulse = force * time). Impulses will be added to Body.velocity and Body.angularVelocity.
 * @method applyImpulseLocal
 * @param  {Array} impulse The impulse vector to add, oriented in world space.
 * @param  {Array} [relativePoint] A point relative to the body in world space. If not given, it is set to zero and all of the impulse will be excerted on the center of mass.
 */
var Body_applyImpulse_impulseWorld = vec2.create();
var Body_applyImpulse_pointWorld = vec2.create();
var Body_applyImpulse_pointLocal = vec2.create();
Body.prototype.applyImpulseLocal = function(localImpulse, localPoint){
    localPoint = localPoint || Body_applyImpulse_pointLocal;
    var worldImpulse = Body_applyImpulse_impulseWorld;
    var worldPoint = Body_applyImpulse_pointWorld;
    this.vectorToWorldFrame(worldImpulse, localImpulse);
    this.vectorToWorldFrame(worldPoint, localPoint);
    this.applyImpulse(worldImpulse, worldPoint);
};

/**
 * Transform a world point to local body frame.
 * @method toLocalFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} worldPoint   The input world point
 */
Body.prototype.toLocalFrame = function(out, worldPoint){
    vec2.toLocalFrame(out, worldPoint, this.position, this.angle);
};

/**
 * Transform a local point to world frame.
 * @method toWorldFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} localPoint   The input local point
 */
Body.prototype.toWorldFrame = function(out, localPoint){
    vec2.toGlobalFrame(out, localPoint, this.position, this.angle);
};

/**
 * Transform a world point to local body frame.
 * @method vectorToLocalFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} worldVector  The input world vector
 */
Body.prototype.vectorToLocalFrame = function(out, worldVector){
    vec2.vectorToLocalFrame(out, worldVector, this.angle);
};

/**
 * Transform a local point to world frame.
 * @method vectorToWorldFrame
 * @param  {Array} out          The vector to store the result in
 * @param  {Array} localVector  The input local vector
 */
Body.prototype.vectorToWorldFrame = function(out, localVector){
    vec2.vectorToGlobalFrame(out, localVector, this.angle);
};

/**
 * Reads a polygon shape path, and assembles convex shapes from that and puts them at proper offset points.
 * @method fromPolygon
 * @param {Array} path An array of 2d vectors, e.g. [[0,0],[0,1],...] that resembles a concave or convex polygon. The shape must be simple and without holes.
 * @param {Object} [options]
 * @param {Boolean} [options.optimalDecomp=false]   Set to true if you need optimal decomposition. Warning: very slow for polygons with more than 10 vertices.
 * @param {Boolean} [options.skipSimpleCheck=false] Set to true if you already know that the path is not intersecting itself.
 * @param {Boolean|Number} [options.removeCollinearPoints=false] Set to a number (angle threshold value) to remove collinear points, or false to keep all points.
 * @return {Boolean} True on success, else false.
 */
Body.prototype.fromPolygon = function(path,options){
    options = options || {};

    // Remove all shapes
    for(var i=this.shapes.length; i>=0; --i){
        this.removeShape(this.shapes[i]);
    }

    var p = new decomp.Polygon();
    p.vertices = path;

    // Make it counter-clockwise
    p.makeCCW();

    if(typeof(options.removeCollinearPoints) === "number"){
        p.removeCollinearPoints(options.removeCollinearPoints);
    }

    // Check if any line segment intersects the path itself
    if(typeof(options.skipSimpleCheck) === "undefined"){
        if(!p.isSimple()){
            return false;
        }
    }

    // Save this path for later
    this.concavePath = p.vertices.slice(0);
    for(var i=0; i<this.concavePath.length; i++){
        var v = [0,0];
        vec2.copy(v,this.concavePath[i]);
        this.concavePath[i] = v;
    }

    // Slow or fast decomp?
    var convexes;
    if(options.optimalDecomp){
        convexes = p.decomp();
    } else {
        convexes = p.quickDecomp();
    }

    var cm = vec2.create();

    // Add convexes
    for(var i=0; i!==convexes.length; i++){
        // Create convex
        var c = new Convex({ vertices: convexes[i].vertices });

        // Move all vertices so its center of mass is in the local center of the convex
        for(var j=0; j!==c.vertices.length; j++){
            var v = c.vertices[j];
            vec2.sub(v,v,c.centerOfMass);
        }

        vec2.scale(cm,c.centerOfMass,1);
        c.updateTriangles();
        c.updateCenterOfMass();
        c.updateBoundingRadius();

        // Add the shape
        this.addShape(c,cm);
    }

    this.adjustCenterOfMass();

    this.aabbNeedsUpdate = true;

    return true;
};

var adjustCenterOfMass_tmp1 = vec2.fromValues(0,0),
    adjustCenterOfMass_tmp2 = vec2.fromValues(0,0),
    adjustCenterOfMass_tmp3 = vec2.fromValues(0,0),
    adjustCenterOfMass_tmp4 = vec2.fromValues(0,0);

/**
 * Moves the shape offsets so their center of mass becomes the body center of mass.
 * @method adjustCenterOfMass
 */
Body.prototype.adjustCenterOfMass = function(){
    var offset_times_area = adjustCenterOfMass_tmp2,
        sum =               adjustCenterOfMass_tmp3,
        cm =                adjustCenterOfMass_tmp4,
        totalArea =         0;
    vec2.set(sum,0,0);

    for(var i=0; i!==this.shapes.length; i++){
        var s = this.shapes[i];
        vec2.scale(offset_times_area, s.position, s.area);
        vec2.add(sum, sum, offset_times_area);
        totalArea += s.area;
    }

    vec2.scale(cm,sum,1/totalArea);

    // Now move all shapes
    for(var i=0; i!==this.shapes.length; i++){
        var s = this.shapes[i];
        vec2.sub(s.position, s.position, cm);
    }

    // Move the body position too
    vec2.add(this.position,this.position,cm);

    // And concave path
    for(var i=0; this.concavePath && i<this.concavePath.length; i++){
        vec2.sub(this.concavePath[i], this.concavePath[i], cm);
    }

    this.updateMassProperties();
    this.updateBoundingRadius();
};

/**
 * Sets the force on the body to zero.
 * @method setZeroForce
 */
Body.prototype.setZeroForce = function(){
    vec2.set(this.force,0.0,0.0);
    this.angularForce = 0.0;
};

Body.prototype.resetConstraintVelocity = function(){
    var b = this,
        vlambda = b.vlambda;
    vec2.set(vlambda,0,0);
    b.wlambda = 0;
};

Body.prototype.addConstraintVelocity = function(){
    var b = this,
        v = b.velocity;
    vec2.add( v, v, b.vlambda);
    b.angularVelocity += b.wlambda;
};

/**
 * Apply damping, see <a href="http://code.google.com/p/bullet/issues/detail?id=74">this</a> for details.
 * @method applyDamping
 * @param  {number} dt Current time step
 */
Body.prototype.applyDamping = function(dt){
    if(this.type === Body.DYNAMIC){ // Only for dynamic bodies
        var v = this.velocity;
        vec2.scale(v, v, Math.pow(1.0 - this.damping,dt));
        this.angularVelocity *= Math.pow(1.0 - this.angularDamping,dt);
    }
};

/**
 * Wake the body up. Normally you should not need this, as the body is automatically awoken at events such as collisions.
 * Sets the sleepState to {{#crossLink "Body/AWAKE:property"}}Body.AWAKE{{/crossLink}} and emits the wakeUp event if the body wasn't awake before.
 * @method wakeUp
 */
Body.prototype.wakeUp = function(){
    var s = this.sleepState;
    this.sleepState = Body.AWAKE;
    this.idleTime = 0;
    if(s !== Body.AWAKE){
        this.emit(Body.wakeUpEvent);
    }
};

/**
 * Force body sleep
 * @method sleep
 */
Body.prototype.sleep = function(){
    this.sleepState = Body.SLEEPING;
    this.angularVelocity = 0;
    this.angularForce = 0;
    vec2.set(this.velocity,0,0);
    vec2.set(this.force,0,0);
    this.emit(Body.sleepEvent);
};

/**
 * Called every timestep to update internal sleep timer and change sleep state if needed.
 * @method sleepTick
 * @param {number} time The world time in seconds
 * @param {boolean} dontSleep
 * @param {number} dt
 */
Body.prototype.sleepTick = function(time, dontSleep, dt){
    if(!this.allowSleep || this.type === Body.SLEEPING){
        return;
    }

    this.wantsToSleep = false;

    var sleepState = this.sleepState,
        speedSquared = vec2.squaredLength(this.velocity) + Math.pow(this.angularVelocity,2),
        speedLimitSquared = Math.pow(this.sleepSpeedLimit,2);

    // Add to idle time
    if(speedSquared >= speedLimitSquared){
        this.idleTime = 0;
        this.sleepState = Body.AWAKE;
    } else {
        this.idleTime += dt;
        this.sleepState = Body.SLEEPY;
    }
    if(this.idleTime > this.sleepTimeLimit){
        if(!dontSleep){
            this.sleep();
        } else {
            this.wantsToSleep = true;
        }
    }
};

/**
 * Check if the body is overlapping another body. Note that this method only works if the body was added to a World and if at least one step was taken.
 * @method overlaps
 * @param  {Body} body
 * @return {boolean}
 */
Body.prototype.overlaps = function(body){
    return this.world.overlapKeeper.bodiesAreOverlapping(this, body);
};

var integrate_fhMinv = vec2.create();
var integrate_velodt = vec2.create();

/**
 * Move the body forward in time given its current velocity.
 * @method integrate
 * @param  {Number} dt
 */
Body.prototype.integrate = function(dt){
    var minv = this.invMass,
        f = this.force,
        pos = this.position,
        velo = this.velocity;

    // Save old position
    vec2.copy(this.previousPosition, this.position);
    this.previousAngle = this.angle;

    // Velocity update
    if(!this.fixedRotation){
        this.angularVelocity += this.angularForce * this.invInertia * dt;
    }
    vec2.scale(integrate_fhMinv, f, dt * minv);
    vec2.multiply(integrate_fhMinv, this.massMultiplier, integrate_fhMinv);
    vec2.add(velo, integrate_fhMinv, velo);

    // CCD
    if(!this.integrateToTimeOfImpact(dt)){

        // Regular position update
        vec2.scale(integrate_velodt, velo, dt);
        vec2.add(pos, pos, integrate_velodt);
        if(!this.fixedRotation){
            this.angle += this.angularVelocity * dt;
        }
    }

    this.aabbNeedsUpdate = true;
};

var result = new RaycastResult();
var ray = new Ray({
    mode: Ray.ALL
});
var direction = vec2.create();
var end = vec2.create();
var startToEnd = vec2.create();
var rememberPosition = vec2.create();
Body.prototype.integrateToTimeOfImpact = function(dt){

    if(this.ccdSpeedThreshold < 0 || vec2.squaredLength(this.velocity) < Math.pow(this.ccdSpeedThreshold, 2)){
        return false;
    }

    vec2.normalize(direction, this.velocity);

    vec2.scale(end, this.velocity, dt);
    vec2.add(end, end, this.position);

    vec2.sub(startToEnd, end, this.position);
    var startToEndAngle = this.angularVelocity * dt;
    var len = vec2.length(startToEnd);

    var timeOfImpact = 1;

    var hit;
    var that = this;
    result.reset();
    ray.callback = function (result) {
        if(result.body === that){
            return;
        }
        hit = result.body;
        result.getHitPoint(end, ray);
        vec2.sub(startToEnd, end, that.position);
        timeOfImpact = vec2.length(startToEnd) / len;
        result.stop();
    };
    vec2.copy(ray.from, this.position);
    vec2.copy(ray.to, end);
    ray.update();
    this.world.raycast(result, ray);

    if(!hit){
        return false;
    }

    var rememberAngle = this.angle;
    vec2.copy(rememberPosition, this.position);

    // Got a start and end point. Approximate time of impact using binary search
    var iter = 0;
    var tmin = 0;
    var tmid = 0;
    var tmax = timeOfImpact;
    while (tmax >= tmin && iter < this.ccdIterations) {
        iter++;

        // calculate the midpoint
        tmid = (tmax - tmin) / 2;

        // Move the body to that point
        vec2.scale(integrate_velodt, startToEnd, timeOfImpact);
        vec2.add(this.position, rememberPosition, integrate_velodt);
        this.angle = rememberAngle + startToEndAngle * timeOfImpact;
        this.updateAABB();

        // check overlap
        var overlaps = this.aabb.overlaps(hit.aabb) && this.world.narrowphase.bodiesOverlap(this, hit);

        if (overlaps) {
            // change min to search upper interval
            tmin = tmid;
        } else {
            // change max to search lower interval
            tmax = tmid;
        }
    }

    timeOfImpact = tmid;

    vec2.copy(this.position, rememberPosition);
    this.angle = rememberAngle;

    // move to TOI
    vec2.scale(integrate_velodt, startToEnd, timeOfImpact);
    vec2.add(this.position, this.position, integrate_velodt);
    if(!this.fixedRotation){
        this.angle += startToEndAngle * timeOfImpact;
    }

    return true;
};

/**
 * Get velocity of a point in the body.
 * @method getVelocityAtPoint
 * @param  {Array} result A vector to store the result in
 * @param  {Array} relativePoint A world oriented vector, indicating the position of the point to get the velocity from
 * @return {Array} The result vector
 */
Body.prototype.getVelocityAtPoint = function(result, relativePoint){
    vec2.crossVZ(result, relativePoint, this.angularVelocity);
    vec2.subtract(result, this.velocity, result);
    return result;
};

/**
 * @event sleepy
 */
Body.sleepyEvent = {
    type: "sleepy"
};

/**
 * @event sleep
 */
Body.sleepEvent = {
    type: "sleep"
};

/**
 * @event wakeup
 */
Body.wakeUpEvent = {
    type: "wakeup"
};

/**
 * Dynamic body.
 * @property DYNAMIC
 * @type {Number}
 * @static
 */
Body.DYNAMIC = 1;

/**
 * Static body.
 * @property STATIC
 * @type {Number}
 * @static
 */
Body.STATIC = 2;

/**
 * Kinematic body.
 * @property KINEMATIC
 * @type {Number}
 * @static
 */
Body.KINEMATIC = 4;

/**
 * @property AWAKE
 * @type {Number}
 * @static
 */
Body.AWAKE = 0;

/**
 * @property SLEEPY
 * @type {Number}
 * @static
 */
Body.SLEEPY = 1;

/**
 * @property SLEEPING
 * @type {Number}
 * @static
 */
Body.SLEEPING = 2;


},{"../collision/AABB":25,"../collision/Ray":29,"../collision/RaycastResult":30,"../events/EventEmitter":44,"../math/vec2":48,"../shapes/Convex":58,"poly-decomp":106}],50:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Spring = require('./Spring');
var Utils = require('../utils/Utils');

module.exports = LinearSpring;

/**
 * A spring, connecting two bodies.
 *
 * The Spring explicitly adds force and angularForce to the bodies.
 *
 * @class LinearSpring
 * @extends Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.restLength]   A number > 0. Default is the current distance between the world anchor points.
 * @param {number} [options.stiffness=100]  Spring constant (see Hookes Law). A number >= 0.
 * @param {number} [options.damping=1]      A number >= 0. Default: 1
 * @param {Array}  [options.worldAnchorA]   Where to hook the spring to body A, in world coordinates. Overrides the option "localAnchorA" if given.
 * @param {Array}  [options.worldAnchorB]
 * @param {Array}  [options.localAnchorA]   Where to hook the spring to body A, in local body coordinates. Defaults to the body center.
 * @param {Array}  [options.localAnchorB]
 */
function LinearSpring(bodyA,bodyB,options){
    options = options || {};

    Spring.call(this, bodyA, bodyB, options);

    /**
     * Anchor for bodyA in local bodyA coordinates.
     * @property localAnchorA
     * @type {Array}
     */
    this.localAnchorA = vec2.fromValues(0,0);

    /**
     * Anchor for bodyB in local bodyB coordinates.
     * @property localAnchorB
     * @type {Array}
     */
    this.localAnchorB = vec2.fromValues(0,0);

    if(options.localAnchorA){ vec2.copy(this.localAnchorA, options.localAnchorA); }
    if(options.localAnchorB){ vec2.copy(this.localAnchorB, options.localAnchorB); }
    if(options.worldAnchorA){ this.setWorldAnchorA(options.worldAnchorA); }
    if(options.worldAnchorB){ this.setWorldAnchorB(options.worldAnchorB); }

    var worldAnchorA = vec2.create();
    var worldAnchorB = vec2.create();
    this.getWorldAnchorA(worldAnchorA);
    this.getWorldAnchorB(worldAnchorB);
    var worldDistance = vec2.distance(worldAnchorA, worldAnchorB);

    /**
     * Rest length of the spring.
     * @property restLength
     * @type {number}
     */
    this.restLength = typeof(options.restLength) === "number" ? options.restLength : worldDistance;
}
LinearSpring.prototype = new Spring();
LinearSpring.prototype.constructor = LinearSpring;

/**
 * Set the anchor point on body A, using world coordinates.
 * @method setWorldAnchorA
 * @param {Array} worldAnchorA
 */
LinearSpring.prototype.setWorldAnchorA = function(worldAnchorA){
    this.bodyA.toLocalFrame(this.localAnchorA, worldAnchorA);
};

/**
 * Set the anchor point on body B, using world coordinates.
 * @method setWorldAnchorB
 * @param {Array} worldAnchorB
 */
LinearSpring.prototype.setWorldAnchorB = function(worldAnchorB){
    this.bodyB.toLocalFrame(this.localAnchorB, worldAnchorB);
};

/**
 * Get the anchor point on body A, in world coordinates.
 * @method getWorldAnchorA
 * @param {Array} result The vector to store the result in.
 */
LinearSpring.prototype.getWorldAnchorA = function(result){
    this.bodyA.toWorldFrame(result, this.localAnchorA);
};

/**
 * Get the anchor point on body B, in world coordinates.
 * @method getWorldAnchorB
 * @param {Array} result The vector to store the result in.
 */
LinearSpring.prototype.getWorldAnchorB = function(result){
    this.bodyB.toWorldFrame(result, this.localAnchorB);
};

var applyForce_r =              vec2.create(),
    applyForce_r_unit =         vec2.create(),
    applyForce_u =              vec2.create(),
    applyForce_f =              vec2.create(),
    applyForce_worldAnchorA =   vec2.create(),
    applyForce_worldAnchorB =   vec2.create(),
    applyForce_ri =             vec2.create(),
    applyForce_rj =             vec2.create(),
    applyForce_tmp =            vec2.create();

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
LinearSpring.prototype.applyForce = function(){
    var k = this.stiffness,
        d = this.damping,
        l = this.restLength,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        r = applyForce_r,
        r_unit = applyForce_r_unit,
        u = applyForce_u,
        f = applyForce_f,
        tmp = applyForce_tmp;

    var worldAnchorA = applyForce_worldAnchorA,
        worldAnchorB = applyForce_worldAnchorB,
        ri = applyForce_ri,
        rj = applyForce_rj;

    // Get world anchors
    this.getWorldAnchorA(worldAnchorA);
    this.getWorldAnchorB(worldAnchorB);

    // Get offset points
    vec2.sub(ri, worldAnchorA, bodyA.position);
    vec2.sub(rj, worldAnchorB, bodyB.position);

    // Compute distance vector between world anchor points
    vec2.sub(r, worldAnchorB, worldAnchorA);
    var rlen = vec2.len(r);
    vec2.normalize(r_unit,r);

    //console.log(rlen)
    //console.log("A",vec2.str(worldAnchorA),"B",vec2.str(worldAnchorB))

    // Compute relative velocity of the anchor points, u
    vec2.sub(u, bodyB.velocity, bodyA.velocity);
    vec2.crossZV(tmp, bodyB.angularVelocity, rj);
    vec2.add(u, u, tmp);
    vec2.crossZV(tmp, bodyA.angularVelocity, ri);
    vec2.sub(u, u, tmp);

    // F = - k * ( x - L ) - D * ( u )
    vec2.scale(f, r_unit, -k*(rlen-l) - d*vec2.dot(u,r_unit));

    // Add forces to bodies
    vec2.sub( bodyA.force, bodyA.force, f);
    vec2.add( bodyB.force, bodyB.force, f);

    // Angular force
    var ri_x_f = vec2.crossLength(ri, f);
    var rj_x_f = vec2.crossLength(rj, f);
    bodyA.angularForce -= ri_x_f;
    bodyB.angularForce += rj_x_f;
};

},{"../math/vec2":48,"../utils/Utils":75,"./Spring":52}],51:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Spring = require('./Spring');

module.exports = RotationalSpring;

/**
 * A rotational spring, connecting two bodies rotation. This spring explicitly adds angularForce (torque) to the bodies.
 *
 * The spring can be combined with a {{#crossLink "RevoluteConstraint"}}{{/crossLink}} to make, for example, a mouse trap.
 *
 * @class RotationalSpring
 * @extends Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.restAngle] The relative angle of bodies at which the spring is at rest. If not given, it's set to the current relative angle between the bodies.
 * @param {number} [options.stiffness=100] Spring constant (see Hookes Law). A number >= 0.
 * @param {number} [options.damping=1] A number >= 0.
 */
function RotationalSpring(bodyA, bodyB, options){
    options = options || {};

    Spring.call(this, bodyA, bodyB, options);

    /**
     * Rest angle of the spring.
     * @property restAngle
     * @type {number}
     */
    this.restAngle = typeof(options.restAngle) === "number" ? options.restAngle : bodyB.angle - bodyA.angle;
}
RotationalSpring.prototype = new Spring();
RotationalSpring.prototype.constructor = RotationalSpring;

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
RotationalSpring.prototype.applyForce = function(){
    var k = this.stiffness,
        d = this.damping,
        l = this.restAngle,
        bodyA = this.bodyA,
        bodyB = this.bodyB,
        x = bodyB.angle - bodyA.angle,
        u = bodyB.angularVelocity - bodyA.angularVelocity;

    var torque = - k * (x - l) - d * u * 0;

    bodyA.angularForce -= torque;
    bodyB.angularForce += torque;
};

},{"../math/vec2":48,"./Spring":52}],52:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Utils = require('../utils/Utils');

module.exports = Spring;

/**
 * A spring, connecting two bodies. The Spring explicitly adds force and angularForce to the bodies and does therefore not put load on the constraint solver.
 *
 * @class Spring
 * @constructor
 * @param {Body} bodyA
 * @param {Body} bodyB
 * @param {Object} [options]
 * @param {number} [options.stiffness=100]  Spring constant (see Hookes Law). A number >= 0.
 * @param {number} [options.damping=1]      A number >= 0. Default: 1
 * @param {Array}  [options.localAnchorA]   Where to hook the spring to body A, in local body coordinates. Defaults to the body center.
 * @param {Array}  [options.localAnchorB]
 * @param {Array}  [options.worldAnchorA]   Where to hook the spring to body A, in world coordinates. Overrides the option "localAnchorA" if given.
 * @param {Array}  [options.worldAnchorB]
 */
function Spring(bodyA, bodyB, options){
    options = Utils.defaults(options,{
        stiffness: 100,
        damping: 1,
    });

    /**
     * Stiffness of the spring.
     * @property stiffness
     * @type {number}
     */
    this.stiffness = options.stiffness;

    /**
     * Damping of the spring.
     * @property damping
     * @type {number}
     */
    this.damping = options.damping;

    /**
     * First connected body.
     * @property bodyA
     * @type {Body}
     */
    this.bodyA = bodyA;

    /**
     * Second connected body.
     * @property bodyB
     * @type {Body}
     */
    this.bodyB = bodyB;
}

/**
 * Apply the spring force to the connected bodies.
 * @method applyForce
 */
Spring.prototype.applyForce = function(){
    // To be implemented by subclasses
};

},{"../math/vec2":48,"../utils/Utils":75}],53:[function(require,module,exports){
var vec2 = require('../math/vec2');
var Utils = require('../utils/Utils');
var Constraint = require('../constraints/Constraint');
var FrictionEquation = require('../equations/FrictionEquation');
var Body = require('../objects/Body');

module.exports = TopDownVehicle;

/**
 * @class TopDownVehicle
 * @constructor
 * @param {Body} chassisBody A dynamic body, already added to the world.
 * @param {Object} [options]
 *
 * @example
 *
 *     // Create a dynamic body for the chassis
 *     var chassisBody = new Body({
 *         mass: 1
 *     });
 *     var boxShape = new Box({ width: 0.5, height: 1 });
 *     chassisBody.addShape(boxShape);
 *     world.addBody(chassisBody);
 *
 *     // Create the vehicle
 *     var vehicle = new TopDownVehicle(chassisBody);
 *
 *     // Add one front wheel and one back wheel - we don't actually need four :)
 *     var frontWheel = vehicle.addWheel({
 *         localPosition: [0, 0.5] // front
 *     });
 *     frontWheel.setSideFriction(4);
 *
 *     // Back wheel
 *     var backWheel = vehicle.addWheel({
 *         localPosition: [0, -0.5] // back
 *     });
 *     backWheel.setSideFriction(3); // Less side friction on back wheel makes it easier to drift
 *     vehicle.addToWorld(world);
 *
 *     // Steer value zero means straight forward. Positive is left and negative right.
 *     frontWheel.steerValue = Math.PI / 16;
 *
 *     // Engine force forward
 *     backWheel.engineForce = 10;
 *     backWheel.setBrakeForce(0);
 */
function TopDownVehicle(chassisBody, options){
    options = options || {};

    /**
     * @property {Body} chassisBody
     */
    this.chassisBody = chassisBody;

    /**
     * @property {Array} wheels
     */
    this.wheels = [];

    // A dummy body to constrain the chassis to
    this.groundBody = new Body({ mass: 0 });

    this.world = null;

    var that = this;
    this.preStepCallback = function(){
        that.update();
    };
}

/**
 * @method addToWorld
 * @param {World} world
 */
TopDownVehicle.prototype.addToWorld = function(world){
    this.world = world;
    world.addBody(this.groundBody);
    world.on('preStep', this.preStepCallback);
    for (var i = 0; i < this.wheels.length; i++) {
        var wheel = this.wheels[i];
        world.addConstraint(wheel);
    }
};

/**
 * @method removeFromWorld
 * @param {World} world
 */
TopDownVehicle.prototype.removeFromWorld = function(){
    var world = this.world;
    world.removeBody(this.groundBody);
    world.off('preStep', this.preStepCallback);
    for (var i = 0; i < this.wheels.length; i++) {
        var wheel = this.wheels[i];
        world.removeConstraint(wheel);
    }
    this.world = null;
};

/**
 * @method addWheel
 * @param {object} [wheelOptions]
 * @return {WheelConstraint}
 */
TopDownVehicle.prototype.addWheel = function(wheelOptions){
    var wheel = new WheelConstraint(this,wheelOptions);
    this.wheels.push(wheel);
    return wheel;
};

/**
 * @method update
 */
TopDownVehicle.prototype.update = function(){
    for (var i = 0; i < this.wheels.length; i++) {
        this.wheels[i].update();
    }
};

/**
 * @class WheelConstraint
 * @constructor
 * @extends {Constraint}
 * @param {Vehicle} vehicle
 * @param {object} [options]
 * @param {Array} [options.localForwardVector]The local wheel forward vector in local body space. Default is zero.
 * @param {Array} [options.localPosition] The local position of the wheen in the chassis body. Default is zero - the center of the body.
 * @param {Array} [options.sideFriction=5] The max friction force in the sideways direction.
 */
function WheelConstraint(vehicle, options){
    options = options || {};

    this.vehicle = vehicle;

    this.forwardEquation = new FrictionEquation(vehicle.chassisBody, vehicle.groundBody);

    this.sideEquation = new FrictionEquation(vehicle.chassisBody, vehicle.groundBody);

    /**
     * @property {number} steerValue
     */
    this.steerValue = 0;

    /**
     * @property {number} engineForce
     */
    this.engineForce = 0;

    this.setSideFriction(options.sideFriction !== undefined ? options.sideFriction : 5);

    /**
     * @property {Array} localForwardVector
     */
    this.localForwardVector = vec2.fromValues(0, 1);
    if(options.localForwardVector){
        vec2.copy(this.localForwardVector, options.localForwardVector);
    }

    /**
     * @property {Array} localPosition
     */
    this.localPosition = vec2.fromValues(0, 0);
    if(options.localPosition){
        vec2.copy(this.localPosition, options.localPosition);
    }

    Constraint.apply(this, vehicle.chassisBody, vehicle.groundBody);

    this.equations.push(
        this.forwardEquation,
        this.sideEquation
    );

    this.setBrakeForce(0);
}
WheelConstraint.prototype = new Constraint();

/**
 * @method setForwardFriction
 */
WheelConstraint.prototype.setBrakeForce = function(force){
    this.forwardEquation.setSlipForce(force);
};

/**
 * @method setSideFriction
 */
WheelConstraint.prototype.setSideFriction = function(force){
    this.sideEquation.setSlipForce(force);
};

var worldVelocity = vec2.create();
var relativePoint = vec2.create();

/**
 * @method getSpeed
 */
WheelConstraint.prototype.getSpeed = function(){
    this.vehicle.chassisBody.vectorToWorldFrame(relativePoint, this.localForwardVector);
    this.vehicle.chassisBody.getVelocityAtPoint(worldVelocity, relativePoint);
    return vec2.dot(worldVelocity, relativePoint);
};

var tmpVec = vec2.create();

/**
 * @method update
 */
WheelConstraint.prototype.update = function(){

    // Directional
    this.vehicle.chassisBody.vectorToWorldFrame(this.forwardEquation.t, this.localForwardVector);
    vec2.rotate(this.sideEquation.t, this.localForwardVector, Math.PI / 2);
    this.vehicle.chassisBody.vectorToWorldFrame(this.sideEquation.t, this.sideEquation.t);

    vec2.rotate(this.forwardEquation.t, this.forwardEquation.t, this.steerValue);
    vec2.rotate(this.sideEquation.t, this.sideEquation.t, this.steerValue);

    // Attachment point
    this.vehicle.chassisBody.toWorldFrame(this.forwardEquation.contactPointB, this.localPosition);
    vec2.copy(this.sideEquation.contactPointB, this.forwardEquation.contactPointB);

    this.vehicle.chassisBody.vectorToWorldFrame(this.forwardEquation.contactPointA, this.localPosition);
    vec2.copy(this.sideEquation.contactPointA, this.forwardEquation.contactPointA);

    // Add engine force
    vec2.normalize(tmpVec, this.forwardEquation.t);
    vec2.scale(tmpVec, tmpVec, this.engineForce);

    this.vehicle.chassisBody.applyForce(tmpVec, this.forwardEquation.contactPointA);
};
},{"../constraints/Constraint":32,"../equations/FrictionEquation":41,"../math/vec2":48,"../objects/Body":49,"../utils/Utils":75}],54:[function(require,module,exports){
// Export p2 classes
var p2 = module.exports = {
    AABB :                          require('./collision/AABB'),
    AngleLockEquation :             require('./equations/AngleLockEquation'),
    Body :                          require('./objects/Body'),
    Broadphase :                    require('./collision/Broadphase'),
    Capsule :                       require('./shapes/Capsule'),
    Circle :                        require('./shapes/Circle'),
    Constraint :                    require('./constraints/Constraint'),
    ContactEquation :               require('./equations/ContactEquation'),
    ContactEquationPool :           require('./utils/ContactEquationPool'),
    ContactMaterial :               require('./material/ContactMaterial'),
    Convex :                        require('./shapes/Convex'),
    DistanceConstraint :            require('./constraints/DistanceConstraint'),
    Equation :                      require('./equations/Equation'),
    EventEmitter :                  require('./events/EventEmitter'),
    FrictionEquation :              require('./equations/FrictionEquation'),
    FrictionEquationPool :          require('./utils/FrictionEquationPool'),
    GearConstraint :                require('./constraints/GearConstraint'),
    GSSolver :                      require('./solver/GSSolver'),
    Heightfield :                   require('./shapes/Heightfield'),
    Line :                          require('./shapes/Line'),
    LockConstraint :                require('./constraints/LockConstraint'),
    Material :                      require('./material/Material'),
    Narrowphase :                   require('./collision/Narrowphase'),
    NaiveBroadphase :               require('./collision/NaiveBroadphase'),
    Particle :                      require('./shapes/Particle'),
    Plane :                         require('./shapes/Plane'),
    Pool :                          require('./utils/Pool'),
    RevoluteConstraint :            require('./constraints/RevoluteConstraint'),
    PrismaticConstraint :           require('./constraints/PrismaticConstraint'),
    Ray :                           require('./collision/Ray'),
    RaycastResult :                 require('./collision/RaycastResult'),
    Box :                           require('./shapes/Box'),
    RotationalVelocityEquation :    require('./equations/RotationalVelocityEquation'),
    SAPBroadphase :                 require('./collision/SAPBroadphase'),
    Shape :                         require('./shapes/Shape'),
    Solver :                        require('./solver/Solver'),
    Spring :                        require('./objects/Spring'),
    TopDownVehicle :                require('./objects/TopDownVehicle'),
    LinearSpring :                  require('./objects/LinearSpring'),
    RotationalSpring :              require('./objects/RotationalSpring'),
    Utils :                         require('./utils/Utils'),
    World :                         require('./world/World'),
    vec2 :                          require('./math/vec2'),
    version :                       require('../package.json').version,
};

Object.defineProperty(p2, 'Rectangle', {
    get: function() {
        console.warn('The Rectangle class has been renamed to Box.');
        return this.Box;
    }
});
},{"../package.json":24,"./collision/AABB":25,"./collision/Broadphase":26,"./collision/NaiveBroadphase":27,"./collision/Narrowphase":28,"./collision/Ray":29,"./collision/RaycastResult":30,"./collision/SAPBroadphase":31,"./constraints/Constraint":32,"./constraints/DistanceConstraint":33,"./constraints/GearConstraint":34,"./constraints/LockConstraint":35,"./constraints/PrismaticConstraint":36,"./constraints/RevoluteConstraint":37,"./equations/AngleLockEquation":38,"./equations/ContactEquation":39,"./equations/Equation":40,"./equations/FrictionEquation":41,"./equations/RotationalVelocityEquation":43,"./events/EventEmitter":44,"./material/ContactMaterial":45,"./material/Material":46,"./math/vec2":48,"./objects/Body":49,"./objects/LinearSpring":50,"./objects/RotationalSpring":51,"./objects/Spring":52,"./objects/TopDownVehicle":53,"./shapes/Box":55,"./shapes/Capsule":56,"./shapes/Circle":57,"./shapes/Convex":58,"./shapes/Heightfield":59,"./shapes/Line":60,"./shapes/Particle":61,"./shapes/Plane":62,"./shapes/Shape":63,"./solver/GSSolver":64,"./solver/Solver":65,"./utils/ContactEquationPool":66,"./utils/FrictionEquationPool":67,"./utils/Pool":73,"./utils/Utils":75,"./world/World":79}],55:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Shape = require('./Shape')
,   Convex = require('./Convex');

module.exports = Box;

/**
 * Box shape class.
 * @class Box
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Number} [options.width=1] Total width of the box
 * @param {Number} [options.height=1] Total height of the box
 * @extends Convex
 */
function Box(options){
    if(typeof(arguments[0]) === 'number' && typeof(arguments[1]) === 'number'){
        options = {
            width: arguments[0],
            height: arguments[1]
        };
        console.warn('The Rectangle has been renamed to Box and its constructor signature has changed. Please use the following format: new Box({ width: 1, height: 1, ... })');
    }
    options = options || {};

    /**
     * Total width of the box
     * @property width
     * @type {Number}
     */
    var width = this.width = options.width || 1;

    /**
     * Total height of the box
     * @property height
     * @type {Number}
     */
    var height = this.height = options.height || 1;

    var verts = [
        vec2.fromValues(-width/2, -height/2),
        vec2.fromValues( width/2, -height/2),
        vec2.fromValues( width/2,  height/2),
        vec2.fromValues(-width/2,  height/2)
    ];
    var axes = [
        vec2.fromValues(1, 0),
        vec2.fromValues(0, 1)
    ];

    options.vertices = verts;
    options.axes = axes;
    options.type = Shape.BOX;
    Convex.call(this, options);
}
Box.prototype = new Convex();
Box.prototype.constructor = Box;

/**
 * Compute moment of inertia
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 */
Box.prototype.computeMomentOfInertia = function(mass){
    var w = this.width,
        h = this.height;
    return mass * (h*h + w*w) / 12;
};

/**
 * Update the bounding radius
 * @method updateBoundingRadius
 */
Box.prototype.updateBoundingRadius = function(){
    var w = this.width,
        h = this.height;
    this.boundingRadius = Math.sqrt(w*w + h*h) / 2;
};

var corner1 = vec2.create(),
    corner2 = vec2.create(),
    corner3 = vec2.create(),
    corner4 = vec2.create();

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Box.prototype.computeAABB = function(out, position, angle){
    out.setFromPoints(this.vertices,position,angle,0);
};

Box.prototype.updateArea = function(){
    this.area = this.width * this.height;
};


},{"../math/vec2":48,"./Convex":58,"./Shape":63}],56:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2');

module.exports = Capsule;

/**
 * Capsule shape class.
 * @class Capsule
 * @constructor
 * @extends Shape
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Number} [options.length=1] The distance between the end points
 * @param {Number} [options.radius=1] Radius of the capsule
 * @example
 *     var capsuleShape = new Capsule({
 *         length: 1,
 *         radius: 2
 *     });
 *     body.addShape(capsuleShape);
 */
function Capsule(options){
    if(typeof(arguments[0]) === 'number' && typeof(arguments[1]) === 'number'){
        options = {
            length: arguments[0],
            radius: arguments[1]
        };
        console.warn('The Capsule constructor signature has changed. Please use the following format: new Capsule({ radius: 1, length: 1 })');
    }
    options = options || {};

    /**
     * The distance between the end points.
     * @property {Number} length
     */
    this.length = options.length || 1;

    /**
     * The radius of the capsule.
     * @property {Number} radius
     */
    this.radius = options.radius || 1;

    options.type = Shape.CAPSULE;
    Shape.call(this, options);
}
Capsule.prototype = new Shape();
Capsule.prototype.constructor = Capsule;

/**
 * Compute the mass moment of inertia of the Capsule.
 * @method conputeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 * @todo
 */
Capsule.prototype.computeMomentOfInertia = function(mass){
    // Approximate with rectangle
    var r = this.radius,
        w = this.length + r, // 2*r is too much, 0 is too little
        h = r*2;
    return mass * (h*h + w*w) / 12;
};

/**
 * @method updateBoundingRadius
 */
Capsule.prototype.updateBoundingRadius = function(){
    this.boundingRadius = this.radius + this.length/2;
};

/**
 * @method updateArea
 */
Capsule.prototype.updateArea = function(){
    this.area = Math.PI * this.radius * this.radius + this.radius * 2 * this.length;
};

var r = vec2.create();

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Capsule.prototype.computeAABB = function(out, position, angle){
    var radius = this.radius;

    // Compute center position of one of the the circles, world oriented, but with local offset
    vec2.set(r,this.length / 2,0);
    if(angle !== 0){
        vec2.rotate(r,r,angle);
    }

    // Get bounds
    vec2.set(out.upperBound,  Math.max(r[0]+radius, -r[0]+radius),
                              Math.max(r[1]+radius, -r[1]+radius));
    vec2.set(out.lowerBound,  Math.min(r[0]-radius, -r[0]-radius),
                              Math.min(r[1]-radius, -r[1]-radius));

    // Add offset
    vec2.add(out.lowerBound, out.lowerBound, position);
    vec2.add(out.upperBound, out.upperBound, position);
};

var intersectCapsule_hitPointWorld = vec2.create();
var intersectCapsule_normal = vec2.create();
var intersectCapsule_l0 = vec2.create();
var intersectCapsule_l1 = vec2.create();
var intersectCapsule_unit_y = vec2.fromValues(0,1);

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Capsule.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;
    var direction = ray.direction;

    var hitPointWorld = intersectCapsule_hitPointWorld;
    var normal = intersectCapsule_normal;
    var l0 = intersectCapsule_l0;
    var l1 = intersectCapsule_l1;

    // The sides
    var halfLen = this.length / 2;
    for(var i=0; i<2; i++){

        // get start and end of the line
        var y = this.radius * (i*2-1);
        vec2.set(l0, -halfLen, y);
        vec2.set(l1, halfLen, y);
        vec2.toGlobalFrame(l0, l0, position, angle);
        vec2.toGlobalFrame(l1, l1, position, angle);

        var delta = vec2.getLineSegmentsIntersectionFraction(from, to, l0, l1);
        if(delta >= 0){
            vec2.rotate(normal, intersectCapsule_unit_y, angle);
            vec2.scale(normal, normal, (i*2-1));
            ray.reportIntersection(result, delta, normal, -1);
            if(result.shouldStop(ray)){
                return;
            }
        }
    }

    // Circles
    var diagonalLengthSquared = Math.pow(this.radius, 2) + Math.pow(halfLen, 2);
    for(var i=0; i<2; i++){
        vec2.set(l0, halfLen * (i*2-1), 0);
        vec2.toGlobalFrame(l0, l0, position, angle);

        var a = Math.pow(to[0] - from[0], 2) + Math.pow(to[1] - from[1], 2);
        var b = 2 * ((to[0] - from[0]) * (from[0] - l0[0]) + (to[1] - from[1]) * (from[1] - l0[1]));
        var c = Math.pow(from[0] - l0[0], 2) + Math.pow(from[1] - l0[1], 2) - Math.pow(this.radius, 2);
        var delta = Math.pow(b, 2) - 4 * a * c;

        if(delta < 0){
            // No intersection
            continue;

        } else if(delta === 0){
            // single intersection point
            vec2.lerp(hitPointWorld, from, to, delta);

            if(vec2.squaredDistance(hitPointWorld, position) > diagonalLengthSquared){
                vec2.sub(normal, hitPointWorld, l0);
                vec2.normalize(normal,normal);
                ray.reportIntersection(result, delta, normal, -1);
                if(result.shouldStop(ray)){
                    return;
                }
            }

        } else {
            var sqrtDelta = Math.sqrt(delta);
            var inv2a = 1 / (2 * a);
            var d1 = (- b - sqrtDelta) * inv2a;
            var d2 = (- b + sqrtDelta) * inv2a;

            if(d1 >= 0 && d1 <= 1){
                vec2.lerp(hitPointWorld, from, to, d1);
                if(vec2.squaredDistance(hitPointWorld, position) > diagonalLengthSquared){
                    vec2.sub(normal, hitPointWorld, l0);
                    vec2.normalize(normal,normal);
                    ray.reportIntersection(result, d1, normal, -1);
                    if(result.shouldStop(ray)){
                        return;
                    }
                }
            }

            if(d2 >= 0 && d2 <= 1){
                vec2.lerp(hitPointWorld, from, to, d2);
                if(vec2.squaredDistance(hitPointWorld, position) > diagonalLengthSquared){
                    vec2.sub(normal, hitPointWorld, l0);
                    vec2.normalize(normal,normal);
                    ray.reportIntersection(result, d2, normal, -1);
                    if(result.shouldStop(ray)){
                        return;
                    }
                }
            }
        }
    }
};
},{"../math/vec2":48,"./Shape":63}],57:[function(require,module,exports){
var Shape = require('./Shape')
,    vec2 = require('../math/vec2');

module.exports = Circle;

/**
 * Circle shape class.
 * @class Circle
 * @extends Shape
 * @constructor
 * @param {options} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {number} [options.radius=1] The radius of this circle
 *
 * @example
 *     var circleShape = new Circle({ radius: 1 });
 *     body.addShape(circleShape);
 */
function Circle(options){
    if(typeof(arguments[0]) === 'number'){
        options = {
            radius: arguments[0]
        };
        console.warn('The Circle constructor signature has changed. Please use the following format: new Circle({ radius: 1 })');
    }
    options = options || {};

    /**
     * The radius of the circle.
     * @property radius
     * @type {number}
     */
    this.radius = options.radius || 1;

    options.type = Shape.CIRCLE;
    Shape.call(this, options);
}
Circle.prototype = new Shape();
Circle.prototype.constructor = Circle;

/**
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 */
Circle.prototype.computeMomentOfInertia = function(mass){
    var r = this.radius;
    return mass * r * r / 2;
};

/**
 * @method updateBoundingRadius
 * @return {Number}
 */
Circle.prototype.updateBoundingRadius = function(){
    this.boundingRadius = this.radius;
};

/**
 * @method updateArea
 * @return {Number}
 */
Circle.prototype.updateArea = function(){
    this.area = Math.PI * this.radius * this.radius;
};

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Circle.prototype.computeAABB = function(out, position, angle){
    var r = this.radius;
    vec2.set(out.upperBound,  r,  r);
    vec2.set(out.lowerBound, -r, -r);
    if(position){
        vec2.add(out.lowerBound, out.lowerBound, position);
        vec2.add(out.upperBound, out.upperBound, position);
    }
};

var Ray_intersectSphere_intersectionPoint = vec2.create();
var Ray_intersectSphere_normal = vec2.create();

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Circle.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from,
        to = ray.to,
        r = this.radius;

    var a = Math.pow(to[0] - from[0], 2) + Math.pow(to[1] - from[1], 2);
    var b = 2 * ((to[0] - from[0]) * (from[0] - position[0]) + (to[1] - from[1]) * (from[1] - position[1]));
    var c = Math.pow(from[0] - position[0], 2) + Math.pow(from[1] - position[1], 2) - Math.pow(r, 2);
    var delta = Math.pow(b, 2) - 4 * a * c;

    var intersectionPoint = Ray_intersectSphere_intersectionPoint;
    var normal = Ray_intersectSphere_normal;

    if(delta < 0){
        // No intersection
        return;

    } else if(delta === 0){
        // single intersection point
        vec2.lerp(intersectionPoint, from, to, delta);

        vec2.sub(normal, intersectionPoint, position);
        vec2.normalize(normal,normal);

        ray.reportIntersection(result, delta, normal, -1);

    } else {
        var sqrtDelta = Math.sqrt(delta);
        var inv2a = 1 / (2 * a);
        var d1 = (- b - sqrtDelta) * inv2a;
        var d2 = (- b + sqrtDelta) * inv2a;

        if(d1 >= 0 && d1 <= 1){
            vec2.lerp(intersectionPoint, from, to, d1);

            vec2.sub(normal, intersectionPoint, position);
            vec2.normalize(normal,normal);

            ray.reportIntersection(result, d1, normal, -1);

            if(result.shouldStop(ray)){
                return;
            }
        }

        if(d2 >= 0 && d2 <= 1){
            vec2.lerp(intersectionPoint, from, to, d2);

            vec2.sub(normal, intersectionPoint, position);
            vec2.normalize(normal,normal);

            ray.reportIntersection(result, d2, normal, -1);
        }
    }
};
},{"../math/vec2":48,"./Shape":63}],58:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2')
,   polyk = require('../math/polyk')
,   decomp = require('poly-decomp');

module.exports = Convex;

/**
 * Convex shape class.
 * @class Convex
 * @constructor
 * @extends Shape
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Array} [options.vertices] An array of vertices that span this shape. Vertices are given in counter-clockwise (CCW) direction.
 * @param {Array} [options.axes] An array of unit length vectors, representing the symmetry axes in the convex.
 * @example
 *     // Create a box
 *     var vertices = [[-1,-1], [1,-1], [1,1], [-1,1]];
 *     var convexShape = new Convex({ vertices: vertices });
 *     body.addShape(convexShape);
 */
function Convex(options){
    if(Array.isArray(arguments[0])){
        options = {
            vertices: arguments[0],
            axes: arguments[1]
        };
        console.warn('The Convex constructor signature has changed. Please use the following format: new Convex({ vertices: [...], ... })');
    }
    options = options || {};

    /**
     * Vertices defined in the local frame.
     * @property vertices
     * @type {Array}
     */
    this.vertices = [];

    // Copy the verts
    var vertices = options.vertices !== undefined ? options.vertices : [];
    for(var i=0; i < vertices.length; i++){
        var v = vec2.create();
        vec2.copy(v, vertices[i]);
        this.vertices.push(v);
    }

    /**
     * Axes defined in the local frame.
     * @property axes
     * @type {Array}
     */
    this.axes = [];

    if(options.axes){

        // Copy the axes
        for(var i=0; i < options.axes.length; i++){
            var axis = vec2.create();
            vec2.copy(axis, options.axes[i]);
            this.axes.push(axis);
        }

    } else {

        // Construct axes from the vertex data
        for(var i = 0; i < this.vertices.length; i++){
            // Get the world edge
            var worldPoint0 = this.vertices[i];
            var worldPoint1 = this.vertices[(i+1) % this.vertices.length];

            var normal = vec2.create();
            vec2.sub(normal, worldPoint1, worldPoint0);

            // Get normal - just rotate 90 degrees since vertices are given in CCW
            vec2.rotate90cw(normal, normal);
            vec2.normalize(normal, normal);

            this.axes.push(normal);
        }

    }

    /**
     * The center of mass of the Convex
     * @property centerOfMass
     * @type {Array}
     */
    this.centerOfMass = vec2.fromValues(0,0);

    /**
     * Triangulated version of this convex. The structure is Array of 3-Arrays, and each subarray contains 3 integers, referencing the vertices.
     * @property triangles
     * @type {Array}
     */
    this.triangles = [];

    if(this.vertices.length){
        this.updateTriangles();
        this.updateCenterOfMass();
    }

    /**
     * The bounding radius of the convex
     * @property boundingRadius
     * @type {Number}
     */
    this.boundingRadius = 0;

    options.type = Shape.CONVEX;
    Shape.call(this, options);

    this.updateBoundingRadius();
    this.updateArea();
    if(this.area < 0){
        throw new Error("Convex vertices must be given in conter-clockwise winding.");
    }
}
Convex.prototype = new Shape();
Convex.prototype.constructor = Convex;

var tmpVec1 = vec2.create();
var tmpVec2 = vec2.create();

/**
 * Project a Convex onto a world-oriented axis
 * @method projectOntoAxis
 * @static
 * @param  {Array} offset
 * @param  {Array} localAxis
 * @param  {Array} result
 */
Convex.prototype.projectOntoLocalAxis = function(localAxis, result){
    var max=null,
        min=null,
        v,
        value,
        localAxis = tmpVec1;

    // Get projected position of all vertices
    for(var i=0; i<this.vertices.length; i++){
        v = this.vertices[i];
        value = vec2.dot(v, localAxis);
        if(max === null || value > max){
            max = value;
        }
        if(min === null || value < min){
            min = value;
        }
    }

    if(min > max){
        var t = min;
        min = max;
        max = t;
    }

    vec2.set(result, min, max);
};

Convex.prototype.projectOntoWorldAxis = function(localAxis, shapeOffset, shapeAngle, result){
    var worldAxis = tmpVec2;

    this.projectOntoLocalAxis(localAxis, result);

    // Project the position of the body onto the axis - need to add this to the result
    if(shapeAngle !== 0){
        vec2.rotate(worldAxis, localAxis, shapeAngle);
    } else {
        worldAxis = localAxis;
    }
    var offset = vec2.dot(shapeOffset, worldAxis);

    vec2.set(result, result[0] + offset, result[1] + offset);
};


/**
 * Update the .triangles property
 * @method updateTriangles
 */
Convex.prototype.updateTriangles = function(){

    this.triangles.length = 0;

    // Rewrite on polyk notation, array of numbers
    var polykVerts = [];
    for(var i=0; i<this.vertices.length; i++){
        var v = this.vertices[i];
        polykVerts.push(v[0],v[1]);
    }

    // Triangulate
    var triangles = polyk.Triangulate(polykVerts);

    // Loop over all triangles, add their inertia contributions to I
    for(var i=0; i<triangles.length; i+=3){
        var id1 = triangles[i],
            id2 = triangles[i+1],
            id3 = triangles[i+2];

        // Add to triangles
        this.triangles.push([id1,id2,id3]);
    }
};

var updateCenterOfMass_centroid = vec2.create(),
    updateCenterOfMass_centroid_times_mass = vec2.create(),
    updateCenterOfMass_a = vec2.create(),
    updateCenterOfMass_b = vec2.create(),
    updateCenterOfMass_c = vec2.create(),
    updateCenterOfMass_ac = vec2.create(),
    updateCenterOfMass_ca = vec2.create(),
    updateCenterOfMass_cb = vec2.create(),
    updateCenterOfMass_n = vec2.create();

/**
 * Update the .centerOfMass property.
 * @method updateCenterOfMass
 */
Convex.prototype.updateCenterOfMass = function(){
    var triangles = this.triangles,
        verts = this.vertices,
        cm = this.centerOfMass,
        centroid = updateCenterOfMass_centroid,
        n = updateCenterOfMass_n,
        a = updateCenterOfMass_a,
        b = updateCenterOfMass_b,
        c = updateCenterOfMass_c,
        ac = updateCenterOfMass_ac,
        ca = updateCenterOfMass_ca,
        cb = updateCenterOfMass_cb,
        centroid_times_mass = updateCenterOfMass_centroid_times_mass;

    vec2.set(cm,0,0);
    var totalArea = 0;

    for(var i=0; i!==triangles.length; i++){
        var t = triangles[i],
            a = verts[t[0]],
            b = verts[t[1]],
            c = verts[t[2]];

        vec2.centroid(centroid,a,b,c);

        // Get mass for the triangle (density=1 in this case)
        // http://math.stackexchange.com/questions/80198/area-of-triangle-via-vectors
        var m = Convex.triangleArea(a,b,c);
        totalArea += m;

        // Add to center of mass
        vec2.scale(centroid_times_mass, centroid, m);
        vec2.add(cm, cm, centroid_times_mass);
    }

    vec2.scale(cm,cm,1/totalArea);
};

/**
 * Compute the mass moment of inertia of the Convex.
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 * @see http://www.gamedev.net/topic/342822-moment-of-inertia-of-a-polygon-2d/
 */
Convex.prototype.computeMomentOfInertia = function(mass){
    var denom = 0.0,
        numer = 0.0,
        N = this.vertices.length;
    for(var j = N-1, i = 0; i < N; j = i, i ++){
        var p0 = this.vertices[j];
        var p1 = this.vertices[i];
        var a = Math.abs(vec2.crossLength(p0,p1));
        var b = vec2.dot(p1,p1) + vec2.dot(p1,p0) + vec2.dot(p0,p0);
        denom += a * b;
        numer += a;
    }
    return (mass / 6.0) * (denom / numer);
};

/**
 * Updates the .boundingRadius property
 * @method updateBoundingRadius
 */
Convex.prototype.updateBoundingRadius = function(){
    var verts = this.vertices,
        r2 = 0;

    for(var i=0; i!==verts.length; i++){
        var l2 = vec2.squaredLength(verts[i]);
        if(l2 > r2){
            r2 = l2;
        }
    }

    this.boundingRadius = Math.sqrt(r2);
};

/**
 * Get the area of the triangle spanned by the three points a, b, c. The area is positive if the points are given in counter-clockwise order, otherwise negative.
 * @static
 * @method triangleArea
 * @param {Array} a
 * @param {Array} b
 * @param {Array} c
 * @return {Number}
 */
Convex.triangleArea = function(a,b,c){
    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1]))) * 0.5;
};

/**
 * Update the .area
 * @method updateArea
 */
Convex.prototype.updateArea = function(){
    this.updateTriangles();
    this.area = 0;

    var triangles = this.triangles,
        verts = this.vertices;
    for(var i=0; i!==triangles.length; i++){
        var t = triangles[i],
            a = verts[t[0]],
            b = verts[t[1]],
            c = verts[t[2]];

        // Get mass for the triangle (density=1 in this case)
        var m = Convex.triangleArea(a,b,c);
        this.area += m;
    }
};

/**
 * @method computeAABB
 * @param  {AABB}   out
 * @param  {Array}  position
 * @param  {Number} angle
 */
Convex.prototype.computeAABB = function(out, position, angle){
    out.setFromPoints(this.vertices, position, angle, 0);
};

var intersectConvex_rayStart = vec2.create();
var intersectConvex_rayEnd = vec2.create();
var intersectConvex_normal = vec2.create();

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Convex.prototype.raycast = function(result, ray, position, angle){
    var rayStart = intersectConvex_rayStart;
    var rayEnd = intersectConvex_rayEnd;
    var normal = intersectConvex_normal;
    var vertices = this.vertices;

    // Transform to local shape space
    vec2.toLocalFrame(rayStart, ray.from, position, angle);
    vec2.toLocalFrame(rayEnd, ray.to, position, angle);

    var n = vertices.length;

    for (var i = 0; i < n && !result.shouldStop(ray); i++) {
        var q1 = vertices[i];
        var q2 = vertices[(i+1) % n];
        var delta = vec2.getLineSegmentsIntersectionFraction(rayStart, rayEnd, q1, q2);

        if(delta >= 0){
            vec2.sub(normal, q2, q1);
            vec2.rotate(normal, normal, -Math.PI / 2 + angle);
            vec2.normalize(normal, normal);
            ray.reportIntersection(result, delta, normal, i);
        }
    }
};

},{"../math/polyk":47,"../math/vec2":48,"./Shape":63,"poly-decomp":106}],59:[function(require,module,exports){
var Shape = require('./Shape')
,    vec2 = require('../math/vec2')
,    Utils = require('../utils/Utils');

module.exports = Heightfield;

/**
 * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a distance "elementWidth".
 * @class Heightfield
 * @extends Shape
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {array} [options.heights] An array of Y values that will be used to construct the terrain.
 * @param {Number} [options.minValue] Minimum value of the data points in the data array. Will be computed automatically if not given.
 * @param {Number} [options.maxValue] Maximum value.
 * @param {Number} [options.elementWidth=0.1] World spacing between the data points in X direction.
 *
 * @example
 *     // Generate some height data (y-values).
 *     var heights = [];
 *     for(var i = 0; i < 1000; i++){
 *         var y = 0.5 * Math.cos(0.2 * i);
 *         heights.push(y);
 *     }
 *
 *     // Create the heightfield shape
 *     var heightfieldShape = new Heightfield({
 *         heights: heights,
 *         elementWidth: 1 // Distance between the data points in X direction
 *     });
 *     var heightfieldBody = new Body();
 *     heightfieldBody.addShape(heightfieldShape);
 *     world.addBody(heightfieldBody);
 *
 * @todo Should use a scale property with X and Y direction instead of just elementWidth
 */
function Heightfield(options){
    if(Array.isArray(arguments[0])){
        options = {
            heights: arguments[0]
        };

        if(typeof(arguments[1]) === 'object'){
            for(var key in arguments[1]){
                options[key] = arguments[1][key];
            }
        }

        console.warn('The Heightfield constructor signature has changed. Please use the following format: new Heightfield({ heights: [...], ... })');
    }
    options = options || {};

    /**
     * An array of numbers, or height values, that are spread out along the x axis.
     * @property {array} heights
     */
    this.heights = options.heights ? options.heights.slice(0) : [];

    /**
     * Max value of the heights
     * @property {number} maxValue
     */
    this.maxValue = options.maxValue || null;

    /**
     * Max value of the heights
     * @property {number} minValue
     */
    this.minValue = options.minValue || null;

    /**
     * The width of each element
     * @property {number} elementWidth
     */
    this.elementWidth = options.elementWidth || 0.1;

    if(options.maxValue === undefined || options.minValue === undefined){
        this.updateMaxMinValues();
    }

    options.type = Shape.HEIGHTFIELD;
    Shape.call(this, options);
}
Heightfield.prototype = new Shape();
Heightfield.prototype.constructor = Heightfield;

/**
 * Update the .minValue and the .maxValue
 * @method updateMaxMinValues
 */
Heightfield.prototype.updateMaxMinValues = function(){
    var data = this.heights;
    var maxValue = data[0];
    var minValue = data[0];
    for(var i=0; i !== data.length; i++){
        var v = data[i];
        if(v > maxValue){
            maxValue = v;
        }
        if(v < minValue){
            minValue = v;
        }
    }
    this.maxValue = maxValue;
    this.minValue = minValue;
};

/**
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number}
 */
Heightfield.prototype.computeMomentOfInertia = function(mass){
    return Number.MAX_VALUE;
};

Heightfield.prototype.updateBoundingRadius = function(){
    this.boundingRadius = Number.MAX_VALUE;
};

Heightfield.prototype.updateArea = function(){
    var data = this.heights,
        area = 0;
    for(var i=0; i<data.length-1; i++){
        area += (data[i]+data[i+1]) / 2 * this.elementWidth;
    }
    this.area = area;
};

var points = [
    vec2.create(),
    vec2.create(),
    vec2.create(),
    vec2.create()
];

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Heightfield.prototype.computeAABB = function(out, position, angle){
    vec2.set(points[0], 0, this.maxValue);
    vec2.set(points[1], this.elementWidth * this.heights.length, this.maxValue);
    vec2.set(points[2], this.elementWidth * this.heights.length, this.minValue);
    vec2.set(points[3], 0, this.minValue);
    out.setFromPoints(points, position, angle);
};

/**
 * Get a line segment in the heightfield
 * @method getLineSegment
 * @param  {array} start Where to store the resulting start point
 * @param  {array} end Where to store the resulting end point
 * @param  {number} i
 */
Heightfield.prototype.getLineSegment = function(start, end, i){
    var data = this.heights;
    var width = this.elementWidth;
    vec2.set(start, i * width, data[i]);
    vec2.set(end, (i + 1) * width, data[i + 1]);
};

Heightfield.prototype.getSegmentIndex = function(position){
    return Math.floor(position[0] / this.elementWidth);
};

Heightfield.prototype.getClampedSegmentIndex = function(position){
    var i = this.getSegmentIndex(position);
    i = Math.min(this.heights.length, Math.max(i, 0)); // clamp
    return i;
};

var intersectHeightfield_hitPointWorld = vec2.create();
var intersectHeightfield_worldNormal = vec2.create();
var intersectHeightfield_l0 = vec2.create();
var intersectHeightfield_l1 = vec2.create();
var intersectHeightfield_localFrom = vec2.create();
var intersectHeightfield_localTo = vec2.create();
var intersectHeightfield_unit_y = vec2.fromValues(0,1);

// Returns 1 if the lines intersect, otherwise 0.
function getLineSegmentsIntersection (out, p0, p1, p2, p3) {

    var s1_x, s1_y, s2_x, s2_y;
    s1_x = p1[0] - p0[0];
    s1_y = p1[1] - p0[1];
    s2_x = p3[0] - p2[0];
    s2_y = p3[1] - p2[1];

    var s, t;
    s = (-s1_y * (p0[0] - p2[0]) + s1_x * (p0[1] - p2[1])) / (-s2_x * s1_y + s1_x * s2_y);
    t = ( s2_x * (p0[1] - p2[1]) - s2_y * (p0[0] - p2[0])) / (-s2_x * s1_y + s1_x * s2_y);
    if (s >= 0 && s <= 1 && t >= 0 && t <= 1) { // Collision detected
        var intX = p0[0] + (t * s1_x);
        var intY = p0[1] + (t * s1_y);
        out[0] = intX;
        out[1] = intY;
        return t;
    }
    return -1; // No collision
}

/**
 * @method raycast
 * @param  {RayResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Heightfield.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;
    var direction = ray.direction;

    var hitPointWorld = intersectHeightfield_hitPointWorld;
    var worldNormal = intersectHeightfield_worldNormal;
    var l0 = intersectHeightfield_l0;
    var l1 = intersectHeightfield_l1;
    var localFrom = intersectHeightfield_localFrom;
    var localTo = intersectHeightfield_localTo;

    // get local ray start and end
    vec2.toLocalFrame(localFrom, from, position, angle);
    vec2.toLocalFrame(localTo, to, position, angle);

    // Get the segment range
    var i0 = this.getClampedSegmentIndex(localFrom);
    var i1 = this.getClampedSegmentIndex(localTo);
    if(i0 > i1){
        var tmp = i0;
        i0 = i1;
        i1 = tmp;
    }

    // The segments
    for(var i=0; i<this.heights.length - 1; i++){
        this.getLineSegment(l0, l1, i);
        var t = vec2.getLineSegmentsIntersectionFraction(localFrom, localTo, l0, l1);
        if(t >= 0){
            vec2.sub(worldNormal, l1, l0);
            vec2.rotate(worldNormal, worldNormal, angle + Math.PI / 2);
            vec2.normalize(worldNormal, worldNormal);
            ray.reportIntersection(result, t, worldNormal, -1);
            if(result.shouldStop(ray)){
                return;
            }
        }
    }
};
},{"../math/vec2":48,"../utils/Utils":75,"./Shape":63}],60:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2');

module.exports = Line;

/**
 * Line shape class. The line shape is along the x direction, and stretches from [-length/2, 0] to [length/2,0].
 * @class Line
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @param {Number} [options.length=1] The total length of the line
 * @extends Shape
 * @constructor
 */
function Line(options){
    if(typeof(arguments[0]) === 'number'){
        options = {
            length: arguments[0]
        };
        console.warn('The Line constructor signature has changed. Please use the following format: new Line({ length: 1, ... })');
    }
    options = options || {};

    /**
     * Length of this line
     * @property {Number} length
     * @default 1
     */
    this.length = options.length || 1;

    options.type = Shape.LINE;
    Shape.call(this, options);
}
Line.prototype = new Shape();
Line.prototype.constructor = Line;

Line.prototype.computeMomentOfInertia = function(mass){
    return mass * Math.pow(this.length,2) / 12;
};

Line.prototype.updateBoundingRadius = function(){
    this.boundingRadius = this.length/2;
};

var points = [vec2.create(),vec2.create()];

/**
 * @method computeAABB
 * @param  {AABB}   out      The resulting AABB.
 * @param  {Array}  position
 * @param  {Number} angle
 */
Line.prototype.computeAABB = function(out, position, angle){
    var l2 = this.length / 2;
    vec2.set(points[0], -l2,  0);
    vec2.set(points[1],  l2,  0);
    out.setFromPoints(points,position,angle,0);
};

var raycast_hitPoint = vec2.create();
var raycast_normal = vec2.create();
var raycast_l0 = vec2.create();
var raycast_l1 = vec2.create();
var raycast_unit_y = vec2.fromValues(0,1);

/**
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @param  {number} angle
 * @param  {array} position
 */
Line.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;

    var l0 = raycast_l0;
    var l1 = raycast_l1;

    // get start and end of the line
    var halfLen = this.length / 2;
    vec2.set(l0, -halfLen, 0);
    vec2.set(l1, halfLen, 0);
    vec2.toGlobalFrame(l0, l0, position, angle);
    vec2.toGlobalFrame(l1, l1, position, angle);

    var fraction = vec2.getLineSegmentsIntersectionFraction(l0, l1, from, to);
    if(fraction >= 0){
        var normal = raycast_normal;
        vec2.rotate(normal, raycast_unit_y, angle); // todo: this should depend on which side the ray comes from
        ray.reportIntersection(result, fraction, normal, -1);
    }
};
},{"../math/vec2":48,"./Shape":63}],61:[function(require,module,exports){
var Shape = require('./Shape')
,   vec2 = require('../math/vec2');

module.exports = Particle;

/**
 * Particle shape class.
 * @class Particle
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 * @extends Shape
 */
function Particle(options){
    options = options || {};
	options.type = Shape.PARTICLE;
    Shape.call(this, options);
}
Particle.prototype = new Shape();
Particle.prototype.constructor = Particle;

Particle.prototype.computeMomentOfInertia = function(mass){
    return 0; // Can't rotate a particle
};

Particle.prototype.updateBoundingRadius = function(){
    this.boundingRadius = 0;
};

/**
 * @method computeAABB
 * @param  {AABB}   out
 * @param  {Array}  position
 * @param  {Number} angle
 */
Particle.prototype.computeAABB = function(out, position, angle){
    vec2.copy(out.lowerBound, position);
    vec2.copy(out.upperBound, position);
};

},{"../math/vec2":48,"./Shape":63}],62:[function(require,module,exports){
var Shape =  require('./Shape')
,    vec2 =  require('../math/vec2')
,    Utils = require('../utils/Utils');

module.exports = Plane;

/**
 * Plane shape class. The plane is facing in the Y direction.
 * @class Plane
 * @extends Shape
 * @constructor
 * @param {object} [options] (Note that this options object will be passed on to the {{#crossLink "Shape"}}{{/crossLink}} constructor.)
 */
function Plane(options){
    options = options || {};
    options.type = Shape.PLANE;
    Shape.call(this, options);
}
Plane.prototype = new Shape();
Plane.prototype.constructor = Plane;

/**
 * Compute moment of inertia
 * @method computeMomentOfInertia
 */
Plane.prototype.computeMomentOfInertia = function(mass){
    return 0; // Plane is infinite. The inertia should therefore be infinty but by convention we set 0 here
};

/**
 * Update the bounding radius
 * @method updateBoundingRadius
 */
Plane.prototype.updateBoundingRadius = function(){
    this.boundingRadius = Number.MAX_VALUE;
};

/**
 * @method computeAABB
 * @param  {AABB}   out
 * @param  {Array}  position
 * @param  {Number} angle
 */
Plane.prototype.computeAABB = function(out, position, angle){
    var a = angle % (2 * Math.PI);
    var set = vec2.set;
    var max = 1e7;
    var lowerBound = out.lowerBound;
    var upperBound = out.upperBound;

    // Set max bounds
    set(lowerBound, -max, -max);
    set(upperBound,  max,  max);

    if(a === 0){
        // y goes from -inf to 0
        upperBound[1] = 0;
        // set(lowerBound, -max, -max);
        // set(upperBound,  max,  0);

    } else if(a === Math.PI / 2){

        // x goes from 0 to inf
        lowerBound[0] = 0;
        // set(lowerBound, 0, -max);
        // set(upperBound,      max,  max);

    } else if(a === Math.PI){

        // y goes from 0 to inf
        lowerBound[1] = 0;
        // set(lowerBound, -max, 0);
        // set(upperBound,  max, max);

    } else if(a === 3*Math.PI/2){

        // x goes from -inf to 0
        upperBound[0] = 0;
        // set(lowerBound, -max,     -max);
        // set(upperBound,  0,  max);

    }
};

Plane.prototype.updateArea = function(){
    this.area = Number.MAX_VALUE;
};

var intersectPlane_planePointToFrom = vec2.create();
var intersectPlane_dir_scaled_with_t = vec2.create();
var intersectPlane_hitPoint = vec2.create();
var intersectPlane_normal = vec2.create();
var intersectPlane_len = vec2.create();

/**
 * @method raycast
 * @param  {RayResult} result
 * @param  {Ray} ray
 * @param  {array} position
 * @param  {number} angle
 */
Plane.prototype.raycast = function(result, ray, position, angle){
    var from = ray.from;
    var to = ray.to;
    var direction = ray.direction;
    var planePointToFrom = intersectPlane_planePointToFrom;
    var dir_scaled_with_t = intersectPlane_dir_scaled_with_t;
    var hitPoint = intersectPlane_hitPoint;
    var normal = intersectPlane_normal;
    var len = intersectPlane_len;

    // Get plane normal
    vec2.set(normal, 0, 1);
    vec2.rotate(normal, normal, angle);

    vec2.sub(len, from, position);
    var planeToFrom = vec2.dot(len, normal);
    vec2.sub(len, to, position);
    var planeToTo = vec2.dot(len, normal);

    if(planeToFrom * planeToTo > 0){
        // "from" and "to" are on the same side of the plane... bail out
        return;
    }

    if(vec2.squaredDistance(from, to) < planeToFrom * planeToFrom){
        return;
    }

    var n_dot_dir = vec2.dot(normal, direction);

    vec2.sub(planePointToFrom, from, position);
    var t = -vec2.dot(normal, planePointToFrom) / n_dot_dir / ray.length;

    ray.reportIntersection(result, t, normal, -1);
};
},{"../math/vec2":48,"../utils/Utils":75,"./Shape":63}],63:[function(require,module,exports){
module.exports = Shape;

var vec2 = require('../math/vec2');

/**
 * Base class for shapes.
 * @class Shape
 * @constructor
 * @param {object} [options]
 * @param {array} [options.position]
 * @param {number} [options.angle=0]
 * @param {number} [options.collisionGroup=1]
 * @param {number} [options.collisionMask=1]
 * @param {boolean} [options.sensor=false]
 * @param {boolean} [options.collisionResponse=true]
 * @param {object} [options.type=0]
 */
function Shape(options){
    options = options || {};

    /**
     * The body this shape is attached to. A shape can only be attached to a single body.
     * @property {Body} body
     */
    this.body = null;

    /**
     * Body-local position of the shape.
     * @property {Array} position
     */
    this.position = vec2.fromValues(0,0);
    if(options.position){
        vec2.copy(this.position, options.position);
    }

    /**
     * Body-local angle of the shape.
     * @property {number} angle
     */
    this.angle = options.angle || 0;

    /**
     * The type of the shape. One of:
     *
     * * {{#crossLink "Shape/CIRCLE:property"}}Shape.CIRCLE{{/crossLink}}
     * * {{#crossLink "Shape/PARTICLE:property"}}Shape.PARTICLE{{/crossLink}}
     * * {{#crossLink "Shape/PLANE:property"}}Shape.PLANE{{/crossLink}}
     * * {{#crossLink "Shape/CONVEX:property"}}Shape.CONVEX{{/crossLink}}
     * * {{#crossLink "Shape/LINE:property"}}Shape.LINE{{/crossLink}}
     * * {{#crossLink "Shape/BOX:property"}}Shape.BOX{{/crossLink}}
     * * {{#crossLink "Shape/CAPSULE:property"}}Shape.CAPSULE{{/crossLink}}
     * * {{#crossLink "Shape/HEIGHTFIELD:property"}}Shape.HEIGHTFIELD{{/crossLink}}
     *
     * @property {number} type
     */
    this.type = options.type || 0;

    /**
     * Shape object identifier.
     * @type {Number}
     * @property id
     */
    this.id = Shape.idCounter++;

    /**
     * Bounding circle radius of this shape
     * @property boundingRadius
     * @type {Number}
     */
    this.boundingRadius = 0;

    /**
     * Collision group that this shape belongs to (bit mask). See <a href="http://www.aurelienribon.com/blog/2011/07/box2d-tutorial-collision-filtering/">this tutorial</a>.
     * @property collisionGroup
     * @type {Number}
     * @example
     *     // Setup bits for each available group
     *     var PLAYER = Math.pow(2,0),
     *         ENEMY =  Math.pow(2,1),
     *         GROUND = Math.pow(2,2)
     *
     *     // Put shapes into their groups
     *     player1Shape.collisionGroup = PLAYER;
     *     player2Shape.collisionGroup = PLAYER;
     *     enemyShape  .collisionGroup = ENEMY;
     *     groundShape .collisionGroup = GROUND;
     *
     *     // Assign groups that each shape collide with.
     *     // Note that the players can collide with ground and enemies, but not with other players.
     *     player1Shape.collisionMask = ENEMY | GROUND;
     *     player2Shape.collisionMask = ENEMY | GROUND;
     *     enemyShape  .collisionMask = PLAYER | GROUND;
     *     groundShape .collisionMask = PLAYER | ENEMY;
     *
     * @example
     *     // How collision check is done
     *     if(shapeA.collisionGroup & shapeB.collisionMask)!=0 && (shapeB.collisionGroup & shapeA.collisionMask)!=0){
     *         // The shapes will collide
     *     }
     */
    this.collisionGroup = options.collisionGroup !== undefined ? options.collisionGroup : 1;

    /**
     * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled. That means that this shape will move through other body shapes, but it will still trigger contact events, etc.
     * @property {Boolean} collisionResponse
     */
    this.collisionResponse = options.collisionResponse !== undefined ? options.collisionResponse : true;

    /**
     * Collision mask of this shape. See .collisionGroup.
     * @property collisionMask
     * @type {Number}
     */
    this.collisionMask = options.collisionMask !== undefined ? options.collisionMask : 1;

    /**
     * Material to use in collisions for this Shape. If this is set to null, the world will use default material properties instead.
     * @property material
     * @type {Material}
     */
    this.material = options.material || null;

    /**
     * Area of this shape.
     * @property area
     * @type {Number}
     */
    this.area = 0;

    /**
     * Set to true if you want this shape to be a sensor. A sensor does not generate contacts, but it still reports contact events. This is good if you want to know if a shape is overlapping another shape, without them generating contacts.
     * @property {Boolean} sensor
     */
    this.sensor = options.sensor !== undefined ? options.sensor : false;

    if(this.type){
        this.updateBoundingRadius();
    }

    this.updateArea();
}

Shape.idCounter = 0;

/**
 * @static
 * @property {Number} CIRCLE
 */
Shape.CIRCLE =      1;

/**
 * @static
 * @property {Number} PARTICLE
 */
Shape.PARTICLE =    2;

/**
 * @static
 * @property {Number} PLANE
 */
Shape.PLANE =       4;

/**
 * @static
 * @property {Number} CONVEX
 */
Shape.CONVEX =      8;

/**
 * @static
 * @property {Number} LINE
 */
Shape.LINE =        16;

/**
 * @static
 * @property {Number} BOX
 */
Shape.BOX =   32;

Object.defineProperty(Shape, 'RECTANGLE', {
    get: function() {
        console.warn('Shape.RECTANGLE is deprecated, use Shape.BOX instead.');
        return Shape.BOX;
    }
});

/**
 * @static
 * @property {Number} CAPSULE
 */
Shape.CAPSULE =     64;

/**
 * @static
 * @property {Number} HEIGHTFIELD
 */
Shape.HEIGHTFIELD = 128;

/**
 * Should return the moment of inertia around the Z axis of the body given the total mass. See <a href="http://en.wikipedia.org/wiki/List_of_moments_of_inertia">Wikipedia's list of moments of inertia</a>.
 * @method computeMomentOfInertia
 * @param  {Number} mass
 * @return {Number} If the inertia is infinity or if the object simply isn't possible to rotate, return 0.
 */
Shape.prototype.computeMomentOfInertia = function(mass){};

/**
 * Returns the bounding circle radius of this shape.
 * @method updateBoundingRadius
 * @return {Number}
 */
Shape.prototype.updateBoundingRadius = function(){};

/**
 * Update the .area property of the shape.
 * @method updateArea
 */
Shape.prototype.updateArea = function(){
    // To be implemented in all subclasses
};

/**
 * Compute the world axis-aligned bounding box (AABB) of this shape.
 * @method computeAABB
 * @param  {AABB} out The resulting AABB.
 * @param  {Array} position World position of the shape.
 * @param  {Number} angle World angle of the shape.
 */
Shape.prototype.computeAABB = function(out, position, angle){
    // To be implemented in each subclass
};

/**
 * Perform raycasting on this shape.
 * @method raycast
 * @param  {RayResult} result Where to store the resulting data.
 * @param  {Ray} ray The Ray that you want to use for raycasting.
 * @param  {array} position World position of the shape (the .position property will be ignored).
 * @param  {number} angle World angle of the shape (the .angle property will be ignored).
 */
Shape.prototype.raycast = function(result, ray, position, angle){
    // To be implemented in each subclass
};
},{"../math/vec2":48}],64:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Solver = require('./Solver')
,   Utils = require('../utils/Utils')
,   FrictionEquation = require('../equations/FrictionEquation');

module.exports = GSSolver;

/**
 * Iterative Gauss-Seidel constraint equation solver.
 *
 * @class GSSolver
 * @constructor
 * @extends Solver
 * @param {Object} [options]
 * @param {Number} [options.iterations=10]
 * @param {Number} [options.tolerance=0]
 */
function GSSolver(options){
    Solver.call(this,options,Solver.GS);
    options = options || {};

    /**
     * The max number of iterations to do when solving. More gives better results, but is more expensive.
     * @property iterations
     * @type {Number}
     */
    this.iterations = options.iterations || 10;

    /**
     * The error tolerance, per constraint. If the total error is below this limit, the solver will stop iterating. Set to zero for as good solution as possible, but to something larger than zero to make computations faster.
     * @property tolerance
     * @type {Number}
     * @default 1e-7
     */
    this.tolerance = options.tolerance || 1e-7;

    this.arrayStep = 30;
    this.lambda = new Utils.ARRAY_TYPE(this.arrayStep);
    this.Bs =     new Utils.ARRAY_TYPE(this.arrayStep);
    this.invCs =  new Utils.ARRAY_TYPE(this.arrayStep);

    /**
     * Set to true to set all right hand side terms to zero when solving. Can be handy for a few applications.
     * @property useZeroRHS
     * @type {Boolean}
     * @todo Remove, not used
     */
    this.useZeroRHS = false;

    /**
     * Number of solver iterations that are used to approximate normal forces used for friction (F_friction = mu * F_normal). These friction forces will override any other friction forces that are set. If you set frictionIterations = 0, then this feature will be disabled.
     *
     * Use only frictionIterations > 0 if the approximated normal force (F_normal = mass * gravity) is not good enough. Examples of where it can happen is in space games where gravity is zero, or in tall stacks where the normal force is large at bottom but small at top.
     *
     * @property frictionIterations
     * @type {Number}
     * @default 0
     */
    this.frictionIterations = options.frictionIterations !== undefined ? 0 : options.frictionIterations;

    /**
     * The number of iterations that were made during the last solve. If .tolerance is zero, this value will always be equal to .iterations, but if .tolerance is larger than zero, and the solver can quit early, then this number will be somewhere between 1 and .iterations.
     * @property {Number} usedIterations
     */
    this.usedIterations = 0;
}
GSSolver.prototype = new Solver();
GSSolver.prototype.constructor = GSSolver;

function setArrayZero(array){
    var l = array.length;
    while(l--){
        array[l] = +0.0;
    }
}

/**
 * Solve the system of equations
 * @method solve
 * @param  {Number}  h       Time step
 * @param  {World}   world    World to solve
 */
GSSolver.prototype.solve = function(h, world){

    this.sortEquations();

    var iter = 0,
        maxIter = this.iterations,
        maxFrictionIter = this.frictionIterations,
        equations = this.equations,
        Neq = equations.length,
        tolSquared = Math.pow(this.tolerance*Neq, 2),
        bodies = world.bodies,
        Nbodies = world.bodies.length,
        add = vec2.add,
        set = vec2.set,
        useZeroRHS = this.useZeroRHS,
        lambda = this.lambda;

    this.usedIterations = 0;

    if(Neq){
        for(var i=0; i!==Nbodies; i++){
            var b = bodies[i];

            // Update solve mass
            b.updateSolveMassProperties();
        }
    }

    // Things that does not change during iteration can be computed once
    if(lambda.length < Neq){
        lambda = this.lambda =  new Utils.ARRAY_TYPE(Neq + this.arrayStep);
        this.Bs =               new Utils.ARRAY_TYPE(Neq + this.arrayStep);
        this.invCs =            new Utils.ARRAY_TYPE(Neq + this.arrayStep);
    }
    setArrayZero(lambda);
    var invCs = this.invCs,
        Bs = this.Bs,
        lambda = this.lambda;

    for(var i=0; i!==equations.length; i++){
        var c = equations[i];
        if(c.timeStep !== h || c.needsUpdate){
            c.timeStep = h;
            c.update();
        }
        Bs[i] =     c.computeB(c.a,c.b,h);
        invCs[i] =  c.computeInvC(c.epsilon);
    }

    var q, B, c, deltalambdaTot,i,j;

    if(Neq !== 0){

        for(i=0; i!==Nbodies; i++){
            var b = bodies[i];

            // Reset vlambda
            b.resetConstraintVelocity();
        }

        if(maxFrictionIter){
            // Iterate over contact equations to get normal forces
            for(iter=0; iter!==maxFrictionIter; iter++){

                // Accumulate the total error for each iteration.
                deltalambdaTot = 0.0;

                for(j=0; j!==Neq; j++){
                    c = equations[j];

                    var deltalambda = GSSolver.iterateEquation(j,c,c.epsilon,Bs,invCs,lambda,useZeroRHS,h,iter);
                    deltalambdaTot += Math.abs(deltalambda);
                }

                this.usedIterations++;

                // If the total error is small enough - stop iterate
                if(deltalambdaTot*deltalambdaTot <= tolSquared){
                    break;
                }
            }

            GSSolver.updateMultipliers(equations, lambda, 1/h);

            // Set computed friction force
            for(j=0; j!==Neq; j++){
                var eq = equations[j];
                if(eq instanceof FrictionEquation){
                    var f = 0.0;
                    for(var k=0; k!==eq.contactEquations.length; k++){
                        f += eq.contactEquations[k].multiplier;
                    }
                    f *= eq.frictionCoefficient / eq.contactEquations.length;
                    eq.maxForce =  f;
                    eq.minForce = -f;
                }
            }
        }

        // Iterate over all equations
        for(iter=0; iter!==maxIter; iter++){

            // Accumulate the total error for each iteration.
            deltalambdaTot = 0.0;

            for(j=0; j!==Neq; j++){
                c = equations[j];

                var deltalambda = GSSolver.iterateEquation(j,c,c.epsilon,Bs,invCs,lambda,useZeroRHS,h,iter);
                deltalambdaTot += Math.abs(deltalambda);
            }

            this.usedIterations++;

            // If the total error is small enough - stop iterate
            if(deltalambdaTot*deltalambdaTot <= tolSquared){
                break;
            }
        }

        // Add result to velocity
        for(i=0; i!==Nbodies; i++){
            bodies[i].addConstraintVelocity();
        }

        GSSolver.updateMultipliers(equations, lambda, 1/h);
    }
};

// Sets the .multiplier property of each equation
GSSolver.updateMultipliers = function(equations, lambda, invDt){
    // Set the .multiplier property of each equation
    var l = equations.length;
    while(l--){
        equations[l].multiplier = lambda[l] * invDt;
    }
};

GSSolver.iterateEquation = function(j,eq,eps,Bs,invCs,lambda,useZeroRHS,dt,iter){
    // Compute iteration
    var B = Bs[j],
        invC = invCs[j],
        lambdaj = lambda[j],
        GWlambda = eq.computeGWlambda();

    var maxForce = eq.maxForce,
        minForce = eq.minForce;

    if(useZeroRHS){
        B = 0;
    }

    var deltalambda = invC * ( B - GWlambda - eps * lambdaj );

    // Clamp if we are not within the min/max interval
    var lambdaj_plus_deltalambda = lambdaj + deltalambda;
    if(lambdaj_plus_deltalambda < minForce*dt){
        deltalambda = minForce*dt - lambdaj;
    } else if(lambdaj_plus_deltalambda > maxForce*dt){
        deltalambda = maxForce*dt - lambdaj;
    }
    lambda[j] += deltalambda;
    eq.addToWlambda(deltalambda);

    return deltalambda;
};

},{"../equations/FrictionEquation":41,"../math/vec2":48,"../utils/Utils":75,"./Solver":65}],65:[function(require,module,exports){
var Utils = require('../utils/Utils')
,   EventEmitter = require('../events/EventEmitter');

module.exports = Solver;

/**
 * Base class for constraint solvers.
 * @class Solver
 * @constructor
 * @extends EventEmitter
 */
function Solver(options,type){
    options = options || {};

    EventEmitter.call(this);

    this.type = type;

    /**
     * Current equations in the solver.
     *
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * Function that is used to sort all equations before each solve.
     * @property equationSortFunction
     * @type {function|boolean}
     */
    this.equationSortFunction = options.equationSortFunction || false;
}
Solver.prototype = new EventEmitter();
Solver.prototype.constructor = Solver;

/**
 * Method to be implemented in each subclass
 * @method solve
 * @param  {Number} dt
 * @param  {World} world
 */
Solver.prototype.solve = function(dt,world){
    throw new Error("Solver.solve should be implemented by subclasses!");
};

var mockWorld = {bodies:[]};

/**
 * Solves all constraints in an island.
 * @method solveIsland
 * @param  {Number} dt
 * @param  {Island} island
 */
Solver.prototype.solveIsland = function(dt,island){

    this.removeAllEquations();

    if(island.equations.length){
        // Add equations to solver
        this.addEquations(island.equations);
        mockWorld.bodies.length = 0;
        island.getBodies(mockWorld.bodies);

        // Solve
        if(mockWorld.bodies.length){
            this.solve(dt,mockWorld);
        }
    }
};

/**
 * Sort all equations using the .equationSortFunction. Should be called by subclasses before solving.
 * @method sortEquations
 */
Solver.prototype.sortEquations = function(){
    if(this.equationSortFunction){
        this.equations.sort(this.equationSortFunction);
    }
};

/**
 * Add an equation to be solved.
 *
 * @method addEquation
 * @param {Equation} eq
 */
Solver.prototype.addEquation = function(eq){
    if(eq.enabled){
        this.equations.push(eq);
    }
};

/**
 * Add equations. Same as .addEquation, but this time the argument is an array of Equations
 *
 * @method addEquations
 * @param {Array} eqs
 */
Solver.prototype.addEquations = function(eqs){
    //Utils.appendArray(this.equations,eqs);
    for(var i=0, N=eqs.length; i!==N; i++){
        var eq = eqs[i];
        if(eq.enabled){
            this.equations.push(eq);
        }
    }
};

/**
 * Remove an equation.
 *
 * @method removeEquation
 * @param {Equation} eq
 */
Solver.prototype.removeEquation = function(eq){
    var i = this.equations.indexOf(eq);
    if(i !== -1){
        this.equations.splice(i,1);
    }
};

/**
 * Remove all currently added equations.
 *
 * @method removeAllEquations
 */
Solver.prototype.removeAllEquations = function(){
    this.equations.length=0;
};

Solver.GS = 1;
Solver.ISLAND = 2;

},{"../events/EventEmitter":44,"../utils/Utils":75}],66:[function(require,module,exports){
var ContactEquation = require('../equations/ContactEquation');
var Pool = require('./Pool');

module.exports = ContactEquationPool;

/**
 * @class
 */
function ContactEquationPool() {
	Pool.apply(this, arguments);
}
ContactEquationPool.prototype = new Pool();
ContactEquationPool.prototype.constructor = ContactEquationPool;

/**
 * @method create
 * @return {ContactEquation}
 */
ContactEquationPool.prototype.create = function () {
	return new ContactEquation();
};

/**
 * @method destroy
 * @param {ContactEquation} equation
 * @return {ContactEquationPool}
 */
ContactEquationPool.prototype.destroy = function (equation) {
	equation.bodyA = equation.bodyB = null;
	return this;
};

},{"../equations/ContactEquation":39,"./Pool":73}],67:[function(require,module,exports){
var FrictionEquation = require('../equations/FrictionEquation');
var Pool = require('./Pool');

module.exports = FrictionEquationPool;

/**
 * @class
 */
function FrictionEquationPool() {
	Pool.apply(this, arguments);
}
FrictionEquationPool.prototype = new Pool();
FrictionEquationPool.prototype.constructor = FrictionEquationPool;

/**
 * @method create
 * @return {FrictionEquation}
 */
FrictionEquationPool.prototype.create = function () {
	return new FrictionEquation();
};

/**
 * @method destroy
 * @param {FrictionEquation} equation
 * @return {FrictionEquationPool}
 */
FrictionEquationPool.prototype.destroy = function (equation) {
	equation.bodyA = equation.bodyB = null;
	return this;
};

},{"../equations/FrictionEquation":41,"./Pool":73}],68:[function(require,module,exports){
var IslandNode = require('../world/IslandNode');
var Pool = require('./Pool');

module.exports = IslandNodePool;

/**
 * @class
 */
function IslandNodePool() {
	Pool.apply(this, arguments);
}
IslandNodePool.prototype = new Pool();
IslandNodePool.prototype.constructor = IslandNodePool;

/**
 * @method create
 * @return {IslandNode}
 */
IslandNodePool.prototype.create = function () {
	return new IslandNode();
};

/**
 * @method destroy
 * @param {IslandNode} node
 * @return {IslandNodePool}
 */
IslandNodePool.prototype.destroy = function (node) {
	node.reset();
	return this;
};

},{"../world/IslandNode":78,"./Pool":73}],69:[function(require,module,exports){
var Island = require('../world/Island');
var Pool = require('./Pool');

module.exports = IslandPool;

/**
 * @class
 */
function IslandPool() {
	Pool.apply(this, arguments);
}
IslandPool.prototype = new Pool();
IslandPool.prototype.constructor = IslandPool;

/**
 * @method create
 * @return {Island}
 */
IslandPool.prototype.create = function () {
	return new Island();
};

/**
 * @method destroy
 * @param {Island} island
 * @return {IslandPool}
 */
IslandPool.prototype.destroy = function (island) {
	island.reset();
	return this;
};

},{"../world/Island":76,"./Pool":73}],70:[function(require,module,exports){
var TupleDictionary = require('./TupleDictionary');
var OverlapKeeperRecord = require('./OverlapKeeperRecord');
var OverlapKeeperRecordPool = require('./OverlapKeeperRecordPool');
var Utils = require('./Utils');

module.exports = OverlapKeeper;

/**
 * Keeps track of overlaps in the current state and the last step state.
 * @class OverlapKeeper
 * @constructor
 */
function OverlapKeeper() {
    this.overlappingShapesLastState = new TupleDictionary();
    this.overlappingShapesCurrentState = new TupleDictionary();
    this.recordPool = new OverlapKeeperRecordPool({ size: 16 });
    this.tmpDict = new TupleDictionary();
    this.tmpArray1 = [];
}

/**
 * Ticks one step forward in time. This will move the current overlap state to the "old" overlap state, and create a new one as current.
 * @method tick
 */
OverlapKeeper.prototype.tick = function() {
    var last = this.overlappingShapesLastState;
    var current = this.overlappingShapesCurrentState;

    // Save old objects into pool
    var l = last.keys.length;
    while(l--){
        var key = last.keys[l];
        var lastObject = last.getByKey(key);
        var currentObject = current.getByKey(key);
        if(lastObject){
            // The record is only used in the "last" dict, and will be removed. We might as well pool it.
            this.recordPool.release(lastObject);
        }
    }

    // Clear last object
    last.reset();

    // Transfer from new object to old
    last.copy(current);

    // Clear current object
    current.reset();
};

/**
 * @method setOverlapping
 * @param {Body} bodyA
 * @param {Body} shapeA
 * @param {Body} bodyB
 * @param {Body} shapeB
 */
OverlapKeeper.prototype.setOverlapping = function(bodyA, shapeA, bodyB, shapeB) {
    var last = this.overlappingShapesLastState;
    var current = this.overlappingShapesCurrentState;

    // Store current contact state
    if(!current.get(shapeA.id, shapeB.id)){
        var data = this.recordPool.get();
        data.set(bodyA, shapeA, bodyB, shapeB);
        current.set(shapeA.id, shapeB.id, data);
    }
};

OverlapKeeper.prototype.getNewOverlaps = function(result){
    return this.getDiff(this.overlappingShapesLastState, this.overlappingShapesCurrentState, result);
};

OverlapKeeper.prototype.getEndOverlaps = function(result){
    return this.getDiff(this.overlappingShapesCurrentState, this.overlappingShapesLastState, result);
};

/**
 * Checks if two bodies are currently overlapping.
 * @method bodiesAreOverlapping
 * @param  {Body} bodyA
 * @param  {Body} bodyB
 * @return {boolean}
 */
OverlapKeeper.prototype.bodiesAreOverlapping = function(bodyA, bodyB){
    var current = this.overlappingShapesCurrentState;
    var l = current.keys.length;
    while(l--){
        var key = current.keys[l];
        var data = current.data[key];
        if((data.bodyA === bodyA && data.bodyB === bodyB) || data.bodyA === bodyB && data.bodyB === bodyA){
            return true;
        }
    }
    return false;
};

OverlapKeeper.prototype.getDiff = function(dictA, dictB, result){
    var result = result || [];
    var last = dictA;
    var current = dictB;

    result.length = 0;

    var l = current.keys.length;
    while(l--){
        var key = current.keys[l];
        var data = current.data[key];

        if(!data){
            throw new Error('Key '+key+' had no data!');
        }

        var lastData = last.data[key];
        if(!lastData){
            // Not overlapping in last state, but in current.
            result.push(data);
        }
    }

    return result;
};

OverlapKeeper.prototype.isNewOverlap = function(shapeA, shapeB){
    var idA = shapeA.id|0,
        idB = shapeB.id|0;
    var last = this.overlappingShapesLastState;
    var current = this.overlappingShapesCurrentState;
    // Not in last but in new
    return !!!last.get(idA, idB) && !!current.get(idA, idB);
};

OverlapKeeper.prototype.getNewBodyOverlaps = function(result){
    this.tmpArray1.length = 0;
    var overlaps = this.getNewOverlaps(this.tmpArray1);
    return this.getBodyDiff(overlaps, result);
};

OverlapKeeper.prototype.getEndBodyOverlaps = function(result){
    this.tmpArray1.length = 0;
    var overlaps = this.getEndOverlaps(this.tmpArray1);
    return this.getBodyDiff(overlaps, result);
};

OverlapKeeper.prototype.getBodyDiff = function(overlaps, result){
    result = result || [];
    var accumulator = this.tmpDict;

    var l = overlaps.length;

    while(l--){
        var data = overlaps[l];

        // Since we use body id's for the accumulator, these will be a subset of the original one
        accumulator.set(data.bodyA.id|0, data.bodyB.id|0, data);
    }

    l = accumulator.keys.length;
    while(l--){
        var data = accumulator.getByKey(accumulator.keys[l]);
        if(data){
            result.push(data.bodyA, data.bodyB);
        }
    }

    accumulator.reset();

    return result;
};

},{"./OverlapKeeperRecord":71,"./OverlapKeeperRecordPool":72,"./TupleDictionary":74,"./Utils":75}],71:[function(require,module,exports){
module.exports = OverlapKeeperRecord;

/**
 * Overlap data container for the OverlapKeeper
 * @class OverlapKeeperRecord
 * @constructor
 * @param {Body} bodyA
 * @param {Shape} shapeA
 * @param {Body} bodyB
 * @param {Shape} shapeB
 */
function OverlapKeeperRecord(bodyA, shapeA, bodyB, shapeB){
    /**
     * @property {Shape} shapeA
     */
    this.shapeA = shapeA;
    /**
     * @property {Shape} shapeB
     */
    this.shapeB = shapeB;
    /**
     * @property {Body} bodyA
     */
    this.bodyA = bodyA;
    /**
     * @property {Body} bodyB
     */
    this.bodyB = bodyB;
}

/**
 * Set the data for the record
 * @method set
 * @param {Body} bodyA
 * @param {Shape} shapeA
 * @param {Body} bodyB
 * @param {Shape} shapeB
 */
OverlapKeeperRecord.prototype.set = function(bodyA, shapeA, bodyB, shapeB){
    OverlapKeeperRecord.call(this, bodyA, shapeA, bodyB, shapeB);
};

},{}],72:[function(require,module,exports){
var OverlapKeeperRecord = require('./OverlapKeeperRecord');
var Pool = require('./Pool');

module.exports = OverlapKeeperRecordPool;

/**
 * @class
 */
function OverlapKeeperRecordPool() {
	Pool.apply(this, arguments);
}
OverlapKeeperRecordPool.prototype = new Pool();
OverlapKeeperRecordPool.prototype.constructor = OverlapKeeperRecordPool;

/**
 * @method create
 * @return {OverlapKeeperRecord}
 */
OverlapKeeperRecordPool.prototype.create = function () {
	return new OverlapKeeperRecord();
};

/**
 * @method destroy
 * @param {OverlapKeeperRecord} record
 * @return {OverlapKeeperRecordPool}
 */
OverlapKeeperRecordPool.prototype.destroy = function (record) {
	record.bodyA = record.bodyB = record.shapeA = record.shapeB = null;
	return this;
};

},{"./OverlapKeeperRecord":71,"./Pool":73}],73:[function(require,module,exports){
module.exports = Pool;

/**
 * @class Object pooling utility.
 */
function Pool(options) {
	options = options || {};

	/**
	 * @property {Array} objects
	 * @type {Array}
	 */
	this.objects = [];

	if(options.size !== undefined){
		this.resize(options.size);
	}
}

/**
 * @method resize
 * @param {number} size
 * @return {Pool} Self, for chaining
 */
Pool.prototype.resize = function (size) {
	var objects = this.objects;

	while (objects.length > size) {
		objects.pop();
	}

	while (objects.length < size) {
		objects.push(this.create());
	}

	return this;
};

/**
 * Get an object from the pool or create a new instance.
 * @method get
 * @return {Object}
 */
Pool.prototype.get = function () {
	var objects = this.objects;
	return objects.length ? objects.pop() : this.create();
};

/**
 * Clean up and put the object back into the pool for later use.
 * @method release
 * @param {Object} object
 * @return {Pool} Self for chaining
 */
Pool.prototype.release = function (object) {
	this.destroy(object);
	this.objects.push(object);
	return this;
};

},{}],74:[function(require,module,exports){
var Utils = require('./Utils');

module.exports = TupleDictionary;

/**
 * @class TupleDictionary
 * @constructor
 */
function TupleDictionary() {

    /**
     * The data storage
     * @property data
     * @type {Object}
     */
    this.data = {};

    /**
     * Keys that are currently used.
     * @property {Array} keys
     */
    this.keys = [];
}

/**
 * Generate a key given two integers
 * @method getKey
 * @param  {number} i
 * @param  {number} j
 * @return {string}
 */
TupleDictionary.prototype.getKey = function(id1, id2) {
    id1 = id1|0;
    id2 = id2|0;

    if ( (id1|0) === (id2|0) ){
        return -1;
    }

    // valid for values < 2^16
    return ((id1|0) > (id2|0) ?
        (id1 << 16) | (id2 & 0xFFFF) :
        (id2 << 16) | (id1 & 0xFFFF))|0
        ;
};

/**
 * @method getByKey
 * @param  {Number} key
 * @return {Object}
 */
TupleDictionary.prototype.getByKey = function(key) {
    key = key|0;
    return this.data[key];
};

/**
 * @method get
 * @param  {Number} i
 * @param  {Number} j
 * @return {Number}
 */
TupleDictionary.prototype.get = function(i, j) {
    return this.data[this.getKey(i, j)];
};

/**
 * Set a value.
 * @method set
 * @param  {Number} i
 * @param  {Number} j
 * @param {Number} value
 */
TupleDictionary.prototype.set = function(i, j, value) {
    if(!value){
        throw new Error("No data!");
    }

    var key = this.getKey(i, j);

    // Check if key already exists
    if(!this.data[key]){
        this.keys.push(key);
    }

    this.data[key] = value;

    return key;
};

/**
 * Remove all data.
 * @method reset
 */
TupleDictionary.prototype.reset = function() {
    var data = this.data,
        keys = this.keys;

    var l = keys.length;
    while(l--) {
        delete data[keys[l]];
    }

    keys.length = 0;
};

/**
 * Copy another TupleDictionary. Note that all data in this dictionary will be removed.
 * @method copy
 * @param {TupleDictionary} dict The TupleDictionary to copy into this one.
 */
TupleDictionary.prototype.copy = function(dict) {
    this.reset();
    Utils.appendArray(this.keys, dict.keys);
    var l = dict.keys.length;
    while(l--){
        var key = dict.keys[l];
        this.data[key] = dict.data[key];
    }
};

},{"./Utils":75}],75:[function(require,module,exports){
/* global P2_ARRAY_TYPE */

module.exports = Utils;

/**
 * Misc utility functions
 * @class Utils
 * @constructor
 */
function Utils(){}

/**
 * Append the values in array b to the array a. See <a href="http://stackoverflow.com/questions/1374126/how-to-append-an-array-to-an-existing-javascript-array/1374131#1374131">this</a> for an explanation.
 * @method appendArray
 * @static
 * @param  {Array} a
 * @param  {Array} b
 */
Utils.appendArray = function(a,b){
    if (b.length < 150000) {
        a.push.apply(a, b);
    } else {
        for (var i = 0, len = b.length; i !== len; ++i) {
            a.push(b[i]);
        }
    }
};

/**
 * Garbage free Array.splice(). Does not allocate a new array.
 * @method splice
 * @static
 * @param  {Array} array
 * @param  {Number} index
 * @param  {Number} howmany
 */
Utils.splice = function(array,index,howmany){
    howmany = howmany || 1;
    for (var i=index, len=array.length-howmany; i < len; i++){
        array[i] = array[i + howmany];
    }
    array.length = len;
};

/**
 * The array type to use for internal numeric computations throughout the library. Float32Array is used if it is available, but falls back on Array. If you want to set array type manually, inject it via the global variable P2_ARRAY_TYPE. See example below.
 * @static
 * @property {function} ARRAY_TYPE
 * @example
 *     <script>
 *         <!-- Inject your preferred array type before loading p2.js -->
 *         P2_ARRAY_TYPE = Array;
 *     </script>
 *     <script src="p2.js"></script>
 */
if(typeof P2_ARRAY_TYPE !== 'undefined') {
    Utils.ARRAY_TYPE = P2_ARRAY_TYPE;
} else if (typeof Float32Array !== 'undefined'){
    Utils.ARRAY_TYPE = Float32Array;
} else {
    Utils.ARRAY_TYPE = Array;
}

/**
 * Extend an object with the properties of another
 * @static
 * @method extend
 * @param  {object} a
 * @param  {object} b
 */
Utils.extend = function(a,b){
    for(var key in b){
        a[key] = b[key];
    }
};

/**
 * Extend an options object with default values.
 * @static
 * @method defaults
 * @param  {object} options The options object. May be falsy: in this case, a new object is created and returned.
 * @param  {object} defaults An object containing default values.
 * @return {object} The modified options object.
 */
Utils.defaults = function(options, defaults){
    options = options || {};
    for(var key in defaults){
        if(!(key in options)){
            options[key] = defaults[key];
        }
    }
    return options;
};

},{}],76:[function(require,module,exports){
var Body = require('../objects/Body');

module.exports = Island;

/**
 * An island of bodies connected with equations.
 * @class Island
 * @constructor
 */
function Island(){

    /**
     * Current equations in this island.
     * @property equations
     * @type {Array}
     */
    this.equations = [];

    /**
     * Current bodies in this island.
     * @property bodies
     * @type {Array}
     */
    this.bodies = [];
}

/**
 * Clean this island from bodies and equations.
 * @method reset
 */
Island.prototype.reset = function(){
    this.equations.length = this.bodies.length = 0;
};

var bodyIds = [];

/**
 * Get all unique bodies in this island.
 * @method getBodies
 * @return {Array} An array of Body
 */
Island.prototype.getBodies = function(result){
    var bodies = result || [],
        eqs = this.equations;
    bodyIds.length = 0;
    for(var i=0; i!==eqs.length; i++){
        var eq = eqs[i];
        if(bodyIds.indexOf(eq.bodyA.id)===-1){
            bodies.push(eq.bodyA);
            bodyIds.push(eq.bodyA.id);
        }
        if(bodyIds.indexOf(eq.bodyB.id)===-1){
            bodies.push(eq.bodyB);
            bodyIds.push(eq.bodyB.id);
        }
    }
    return bodies;
};

/**
 * Check if the entire island wants to sleep.
 * @method wantsToSleep
 * @return {Boolean}
 */
Island.prototype.wantsToSleep = function(){
    for(var i=0; i<this.bodies.length; i++){
        var b = this.bodies[i];
        if(b.type === Body.DYNAMIC && !b.wantsToSleep){
            return false;
        }
    }
    return true;
};

/**
 * Make all bodies in the island sleep.
 * @method sleep
 */
Island.prototype.sleep = function(){
    for(var i=0; i<this.bodies.length; i++){
        var b = this.bodies[i];
        b.sleep();
    }
    return true;
};

},{"../objects/Body":49}],77:[function(require,module,exports){
var vec2 = require('../math/vec2')
,   Island = require('./Island')
,   IslandNode = require('./IslandNode')
,   IslandNodePool = require('./../utils/IslandNodePool')
,   IslandPool = require('./../utils/IslandPool')
,   Body = require('../objects/Body');

module.exports = IslandManager;

/**
 * Splits the system of bodies and equations into independent islands
 *
 * @class IslandManager
 * @constructor
 * @param {Object} [options]
 * @extends Solver
 */
function IslandManager(options){

    /**
     * @property nodePool
     * @type {IslandNodePool}
     */
    this.nodePool = new IslandNodePool({ size: 16 });

    /**
     * @property islandPool
     * @type {IslandPool}
     */
    this.islandPool = new IslandPool({ size: 8 });

    /**
     * The equations to split. Manually fill this array before running .split().
     * @property {Array} equations
     */
    this.equations = [];

    /**
     * The resulting {{#crossLink "Island"}}{{/crossLink}}s.
     * @property {Array} islands
     */
    this.islands = [];

    /**
     * The resulting graph nodes.
     * @property {Array} nodes
     */
    this.nodes = [];

    /**
     * The node queue, used when traversing the graph of nodes.
     * @private
     * @property {Array} queue
     */
    this.queue = [];
}

/**
 * Get an unvisited node from a list of nodes.
 * @static
 * @method getUnvisitedNode
 * @param  {Array} nodes
 * @return {IslandNode|boolean} The node if found, else false.
 */
IslandManager.getUnvisitedNode = function(nodes){
    var Nnodes = nodes.length;
    for(var i=0; i!==Nnodes; i++){
        var node = nodes[i];
        if(!node.visited && node.body.type === Body.DYNAMIC){
            return node;
        }
    }
    return false;
};

/**
 * Visit a node.
 * @method visit
 * @param  {IslandNode} node
 * @param  {Array} bds
 * @param  {Array} eqs
 */
IslandManager.prototype.visit = function (node,bds,eqs){
    bds.push(node.body);
    var Neqs = node.equations.length;
    for(var i=0; i!==Neqs; i++){
        var eq = node.equations[i];
        if(eqs.indexOf(eq) === -1){ // Already added?
            eqs.push(eq);
        }
    }
};

/**
 * Runs the search algorithm, starting at a root node. The resulting bodies and equations will be stored in the provided arrays.
 * @method bfs
 * @param  {IslandNode} root The node to start from
 * @param  {Array} bds  An array to append resulting Bodies to.
 * @param  {Array} eqs  An array to append resulting Equations to.
 */
IslandManager.prototype.bfs = function(root,bds,eqs){

    // Reset the visit queue
    var queue = this.queue;
    queue.length = 0;

    // Add root node to queue
    queue.push(root);
    root.visited = true;
    this.visit(root,bds,eqs);

    // Process all queued nodes
    while(queue.length) {

        // Get next node in the queue
        var node = queue.pop();

        // Visit unvisited neighboring nodes
        var child;
        while((child = IslandManager.getUnvisitedNode(node.neighbors))) {
            child.visited = true;
            this.visit(child,bds,eqs);

            // Only visit the children of this node if it's dynamic
            if(child.body.type === Body.DYNAMIC){
                queue.push(child);
            }
        }
    }
};

/**
 * Split the world into independent islands. The result is stored in .islands.
 * @method split
 * @param  {World} world
 * @return {Array} The generated islands
 */
IslandManager.prototype.split = function(world){
    var bodies = world.bodies,
        nodes = this.nodes,
        equations = this.equations;

    // Move old nodes to the node pool
    while(nodes.length){
        this.nodePool.release(nodes.pop());
    }

    // Create needed nodes, reuse if possible
    for(var i=0; i!==bodies.length; i++){
        var node = this.nodePool.get();
        node.body = bodies[i];
        nodes.push(node);
        // if(this.nodePool.length){
        //     var node = this.nodePool.pop();
        //     node.reset();
        //     node.body = bodies[i];
        //     nodes.push(node);
        // } else {
        //     nodes.push(new IslandNode(bodies[i]));
        // }
    }

    // Add connectivity data. Each equation connects 2 bodies.
    for(var k=0; k!==equations.length; k++){
        var eq=equations[k],
            i=bodies.indexOf(eq.bodyA),
            j=bodies.indexOf(eq.bodyB),
            ni=nodes[i],
            nj=nodes[j];
        ni.neighbors.push(nj);
        nj.neighbors.push(ni);
        ni.equations.push(eq);
        nj.equations.push(eq);
    }

    // Move old islands to the island pool
    var islands = this.islands;
    for(var i=0; i<islands.length; i++){
        this.islandPool.release(islands[i]);
    }
    islands.length = 0;

    // Get islands
    var child;
    while((child = IslandManager.getUnvisitedNode(nodes))){

        // Create new island
        var island = this.islandPool.get();

        // Get all equations and bodies in this island
        this.bfs(child, island.bodies, island.equations);

        islands.push(island);
    }

    return islands;
};

},{"../math/vec2":48,"../objects/Body":49,"./../utils/IslandNodePool":68,"./../utils/IslandPool":69,"./Island":76,"./IslandNode":78}],78:[function(require,module,exports){
module.exports = IslandNode;

/**
 * Holds a body and keeps track of some additional properties needed for graph traversal.
 * @class IslandNode
 * @constructor
 * @param {Body} body
 */
function IslandNode(body){

	/**
	 * The body that is contained in this node.
	 * @property {Body} body
	 */
    this.body = body;

    /**
     * Neighboring IslandNodes
     * @property {Array} neighbors
     */
    this.neighbors = [];

    /**
     * Equations connected to this node.
     * @property {Array} equations
     */
    this.equations = [];

    /**
     * If this node was visiting during the graph traversal.
     * @property visited
     * @type {Boolean}
     */
    this.visited = false;
}

/**
 * Clean this node from bodies and equations.
 * @method reset
 */
IslandNode.prototype.reset = function(){
    this.equations.length = 0;
    this.neighbors.length = 0;
    this.visited = false;
    this.body = null;
};

},{}],79:[function(require,module,exports){
var  GSSolver = require('../solver/GSSolver')
,    Solver = require('../solver/Solver')
,    Ray = require('../collision/Ray')
,    vec2 = require('../math/vec2')
,    Circle = require('../shapes/Circle')
,    Convex = require('../shapes/Convex')
,    Line = require('../shapes/Line')
,    Plane = require('../shapes/Plane')
,    Capsule = require('../shapes/Capsule')
,    Particle = require('../shapes/Particle')
,    EventEmitter = require('../events/EventEmitter')
,    Body = require('../objects/Body')
,    Shape = require('../shapes/Shape')
,    LinearSpring = require('../objects/LinearSpring')
,    Material = require('../material/Material')
,    ContactMaterial = require('../material/ContactMaterial')
,    DistanceConstraint = require('../constraints/DistanceConstraint')
,    Constraint = require('../constraints/Constraint')
,    LockConstraint = require('../constraints/LockConstraint')
,    RevoluteConstraint = require('../constraints/RevoluteConstraint')
,    PrismaticConstraint = require('../constraints/PrismaticConstraint')
,    GearConstraint = require('../constraints/GearConstraint')
,    pkg = require('../../package.json')
,    Broadphase = require('../collision/Broadphase')
,    AABB = require('../collision/AABB')
,    SAPBroadphase = require('../collision/SAPBroadphase')
,    Narrowphase = require('../collision/Narrowphase')
,    Utils = require('../utils/Utils')
,    OverlapKeeper = require('../utils/OverlapKeeper')
,    IslandManager = require('./IslandManager')
,    RotationalSpring = require('../objects/RotationalSpring');

module.exports = World;

/**
 * The dynamics world, where all bodies and constraints live.
 *
 * @class World
 * @constructor
 * @param {Object} [options]
 * @param {Solver} [options.solver] Defaults to GSSolver.
 * @param {Array} [options.gravity] Defaults to y=-9.78.
 * @param {Broadphase} [options.broadphase] Defaults to SAPBroadphase
 * @param {Boolean} [options.islandSplit=true]
 * @extends EventEmitter
 *
 * @example
 *     var world = new World({
 *         gravity: [0, -10],
 *         broadphase: new SAPBroadphase()
 *     });
 *     world.addBody(new Body());
 */
function World(options){
    EventEmitter.apply(this);

    options = options || {};

    /**
     * All springs in the world. To add a spring to the world, use {{#crossLink "World/addSpring:method"}}{{/crossLink}}.
     *
     * @property springs
     * @type {Array}
     */
    this.springs = [];

    /**
     * All bodies in the world. To add a body to the world, use {{#crossLink "World/addBody:method"}}{{/crossLink}}.
     * @property {Array} bodies
     */
    this.bodies = [];

    /**
     * Disabled body collision pairs. See {{#crossLink "World/disableBodyCollision:method"}}.
     * @private
     * @property {Array} disabledBodyCollisionPairs
     */
    this.disabledBodyCollisionPairs = [];

    /**
     * The solver used to satisfy constraints and contacts. Default is {{#crossLink "GSSolver"}}{{/crossLink}}.
     * @property {Solver} solver
     */
    this.solver = options.solver || new GSSolver();

    /**
     * The narrowphase to use to generate contacts.
     *
     * @property narrowphase
     * @type {Narrowphase}
     */
    this.narrowphase = new Narrowphase(this);

    /**
     * The island manager of this world.
     * @property {IslandManager} islandManager
     */
    this.islandManager = new IslandManager();

    /**
     * Gravity in the world. This is applied on all bodies in the beginning of each step().
     *
     * @property gravity
     * @type {Array}
     */
    this.gravity = vec2.fromValues(0, -9.78);
    if(options.gravity){
        vec2.copy(this.gravity, options.gravity);
    }

    /**
     * Gravity to use when approximating the friction max force (mu*mass*gravity).
     * @property {Number} frictionGravity
     */
    this.frictionGravity = vec2.length(this.gravity) || 10;

    /**
     * Set to true if you want .frictionGravity to be automatically set to the length of .gravity.
     * @property {Boolean} useWorldGravityAsFrictionGravity
     * @default true
     */
    this.useWorldGravityAsFrictionGravity = true;

    /**
     * If the length of .gravity is zero, and .useWorldGravityAsFrictionGravity=true, then switch to using .frictionGravity for friction instead. This fallback is useful for gravityless games.
     * @property {Boolean} useFrictionGravityOnZeroGravity
     * @default true
     */
    this.useFrictionGravityOnZeroGravity = true;

    /**
     * The broadphase algorithm to use.
     *
     * @property broadphase
     * @type {Broadphase}
     */
    this.broadphase = options.broadphase || new SAPBroadphase();
    this.broadphase.setWorld(this);

    /**
     * User-added constraints.
     *
     * @property constraints
     * @type {Array}
     */
    this.constraints = [];

    /**
     * Dummy default material in the world, used in .defaultContactMaterial
     * @property {Material} defaultMaterial
     */
    this.defaultMaterial = new Material();

    /**
     * The default contact material to use, if no contact material was set for the colliding materials.
     * @property {ContactMaterial} defaultContactMaterial
     */
    this.defaultContactMaterial = new ContactMaterial(this.defaultMaterial,this.defaultMaterial);

    /**
     * For keeping track of what time step size we used last step
     * @property lastTimeStep
     * @type {Number}
     */
    this.lastTimeStep = 1/60;

    /**
     * Enable to automatically apply spring forces each step.
     * @property applySpringForces
     * @type {Boolean}
     * @default true
     */
    this.applySpringForces = true;

    /**
     * Enable to automatically apply body damping each step.
     * @property applyDamping
     * @type {Boolean}
     * @default true
     */
    this.applyDamping = true;

    /**
     * Enable to automatically apply gravity each step.
     * @property applyGravity
     * @type {Boolean}
     * @default true
     */
    this.applyGravity = true;

    /**
     * Enable/disable constraint solving in each step.
     * @property solveConstraints
     * @type {Boolean}
     * @default true
     */
    this.solveConstraints = true;

    /**
     * The ContactMaterials added to the World.
     * @property contactMaterials
     * @type {Array}
     */
    this.contactMaterials = [];

    /**
     * World time.
     * @property time
     * @type {Number}
     */
    this.time = 0.0;
    this.accumulator = 0;

    /**
     * Is true during step().
     * @property {Boolean} stepping
     */
    this.stepping = false;

    /**
     * Bodies that are scheduled to be removed at the end of the step.
     * @property {Array} bodiesToBeRemoved
     * @private
     */
    this.bodiesToBeRemoved = [];

    /**
     * Whether to enable island splitting. Island splitting can be an advantage for both precision and performance. See {{#crossLink "IslandManager"}}{{/crossLink}}.
     * @property {Boolean} islandSplit
     * @default true
     */
    this.islandSplit = typeof(options.islandSplit)!=="undefined" ? !!options.islandSplit : true;

    /**
     * Set to true if you want to the world to emit the "impact" event. Turning this off could improve performance.
     * @property emitImpactEvent
     * @type {Boolean}
     * @default true
     */
    this.emitImpactEvent = true;

    // Id counters
    this._constraintIdCounter = 0;
    this._bodyIdCounter = 0;

    /**
     * Fired after the step().
     * @event postStep
     */
    this.postStepEvent = {
        type : "postStep"
    };

    /**
     * Fired when a body is added to the world.
     * @event addBody
     * @param {Body} body
     */
    this.addBodyEvent = {
        type : "addBody",
        body : null
    };

    /**
     * Fired when a body is removed from the world.
     * @event removeBody
     * @param {Body} body
     */
    this.removeBodyEvent = {
        type : "removeBody",
        body : null
    };

    /**
     * Fired when a spring is added to the world.
     * @event addSpring
     * @param {Spring} spring
     */
    this.addSpringEvent = {
        type : "addSpring",
        spring : null
    };

    /**
     * Fired when a first contact is created between two bodies. This event is fired after the step has been done.
     * @event impact
     * @param {Body} bodyA
     * @param {Body} bodyB
     */
    this.impactEvent = {
        type: "impact",
        bodyA : null,
        bodyB : null,
        shapeA : null,
        shapeB : null,
        contactEquation : null
    };

    /**
     * Fired after the Broadphase has collected collision pairs in the world.
     * Inside the event handler, you can modify the pairs array as you like, to
     * prevent collisions between objects that you don't want.
     * @event postBroadphase
     * @param {Array} pairs An array of collision pairs. If this array is [body1,body2,body3,body4], then the body pairs 1,2 and 3,4 would advance to narrowphase.
     */
    this.postBroadphaseEvent = {
        type: "postBroadphase",
        pairs: null
    };

    /**
     * How to deactivate bodies during simulation. Possible modes are: {{#crossLink "World/NO_SLEEPING:property"}}World.NO_SLEEPING{{/crossLink}}, {{#crossLink "World/BODY_SLEEPING:property"}}World.BODY_SLEEPING{{/crossLink}} and {{#crossLink "World/ISLAND_SLEEPING:property"}}World.ISLAND_SLEEPING{{/crossLink}}.
     * If sleeping is enabled, you might need to {{#crossLink "Body/wakeUp:method"}}wake up{{/crossLink}} the bodies if they fall asleep when they shouldn't. If you want to enable sleeping in the world, but want to disable it for a particular body, see {{#crossLink "Body/allowSleep:property"}}Body.allowSleep{{/crossLink}}.
     * @property sleepMode
     * @type {number}
     * @default World.NO_SLEEPING
     */
    this.sleepMode = World.NO_SLEEPING;

    /**
     * Fired when two shapes starts start to overlap. Fired in the narrowphase, during step.
     * @event beginContact
     * @param {Shape} shapeA
     * @param {Shape} shapeB
     * @param {Body}  bodyA
     * @param {Body}  bodyB
     * @param {Array} contactEquations
     */
    this.beginContactEvent = {
        type: "beginContact",
        shapeA: null,
        shapeB: null,
        bodyA: null,
        bodyB: null,
        contactEquations: []
    };

    /**
     * Fired when two shapes stop overlapping, after the narrowphase (during step).
     * @event endContact
     * @param {Shape} shapeA
     * @param {Shape} shapeB
     * @param {Body}  bodyA
     * @param {Body}  bodyB
     */
    this.endContactEvent = {
        type: "endContact",
        shapeA: null,
        shapeB: null,
        bodyA: null,
        bodyB: null
    };

    /**
     * Fired just before equations are added to the solver to be solved. Can be used to control what equations goes into the solver.
     * @event preSolve
     * @param {Array} contactEquations  An array of contacts to be solved.
     * @param {Array} frictionEquations An array of friction equations to be solved.
     */
    this.preSolveEvent = {
        type: "preSolve",
        contactEquations: null,
        frictionEquations: null
    };

    // For keeping track of overlapping shapes
    this.overlappingShapesLastState = { keys:[] };
    this.overlappingShapesCurrentState = { keys:[] };

    /**
     * @property {OverlapKeeper} overlapKeeper
     */
    this.overlapKeeper = new OverlapKeeper();
}
World.prototype = new Object(EventEmitter.prototype);
World.prototype.constructor = World;

/**
 * Never deactivate bodies.
 * @static
 * @property {number} NO_SLEEPING
 */
World.NO_SLEEPING = 1;

/**
 * Deactivate individual bodies if they are sleepy.
 * @static
 * @property {number} BODY_SLEEPING
 */
World.BODY_SLEEPING = 2;

/**
 * Deactivates bodies that are in contact, if all of them are sleepy. Note that you must enable {{#crossLink "World/islandSplit:property"}}.islandSplit{{/crossLink}} for this to work.
 * @static
 * @property {number} ISLAND_SLEEPING
 */
World.ISLAND_SLEEPING = 4;

/**
 * Add a constraint to the simulation.
 *
 * @method addConstraint
 * @param {Constraint} constraint
 * @example
 *     var constraint = new LockConstraint(bodyA, bodyB);
 *     world.addConstraint(constraint);
 */
World.prototype.addConstraint = function(constraint){
    this.constraints.push(constraint);
};

/**
 * Add a ContactMaterial to the simulation.
 * @method addContactMaterial
 * @param {ContactMaterial} contactMaterial
 */
World.prototype.addContactMaterial = function(contactMaterial){
    this.contactMaterials.push(contactMaterial);
};

/**
 * Removes a contact material
 *
 * @method removeContactMaterial
 * @param {ContactMaterial} cm
 */
World.prototype.removeContactMaterial = function(cm){
    var idx = this.contactMaterials.indexOf(cm);
    if(idx!==-1){
        Utils.splice(this.contactMaterials,idx,1);
    }
};

/**
 * Get a contact material given two materials
 * @method getContactMaterial
 * @param {Material} materialA
 * @param {Material} materialB
 * @return {ContactMaterial} The matching ContactMaterial, or false on fail.
 * @todo Use faster hash map to lookup from material id's
 */
World.prototype.getContactMaterial = function(materialA,materialB){
    var cmats = this.contactMaterials;
    for(var i=0, N=cmats.length; i!==N; i++){
        var cm = cmats[i];
        if( (cm.materialA.id === materialA.id) && (cm.materialB.id === materialB.id) ||
            (cm.materialA.id === materialB.id) && (cm.materialB.id === materialA.id) ){
            return cm;
        }
    }
    return false;
};

/**
 * Removes a constraint
 *
 * @method removeConstraint
 * @param {Constraint} constraint
 */
World.prototype.removeConstraint = function(constraint){
    var idx = this.constraints.indexOf(constraint);
    if(idx!==-1){
        Utils.splice(this.constraints,idx,1);
    }
};

var step_r = vec2.create(),
    step_runit = vec2.create(),
    step_u = vec2.create(),
    step_f = vec2.create(),
    step_fhMinv = vec2.create(),
    step_velodt = vec2.create(),
    step_mg = vec2.create(),
    xiw = vec2.fromValues(0,0),
    xjw = vec2.fromValues(0,0),
    zero = vec2.fromValues(0,0),
    interpvelo = vec2.fromValues(0,0);

/**
 * Step the physics world forward in time.
 *
 * There are two modes. The simple mode is fixed timestepping without interpolation. In this case you only use the first argument. The second case uses interpolation. In that you also provide the time since the function was last used, as well as the maximum fixed timesteps to take.
 *
 * @method step
 * @param {Number} dt                       The fixed time step size to use.
 * @param {Number} [timeSinceLastCalled=0]  The time elapsed since the function was last called.
 * @param {Number} [maxSubSteps=10]         Maximum number of fixed steps to take per function call.
 *
 * @example
 *     // Simple fixed timestepping without interpolation
 *     var fixedTimeStep = 1 / 60;
 *     var world = new World();
 *     var body = new Body({ mass: 1 });
 *     world.addBody(body);
 *
 *     function animate(){
 *         requestAnimationFrame(animate);
 *         world.step(fixedTimeStep);
 *         renderBody(body.position, body.angle);
 *     }
 *
 *     // Start animation loop
 *     requestAnimationFrame(animate);
 *
 * @example
 *     // Fixed timestepping with interpolation
 *     var maxSubSteps = 10;
 *     var lastTimeSeconds;
 *
 *     function animate(t){
 *         requestAnimationFrame(animate);
 *         timeSeconds = t / 1000;
 *         lastTimeSeconds = lastTimeSeconds || timeSeconds;
 *
 *         deltaTime = timeSeconds - lastTimeSeconds;
 *         world.step(fixedTimeStep, deltaTime, maxSubSteps);
 *
 *         renderBody(body.interpolatedPosition, body.interpolatedAngle);
 *     }
 *
 *     // Start animation loop
 *     requestAnimationFrame(animate);
 *
 * @see http://bulletphysics.org/mediawiki-1.5.8/index.php/Stepping_The_World
 */
World.prototype.step = function(dt,timeSinceLastCalled,maxSubSteps){
    maxSubSteps = maxSubSteps || 10;
    timeSinceLastCalled = timeSinceLastCalled || 0;

    if(timeSinceLastCalled === 0){ // Fixed, simple stepping

        this.internalStep(dt);

        // Increment time
        this.time += dt;

    } else {

        this.accumulator += timeSinceLastCalled;
        var substeps = 0;
        while (this.accumulator >= dt && substeps < maxSubSteps) {
            // Do fixed steps to catch up
            this.internalStep(dt);
            this.time += dt;
            this.accumulator -= dt;
            substeps++;
        }

        var t = (this.accumulator % dt) / dt;
        for(var j=0; j!==this.bodies.length; j++){
            var b = this.bodies[j];
            vec2.lerp(b.interpolatedPosition, b.previousPosition, b.position, t);
            b.interpolatedAngle = b.previousAngle + t * (b.angle - b.previousAngle);
        }
    }
};

var endOverlaps = [];

/**
 * Make a fixed step.
 * @method internalStep
 * @param  {number} dt
 * @private
 */
World.prototype.internalStep = function(dt){
    this.stepping = true;

    var that = this,
        Nsprings = this.springs.length,
        springs = this.springs,
        bodies = this.bodies,
        g = this.gravity,
        solver = this.solver,
        Nbodies = this.bodies.length,
        broadphase = this.broadphase,
        np = this.narrowphase,
        constraints = this.constraints,
        t0, t1,
        fhMinv = step_fhMinv,
        velodt = step_velodt,
        mg = step_mg,
        scale = vec2.scale,
        add = vec2.add,
        rotate = vec2.rotate,
        islandManager = this.islandManager;

    this.overlapKeeper.tick();

    this.lastTimeStep = dt;

    // Update approximate friction gravity.
    if(this.useWorldGravityAsFrictionGravity){
        var gravityLen = vec2.length(this.gravity);
        if(!(gravityLen === 0 && this.useFrictionGravityOnZeroGravity)){
            // Nonzero gravity. Use it.
            this.frictionGravity = gravityLen;
        }
    }

    // Add gravity to bodies
    if(this.applyGravity){
        for(var i=0; i!==Nbodies; i++){
            var b = bodies[i],
                fi = b.force;
            if(b.type !== Body.DYNAMIC || b.sleepState === Body.SLEEPING){
                continue;
            }
            vec2.scale(mg,g,b.mass*b.gravityScale); // F=m*g
            add(fi,fi,mg);
        }
    }

    // Add spring forces
    if(this.applySpringForces){
        for(var i=0; i!==Nsprings; i++){
            var s = springs[i];
            s.applyForce();
        }
    }

    if(this.applyDamping){
        for(var i=0; i!==Nbodies; i++){
            var b = bodies[i];
            if(b.type === Body.DYNAMIC){
                b.applyDamping(dt);
            }
        }
    }

    // Broadphase
    var result = broadphase.getCollisionPairs(this);

    // Remove ignored collision pairs
    var ignoredPairs = this.disabledBodyCollisionPairs;
    for(var i=ignoredPairs.length-2; i>=0; i-=2){
        for(var j=result.length-2; j>=0; j-=2){
            if( (ignoredPairs[i]   === result[j] && ignoredPairs[i+1] === result[j+1]) ||
                (ignoredPairs[i+1] === result[j] && ignoredPairs[i]   === result[j+1])){
                result.splice(j,2);
            }
        }
    }

    // Remove constrained pairs with collideConnected == false
    var Nconstraints = constraints.length;
    for(i=0; i!==Nconstraints; i++){
        var c = constraints[i];
        if(!c.collideConnected){
            for(var j=result.length-2; j>=0; j-=2){
                if( (c.bodyA === result[j] && c.bodyB === result[j+1]) ||
                    (c.bodyB === result[j] && c.bodyA === result[j+1])){
                    result.splice(j,2);
                }
            }
        }
    }

    // postBroadphase event
    this.postBroadphaseEvent.pairs = result;
    this.emit(this.postBroadphaseEvent);
    this.postBroadphaseEvent.pairs = null;

    // Narrowphase
    np.reset(this);
    for(var i=0, Nresults=result.length; i!==Nresults; i+=2){
        var bi = result[i],
            bj = result[i+1];

        // Loop over all shapes of body i
        for(var k=0, Nshapesi=bi.shapes.length; k!==Nshapesi; k++){
            var si = bi.shapes[k],
                xi = si.position,
                ai = si.angle;

            // All shapes of body j
            for(var l=0, Nshapesj=bj.shapes.length; l!==Nshapesj; l++){
                var sj = bj.shapes[l],
                    xj = sj.position,
                    aj = sj.angle;

                var cm = this.defaultContactMaterial;
                if(si.material && sj.material){
                    var tmp = this.getContactMaterial(si.material,sj.material);
                    if(tmp){
                        cm = tmp;
                    }
                }

                this.runNarrowphase(np,bi,si,xi,ai,bj,sj,xj,aj,cm,this.frictionGravity);
            }
        }
    }

    // Wake up bodies
    for(var i=0; i!==Nbodies; i++){
        var body = bodies[i];
        if(body._wakeUpAfterNarrowphase){
            body.wakeUp();
            body._wakeUpAfterNarrowphase = false;
        }
    }

    // Emit end overlap events
    if(this.has('endContact')){
        this.overlapKeeper.getEndOverlaps(endOverlaps);
        var e = this.endContactEvent;
        var l = endOverlaps.length;
        while(l--){
            var data = endOverlaps[l];
            e.shapeA = data.shapeA;
            e.shapeB = data.shapeB;
            e.bodyA = data.bodyA;
            e.bodyB = data.bodyB;
            this.emit(e);
        }
        endOverlaps.length = 0;
    }

    var preSolveEvent = this.preSolveEvent;
    preSolveEvent.contactEquations = np.contactEquations;
    preSolveEvent.frictionEquations = np.frictionEquations;
    this.emit(preSolveEvent);
    preSolveEvent.contactEquations = preSolveEvent.frictionEquations = null;

    // update constraint equations
    var Nconstraints = constraints.length;
    for(i=0; i!==Nconstraints; i++){
        constraints[i].update();
    }

    if(np.contactEquations.length || np.frictionEquations.length || Nconstraints){
        if(this.islandSplit){
            // Split into islands
            islandManager.equations.length = 0;
            Utils.appendArray(islandManager.equations, np.contactEquations);
            Utils.appendArray(islandManager.equations, np.frictionEquations);
            for(i=0; i!==Nconstraints; i++){
                Utils.appendArray(islandManager.equations, constraints[i].equations);
            }
            islandManager.split(this);

            for(var i=0; i!==islandManager.islands.length; i++){
                var island = islandManager.islands[i];
                if(island.equations.length){
                    solver.solveIsland(dt,island);
                }
            }

        } else {

            // Add contact equations to solver
            solver.addEquations(np.contactEquations);
            solver.addEquations(np.frictionEquations);

            // Add user-defined constraint equations
            for(i=0; i!==Nconstraints; i++){
                solver.addEquations(constraints[i].equations);
            }

            if(this.solveConstraints){
                solver.solve(dt,this);
            }

            solver.removeAllEquations();
        }
    }

    // Step forward
    for(var i=0; i!==Nbodies; i++){
        var body = bodies[i];

        // if(body.sleepState !== Body.SLEEPING && body.type !== Body.STATIC){
        body.integrate(dt);
        // }
    }

    // Reset force
    for(var i=0; i!==Nbodies; i++){
        bodies[i].setZeroForce();
    }

    // Emit impact event
    if(this.emitImpactEvent && this.has('impact')){
        var ev = this.impactEvent;
        for(var i=0; i!==np.contactEquations.length; i++){
            var eq = np.contactEquations[i];
            if(eq.firstImpact){
                ev.bodyA = eq.bodyA;
                ev.bodyB = eq.bodyB;
                ev.shapeA = eq.shapeA;
                ev.shapeB = eq.shapeB;
                ev.contactEquation = eq;
                this.emit(ev);
            }
        }
    }

    // Sleeping update
    if(this.sleepMode === World.BODY_SLEEPING){
        for(i=0; i!==Nbodies; i++){
            bodies[i].sleepTick(this.time, false, dt);
        }
    } else if(this.sleepMode === World.ISLAND_SLEEPING && this.islandSplit){

        // Tell all bodies to sleep tick but dont sleep yet
        for(i=0; i!==Nbodies; i++){
            bodies[i].sleepTick(this.time, true, dt);
        }

        // Sleep islands
        for(var i=0; i<this.islandManager.islands.length; i++){
            var island = this.islandManager.islands[i];
            if(island.wantsToSleep()){
                island.sleep();
            }
        }
    }

    this.stepping = false;

    // Remove bodies that are scheduled for removal
    var bodiesToBeRemoved = this.bodiesToBeRemoved;
    for(var i=0; i!==bodiesToBeRemoved.length; i++){
        this.removeBody(bodiesToBeRemoved[i]);
    }
    bodiesToBeRemoved.length = 0;

    this.emit(this.postStepEvent);
};

/**
 * Runs narrowphase for the shape pair i and j.
 * @method runNarrowphase
 * @param  {Narrowphase} np
 * @param  {Body} bi
 * @param  {Shape} si
 * @param  {Array} xi
 * @param  {Number} ai
 * @param  {Body} bj
 * @param  {Shape} sj
 * @param  {Array} xj
 * @param  {Number} aj
 * @param  {Number} mu
 */
World.prototype.runNarrowphase = function(np,bi,si,xi,ai,bj,sj,xj,aj,cm,glen){

    // Check collision groups and masks
    if(!((si.collisionGroup & sj.collisionMask) !== 0 && (sj.collisionGroup & si.collisionMask) !== 0)){
        return;
    }

    // Get world position and angle of each shape
    vec2.rotate(xiw, xi, bi.angle);
    vec2.rotate(xjw, xj, bj.angle);
    vec2.add(xiw, xiw, bi.position);
    vec2.add(xjw, xjw, bj.position);
    var aiw = ai + bi.angle;
    var ajw = aj + bj.angle;

    np.enableFriction = cm.friction > 0;
    np.frictionCoefficient = cm.friction;
    var reducedMass;
    if(bi.type === Body.STATIC || bi.type === Body.KINEMATIC){
        reducedMass = bj.mass;
    } else if(bj.type === Body.STATIC || bj.type === Body.KINEMATIC){
        reducedMass = bi.mass;
    } else {
        reducedMass = (bi.mass*bj.mass)/(bi.mass+bj.mass);
    }
    np.slipForce = cm.friction*glen*reducedMass;
    np.restitution = cm.restitution;
    np.surfaceVelocity = cm.surfaceVelocity;
    np.frictionStiffness = cm.frictionStiffness;
    np.frictionRelaxation = cm.frictionRelaxation;
    np.stiffness = cm.stiffness;
    np.relaxation = cm.relaxation;
    np.contactSkinSize = cm.contactSkinSize;
    np.enabledEquations = bi.collisionResponse && bj.collisionResponse && si.collisionResponse && sj.collisionResponse;

    var resolver = np[si.type | sj.type],
        numContacts = 0;
    if (resolver) {
        var sensor = si.sensor || sj.sensor;
        var numFrictionBefore = np.frictionEquations.length;
        if (si.type < sj.type) {
            numContacts = resolver.call(np, bi,si,xiw,aiw, bj,sj,xjw,ajw, sensor);
        } else {
            numContacts = resolver.call(np, bj,sj,xjw,ajw, bi,si,xiw,aiw, sensor);
        }
        var numFrictionEquations = np.frictionEquations.length - numFrictionBefore;

        if(numContacts){

            if( bi.allowSleep &&
                bi.type === Body.DYNAMIC &&
                bi.sleepState  === Body.SLEEPING &&
                bj.sleepState  === Body.AWAKE &&
                bj.type !== Body.STATIC
            ){
                var speedSquaredB = vec2.squaredLength(bj.velocity) + Math.pow(bj.angularVelocity,2);
                var speedLimitSquaredB = Math.pow(bj.sleepSpeedLimit,2);
                if(speedSquaredB >= speedLimitSquaredB*2){
                    bi._wakeUpAfterNarrowphase = true;
                }
            }

            if( bj.allowSleep &&
                bj.type === Body.DYNAMIC &&
                bj.sleepState  === Body.SLEEPING &&
                bi.sleepState  === Body.AWAKE &&
                bi.type !== Body.STATIC
            ){
                var speedSquaredA = vec2.squaredLength(bi.velocity) + Math.pow(bi.angularVelocity,2);
                var speedLimitSquaredA = Math.pow(bi.sleepSpeedLimit,2);
                if(speedSquaredA >= speedLimitSquaredA*2){
                    bj._wakeUpAfterNarrowphase = true;
                }
            }

            this.overlapKeeper.setOverlapping(bi, si, bj, sj);
            if(this.has('beginContact') && this.overlapKeeper.isNewOverlap(si, sj)){

                // Report new shape overlap
                var e = this.beginContactEvent;
                e.shapeA = si;
                e.shapeB = sj;
                e.bodyA = bi;
                e.bodyB = bj;

                // Reset contact equations
                e.contactEquations.length = 0;

                if(typeof(numContacts)==="number"){
                    for(var i=np.contactEquations.length-numContacts; i<np.contactEquations.length; i++){
                        e.contactEquations.push(np.contactEquations[i]);
                    }
                }

                this.emit(e);
            }

            // divide the max friction force by the number of contacts
            if(typeof(numContacts)==="number" && numFrictionEquations > 1){ // Why divide by 1?
                for(var i=np.frictionEquations.length-numFrictionEquations; i<np.frictionEquations.length; i++){
                    var f = np.frictionEquations[i];
                    f.setSlipForce(f.getSlipForce() / numFrictionEquations);
                }
            }
        }
    }

};

/**
 * Add a spring to the simulation
 *
 * @method addSpring
 * @param {Spring} spring
 */
World.prototype.addSpring = function(spring){
    this.springs.push(spring);
    var evt = this.addSpringEvent;
    evt.spring = spring;
    this.emit(evt);
    evt.spring = null;
};

/**
 * Remove a spring
 *
 * @method removeSpring
 * @param {Spring} spring
 */
World.prototype.removeSpring = function(spring){
    var idx = this.springs.indexOf(spring);
    if(idx !== -1){
        Utils.splice(this.springs,idx,1);
    }
};

/**
 * Add a body to the simulation
 *
 * @method addBody
 * @param {Body} body
 *
 * @example
 *     var world = new World(),
 *         body = new Body();
 *     world.addBody(body);
 * @todo What if this is done during step?
 */
World.prototype.addBody = function(body){
    if(this.bodies.indexOf(body) === -1){
        this.bodies.push(body);
        body.world = this;
        var evt = this.addBodyEvent;
        evt.body = body;
        this.emit(evt);
        evt.body = null;
    }
};

/**
 * Remove a body from the simulation. If this method is called during step(), the body removal is scheduled to after the step.
 *
 * @method removeBody
 * @param {Body} body
 */
World.prototype.removeBody = function(body){
    if(this.stepping){
        this.bodiesToBeRemoved.push(body);
    } else {
        body.world = null;
        var idx = this.bodies.indexOf(body);
        if(idx!==-1){
            Utils.splice(this.bodies,idx,1);
            this.removeBodyEvent.body = body;
            body.resetConstraintVelocity();
            this.emit(this.removeBodyEvent);
            this.removeBodyEvent.body = null;
        }
    }
};

/**
 * Get a body by its id.
 * @method getBodyById
 * @param {number} id
 * @return {Body} The body, or false if it was not found.
 */
World.prototype.getBodyById = function(id){
    var bodies = this.bodies;
    for(var i=0; i<bodies.length; i++){
        var b = bodies[i];
        if(b.id === id){
            return b;
        }
    }
    return false;
};

/**
 * Disable collision between two bodies
 * @method disableBodyCollision
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
World.prototype.disableBodyCollision = function(bodyA,bodyB){
    this.disabledBodyCollisionPairs.push(bodyA,bodyB);
};

/**
 * Enable collisions between the given two bodies
 * @method enableBodyCollision
 * @param {Body} bodyA
 * @param {Body} bodyB
 */
World.prototype.enableBodyCollision = function(bodyA,bodyB){
    var pairs = this.disabledBodyCollisionPairs;
    for(var i=0; i<pairs.length; i+=2){
        if((pairs[i] === bodyA && pairs[i+1] === bodyB) || (pairs[i+1] === bodyA && pairs[i] === bodyB)){
            pairs.splice(i,2);
            return;
        }
    }
};

/**
 * Resets the World, removes all bodies, constraints and springs.
 *
 * @method clear
 */
World.prototype.clear = function(){

    this.time = 0;

    // Remove all solver equations
    if(this.solver && this.solver.equations.length){
        this.solver.removeAllEquations();
    }

    // Remove all constraints
    var cs = this.constraints;
    for(var i=cs.length-1; i>=0; i--){
        this.removeConstraint(cs[i]);
    }

    // Remove all bodies
    var bodies = this.bodies;
    for(var i=bodies.length-1; i>=0; i--){
        this.removeBody(bodies[i]);
    }

    // Remove all springs
    var springs = this.springs;
    for(var i=springs.length-1; i>=0; i--){
        this.removeSpring(springs[i]);
    }

    // Remove all contact materials
    var cms = this.contactMaterials;
    for(var i=cms.length-1; i>=0; i--){
        this.removeContactMaterial(cms[i]);
    }

    World.apply(this);
};

var hitTest_tmp1 = vec2.create(),
    hitTest_zero = vec2.fromValues(0,0),
    hitTest_tmp2 = vec2.fromValues(0,0);

/**
 * Test if a world point overlaps bodies
 * @method hitTest
 * @param  {Array}  worldPoint  Point to use for intersection tests
 * @param  {Array}  bodies      A list of objects to check for intersection
 * @param  {Number} precision   Used for matching against particles and lines. Adds some margin to these infinitesimal objects.
 * @return {Array}              Array of bodies that overlap the point
 * @todo Should use an api similar to the raycast function
 * @todo Should probably implement a .containsPoint method for all shapes. Would be more efficient
 * @todo Should use the broadphase
 */
World.prototype.hitTest = function(worldPoint,bodies,precision){
    precision = precision || 0;

    // Create a dummy particle body with a particle shape to test against the bodies
    var pb = new Body({ position:worldPoint }),
        ps = new Particle(),
        px = worldPoint,
        pa = 0,
        x = hitTest_tmp1,
        zero = hitTest_zero,
        tmp = hitTest_tmp2;
    pb.addShape(ps);

    var n = this.narrowphase,
        result = [];

    // Check bodies
    for(var i=0, N=bodies.length; i!==N; i++){
        var b = bodies[i];

        for(var j=0, NS=b.shapes.length; j!==NS; j++){
            var s = b.shapes[j];

            // Get shape world position + angle
            vec2.rotate(x, s.position, b.angle);
            vec2.add(x, x, b.position);
            var a = s.angle + b.angle;

            if( (s instanceof Circle    && n.circleParticle  (b,s,x,a,     pb,ps,px,pa, true)) ||
                (s instanceof Convex    && n.particleConvex  (pb,ps,px,pa, b,s,x,a,     true)) ||
                (s instanceof Plane     && n.particlePlane   (pb,ps,px,pa, b,s,x,a,     true)) ||
                (s instanceof Capsule   && n.particleCapsule (pb,ps,px,pa, b,s,x,a,     true)) ||
                (s instanceof Particle  && vec2.squaredLength(vec2.sub(tmp,x,worldPoint)) < precision*precision)
                ){
                result.push(b);
            }
        }
    }

    return result;
};

/**
 * Set the stiffness for all equations and contact materials.
 * @method setGlobalStiffness
 * @param {Number} stiffness
 */
World.prototype.setGlobalStiffness = function(stiffness){

    // Set for all constraints
    var constraints = this.constraints;
    for(var i=0; i !== constraints.length; i++){
        var c = constraints[i];
        for(var j=0; j !== c.equations.length; j++){
            var eq = c.equations[j];
            eq.stiffness = stiffness;
            eq.needsUpdate = true;
        }
    }

    // Set for all contact materials
    var contactMaterials = this.contactMaterials;
    for(var i=0; i !== contactMaterials.length; i++){
        var c = contactMaterials[i];
        c.stiffness = c.frictionStiffness = stiffness;
    }

    // Set for default contact material
    var c = this.defaultContactMaterial;
    c.stiffness = c.frictionStiffness = stiffness;
};

/**
 * Set the relaxation for all equations and contact materials.
 * @method setGlobalRelaxation
 * @param {Number} relaxation
 */
World.prototype.setGlobalRelaxation = function(relaxation){

    // Set for all constraints
    for(var i=0; i !== this.constraints.length; i++){
        var c = this.constraints[i];
        for(var j=0; j !== c.equations.length; j++){
            var eq = c.equations[j];
            eq.relaxation = relaxation;
            eq.needsUpdate = true;
        }
    }

    // Set for all contact materials
    for(var i=0; i !== this.contactMaterials.length; i++){
        var c = this.contactMaterials[i];
        c.relaxation = c.frictionRelaxation = relaxation;
    }

    // Set for default contact material
    var c = this.defaultContactMaterial;
    c.relaxation = c.frictionRelaxation = relaxation;
};

var tmpAABB = new AABB();
var tmpArray = [];

/**
 * Ray cast against all bodies in the world.
 * @method raycast
 * @param  {RaycastResult} result
 * @param  {Ray} ray
 * @return {boolean} True if any body was hit.
 *
 * @example
 *     var ray = new Ray({
 *         mode: Ray.CLOSEST, // or ANY
 *         from: [0, 0],
 *         to: [10, 0],
 *     });
 *     var result = new RaycastResult();
 *     world.raycast(result, ray);
 *
 *     // Get the hit point
 *     var hitPoint = vec2.create();
 *     result.getHitPoint(hitPoint, ray);
 *     console.log('Hit point: ', hitPoint[0], hitPoint[1], ' at distance ' + result.getHitDistance(ray));
 *
 * @example
 *     var ray = new Ray({
 *         mode: Ray.ALL,
 *         from: [0, 0],
 *         to: [10, 0],
 *         callback: function(result){
 *
 *             // Print some info about the hit
 *             console.log('Hit body and shape: ', result.body, result.shape);
 *
 *             // Get the hit point
 *             var hitPoint = vec2.create();
 *             result.getHitPoint(hitPoint, ray);
 *             console.log('Hit point: ', hitPoint[0], hitPoint[1], ' at distance ' + result.getHitDistance(ray));
 *
 *             // If you are happy with the hits you got this far, you can stop the traversal here:
 *             result.stop();
 *         }
 *     });
 *     var result = new RaycastResult();
 *     world.raycast(result, ray);
 */
World.prototype.raycast = function(result, ray){

    // Get all bodies within the ray AABB
    ray.getAABB(tmpAABB);
    this.broadphase.aabbQuery(this, tmpAABB, tmpArray);
    ray.intersectBodies(result, tmpArray);
    tmpArray.length = 0;

    return result.hasHit();
};

},{"../../package.json":24,"../collision/AABB":25,"../collision/Broadphase":26,"../collision/Narrowphase":28,"../collision/Ray":29,"../collision/SAPBroadphase":31,"../constraints/Constraint":32,"../constraints/DistanceConstraint":33,"../constraints/GearConstraint":34,"../constraints/LockConstraint":35,"../constraints/PrismaticConstraint":36,"../constraints/RevoluteConstraint":37,"../events/EventEmitter":44,"../material/ContactMaterial":45,"../material/Material":46,"../math/vec2":48,"../objects/Body":49,"../objects/LinearSpring":50,"../objects/RotationalSpring":51,"../shapes/Capsule":56,"../shapes/Circle":57,"../shapes/Convex":58,"../shapes/Line":60,"../shapes/Particle":61,"../shapes/Plane":62,"../shapes/Shape":63,"../solver/GSSolver":64,"../solver/Solver":65,"../utils/OverlapKeeper":70,"../utils/Utils":75,"./IslandManager":77}],80:[function(require,module,exports){
module.exports = require('./src/PathFinding');

},{"./src/PathFinding":81}],81:[function(require,module,exports){
module.exports = {
    'Heap'                      : require('heap'),
    'Node'                      : require('./core/Node'),
    'Grid'                      : require('./core/Grid'),
    'Util'                      : require('./core/Util'),
    'DiagonalMovement'          : require('./core/DiagonalMovement'),
    'Heuristic'                 : require('./core/Heuristic'),
    'AStarFinder'               : require('./finders/AStarFinder'),
    'BestFirstFinder'           : require('./finders/BestFirstFinder'),
    'BreadthFirstFinder'        : require('./finders/BreadthFirstFinder'),
    'DijkstraFinder'            : require('./finders/DijkstraFinder'),
    'BiAStarFinder'             : require('./finders/BiAStarFinder'),
    'BiBestFirstFinder'         : require('./finders/BiBestFirstFinder'),
    'BiBreadthFirstFinder'      : require('./finders/BiBreadthFirstFinder'),
    'BiDijkstraFinder'          : require('./finders/BiDijkstraFinder'),
    'IDAStarFinder'             : require('./finders/IDAStarFinder'),
    'JumpPointFinder'           : require('./finders/JumpPointFinder'),
};

},{"./core/DiagonalMovement":82,"./core/Grid":83,"./core/Heuristic":84,"./core/Node":85,"./core/Util":86,"./finders/AStarFinder":87,"./finders/BestFirstFinder":88,"./finders/BiAStarFinder":89,"./finders/BiBestFirstFinder":90,"./finders/BiBreadthFirstFinder":91,"./finders/BiDijkstraFinder":92,"./finders/BreadthFirstFinder":93,"./finders/DijkstraFinder":94,"./finders/IDAStarFinder":95,"./finders/JumpPointFinder":100,"heap":22}],82:[function(require,module,exports){
var DiagonalMovement = {
    Always: 1,
    Never: 2,
    IfAtMostOneObstacle: 3,
    OnlyWhenNoObstacles: 4
};

module.exports = DiagonalMovement;
},{}],83:[function(require,module,exports){
var Node = require('./Node');
var DiagonalMovement = require('./DiagonalMovement');

/**
 * The Grid class, which serves as the encapsulation of the layout of the nodes.
 * @constructor
 * @param {number|Array<Array<(number|boolean)>>} width_or_matrix Number of columns of the grid, or matrix
 * @param {number} height Number of rows of the grid.
 * @param {Array<Array<(number|boolean)>>} [matrix] - A 0-1 matrix
 *     representing the walkable status of the nodes(0 or false for walkable).
 *     If the matrix is not supplied, all the nodes will be walkable.  */
function Grid(width_or_matrix, height, matrix) {
    var width;

    if (typeof width_or_matrix !== 'object') {
        width = width_or_matrix;
    } else {
        height = width_or_matrix.length;
        width = width_or_matrix[0].length;
        matrix = width_or_matrix;
    }

    /**
     * The number of columns of the grid.
     * @type number
     */
    this.width = width;
    /**
     * The number of rows of the grid.
     * @type number
     */
    this.height = height;

    /**
     * A 2D array of nodes.
     */
    this.nodes = this._buildNodes(width, height, matrix);
}

/**
 * Build and return the nodes.
 * @private
 * @param {number} width
 * @param {number} height
 * @param {Array<Array<number|boolean>>} [matrix] - A 0-1 matrix representing
 *     the walkable status of the nodes.
 * @see Grid
 */
Grid.prototype._buildNodes = function(width, height, matrix) {
    var i, j,
        nodes = new Array(height);

    for (i = 0; i < height; ++i) {
        nodes[i] = new Array(width);
        for (j = 0; j < width; ++j) {
            nodes[i][j] = new Node(j, i);
        }
    }


    if (matrix === undefined) {
        return nodes;
    }

    if (matrix.length !== height || matrix[0].length !== width) {
        throw new Error('Matrix size does not fit');
    }

    for (i = 0; i < height; ++i) {
        for (j = 0; j < width; ++j) {
            if (matrix[i][j]) {
                // 0, false, null will be walkable
                // while others will be un-walkable
                nodes[i][j].walkable = false;
            }
        }
    }

    return nodes;
};


Grid.prototype.getNodeAt = function(x, y) {
    return this.nodes[y][x];
};


/**
 * Determine whether the node at the given position is walkable.
 * (Also returns false if the position is outside the grid.)
 * @param {number} x - The x coordinate of the node.
 * @param {number} y - The y coordinate of the node.
 * @return {boolean} - The walkability of the node.
 */
Grid.prototype.isWalkableAt = function(x, y) {
    return this.isInside(x, y) && this.nodes[y][x].walkable;
};


/**
 * Determine whether the position is inside the grid.
 * XXX: `grid.isInside(x, y)` is wierd to read.
 * It should be `(x, y) is inside grid`, but I failed to find a better
 * name for this method.
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
Grid.prototype.isInside = function(x, y) {
    return (x >= 0 && x < this.width) && (y >= 0 && y < this.height);
};


/**
 * Set whether the node on the given position is walkable.
 * NOTE: throws exception if the coordinate is not inside the grid.
 * @param {number} x - The x coordinate of the node.
 * @param {number} y - The y coordinate of the node.
 * @param {boolean} walkable - Whether the position is walkable.
 */
Grid.prototype.setWalkableAt = function(x, y, walkable) {
    this.nodes[y][x].walkable = walkable;
};


/**
 * Get the neighbors of the given node.
 *
 *     offsets      diagonalOffsets:
 *  +---+---+---+    +---+---+---+
 *  |   | 0 |   |    | 0 |   | 1 |
 *  +---+---+---+    +---+---+---+
 *  | 3 |   | 1 |    |   |   |   |
 *  +---+---+---+    +---+---+---+
 *  |   | 2 |   |    | 3 |   | 2 |
 *  +---+---+---+    +---+---+---+
 *
 *  When allowDiagonal is true, if offsets[i] is valid, then
 *  diagonalOffsets[i] and
 *  diagonalOffsets[(i + 1) % 4] is valid.
 * @param {Node} node
 * @param {DiagonalMovement} diagonalMovement
 */
Grid.prototype.getNeighbors = function(node, diagonalMovement) {
    var x = node.x,
        y = node.y,
        neighbors = [],
        s0 = false, d0 = false,
        s1 = false, d1 = false,
        s2 = false, d2 = false,
        s3 = false, d3 = false,
        nodes = this.nodes;

    // ↑
    if (this.isWalkableAt(x, y - 1)) {
        neighbors.push(nodes[y - 1][x]);
        s0 = true;
    }
    // →
    if (this.isWalkableAt(x + 1, y)) {
        neighbors.push(nodes[y][x + 1]);
        s1 = true;
    }
    // ↓
    if (this.isWalkableAt(x, y + 1)) {
        neighbors.push(nodes[y + 1][x]);
        s2 = true;
    }
    // ←
    if (this.isWalkableAt(x - 1, y)) {
        neighbors.push(nodes[y][x - 1]);
        s3 = true;
    }

    if (diagonalMovement === DiagonalMovement.Never) {
        return neighbors;
    }

    if (diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {
        d0 = s3 && s0;
        d1 = s0 && s1;
        d2 = s1 && s2;
        d3 = s2 && s3;
    } else if (diagonalMovement === DiagonalMovement.IfAtMostOneObstacle) {
        d0 = s3 || s0;
        d1 = s0 || s1;
        d2 = s1 || s2;
        d3 = s2 || s3;
    } else if (diagonalMovement === DiagonalMovement.Always) {
        d0 = true;
        d1 = true;
        d2 = true;
        d3 = true;
    } else {
        throw new Error('Incorrect value of diagonalMovement');
    }

    // ↖
    if (d0 && this.isWalkableAt(x - 1, y - 1)) {
        neighbors.push(nodes[y - 1][x - 1]);
    }
    // ↗
    if (d1 && this.isWalkableAt(x + 1, y - 1)) {
        neighbors.push(nodes[y - 1][x + 1]);
    }
    // ↘
    if (d2 && this.isWalkableAt(x + 1, y + 1)) {
        neighbors.push(nodes[y + 1][x + 1]);
    }
    // ↙
    if (d3 && this.isWalkableAt(x - 1, y + 1)) {
        neighbors.push(nodes[y + 1][x - 1]);
    }

    return neighbors;
};


/**
 * Get a clone of this grid.
 * @return {Grid} Cloned grid.
 */
Grid.prototype.clone = function() {
    var i, j,

        width = this.width,
        height = this.height,
        thisNodes = this.nodes,

        newGrid = new Grid(width, height),
        newNodes = new Array(height);

    for (i = 0; i < height; ++i) {
        newNodes[i] = new Array(width);
        for (j = 0; j < width; ++j) {
            newNodes[i][j] = new Node(j, i, thisNodes[i][j].walkable);
        }
    }

    newGrid.nodes = newNodes;

    return newGrid;
};

module.exports = Grid;

},{"./DiagonalMovement":82,"./Node":85}],84:[function(require,module,exports){
/**
 * @namespace PF.Heuristic
 * @description A collection of heuristic functions.
 */
module.exports = {

  /**
   * Manhattan distance.
   * @param {number} dx - Difference in x.
   * @param {number} dy - Difference in y.
   * @return {number} dx + dy
   */
  manhattan: function(dx, dy) {
      return dx + dy;
  },

  /**
   * Euclidean distance.
   * @param {number} dx - Difference in x.
   * @param {number} dy - Difference in y.
   * @return {number} sqrt(dx * dx + dy * dy)
   */
  euclidean: function(dx, dy) {
      return Math.sqrt(dx * dx + dy * dy);
  },

  /**
   * Octile distance.
   * @param {number} dx - Difference in x.
   * @param {number} dy - Difference in y.
   * @return {number} sqrt(dx * dx + dy * dy) for grids
   */
  octile: function(dx, dy) {
      var F = Math.SQRT2 - 1;
      return (dx < dy) ? F * dx + dy : F * dy + dx;
  },

  /**
   * Chebyshev distance.
   * @param {number} dx - Difference in x.
   * @param {number} dy - Difference in y.
   * @return {number} max(dx, dy)
   */
  chebyshev: function(dx, dy) {
      return Math.max(dx, dy);
  }

};

},{}],85:[function(require,module,exports){
/**
 * A node in grid. 
 * This class holds some basic information about a node and custom 
 * attributes may be added, depending on the algorithms' needs.
 * @constructor
 * @param {number} x - The x coordinate of the node on the grid.
 * @param {number} y - The y coordinate of the node on the grid.
 * @param {boolean} [walkable] - Whether this node is walkable.
 */
function Node(x, y, walkable) {
    /**
     * The x coordinate of the node on the grid.
     * @type number
     */
    this.x = x;
    /**
     * The y coordinate of the node on the grid.
     * @type number
     */
    this.y = y;
    /**
     * Whether this node can be walked through.
     * @type boolean
     */
    this.walkable = (walkable === undefined ? true : walkable);
}

module.exports = Node;

},{}],86:[function(require,module,exports){
/**
 * Backtrace according to the parent records and return the path.
 * (including both start and end nodes)
 * @param {Node} node End node
 * @return {Array<Array<number>>} the path
 */
function backtrace(node) {
    var path = [[node.x, node.y]];
    while (node.parent) {
        node = node.parent;
        path.push([node.x, node.y]);
    }
    return path.reverse();
}
exports.backtrace = backtrace;

/**
 * Backtrace from start and end node, and return the path.
 * (including both start and end nodes)
 * @param {Node}
 * @param {Node}
 */
function biBacktrace(nodeA, nodeB) {
    var pathA = backtrace(nodeA),
        pathB = backtrace(nodeB);
    return pathA.concat(pathB.reverse());
}
exports.biBacktrace = biBacktrace;

/**
 * Compute the length of the path.
 * @param {Array<Array<number>>} path The path
 * @return {number} The length of the path
 */
function pathLength(path) {
    var i, sum = 0, a, b, dx, dy;
    for (i = 1; i < path.length; ++i) {
        a = path[i - 1];
        b = path[i];
        dx = a[0] - b[0];
        dy = a[1] - b[1];
        sum += Math.sqrt(dx * dx + dy * dy);
    }
    return sum;
}
exports.pathLength = pathLength;


/**
 * Given the start and end coordinates, return all the coordinates lying
 * on the line formed by these coordinates, based on Bresenham's algorithm.
 * http://en.wikipedia.org/wiki/Bresenham's_line_algorithm#Simplification
 * @param {number} x0 Start x coordinate
 * @param {number} y0 Start y coordinate
 * @param {number} x1 End x coordinate
 * @param {number} y1 End y coordinate
 * @return {Array<Array<number>>} The coordinates on the line
 */
function interpolate(x0, y0, x1, y1) {
    var abs = Math.abs,
        line = [],
        sx, sy, dx, dy, err, e2;

    dx = abs(x1 - x0);
    dy = abs(y1 - y0);

    sx = (x0 < x1) ? 1 : -1;
    sy = (y0 < y1) ? 1 : -1;

    err = dx - dy;

    while (true) {
        line.push([x0, y0]);

        if (x0 === x1 && y0 === y1) {
            break;
        }
        
        e2 = 2 * err;
        if (e2 > -dy) {
            err = err - dy;
            x0 = x0 + sx;
        }
        if (e2 < dx) {
            err = err + dx;
            y0 = y0 + sy;
        }
    }

    return line;
}
exports.interpolate = interpolate;


/**
 * Given a compressed path, return a new path that has all the segments
 * in it interpolated.
 * @param {Array<Array<number>>} path The path
 * @return {Array<Array<number>>} expanded path
 */
function expandPath(path) {
    var expanded = [],
        len = path.length,
        coord0, coord1,
        interpolated,
        interpolatedLen,
        i, j;

    if (len < 2) {
        return expanded;
    }

    for (i = 0; i < len - 1; ++i) {
        coord0 = path[i];
        coord1 = path[i + 1];

        interpolated = interpolate(coord0[0], coord0[1], coord1[0], coord1[1]);
        interpolatedLen = interpolated.length;
        for (j = 0; j < interpolatedLen - 1; ++j) {
            expanded.push(interpolated[j]);
        }
    }
    expanded.push(path[len - 1]);

    return expanded;
}
exports.expandPath = expandPath;


/**
 * Smoothen the give path.
 * The original path will not be modified; a new path will be returned.
 * @param {PF.Grid} grid
 * @param {Array<Array<number>>} path The path
 */
function smoothenPath(grid, path) {
    var len = path.length,
        x0 = path[0][0],        // path start x
        y0 = path[0][1],        // path start y
        x1 = path[len - 1][0],  // path end x
        y1 = path[len - 1][1],  // path end y
        sx, sy,                 // current start coordinate
        ex, ey,                 // current end coordinate
        newPath,
        i, j, coord, line, testCoord, blocked;

    sx = x0;
    sy = y0;
    newPath = [[sx, sy]];

    for (i = 2; i < len; ++i) {
        coord = path[i];
        ex = coord[0];
        ey = coord[1];
        line = interpolate(sx, sy, ex, ey);

        blocked = false;
        for (j = 1; j < line.length; ++j) {
            testCoord = line[j];

            if (!grid.isWalkableAt(testCoord[0], testCoord[1])) {
                blocked = true;
                break;
            }
        }
        if (blocked) {
            lastValidCoord = path[i - 1];
            newPath.push(lastValidCoord);
            sx = lastValidCoord[0];
            sy = lastValidCoord[1];
        }
    }
    newPath.push([x1, y1]);

    return newPath;
}
exports.smoothenPath = smoothenPath;


/**
 * Compress a path, remove redundant nodes without altering the shape
 * The original path is not modified
 * @param {Array<Array<number>>} path The path
 * @return {Array<Array<number>>} The compressed path
 */
function compressPath(path) {

    // nothing to compress
    if(path.length < 3) {
        return path;
    }

    var compressed = [],
        sx = path[0][0], // start x
        sy = path[0][1], // start y
        px = path[1][0], // second point x
        py = path[1][1], // second point y
        dx = px - sx, // direction between the two points
        dy = py - sy, // direction between the two points
        lx, ly,
        ldx, ldy,
        sq, i;

    // normalize the direction
    sq = Math.sqrt(dx*dx + dy*dy);
    dx /= sq;
    dy /= sq;

    // start the new path
    compressed.push([sx,sy]);

    for(i = 2; i < path.length; i++) {

        // store the last point
        lx = px;
        ly = py;

        // store the last direction
        ldx = dx;
        ldy = dy;

        // next point
        px = path[i][0];
        py = path[i][1];

        // next direction
        dx = px - lx;
        dy = py - ly;

        // normalize
        sq = Math.sqrt(dx*dx + dy*dy);
        dx /= sq;
        dy /= sq;

        // if the direction has changed, store the point
        if ( dx !== ldx || dy !== ldy ) {
            compressed.push([lx,ly]);
        }
    }

    // store the last point
    compressed.push([px,py]);

    return compressed;
}
exports.compressPath = compressPath;

},{}],87:[function(require,module,exports){
var Heap       = require('heap');
var Util       = require('../core/Util');
var Heuristic  = require('../core/Heuristic');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * A* path-finder. Based upon https://github.com/bgrins/javascript-astar
 * @constructor
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching 
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 * @param {number} opt.weight Weight to apply to the heuristic to allow for
 *     suboptimal paths, in order to speed up the search.
 */
function AStarFinder(opt) {
    opt = opt || {};
    this.allowDiagonal = opt.allowDiagonal;
    this.dontCrossCorners = opt.dontCrossCorners;
    this.heuristic = opt.heuristic || Heuristic.manhattan;
    this.weight = opt.weight || 1;
    this.diagonalMovement = opt.diagonalMovement;

    if (!this.diagonalMovement) {
        if (!this.allowDiagonal) {
            this.diagonalMovement = DiagonalMovement.Never;
        } else {
            if (this.dontCrossCorners) {
                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;
            } else {
                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;
            }
        }
    }

    // When diagonal movement is allowed the manhattan heuristic is not
    //admissible. It should be octile instead
    if (this.diagonalMovement === DiagonalMovement.Never) {
        this.heuristic = opt.heuristic || Heuristic.manhattan;
    } else {
        this.heuristic = opt.heuristic || Heuristic.octile;
    }
}

/**
 * Find and return the the path.
 * @return {Array<Array<number>>} The path, including both start and
 *     end positions.
 */
AStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {
    var openList = new Heap(function(nodeA, nodeB) {
            return nodeA.f - nodeB.f;
        }),
        startNode = grid.getNodeAt(startX, startY),
        endNode = grid.getNodeAt(endX, endY),
        heuristic = this.heuristic,
        diagonalMovement = this.diagonalMovement,
        weight = this.weight,
        abs = Math.abs, SQRT2 = Math.SQRT2,
        node, neighbors, neighbor, i, l, x, y, ng;

    // set the `g` and `f` value of the start node to be 0
    startNode.g = 0;
    startNode.f = 0;

    // push the start node into the open list
    openList.push(startNode);
    startNode.opened = true;

    // while the open list is not empty
    while (!openList.empty()) {
        // pop the position of node which has the minimum `f` value.
        node = openList.pop();
        node.closed = true;

        // if reached the end position, construct the path and return it
        if (node === endNode) {
            return Util.backtrace(endNode);
        }

        // get neigbours of the current node
        neighbors = grid.getNeighbors(node, diagonalMovement);
        for (i = 0, l = neighbors.length; i < l; ++i) {
            neighbor = neighbors[i];

            if (neighbor.closed) {
                continue;
            }

            x = neighbor.x;
            y = neighbor.y;

            // get the distance between current node and the neighbor
            // and calculate the next g score
            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);

            // check if the neighbor has not been inspected yet, or
            // can be reached with smaller cost from the current node
            if (!neighbor.opened || ng < neighbor.g) {
                neighbor.g = ng;
                neighbor.h = neighbor.h || weight * heuristic(abs(x - endX), abs(y - endY));
                neighbor.f = neighbor.g + neighbor.h;
                neighbor.parent = node;

                if (!neighbor.opened) {
                    openList.push(neighbor);
                    neighbor.opened = true;
                } else {
                    // the neighbor can be reached with smaller cost.
                    // Since its f value has been updated, we have to
                    // update its position in the open list
                    openList.updateItem(neighbor);
                }
            }
        } // end for each neighbor
    } // end while not open list empty

    // fail to find the path
    return [];
};

module.exports = AStarFinder;

},{"../core/DiagonalMovement":82,"../core/Heuristic":84,"../core/Util":86,"heap":22}],88:[function(require,module,exports){
var AStarFinder = require('./AStarFinder');

/**
 * Best-First-Search path-finder.
 * @constructor
 * @extends AStarFinder
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 */
function BestFirstFinder(opt) {
    AStarFinder.call(this, opt);

    var orig = this.heuristic;
    this.heuristic = function(dx, dy) {
        return orig(dx, dy) * 1000000;
    };
}

BestFirstFinder.prototype = new AStarFinder();
BestFirstFinder.prototype.constructor = BestFirstFinder;

module.exports = BestFirstFinder;

},{"./AStarFinder":87}],89:[function(require,module,exports){
var Heap       = require('heap');
var Util       = require('../core/Util');
var Heuristic  = require('../core/Heuristic');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * A* path-finder.
 * based upon https://github.com/bgrins/javascript-astar
 * @constructor
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 * @param {number} opt.weight Weight to apply to the heuristic to allow for
 *     suboptimal paths, in order to speed up the search.
 */
function BiAStarFinder(opt) {
    opt = opt || {};
    this.allowDiagonal = opt.allowDiagonal;
    this.dontCrossCorners = opt.dontCrossCorners;
    this.diagonalMovement = opt.diagonalMovement;
    this.heuristic = opt.heuristic || Heuristic.manhattan;
    this.weight = opt.weight || 1;

    if (!this.diagonalMovement) {
        if (!this.allowDiagonal) {
            this.diagonalMovement = DiagonalMovement.Never;
        } else {
            if (this.dontCrossCorners) {
                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;
            } else {
                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;
            }
        }
    }

    //When diagonal movement is allowed the manhattan heuristic is not admissible
    //It should be octile instead
    if (this.diagonalMovement === DiagonalMovement.Never) {
        this.heuristic = opt.heuristic || Heuristic.manhattan;
    } else {
        this.heuristic = opt.heuristic || Heuristic.octile;
    }
}

/**
 * Find and return the the path.
 * @return {Array<Array<number>>} The path, including both start and
 *     end positions.
 */
BiAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {
    var cmp = function(nodeA, nodeB) {
            return nodeA.f - nodeB.f;
        },
        startOpenList = new Heap(cmp),
        endOpenList = new Heap(cmp),
        startNode = grid.getNodeAt(startX, startY),
        endNode = grid.getNodeAt(endX, endY),
        heuristic = this.heuristic,
        diagonalMovement = this.diagonalMovement,
        weight = this.weight,
        abs = Math.abs, SQRT2 = Math.SQRT2,
        node, neighbors, neighbor, i, l, x, y, ng,
        BY_START = 1, BY_END = 2;

    // set the `g` and `f` value of the start node to be 0
    // and push it into the start open list
    startNode.g = 0;
    startNode.f = 0;
    startOpenList.push(startNode);
    startNode.opened = BY_START;

    // set the `g` and `f` value of the end node to be 0
    // and push it into the open open list
    endNode.g = 0;
    endNode.f = 0;
    endOpenList.push(endNode);
    endNode.opened = BY_END;

    // while both the open lists are not empty
    while (!startOpenList.empty() && !endOpenList.empty()) {

        // pop the position of start node which has the minimum `f` value.
        node = startOpenList.pop();
        node.closed = true;

        // get neigbours of the current node
        neighbors = grid.getNeighbors(node, diagonalMovement);
        for (i = 0, l = neighbors.length; i < l; ++i) {
            neighbor = neighbors[i];

            if (neighbor.closed) {
                continue;
            }
            if (neighbor.opened === BY_END) {
                return Util.biBacktrace(node, neighbor);
            }

            x = neighbor.x;
            y = neighbor.y;

            // get the distance between current node and the neighbor
            // and calculate the next g score
            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);

            // check if the neighbor has not been inspected yet, or
            // can be reached with smaller cost from the current node
            if (!neighbor.opened || ng < neighbor.g) {
                neighbor.g = ng;
                neighbor.h = neighbor.h ||
                    weight * heuristic(abs(x - endX), abs(y - endY));
                neighbor.f = neighbor.g + neighbor.h;
                neighbor.parent = node;

                if (!neighbor.opened) {
                    startOpenList.push(neighbor);
                    neighbor.opened = BY_START;
                } else {
                    // the neighbor can be reached with smaller cost.
                    // Since its f value has been updated, we have to
                    // update its position in the open list
                    startOpenList.updateItem(neighbor);
                }
            }
        } // end for each neighbor


        // pop the position of end node which has the minimum `f` value.
        node = endOpenList.pop();
        node.closed = true;

        // get neigbours of the current node
        neighbors = grid.getNeighbors(node, diagonalMovement);
        for (i = 0, l = neighbors.length; i < l; ++i) {
            neighbor = neighbors[i];

            if (neighbor.closed) {
                continue;
            }
            if (neighbor.opened === BY_START) {
                return Util.biBacktrace(neighbor, node);
            }

            x = neighbor.x;
            y = neighbor.y;

            // get the distance between current node and the neighbor
            // and calculate the next g score
            ng = node.g + ((x - node.x === 0 || y - node.y === 0) ? 1 : SQRT2);

            // check if the neighbor has not been inspected yet, or
            // can be reached with smaller cost from the current node
            if (!neighbor.opened || ng < neighbor.g) {
                neighbor.g = ng;
                neighbor.h = neighbor.h ||
                    weight * heuristic(abs(x - startX), abs(y - startY));
                neighbor.f = neighbor.g + neighbor.h;
                neighbor.parent = node;

                if (!neighbor.opened) {
                    endOpenList.push(neighbor);
                    neighbor.opened = BY_END;
                } else {
                    // the neighbor can be reached with smaller cost.
                    // Since its f value has been updated, we have to
                    // update its position in the open list
                    endOpenList.updateItem(neighbor);
                }
            }
        } // end for each neighbor
    } // end while not open list empty

    // fail to find the path
    return [];
};

module.exports = BiAStarFinder;

},{"../core/DiagonalMovement":82,"../core/Heuristic":84,"../core/Util":86,"heap":22}],90:[function(require,module,exports){
var BiAStarFinder = require('./BiAStarFinder');

/**
 * Bi-direcitional Best-First-Search path-finder.
 * @constructor
 * @extends BiAStarFinder
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 */
function BiBestFirstFinder(opt) {
    BiAStarFinder.call(this, opt);

    var orig = this.heuristic;
    this.heuristic = function(dx, dy) {
        return orig(dx, dy) * 1000000;
    };
}

BiBestFirstFinder.prototype = new BiAStarFinder();
BiBestFirstFinder.prototype.constructor = BiBestFirstFinder;

module.exports = BiBestFirstFinder;

},{"./BiAStarFinder":89}],91:[function(require,module,exports){
var Util = require('../core/Util');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Bi-directional Breadth-First-Search path finder.
 * @constructor
 * @param {object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 */
function BiBreadthFirstFinder(opt) {
    opt = opt || {};
    this.allowDiagonal = opt.allowDiagonal;
    this.dontCrossCorners = opt.dontCrossCorners;
    this.diagonalMovement = opt.diagonalMovement;

    if (!this.diagonalMovement) {
        if (!this.allowDiagonal) {
            this.diagonalMovement = DiagonalMovement.Never;
        } else {
            if (this.dontCrossCorners) {
                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;
            } else {
                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;
            }
        }
    }
}


/**
 * Find and return the the path.
 * @return {Array<Array<number>>} The path, including both start and
 *     end positions.
 */
BiBreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {
    var startNode = grid.getNodeAt(startX, startY),
        endNode = grid.getNodeAt(endX, endY),
        startOpenList = [], endOpenList = [],
        neighbors, neighbor, node,
        diagonalMovement = this.diagonalMovement,
        BY_START = 0, BY_END = 1,
        i, l;

    // push the start and end nodes into the queues
    startOpenList.push(startNode);
    startNode.opened = true;
    startNode.by = BY_START;

    endOpenList.push(endNode);
    endNode.opened = true;
    endNode.by = BY_END;

    // while both the queues are not empty
    while (startOpenList.length && endOpenList.length) {

        // expand start open list

        node = startOpenList.shift();
        node.closed = true;

        neighbors = grid.getNeighbors(node, diagonalMovement);
        for (i = 0, l = neighbors.length; i < l; ++i) {
            neighbor = neighbors[i];

            if (neighbor.closed) {
                continue;
            }
            if (neighbor.opened) {
                // if this node has been inspected by the reversed search,
                // then a path is found.
                if (neighbor.by === BY_END) {
                    return Util.biBacktrace(node, neighbor);
                }
                continue;
            }
            startOpenList.push(neighbor);
            neighbor.parent = node;
            neighbor.opened = true;
            neighbor.by = BY_START;
        }

        // expand end open list

        node = endOpenList.shift();
        node.closed = true;

        neighbors = grid.getNeighbors(node, diagonalMovement);
        for (i = 0, l = neighbors.length; i < l; ++i) {
            neighbor = neighbors[i];

            if (neighbor.closed) {
                continue;
            }
            if (neighbor.opened) {
                if (neighbor.by === BY_START) {
                    return Util.biBacktrace(neighbor, node);
                }
                continue;
            }
            endOpenList.push(neighbor);
            neighbor.parent = node;
            neighbor.opened = true;
            neighbor.by = BY_END;
        }
    }

    // fail to find the path
    return [];
};

module.exports = BiBreadthFirstFinder;

},{"../core/DiagonalMovement":82,"../core/Util":86}],92:[function(require,module,exports){
var BiAStarFinder = require('./BiAStarFinder');

/**
 * Bi-directional Dijkstra path-finder.
 * @constructor
 * @extends BiAStarFinder
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 */
function BiDijkstraFinder(opt) {
    BiAStarFinder.call(this, opt);
    this.heuristic = function(dx, dy) {
        return 0;
    };
}

BiDijkstraFinder.prototype = new BiAStarFinder();
BiDijkstraFinder.prototype.constructor = BiDijkstraFinder;

module.exports = BiDijkstraFinder;

},{"./BiAStarFinder":89}],93:[function(require,module,exports){
var Util = require('../core/Util');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Breadth-First-Search path finder.
 * @constructor
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 */
function BreadthFirstFinder(opt) {
    opt = opt || {};
    this.allowDiagonal = opt.allowDiagonal;
    this.dontCrossCorners = opt.dontCrossCorners;
    this.diagonalMovement = opt.diagonalMovement;

    if (!this.diagonalMovement) {
        if (!this.allowDiagonal) {
            this.diagonalMovement = DiagonalMovement.Never;
        } else {
            if (this.dontCrossCorners) {
                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;
            } else {
                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;
            }
        }
    }
}

/**
 * Find and return the the path.
 * @return {Array<Array<number>>} The path, including both start and
 *     end positions.
 */
BreadthFirstFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {
    var openList = [],
        diagonalMovement = this.diagonalMovement,
        startNode = grid.getNodeAt(startX, startY),
        endNode = grid.getNodeAt(endX, endY),
        neighbors, neighbor, node, i, l;

    // push the start pos into the queue
    openList.push(startNode);
    startNode.opened = true;

    // while the queue is not empty
    while (openList.length) {
        // take the front node from the queue
        node = openList.shift();
        node.closed = true;

        // reached the end position
        if (node === endNode) {
            return Util.backtrace(endNode);
        }

        neighbors = grid.getNeighbors(node, diagonalMovement);
        for (i = 0, l = neighbors.length; i < l; ++i) {
            neighbor = neighbors[i];

            // skip this neighbor if it has been inspected before
            if (neighbor.closed || neighbor.opened) {
                continue;
            }

            openList.push(neighbor);
            neighbor.opened = true;
            neighbor.parent = node;
        }
    }
    
    // fail to find the path
    return [];
};

module.exports = BreadthFirstFinder;

},{"../core/DiagonalMovement":82,"../core/Util":86}],94:[function(require,module,exports){
var AStarFinder = require('./AStarFinder');

/**
 * Dijkstra path-finder.
 * @constructor
 * @extends AStarFinder
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 */
function DijkstraFinder(opt) {
    AStarFinder.call(this, opt);
    this.heuristic = function(dx, dy) {
        return 0;
    };
}

DijkstraFinder.prototype = new AStarFinder();
DijkstraFinder.prototype.constructor = DijkstraFinder;

module.exports = DijkstraFinder;

},{"./AStarFinder":87}],95:[function(require,module,exports){
var Util       = require('../core/Util');
var Heuristic  = require('../core/Heuristic');
var Node       = require('../core/Node');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Iterative Deeping A Star (IDA*) path-finder.
 *
 * Recursion based on:
 *   http://www.apl.jhu.edu/~hall/AI-Programming/IDA-Star.html
 *
 * Path retracing based on:
 *  V. Nageshwara Rao, Vipin Kumar and K. Ramesh
 *  "A Parallel Implementation of Iterative-Deeping-A*", January 1987.
 *  ftp://ftp.cs.utexas.edu/.snapshot/hourly.1/pub/AI-Lab/tech-reports/UT-AI-TR-87-46.pdf
 *
 * @author Gerard Meier (www.gerardmeier.com)
 *
 * @constructor
 * @param {Object} opt
 * @param {boolean} opt.allowDiagonal Whether diagonal movement is allowed.
 *     Deprecated, use diagonalMovement instead.
 * @param {boolean} opt.dontCrossCorners Disallow diagonal movement touching
 *     block corners. Deprecated, use diagonalMovement instead.
 * @param {DiagonalMovement} opt.diagonalMovement Allowed diagonal movement.
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 * @param {number} opt.weight Weight to apply to the heuristic to allow for
 *     suboptimal paths, in order to speed up the search.
 * @param {boolean} opt.trackRecursion Whether to track recursion for
 *     statistical purposes.
 * @param {number} opt.timeLimit Maximum execution time. Use <= 0 for infinite.
 */
function IDAStarFinder(opt) {
    opt = opt || {};
    this.allowDiagonal = opt.allowDiagonal;
    this.dontCrossCorners = opt.dontCrossCorners;
    this.diagonalMovement = opt.diagonalMovement;
    this.heuristic = opt.heuristic || Heuristic.manhattan;
    this.weight = opt.weight || 1;
    this.trackRecursion = opt.trackRecursion || false;
    this.timeLimit = opt.timeLimit || Infinity; // Default: no time limit.

    if (!this.diagonalMovement) {
        if (!this.allowDiagonal) {
            this.diagonalMovement = DiagonalMovement.Never;
        } else {
            if (this.dontCrossCorners) {
                this.diagonalMovement = DiagonalMovement.OnlyWhenNoObstacles;
            } else {
                this.diagonalMovement = DiagonalMovement.IfAtMostOneObstacle;
            }
        }
    }

    // When diagonal movement is allowed the manhattan heuristic is not
    // admissible, it should be octile instead
    if (this.diagonalMovement === DiagonalMovement.Never) {
        this.heuristic = opt.heuristic || Heuristic.manhattan;
    } else {
        this.heuristic = opt.heuristic || Heuristic.octile;
    }
}

/**
 * Find and return the the path. When an empty array is returned, either
 * no path is possible, or the maximum execution time is reached.
 *
 * @return {Array<Array<number>>} The path, including both start and
 *     end positions.
 */
IDAStarFinder.prototype.findPath = function(startX, startY, endX, endY, grid) {
    // Used for statistics:
    var nodesVisited = 0;

    // Execution time limitation:
    var startTime = new Date().getTime();

    // Heuristic helper:
    var h = function(a, b) {
        return this.heuristic(Math.abs(b.x - a.x), Math.abs(b.y - a.y));
    }.bind(this);

    // Step cost from a to b:
    var cost = function(a, b) {
        return (a.x === b.x || a.y === b.y) ? 1 : Math.SQRT2;
    };

    /**
     * IDA* search implementation.
     *
     * @param {Node} The node currently expanding from.
     * @param {number} Cost to reach the given node.
     * @param {number} Maximum search depth (cut-off value).
     * @param {Array<Array<number>>} The found route.
     * @param {number} Recursion depth.
     *
     * @return {Object} either a number with the new optimal cut-off depth,
     * or a valid node instance, in which case a path was found.
     */
    var search = function(node, g, cutoff, route, depth) {
        nodesVisited++;

        // Enforce timelimit:
        if (this.timeLimit > 0 &&
            new Date().getTime() - startTime > this.timeLimit * 1000) {
            // Enforced as "path-not-found".
            return Infinity;
        }

        var f = g + h(node, end) * this.weight;

        // We've searched too deep for this iteration.
        if (f > cutoff) {
            return f;
        }

        if (node == end) {
            route[depth] = [node.x, node.y];
            return node;
        }

        var min, t, k, neighbour;

        var neighbours = grid.getNeighbors(node, this.diagonalMovement);

        // Sort the neighbours, gives nicer paths. But, this deviates
        // from the original algorithm - so I left it out.
        //neighbours.sort(function(a, b){
        //    return h(a, end) - h(b, end);
        //});

        
        /*jshint -W084 *///Disable warning: Expected a conditional expression and instead saw an assignment
        for (k = 0, min = Infinity; neighbour = neighbours[k]; ++k) {
        /*jshint +W084 *///Enable warning: Expected a conditional expression and instead saw an assignment
            if (this.trackRecursion) {
                // Retain a copy for visualisation. Due to recursion, this
                // node may be part of other paths too.
                neighbour.retainCount = neighbour.retainCount + 1 || 1;

                if(neighbour.tested !== true) {
                    neighbour.tested = true;
                }
            }

            t = search(neighbour, g + cost(node, neighbour), cutoff, route, depth + 1);

            if (t instanceof Node) {
                route[depth] = [node.x, node.y];

                // For a typical A* linked list, this would work:
                // neighbour.parent = node;
                return t;
            }

            // Decrement count, then determine whether it's actually closed.
            if (this.trackRecursion && (--neighbour.retainCount) === 0) {
                neighbour.tested = false;
            }

            if (t < min) {
                min = t;
            }
        }

        return min;

    }.bind(this);

    // Node instance lookups:
    var start = grid.getNodeAt(startX, startY);
    var end   = grid.getNodeAt(endX, endY);

    // Initial search depth, given the typical heuristic contraints,
    // there should be no cheaper route possible.
    var cutOff = h(start, end);

    var j, route, t;

    // With an overflow protection.
    for (j = 0; true; ++j) {

        route = [];

        // Search till cut-off depth:
        t = search(start, 0, cutOff, route, 0);

        // Route not possible, or not found in time limit.
        if (t === Infinity) {
            return [];
        }

        // If t is a node, it's also the end node. Route is now
        // populated with a valid path to the end node.
        if (t instanceof Node) {
            return route;
        }

        // Try again, this time with a deeper cut-off. The t score
        // is the closest we got to the end node.
        cutOff = t;
    }

    // This _should_ never to be reached.
    return [];
};

module.exports = IDAStarFinder;

},{"../core/DiagonalMovement":82,"../core/Heuristic":84,"../core/Node":85,"../core/Util":86}],96:[function(require,module,exports){
/**
 * @author imor / https://github.com/imor
 */
var JumpPointFinderBase = require('./JumpPointFinderBase');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Path finder using the Jump Point Search algorithm which always moves
 * diagonally irrespective of the number of obstacles.
 */
function JPFAlwaysMoveDiagonally(opt) {
    JumpPointFinderBase.call(this, opt);
}

JPFAlwaysMoveDiagonally.prototype = new JumpPointFinderBase();
JPFAlwaysMoveDiagonally.prototype.constructor = JPFAlwaysMoveDiagonally;

/**
 * Search recursively in the direction (parent -> child), stopping only when a
 * jump point is found.
 * @protected
 * @return {Array<Array<number>>} The x, y coordinate of the jump point
 *     found, or null if not found
 */
JPFAlwaysMoveDiagonally.prototype._jump = function(x, y, px, py) {
    var grid = this.grid,
        dx = x - px, dy = y - py;

    if (!grid.isWalkableAt(x, y)) {
        return null;
    }

    if(this.trackJumpRecursion === true) {
        grid.getNodeAt(x, y).tested = true;
    }

    if (grid.getNodeAt(x, y) === this.endNode) {
        return [x, y];
    }

    // check for forced neighbors
    // along the diagonal
    if (dx !== 0 && dy !== 0) {
        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||
            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {
            return [x, y];
        }
        // when moving diagonally, must check for vertical/horizontal jump points
        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {
            return [x, y];
        }
    }
    // horizontally/vertically
    else {
        if( dx !== 0 ) { // moving along x
            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||
               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {
                return [x, y];
            }
        }
        else {
            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||
               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {
                return [x, y];
            }
        }
    }

    return this._jump(x + dx, y + dy, x, y);
};

/**
 * Find the neighbors for the given node. If the node has a parent,
 * prune the neighbors based on the jump point search algorithm, otherwise
 * return all available neighbors.
 * @return {Array<Array<number>>} The neighbors found.
 */
JPFAlwaysMoveDiagonally.prototype._findNeighbors = function(node) {
    var parent = node.parent,
        x = node.x, y = node.y,
        grid = this.grid,
        px, py, nx, ny, dx, dy,
        neighbors = [], neighborNodes, neighborNode, i, l;

    // directed pruning: can ignore most neighbors, unless forced.
    if (parent) {
        px = parent.x;
        py = parent.y;
        // get the normalized direction of travel
        dx = (x - px) / Math.max(Math.abs(x - px), 1);
        dy = (y - py) / Math.max(Math.abs(y - py), 1);

        // search diagonally
        if (dx !== 0 && dy !== 0) {
            if (grid.isWalkableAt(x, y + dy)) {
                neighbors.push([x, y + dy]);
            }
            if (grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y]);
            }
            if (grid.isWalkableAt(x + dx, y + dy)) {
                neighbors.push([x + dx, y + dy]);
            }
            if (!grid.isWalkableAt(x - dx, y)) {
                neighbors.push([x - dx, y + dy]);
            }
            if (!grid.isWalkableAt(x, y - dy)) {
                neighbors.push([x + dx, y - dy]);
            }
        }
        // search horizontally/vertically
        else {
            if(dx === 0) {
                if (grid.isWalkableAt(x, y + dy)) {
                    neighbors.push([x, y + dy]);
                }
                if (!grid.isWalkableAt(x + 1, y)) {
                    neighbors.push([x + 1, y + dy]);
                }
                if (!grid.isWalkableAt(x - 1, y)) {
                    neighbors.push([x - 1, y + dy]);
                }
            }
            else {
                if (grid.isWalkableAt(x + dx, y)) {
                    neighbors.push([x + dx, y]);
                }
                if (!grid.isWalkableAt(x, y + 1)) {
                    neighbors.push([x + dx, y + 1]);
                }
                if (!grid.isWalkableAt(x, y - 1)) {
                    neighbors.push([x + dx, y - 1]);
                }
            }
        }
    }
    // return all neighbors
    else {
        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Always);
        for (i = 0, l = neighborNodes.length; i < l; ++i) {
            neighborNode = neighborNodes[i];
            neighbors.push([neighborNode.x, neighborNode.y]);
        }
    }

    return neighbors;
};

module.exports = JPFAlwaysMoveDiagonally;

},{"../core/DiagonalMovement":82,"./JumpPointFinderBase":101}],97:[function(require,module,exports){
/**
 * @author imor / https://github.com/imor
 */
var JumpPointFinderBase = require('./JumpPointFinderBase');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Path finder using the Jump Point Search algorithm which moves
 * diagonally only when there is at most one obstacle.
 */
function JPFMoveDiagonallyIfAtMostOneObstacle(opt) {
    JumpPointFinderBase.call(this, opt);
}

JPFMoveDiagonallyIfAtMostOneObstacle.prototype = new JumpPointFinderBase();
JPFMoveDiagonallyIfAtMostOneObstacle.prototype.constructor = JPFMoveDiagonallyIfAtMostOneObstacle;

/**
 * Search recursively in the direction (parent -> child), stopping only when a
 * jump point is found.
 * @protected
 * @return {Array<Array<number>>} The x, y coordinate of the jump point
 *     found, or null if not found
 */
JPFMoveDiagonallyIfAtMostOneObstacle.prototype._jump = function(x, y, px, py) {
    var grid = this.grid,
        dx = x - px, dy = y - py;

    if (!grid.isWalkableAt(x, y)) {
        return null;
    }

    if(this.trackJumpRecursion === true) {
        grid.getNodeAt(x, y).tested = true;
    }

    if (grid.getNodeAt(x, y) === this.endNode) {
        return [x, y];
    }

    // check for forced neighbors
    // along the diagonal
    if (dx !== 0 && dy !== 0) {
        if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||
            (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {
            return [x, y];
        }
        // when moving diagonally, must check for vertical/horizontal jump points
        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {
            return [x, y];
        }
    }
    // horizontally/vertically
    else {
        if( dx !== 0 ) { // moving along x
            if((grid.isWalkableAt(x + dx, y + 1) && !grid.isWalkableAt(x, y + 1)) ||
               (grid.isWalkableAt(x + dx, y - 1) && !grid.isWalkableAt(x, y - 1))) {
                return [x, y];
            }
        }
        else {
            if((grid.isWalkableAt(x + 1, y + dy) && !grid.isWalkableAt(x + 1, y)) ||
               (grid.isWalkableAt(x - 1, y + dy) && !grid.isWalkableAt(x - 1, y))) {
                return [x, y];
            }
        }
    }

    // moving diagonally, must make sure one of the vertical/horizontal
    // neighbors is open to allow the path
    if (grid.isWalkableAt(x + dx, y) || grid.isWalkableAt(x, y + dy)) {
        return this._jump(x + dx, y + dy, x, y);
    } else {
        return null;
    }
};

/**
 * Find the neighbors for the given node. If the node has a parent,
 * prune the neighbors based on the jump point search algorithm, otherwise
 * return all available neighbors.
 * @return {Array<Array<number>>} The neighbors found.
 */
JPFMoveDiagonallyIfAtMostOneObstacle.prototype._findNeighbors = function(node) {
    var parent = node.parent,
        x = node.x, y = node.y,
        grid = this.grid,
        px, py, nx, ny, dx, dy,
        neighbors = [], neighborNodes, neighborNode, i, l;

    // directed pruning: can ignore most neighbors, unless forced.
    if (parent) {
        px = parent.x;
        py = parent.y;
        // get the normalized direction of travel
        dx = (x - px) / Math.max(Math.abs(x - px), 1);
        dy = (y - py) / Math.max(Math.abs(y - py), 1);

        // search diagonally
        if (dx !== 0 && dy !== 0) {
            if (grid.isWalkableAt(x, y + dy)) {
                neighbors.push([x, y + dy]);
            }
            if (grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y]);
            }
            if (grid.isWalkableAt(x, y + dy) || grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y + dy]);
            }
            if (!grid.isWalkableAt(x - dx, y) && grid.isWalkableAt(x, y + dy)) {
                neighbors.push([x - dx, y + dy]);
            }
            if (!grid.isWalkableAt(x, y - dy) && grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y - dy]);
            }
        }
        // search horizontally/vertically
        else {
            if(dx === 0) {
                if (grid.isWalkableAt(x, y + dy)) {
                    neighbors.push([x, y + dy]);
                    if (!grid.isWalkableAt(x + 1, y)) {
                        neighbors.push([x + 1, y + dy]);
                    }
                    if (!grid.isWalkableAt(x - 1, y)) {
                        neighbors.push([x - 1, y + dy]);
                    }
                }
            }
            else {
                if (grid.isWalkableAt(x + dx, y)) {
                    neighbors.push([x + dx, y]);
                    if (!grid.isWalkableAt(x, y + 1)) {
                        neighbors.push([x + dx, y + 1]);
                    }
                    if (!grid.isWalkableAt(x, y - 1)) {
                        neighbors.push([x + dx, y - 1]);
                    }
                }
            }
        }
    }
    // return all neighbors
    else {
        neighborNodes = grid.getNeighbors(node, DiagonalMovement.IfAtMostOneObstacle);
        for (i = 0, l = neighborNodes.length; i < l; ++i) {
            neighborNode = neighborNodes[i];
            neighbors.push([neighborNode.x, neighborNode.y]);
        }
    }

    return neighbors;
};

module.exports = JPFMoveDiagonallyIfAtMostOneObstacle;

},{"../core/DiagonalMovement":82,"./JumpPointFinderBase":101}],98:[function(require,module,exports){
/**
 * @author imor / https://github.com/imor
 */
var JumpPointFinderBase = require('./JumpPointFinderBase');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Path finder using the Jump Point Search algorithm which moves
 * diagonally only when there are no obstacles.
 */
function JPFMoveDiagonallyIfNoObstacles(opt) {
    JumpPointFinderBase.call(this, opt);
}

JPFMoveDiagonallyIfNoObstacles.prototype = new JumpPointFinderBase();
JPFMoveDiagonallyIfNoObstacles.prototype.constructor = JPFMoveDiagonallyIfNoObstacles;

/**
 * Search recursively in the direction (parent -> child), stopping only when a
 * jump point is found.
 * @protected
 * @return {Array<Array<number>>} The x, y coordinate of the jump point
 *     found, or null if not found
 */
JPFMoveDiagonallyIfNoObstacles.prototype._jump = function(x, y, px, py) {
    var grid = this.grid,
        dx = x - px, dy = y - py;

    if (!grid.isWalkableAt(x, y)) {
        return null;
    }

    if(this.trackJumpRecursion === true) {
        grid.getNodeAt(x, y).tested = true;
    }

    if (grid.getNodeAt(x, y) === this.endNode) {
        return [x, y];
    }

    // check for forced neighbors
    // along the diagonal
    if (dx !== 0 && dy !== 0) {
        // if ((grid.isWalkableAt(x - dx, y + dy) && !grid.isWalkableAt(x - dx, y)) ||
            // (grid.isWalkableAt(x + dx, y - dy) && !grid.isWalkableAt(x, y - dy))) {
            // return [x, y];
        // }
        // when moving diagonally, must check for vertical/horizontal jump points
        if (this._jump(x + dx, y, x, y) || this._jump(x, y + dy, x, y)) {
            return [x, y];
        }
    }
    // horizontally/vertically
    else {
        if (dx !== 0) {
            if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||
                (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {
                return [x, y];
            }
        }
        else if (dy !== 0) {
            if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||
                (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {
                return [x, y];
            }
            // When moving vertically, must check for horizontal jump points
            // if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {
                // return [x, y];
            // }
        }
    }

    // moving diagonally, must make sure one of the vertical/horizontal
    // neighbors is open to allow the path
    if (grid.isWalkableAt(x + dx, y) && grid.isWalkableAt(x, y + dy)) {
        return this._jump(x + dx, y + dy, x, y);
    } else {
        return null;
    }
};

/**
 * Find the neighbors for the given node. If the node has a parent,
 * prune the neighbors based on the jump point search algorithm, otherwise
 * return all available neighbors.
 * @return {Array<Array<number>>} The neighbors found.
 */
JPFMoveDiagonallyIfNoObstacles.prototype._findNeighbors = function(node) {
    var parent = node.parent,
        x = node.x, y = node.y,
        grid = this.grid,
        px, py, nx, ny, dx, dy,
        neighbors = [], neighborNodes, neighborNode, i, l;

    // directed pruning: can ignore most neighbors, unless forced.
    if (parent) {
        px = parent.x;
        py = parent.y;
        // get the normalized direction of travel
        dx = (x - px) / Math.max(Math.abs(x - px), 1);
        dy = (y - py) / Math.max(Math.abs(y - py), 1);

        // search diagonally
        if (dx !== 0 && dy !== 0) {
            if (grid.isWalkableAt(x, y + dy)) {
                neighbors.push([x, y + dy]);
            }
            if (grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y]);
            }
            if (grid.isWalkableAt(x, y + dy) && grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y + dy]);
            }
        }
        // search horizontally/vertically
        else {
            var isNextWalkable;
            if (dx !== 0) {
                isNextWalkable = grid.isWalkableAt(x + dx, y);
                var isTopWalkable = grid.isWalkableAt(x, y + 1);
                var isBottomWalkable = grid.isWalkableAt(x, y - 1);

                if (isNextWalkable) {
                    neighbors.push([x + dx, y]);
                    if (isTopWalkable) {
                        neighbors.push([x + dx, y + 1]);
                    }
                    if (isBottomWalkable) {
                        neighbors.push([x + dx, y - 1]);
                    }
                }
                if (isTopWalkable) {
                    neighbors.push([x, y + 1]);
                }
                if (isBottomWalkable) {
                    neighbors.push([x, y - 1]);
                }
            }
            else if (dy !== 0) {
                isNextWalkable = grid.isWalkableAt(x, y + dy);
                var isRightWalkable = grid.isWalkableAt(x + 1, y);
                var isLeftWalkable = grid.isWalkableAt(x - 1, y);

                if (isNextWalkable) {
                    neighbors.push([x, y + dy]);
                    if (isRightWalkable) {
                        neighbors.push([x + 1, y + dy]);
                    }
                    if (isLeftWalkable) {
                        neighbors.push([x - 1, y + dy]);
                    }
                }
                if (isRightWalkable) {
                    neighbors.push([x + 1, y]);
                }
                if (isLeftWalkable) {
                    neighbors.push([x - 1, y]);
                }
            }
        }
    }
    // return all neighbors
    else {
        neighborNodes = grid.getNeighbors(node, DiagonalMovement.OnlyWhenNoObstacles);
        for (i = 0, l = neighborNodes.length; i < l; ++i) {
            neighborNode = neighborNodes[i];
            neighbors.push([neighborNode.x, neighborNode.y]);
        }
    }

    return neighbors;
};

module.exports = JPFMoveDiagonallyIfNoObstacles;

},{"../core/DiagonalMovement":82,"./JumpPointFinderBase":101}],99:[function(require,module,exports){
/**
 * @author imor / https://github.com/imor
 */
var JumpPointFinderBase = require('./JumpPointFinderBase');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Path finder using the Jump Point Search algorithm allowing only horizontal
 * or vertical movements.
 */
function JPFNeverMoveDiagonally(opt) {
    JumpPointFinderBase.call(this, opt);
}

JPFNeverMoveDiagonally.prototype = new JumpPointFinderBase();
JPFNeverMoveDiagonally.prototype.constructor = JPFNeverMoveDiagonally;

/**
 * Search recursively in the direction (parent -> child), stopping only when a
 * jump point is found.
 * @protected
 * @return {Array<Array<number>>} The x, y coordinate of the jump point
 *     found, or null if not found
 */
JPFNeverMoveDiagonally.prototype._jump = function(x, y, px, py) {
    var grid = this.grid,
        dx = x - px, dy = y - py;

    if (!grid.isWalkableAt(x, y)) {
        return null;
    }

    if(this.trackJumpRecursion === true) {
        grid.getNodeAt(x, y).tested = true;
    }

    if (grid.getNodeAt(x, y) === this.endNode) {
        return [x, y];
    }

    if (dx !== 0) {
        if ((grid.isWalkableAt(x, y - 1) && !grid.isWalkableAt(x - dx, y - 1)) ||
            (grid.isWalkableAt(x, y + 1) && !grid.isWalkableAt(x - dx, y + 1))) {
            return [x, y];
        }
    }
    else if (dy !== 0) {
        if ((grid.isWalkableAt(x - 1, y) && !grid.isWalkableAt(x - 1, y - dy)) ||
            (grid.isWalkableAt(x + 1, y) && !grid.isWalkableAt(x + 1, y - dy))) {
            return [x, y];
        }
        //When moving vertically, must check for horizontal jump points
        if (this._jump(x + 1, y, x, y) || this._jump(x - 1, y, x, y)) {
            return [x, y];
        }
    }
    else {
        throw new Error("Only horizontal and vertical movements are allowed");
    }

    return this._jump(x + dx, y + dy, x, y);
};

/**
 * Find the neighbors for the given node. If the node has a parent,
 * prune the neighbors based on the jump point search algorithm, otherwise
 * return all available neighbors.
 * @return {Array<Array<number>>} The neighbors found.
 */
JPFNeverMoveDiagonally.prototype._findNeighbors = function(node) {
    var parent = node.parent,
        x = node.x, y = node.y,
        grid = this.grid,
        px, py, nx, ny, dx, dy,
        neighbors = [], neighborNodes, neighborNode, i, l;

    // directed pruning: can ignore most neighbors, unless forced.
    if (parent) {
        px = parent.x;
        py = parent.y;
        // get the normalized direction of travel
        dx = (x - px) / Math.max(Math.abs(x - px), 1);
        dy = (y - py) / Math.max(Math.abs(y - py), 1);

        if (dx !== 0) {
            if (grid.isWalkableAt(x, y - 1)) {
                neighbors.push([x, y - 1]);
            }
            if (grid.isWalkableAt(x, y + 1)) {
                neighbors.push([x, y + 1]);
            }
            if (grid.isWalkableAt(x + dx, y)) {
                neighbors.push([x + dx, y]);
            }
        }
        else if (dy !== 0) {
            if (grid.isWalkableAt(x - 1, y)) {
                neighbors.push([x - 1, y]);
            }
            if (grid.isWalkableAt(x + 1, y)) {
                neighbors.push([x + 1, y]);
            }
            if (grid.isWalkableAt(x, y + dy)) {
                neighbors.push([x, y + dy]);
            }
        }
    }
    // return all neighbors
    else {
        neighborNodes = grid.getNeighbors(node, DiagonalMovement.Never);
        for (i = 0, l = neighborNodes.length; i < l; ++i) {
            neighborNode = neighborNodes[i];
            neighbors.push([neighborNode.x, neighborNode.y]);
        }
    }

    return neighbors;
};

module.exports = JPFNeverMoveDiagonally;

},{"../core/DiagonalMovement":82,"./JumpPointFinderBase":101}],100:[function(require,module,exports){
/**
 * @author aniero / https://github.com/aniero
 */
var DiagonalMovement = require('../core/DiagonalMovement');
var JPFNeverMoveDiagonally = require('./JPFNeverMoveDiagonally');
var JPFAlwaysMoveDiagonally = require('./JPFAlwaysMoveDiagonally');
var JPFMoveDiagonallyIfNoObstacles = require('./JPFMoveDiagonallyIfNoObstacles');
var JPFMoveDiagonallyIfAtMostOneObstacle = require('./JPFMoveDiagonallyIfAtMostOneObstacle');

/**
 * Path finder using the Jump Point Search algorithm
 * @param {Object} opt
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 * @param {DiagonalMovement} opt.diagonalMovement Condition under which diagonal
 *      movement will be allowed.
 */
function JumpPointFinder(opt) {
    opt = opt || {};
    if (opt.diagonalMovement === DiagonalMovement.Never) {
        return new JPFNeverMoveDiagonally(opt);
    } else if (opt.diagonalMovement === DiagonalMovement.Always) {
        return new JPFAlwaysMoveDiagonally(opt);
    } else if (opt.diagonalMovement === DiagonalMovement.OnlyWhenNoObstacles) {
        return new JPFMoveDiagonallyIfNoObstacles(opt);
    } else {
        return new JPFMoveDiagonallyIfAtMostOneObstacle(opt);
    }
}

module.exports = JumpPointFinder;

},{"../core/DiagonalMovement":82,"./JPFAlwaysMoveDiagonally":96,"./JPFMoveDiagonallyIfAtMostOneObstacle":97,"./JPFMoveDiagonallyIfNoObstacles":98,"./JPFNeverMoveDiagonally":99}],101:[function(require,module,exports){
/**
 * @author imor / https://github.com/imor
 */
var Heap       = require('heap');
var Util       = require('../core/Util');
var Heuristic  = require('../core/Heuristic');
var DiagonalMovement = require('../core/DiagonalMovement');

/**
 * Base class for the Jump Point Search algorithm
 * @param {object} opt
 * @param {function} opt.heuristic Heuristic function to estimate the distance
 *     (defaults to manhattan).
 */
function JumpPointFinderBase(opt) {
    opt = opt || {};
    this.heuristic = opt.heuristic || Heuristic.manhattan;
    this.trackJumpRecursion = opt.trackJumpRecursion || false;
}

/**
 * Find and return the path.
 * @return {Array<Array<number>>} The path, including both start and
 *     end positions.
 */
JumpPointFinderBase.prototype.findPath = function(startX, startY, endX, endY, grid) {
    var openList = this.openList = new Heap(function(nodeA, nodeB) {
            return nodeA.f - nodeB.f;
        }),
        startNode = this.startNode = grid.getNodeAt(startX, startY),
        endNode = this.endNode = grid.getNodeAt(endX, endY), node;

    this.grid = grid;


    // set the `g` and `f` value of the start node to be 0
    startNode.g = 0;
    startNode.f = 0;

    // push the start node into the open list
    openList.push(startNode);
    startNode.opened = true;

    // while the open list is not empty
    while (!openList.empty()) {
        // pop the position of node which has the minimum `f` value.
        node = openList.pop();
        node.closed = true;

        if (node === endNode) {
            return Util.expandPath(Util.backtrace(endNode));
        }

        this._identifySuccessors(node);
    }

    // fail to find the path
    return [];
};

/**
 * Identify successors for the given node. Runs a jump point search in the
 * direction of each available neighbor, adding any points found to the open
 * list.
 * @protected
 */
JumpPointFinderBase.prototype._identifySuccessors = function(node) {
    var grid = this.grid,
        heuristic = this.heuristic,
        openList = this.openList,
        endX = this.endNode.x,
        endY = this.endNode.y,
        neighbors, neighbor,
        jumpPoint, i, l,
        x = node.x, y = node.y,
        jx, jy, dx, dy, d, ng, jumpNode,
        abs = Math.abs, max = Math.max;

    neighbors = this._findNeighbors(node);
    for(i = 0, l = neighbors.length; i < l; ++i) {
        neighbor = neighbors[i];
        jumpPoint = this._jump(neighbor[0], neighbor[1], x, y);
        if (jumpPoint) {

            jx = jumpPoint[0];
            jy = jumpPoint[1];
            jumpNode = grid.getNodeAt(jx, jy);

            if (jumpNode.closed) {
                continue;
            }

            // include distance, as parent may not be immediately adjacent:
            d = Heuristic.octile(abs(jx - x), abs(jy - y));
            ng = node.g + d; // next `g` value

            if (!jumpNode.opened || ng < jumpNode.g) {
                jumpNode.g = ng;
                jumpNode.h = jumpNode.h || heuristic(abs(jx - endX), abs(jy - endY));
                jumpNode.f = jumpNode.g + jumpNode.h;
                jumpNode.parent = node;

                if (!jumpNode.opened) {
                    openList.push(jumpNode);
                    jumpNode.opened = true;
                } else {
                    openList.updateItem(jumpNode);
                }
            }
        }
    }
};

module.exports = JumpPointFinderBase;

},{"../core/DiagonalMovement":82,"../core/Heuristic":84,"../core/Util":86,"heap":22}],102:[function(require,module,exports){
var Scalar = require('./Scalar');

module.exports = Line;

/**
 * Container for line-related functions
 * @class Line
 */
function Line(){};

/**
 * Compute the intersection between two lines.
 * @static
 * @method lineInt
 * @param  {Array}  l1          Line vector 1
 * @param  {Array}  l2          Line vector 2
 * @param  {Number} precision   Precision to use when checking if the lines are parallel
 * @return {Array}              The intersection point.
 */
Line.lineInt = function(l1,l2,precision){
    precision = precision || 0;
    var i = [0,0]; // point
    var a1, b1, c1, a2, b2, c2, det; // scalars
    a1 = l1[1][1] - l1[0][1];
    b1 = l1[0][0] - l1[1][0];
    c1 = a1 * l1[0][0] + b1 * l1[0][1];
    a2 = l2[1][1] - l2[0][1];
    b2 = l2[0][0] - l2[1][0];
    c2 = a2 * l2[0][0] + b2 * l2[0][1];
    det = a1 * b2 - a2*b1;
    if (!Scalar.eq(det, 0, precision)) { // lines are not parallel
        i[0] = (b2 * c1 - b1 * c2) / det;
        i[1] = (a1 * c2 - a2 * c1) / det;
    }
    return i;
};

/**
 * Checks if two line segments intersects.
 * @method segmentsIntersect
 * @param {Array} p1 The start vertex of the first line segment.
 * @param {Array} p2 The end vertex of the first line segment.
 * @param {Array} q1 The start vertex of the second line segment.
 * @param {Array} q2 The end vertex of the second line segment.
 * @return {Boolean} True if the two line segments intersect
 */
Line.segmentsIntersect = function(p1, p2, q1, q2){
   var dx = p2[0] - p1[0];
   var dy = p2[1] - p1[1];
   var da = q2[0] - q1[0];
   var db = q2[1] - q1[1];

   // segments are parallel
   if(da*dy - db*dx == 0)
      return false;

   var s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx)
   var t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy)

   return (s>=0 && s<=1 && t>=0 && t<=1);
};


},{"./Scalar":105}],103:[function(require,module,exports){
module.exports = Point;

/**
 * Point related functions
 * @class Point
 */
function Point(){};

/**
 * Get the area of a triangle spanned by the three given points. Note that the area will be negative if the points are not given in counter-clockwise order.
 * @static
 * @method area
 * @param  {Array} a
 * @param  {Array} b
 * @param  {Array} c
 * @return {Number}
 */
Point.area = function(a,b,c){
    return (((b[0] - a[0])*(c[1] - a[1]))-((c[0] - a[0])*(b[1] - a[1])));
};

Point.left = function(a,b,c){
    return Point.area(a,b,c) > 0;
};

Point.leftOn = function(a,b,c) {
    return Point.area(a, b, c) >= 0;
};

Point.right = function(a,b,c) {
    return Point.area(a, b, c) < 0;
};

Point.rightOn = function(a,b,c) {
    return Point.area(a, b, c) <= 0;
};

var tmpPoint1 = [],
    tmpPoint2 = [];

/**
 * Check if three points are collinear
 * @method collinear
 * @param  {Array} a
 * @param  {Array} b
 * @param  {Array} c
 * @param  {Number} [thresholdAngle=0] Threshold angle to use when comparing the vectors. The function will return true if the angle between the resulting vectors is less than this value. Use zero for max precision.
 * @return {Boolean}
 */
Point.collinear = function(a,b,c,thresholdAngle) {
    if(!thresholdAngle)
        return Point.area(a, b, c) == 0;
    else {
        var ab = tmpPoint1,
            bc = tmpPoint2;

        ab[0] = b[0]-a[0];
        ab[1] = b[1]-a[1];
        bc[0] = c[0]-b[0];
        bc[1] = c[1]-b[1];

        var dot = ab[0]*bc[0] + ab[1]*bc[1],
            magA = Math.sqrt(ab[0]*ab[0] + ab[1]*ab[1]),
            magB = Math.sqrt(bc[0]*bc[0] + bc[1]*bc[1]),
            angle = Math.acos(dot/(magA*magB));
        return angle < thresholdAngle;
    }
};

Point.sqdist = function(a,b){
    var dx = b[0] - a[0];
    var dy = b[1] - a[1];
    return dx * dx + dy * dy;
};

},{}],104:[function(require,module,exports){
var Line = require("./Line")
,   Point = require("./Point")
,   Scalar = require("./Scalar")

module.exports = Polygon;

/**
 * Polygon class.
 * @class Polygon
 * @constructor
 */
function Polygon(){

    /**
     * Vertices that this polygon consists of. An array of array of numbers, example: [[0,0],[1,0],..]
     * @property vertices
     * @type {Array}
     */
    this.vertices = [];
}

/**
 * Get a vertex at position i. It does not matter if i is out of bounds, this function will just cycle.
 * @method at
 * @param  {Number} i
 * @return {Array}
 */
Polygon.prototype.at = function(i){
    var v = this.vertices,
        s = v.length;
    return v[i < 0 ? i % s + s : i % s];
};

/**
 * Get first vertex
 * @method first
 * @return {Array}
 */
Polygon.prototype.first = function(){
    return this.vertices[0];
};

/**
 * Get last vertex
 * @method last
 * @return {Array}
 */
Polygon.prototype.last = function(){
    return this.vertices[this.vertices.length-1];
};

/**
 * Clear the polygon data
 * @method clear
 * @return {Array}
 */
Polygon.prototype.clear = function(){
    this.vertices.length = 0;
};

/**
 * Append points "from" to "to"-1 from an other polygon "poly" onto this one.
 * @method append
 * @param {Polygon} poly The polygon to get points from.
 * @param {Number}  from The vertex index in "poly".
 * @param {Number}  to The end vertex index in "poly". Note that this vertex is NOT included when appending.
 * @return {Array}
 */
Polygon.prototype.append = function(poly,from,to){
    if(typeof(from) == "undefined") throw new Error("From is not given!");
    if(typeof(to) == "undefined")   throw new Error("To is not given!");

    if(to-1 < from)                 throw new Error("lol1");
    if(to > poly.vertices.length)   throw new Error("lol2");
    if(from < 0)                    throw new Error("lol3");

    for(var i=from; i<to; i++){
        this.vertices.push(poly.vertices[i]);
    }
};

/**
 * Make sure that the polygon vertices are ordered counter-clockwise.
 * @method makeCCW
 */
Polygon.prototype.makeCCW = function(){
    var br = 0,
        v = this.vertices;

    // find bottom right point
    for (var i = 1; i < this.vertices.length; ++i) {
        if (v[i][1] < v[br][1] || (v[i][1] == v[br][1] && v[i][0] > v[br][0])) {
            br = i;
        }
    }

    // reverse poly if clockwise
    if (!Point.left(this.at(br - 1), this.at(br), this.at(br + 1))) {
        this.reverse();
    }
};

/**
 * Reverse the vertices in the polygon
 * @method reverse
 */
Polygon.prototype.reverse = function(){
    var tmp = [];
    for(var i=0, N=this.vertices.length; i!==N; i++){
        tmp.push(this.vertices.pop());
    }
    this.vertices = tmp;
};

/**
 * Check if a point in the polygon is a reflex point
 * @method isReflex
 * @param  {Number}  i
 * @return {Boolean}
 */
Polygon.prototype.isReflex = function(i){
    return Point.right(this.at(i - 1), this.at(i), this.at(i + 1));
};

var tmpLine1=[],
    tmpLine2=[];

/**
 * Check if two vertices in the polygon can see each other
 * @method canSee
 * @param  {Number} a Vertex index 1
 * @param  {Number} b Vertex index 2
 * @return {Boolean}
 */
Polygon.prototype.canSee = function(a,b) {
    var p, dist, l1=tmpLine1, l2=tmpLine2;

    if (Point.leftOn(this.at(a + 1), this.at(a), this.at(b)) && Point.rightOn(this.at(a - 1), this.at(a), this.at(b))) {
        return false;
    }
    dist = Point.sqdist(this.at(a), this.at(b));
    for (var i = 0; i !== this.vertices.length; ++i) { // for each edge
        if ((i + 1) % this.vertices.length === a || i === a) // ignore incident edges
            continue;
        if (Point.leftOn(this.at(a), this.at(b), this.at(i + 1)) && Point.rightOn(this.at(a), this.at(b), this.at(i))) { // if diag intersects an edge
            l1[0] = this.at(a);
            l1[1] = this.at(b);
            l2[0] = this.at(i);
            l2[1] = this.at(i + 1);
            p = Line.lineInt(l1,l2);
            if (Point.sqdist(this.at(a), p) < dist) { // if edge is blocking visibility to b
                return false;
            }
        }
    }

    return true;
};

/**
 * Copy the polygon from vertex i to vertex j.
 * @method copy
 * @param  {Number} i
 * @param  {Number} j
 * @param  {Polygon} [targetPoly]   Optional target polygon to save in.
 * @return {Polygon}                The resulting copy.
 */
Polygon.prototype.copy = function(i,j,targetPoly){
    var p = targetPoly || new Polygon();
    p.clear();
    if (i < j) {
        // Insert all vertices from i to j
        for(var k=i; k<=j; k++)
            p.vertices.push(this.vertices[k]);

    } else {

        // Insert vertices 0 to j
        for(var k=0; k<=j; k++)
            p.vertices.push(this.vertices[k]);

        // Insert vertices i to end
        for(var k=i; k<this.vertices.length; k++)
            p.vertices.push(this.vertices[k]);
    }

    return p;
};

/**
 * Decomposes the polygon into convex pieces. Returns a list of edges [[p1,p2],[p2,p3],...] that cuts the polygon.
 * Note that this algorithm has complexity O(N^4) and will be very slow for polygons with many vertices.
 * @method getCutEdges
 * @return {Array}
 */
Polygon.prototype.getCutEdges = function() {
    var min=[], tmp1=[], tmp2=[], tmpPoly = new Polygon();
    var nDiags = Number.MAX_VALUE;

    for (var i = 0; i < this.vertices.length; ++i) {
        if (this.isReflex(i)) {
            for (var j = 0; j < this.vertices.length; ++j) {
                if (this.canSee(i, j)) {
                    tmp1 = this.copy(i, j, tmpPoly).getCutEdges();
                    tmp2 = this.copy(j, i, tmpPoly).getCutEdges();

                    for(var k=0; k<tmp2.length; k++)
                        tmp1.push(tmp2[k]);

                    if (tmp1.length < nDiags) {
                        min = tmp1;
                        nDiags = tmp1.length;
                        min.push([this.at(i), this.at(j)]);
                    }
                }
            }
        }
    }

    return min;
};

/**
 * Decomposes the polygon into one or more convex sub-Polygons.
 * @method decomp
 * @return {Array} An array or Polygon objects.
 */
Polygon.prototype.decomp = function(){
    var edges = this.getCutEdges();
    if(edges.length > 0)
        return this.slice(edges);
    else
        return [this];
};

/**
 * Slices the polygon given one or more cut edges. If given one, this function will return two polygons (false on failure). If many, an array of polygons.
 * @method slice
 * @param {Array} cutEdges A list of edges, as returned by .getCutEdges()
 * @return {Array}
 */
Polygon.prototype.slice = function(cutEdges){
    if(cutEdges.length == 0) return [this];
    if(cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length==2 && cutEdges[0][0] instanceof Array){

        var polys = [this];

        for(var i=0; i<cutEdges.length; i++){
            var cutEdge = cutEdges[i];
            // Cut all polys
            for(var j=0; j<polys.length; j++){
                var poly = polys[j];
                var result = poly.slice(cutEdge);
                if(result){
                    // Found poly! Cut and quit
                    polys.splice(j,1);
                    polys.push(result[0],result[1]);
                    break;
                }
            }
        }

        return polys;
    } else {

        // Was given one edge
        var cutEdge = cutEdges;
        var i = this.vertices.indexOf(cutEdge[0]);
        var j = this.vertices.indexOf(cutEdge[1]);

        if(i != -1 && j != -1){
            return [this.copy(i,j),
                    this.copy(j,i)];
        } else {
            return false;
        }
    }
};

/**
 * Checks that the line segments of this polygon do not intersect each other.
 * @method isSimple
 * @param  {Array} path An array of vertices e.g. [[0,0],[0,1],...]
 * @return {Boolean}
 * @todo Should it check all segments with all others?
 */
Polygon.prototype.isSimple = function(){
    var path = this.vertices;
    // Check
    for(var i=0; i<path.length-1; i++){
        for(var j=0; j<i-1; j++){
            if(Line.segmentsIntersect(path[i], path[i+1], path[j], path[j+1] )){
                return false;
            }
        }
    }

    // Check the segment between the last and the first point to all others
    for(var i=1; i<path.length-2; i++){
        if(Line.segmentsIntersect(path[0], path[path.length-1], path[i], path[i+1] )){
            return false;
        }
    }

    return true;
};

function getIntersectionPoint(p1, p2, q1, q2, delta){
    delta = delta || 0;
   var a1 = p2[1] - p1[1];
   var b1 = p1[0] - p2[0];
   var c1 = (a1 * p1[0]) + (b1 * p1[1]);
   var a2 = q2[1] - q1[1];
   var b2 = q1[0] - q2[0];
   var c2 = (a2 * q1[0]) + (b2 * q1[1]);
   var det = (a1 * b2) - (a2 * b1);

   if(!Scalar.eq(det,0,delta))
      return [((b2 * c1) - (b1 * c2)) / det, ((a1 * c2) - (a2 * c1)) / det]
   else
      return [0,0]
}

/**
 * Quickly decompose the Polygon into convex sub-polygons.
 * @method quickDecomp
 * @param  {Array} result
 * @param  {Array} [reflexVertices]
 * @param  {Array} [steinerPoints]
 * @param  {Number} [delta]
 * @param  {Number} [maxlevel]
 * @param  {Number} [level]
 * @return {Array}
 */
Polygon.prototype.quickDecomp = function(result,reflexVertices,steinerPoints,delta,maxlevel,level){
    maxlevel = maxlevel || 100;
    level = level || 0;
    delta = delta || 25;
    result = typeof(result)!="undefined" ? result : [];
    reflexVertices = reflexVertices || [];
    steinerPoints = steinerPoints || [];

    var upperInt=[0,0], lowerInt=[0,0], p=[0,0]; // Points
    var upperDist=0, lowerDist=0, d=0, closestDist=0; // scalars
    var upperIndex=0, lowerIndex=0, closestIndex=0; // Integers
    var lowerPoly=new Polygon(), upperPoly=new Polygon(); // polygons
    var poly = this,
        v = this.vertices;

    if(v.length < 3) return result;

    level++;
    if(level > maxlevel){
        console.warn("quickDecomp: max level ("+maxlevel+") reached.");
        return result;
    }

    for (var i = 0; i < this.vertices.length; ++i) {
        if (poly.isReflex(i)) {
            reflexVertices.push(poly.vertices[i]);
            upperDist = lowerDist = Number.MAX_VALUE;


            for (var j = 0; j < this.vertices.length; ++j) {
                if (Point.left(poly.at(i - 1), poly.at(i), poly.at(j))
                        && Point.rightOn(poly.at(i - 1), poly.at(i), poly.at(j - 1))) { // if line intersects with an edge
                    p = getIntersectionPoint(poly.at(i - 1), poly.at(i), poly.at(j), poly.at(j - 1)); // find the point of intersection
                    if (Point.right(poly.at(i + 1), poly.at(i), p)) { // make sure it's inside the poly
                        d = Point.sqdist(poly.vertices[i], p);
                        if (d < lowerDist) { // keep only the closest intersection
                            lowerDist = d;
                            lowerInt = p;
                            lowerIndex = j;
                        }
                    }
                }
                if (Point.left(poly.at(i + 1), poly.at(i), poly.at(j + 1))
                        && Point.rightOn(poly.at(i + 1), poly.at(i), poly.at(j))) {
                    p = getIntersectionPoint(poly.at(i + 1), poly.at(i), poly.at(j), poly.at(j + 1));
                    if (Point.left(poly.at(i - 1), poly.at(i), p)) {
                        d = Point.sqdist(poly.vertices[i], p);
                        if (d < upperDist) {
                            upperDist = d;
                            upperInt = p;
                            upperIndex = j;
                        }
                    }
                }
            }

            // if there are no vertices to connect to, choose a point in the middle
            if (lowerIndex == (upperIndex + 1) % this.vertices.length) {
                //console.log("Case 1: Vertex("+i+"), lowerIndex("+lowerIndex+"), upperIndex("+upperIndex+"), poly.size("+this.vertices.length+")");
                p[0] = (lowerInt[0] + upperInt[0]) / 2;
                p[1] = (lowerInt[1] + upperInt[1]) / 2;
                steinerPoints.push(p);

                if (i < upperIndex) {
                    //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.begin() + upperIndex + 1);
                    lowerPoly.append(poly, i, upperIndex+1);
                    lowerPoly.vertices.push(p);
                    upperPoly.vertices.push(p);
                    if (lowerIndex != 0){
                        //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.end());
                        upperPoly.append(poly,lowerIndex,poly.vertices.length);
                    }
                    //upperPoly.insert(upperPoly.end(), poly.begin(), poly.begin() + i + 1);
                    upperPoly.append(poly,0,i+1);
                } else {
                    if (i != 0){
                        //lowerPoly.insert(lowerPoly.end(), poly.begin() + i, poly.end());
                        lowerPoly.append(poly,i,poly.vertices.length);
                    }
                    //lowerPoly.insert(lowerPoly.end(), poly.begin(), poly.begin() + upperIndex + 1);
                    lowerPoly.append(poly,0,upperIndex+1);
                    lowerPoly.vertices.push(p);
                    upperPoly.vertices.push(p);
                    //upperPoly.insert(upperPoly.end(), poly.begin() + lowerIndex, poly.begin() + i + 1);
                    upperPoly.append(poly,lowerIndex,i+1);
                }
            } else {
                // connect to the closest point within the triangle
                //console.log("Case 2: Vertex("+i+"), closestIndex("+closestIndex+"), poly.size("+this.vertices.length+")\n");

                if (lowerIndex > upperIndex) {
                    upperIndex += this.vertices.length;
                }
                closestDist = Number.MAX_VALUE;

                if(upperIndex < lowerIndex){
                    return result;
                }

                for (var j = lowerIndex; j <= upperIndex; ++j) {
                    if (Point.leftOn(poly.at(i - 1), poly.at(i), poly.at(j))
                            && Point.rightOn(poly.at(i + 1), poly.at(i), poly.at(j))) {
                        d = Point.sqdist(poly.at(i), poly.at(j));
                        if (d < closestDist) {
                            closestDist = d;
                            closestIndex = j % this.vertices.length;
                        }
                    }
                }

                if (i < closestIndex) {
                    lowerPoly.append(poly,i,closestIndex+1);
                    if (closestIndex != 0){
                        upperPoly.append(poly,closestIndex,v.length);
                    }
                    upperPoly.append(poly,0,i+1);
                } else {
                    if (i != 0){
                        lowerPoly.append(poly,i,v.length);
                    }
                    lowerPoly.append(poly,0,closestIndex+1);
                    upperPoly.append(poly,closestIndex,i+1);
                }
            }

            // solve smallest poly first
            if (lowerPoly.vertices.length < upperPoly.vertices.length) {
                lowerPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
                upperPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
            } else {
                upperPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
                lowerPoly.quickDecomp(result,reflexVertices,steinerPoints,delta,maxlevel,level);
            }

            return result;
        }
    }
    result.push(this);

    return result;
};

/**
 * Remove collinear points in the polygon.
 * @method removeCollinearPoints
 * @param  {Number} [precision] The threshold angle to use when determining whether two edges are collinear. Use zero for finest precision.
 * @return {Number}           The number of points removed
 */
Polygon.prototype.removeCollinearPoints = function(precision){
    var num = 0;
    for(var i=this.vertices.length-1; this.vertices.length>3 && i>=0; --i){
        if(Point.collinear(this.at(i-1),this.at(i),this.at(i+1),precision)){
            // Remove the middle point
            this.vertices.splice(i%this.vertices.length,1);
            i--; // Jump one point forward. Otherwise we may get a chain removal
            num++;
        }
    }
    return num;
};

},{"./Line":102,"./Point":103,"./Scalar":105}],105:[function(require,module,exports){
module.exports = Scalar;

/**
 * Scalar functions
 * @class Scalar
 */
function Scalar(){}

/**
 * Check if two scalars are equal
 * @static
 * @method eq
 * @param  {Number} a
 * @param  {Number} b
 * @param  {Number} [precision]
 * @return {Boolean}
 */
Scalar.eq = function(a,b,precision){
    precision = precision || 0;
    return Math.abs(a-b) < precision;
};

},{}],106:[function(require,module,exports){
module.exports = {
    Polygon : require("./Polygon"),
    Point : require("./Point"),
};

},{"./Point":103,"./Polygon":104}],107:[function(require,module,exports){
const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
// const octRegex = /0x[a-z0-9]+/;
// const binRegex = /0x[a-z0-9]+/;


//polyfill
if (!Number.parseInt && window.parseInt) {
    Number.parseInt = window.parseInt;
}
if (!Number.parseFloat && window.parseFloat) {
    Number.parseFloat = window.parseFloat;
}

  
const consider = {
    hex :  true,
    leadingZeros: true,
    decimalPoint: "\.",
    eNotation: true
    //skipLike: /regex/
};

function toNumber(str, options = {}){
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }

    options = Object.assign({}, consider, options );
    if(!str || typeof str !== "string" ) return str;
    
    let trimmedStr  = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;

    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
    // } else if (options.parseOct && octRegex.test(str)) {
    //     return Number.parseInt(val, 8);
    // }else if (options.parseBin && binRegex.test(str)) {
    //     return Number.parseInt(val, 2);
    }else{
        //separate negative sign, leading zeros, and rest number
        const match = numRegex.exec(trimmedStr);
        if(match){
            const sign = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
            //trim ending zeros for floating number
            
            const eNotation = match[4] || match[6];
            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
            else{//no leading zeros or leading zeros are allowed
                const num = Number(trimmedStr);
                const numStr = "" + num;
                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation
                    if(options.eNotation) return num;
                    else return str;
                }else if(eNotation){ //given number has enotation
                    if(options.eNotation) return num;
                    else return str;
                }else if(trimmedStr.indexOf(".") !== -1){ //floating number
                    // const decimalPart = match[5].substr(1);
                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));

                    
                    // const p = numStr.indexOf(".");
                    // const givenIntPart = numStr.substr(0,p);
                    // const givenDecPart = numStr.substr(p+1);
                    if(numStr === "0" && (numTrimmedByZeros === "") ) return num; //0.0
                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000
                    else if( sign && numStr === "-"+numTrimmedByZeros) return num;
                    else return str;
                }
                
                if(leadingZeros){
                    // if(numTrimmedByZeros === numStr){
                    //     if(options.leadingZeros) return num;
                    //     else return str;
                    // }else return str;
                    if(numTrimmedByZeros === numStr) return num;
                    else if(sign+numTrimmedByZeros === numStr) return num;
                    else return str;
                }

                if(trimmedStr === numStr) return num;
                else if(trimmedStr === sign+numStr) return num;
                // else{
                //     //number with +/- sign
                //     trimmedStr.test(/[-+][0-9]);

                // }
                return str;
            }
            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
            
        }else{ //non-numeric string
            return str;
        }
    }
}

/**
 * 
 * @param {string} numStr without leading zeros
 * @returns 
 */
function trimZeros(numStr){
    if(numStr && numStr.indexOf(".") !== -1){//float
        numStr = numStr.replace(/0+$/, ""); //remove ending zeros
        if(numStr === ".")  numStr = "0";
        else if(numStr[0] === ".")  numStr = "0"+numStr;
        else if(numStr[numStr.length-1] === ".")  numStr = numStr.substr(0,numStr.length-1);
        return numStr;
    }
    return numStr;
}
module.exports = toNumber

},{}],108:[function(require,module,exports){
const VERSION = '97.0';
const RANK_CONSTANT = 0.025;
const SHOP_REFRESH_INTERVAL = 24 * 60 * 60 * 1000;
const MIN_XP_FOR_GUEST_GAME = 125000;
const INPUT_MAP = {
    'Forward': 1,
    'Reverse': 2,
    'Turn Left': 3,
    'Turn Right': 4,
    'Handbrake': 5,
    'Boost': 6,
    'Fire': 7,
    'Repair': 8,
    'Ping Location': 9,
    'Show Emotes': 10,
    'Show Scoreboard': 11,
    'Killstreak 1': 12,
    'Killstreak 2': 13,
    'Killstreak 3': 14
};

module.exports = {
    constants: {
        VERSION: VERSION,
        RANK_CONSTANT: RANK_CONSTANT,
        SHOP_REFRESH_INTERVAL: SHOP_REFRESH_INTERVAL,
        MIN_XP_FOR_GUEST_GAME: MIN_XP_FOR_GUEST_GAME,
        INPUT_MAP: INPUT_MAP
    },
    convertCurrencyToKreds: function(currency, amount) {
        if (currency === 'usd') {
            let kreds = Math.round(amount * 0.1);
            kreds += Math.ceil(kreds*0.08);
            if (kreds > 50) {
                kreds = Math.ceil(kreds / 10) * 10;
            }
            return kreds;
        } else {
            throw new Error('Unsupported currency to convert to Kreds: ' + currency);
        }
    },
    checkSkinRequirements: function(skin, stats) {
        if (!skin || !skin.requirements) {
            return;
        }

        let satisfiedRequirements = 0;
        let requirementsKeys = Object.keys(skin.requirements);
        for (let j = 0; j < requirementsKeys.length; j++) {
            let requirementKey = requirementsKeys[j];
            let requirementValue = skin.requirements[requirementKey];

            let statValue = stats[requirementKey] ? stats[requirementKey] : 0;
            if (statValue >= requirementValue) {
                satisfiedRequirements++;
            }
        }

        return satisfiedRequirements >= requirementsKeys.length;
    },
    checkVehicleRequirements: function (vehicleListMap, inventoryMap, vehicle) {
        if (!vehicle.required || !vehicle.xp) {
            return true;
        }

        let hasRequirements = false;
        let requirements = vehicle.required.split(',');
        if (requirements && requirements.length) {
            for (let i=0; i<requirements.length; i++) {
                let req = requirements[i];
                let item = inventoryMap['vehicle-' + req];
                let nextVehicle = vehicleListMap[req];
                if ((nextVehicle && !nextVehicle.xp) || (item && item.data && item.data.researched && this.checkVehicleRequirements(vehicleListMap, inventoryMap, nextVehicle))) {
                    hasRequirements = true;
                } else {
                    return false;
                }
            }
        }
        return hasRequirements;
    },
    addStatAwards: function (skinListMap, vehicle, previousItemStats, newItemStats, awards) {
        let skinListMapKeys = Object.keys(skinListMap);
        for (let i=0; i<skinListMapKeys.length; i++) {
            let skin = skinListMap[skinListMapKeys[i]];
            let satisfiedRequirements = 0;
            if (skin.requirements) {
                let requirementsKeys = Object.keys(skin.requirements);
                for (let j = 0; j < requirementsKeys.length; j++) {
                    let requirementKey = requirementsKeys[j];
                    let requirementValue = skin.requirements[requirementKey];

                    let oldValue = previousItemStats[requirementKey] ? previousItemStats[requirementKey] : 0;
                    let newValue = newItemStats[requirementKey] ? newItemStats[requirementKey] : 0;
                    if (oldValue < requirementValue && newValue >= requirementValue) {
                        satisfiedRequirements++;
                    }
                }

                if (satisfiedRequirements >= requirementsKeys.length) {
                    awards.push({
                        type: 'skin',
                        key: skin.key,
                        vehicle: vehicle
                    });
                }
            }
        }
    },
    addStarterAwards: function (session, amount, awards) {
        let lastRank = Math.floor(RANK_CONSTANT * Math.sqrt(session.user.xp));
        let nextRank = Math.floor(RANK_CONSTANT * Math.sqrt(session.user.xp + amount));
        if (lastRank < 2 && nextRank >= 2) {
            awards.push({
                type: 'html',
                key: '<i class="fa fa-wrench fa-4x"></i><h4>Vehicle Garage</h4>'
            });
            awards.push({
                type: 'vehicle',
                key: 'light_tank'
            });
            awards.push({
                type: 'vehicle',
                key: 'weevil_mkv'
            });
        }

        if (lastRank < 5 && nextRank >= 5) {
            awards.push({
                type: 'html',
                key: '<i class="fa fa-gamepad fa-4x"></i><h4>Battle Mode</h4>'
            });
        }

        if (lastRank < 12 && nextRank >= 12) {
            awards.push({
                type: 'html',
                key: '<i class="fa fa-flask fa-4x"></i><h4>All Research Trees</h4>'
            });
        }
    }
};
},{}],109:[function(require,module,exports){
const fs = require('fs');
const p2 = require('p2');
const PF = require('pathfinding');
const collisionGroups = require('./entities/collision_groups');
const names = require('./names');
const sharedFunctions = require('../shared_functions');

const INPUT_MAP = sharedFunctions.constants.INPUT_MAP;
const NODE_DISTANCE = 64;
function AIManager(server, config) {
    let bots = [];
    this.extraBots = 0;

    let gridWidth = 0;
    let gridHeight = 0;
    let pfGrid;
    let defaultBotSkill = 0.2;
    this.resetGame = () => {
        for (let i = 0; i < bots.length; i++) {
            let bot = bots[i];
            bot.ready = true;
        }
    };

    this.onGameStarted = () => {
        gridWidth = Math.floor(server.MAP_WIDTH/NODE_DISTANCE);
        gridHeight = Math.floor(server.MAP_HEIGHT/NODE_DISTANCE);
        pfGrid = new PF.Grid(gridWidth, gridHeight);

        if (server.enableBots) {
            let mapKey = server.mapData.mapName;
            let nodeGraph = server.getMapNodeGraph(mapKey);
            if (!nodeGraph) {
                console.info('Node Graph out of Date. Rebuilding...');
                nodeGraph = this.generateNodeGraph();

                if (config.saveGeneratedNodeGraphs) {
                    console.info('Saving node graph...');
                    fs.writeFileSync('./public/assets/maps/' + mapKey + '/' + mapKey + '.ain', JSON.stringify(nodeGraph));
                }
            }

            let nogolol = [];
            for (let y = 0; y < gridHeight; y++) {
                for (let x = 0; x < gridWidth; x++) {
                    if (nodeGraph[y][x] === 0) {
                        pfGrid.setWalkableAt(x, y, false);
                        //nogolol.push({x: x, y: y});
                    }
                }
            }

            for (let i = 0; i < nogolol.length; i++) {
                let node = nogolol[i];
                server.createStaticObject('wall', (node.x * NODE_DISTANCE) + NODE_DISTANCE / 2, (node.y * NODE_DISTANCE) + NODE_DISTANCE / 2, 0, 16, 16, 0, {
                    asset: 'assets/maps/wall.png',
                    mapProperties: {}
                });
            }
        }
    };

    this.generateNodeGraph = () => {
        let nodeGraph = [];
        for (let y = 0; y < gridHeight; y++) {
            nodeGraph[y] = [];
            for (let x = 0; x < gridWidth; x++) {
                nodeGraph[y][x] = 1;
                let hitTests = server.world.hitTestCircle([(x * NODE_DISTANCE) + NODE_DISTANCE / 2, -((y * NODE_DISTANCE) + NODE_DISTANCE / 2)], server.world.bodies, NODE_DISTANCE);
                if (hitTests && hitTests[0] && hitTests[0].entity && hitTests[0].entity.type === 'static_object' && hitTests[0].entity.subtype === 'wall') {
                    nodeGraph[y][x] = 0;
                }
            }
        }
        return nodeGraph;
    };

    this.onRoundStarted = () => {

    };

    this.tick = () => {
        if (!server.hasRoundEnded()) {
            for (let i = 0; i < bots.length; i++) {
                this.botThink(bots[i]);
            }
        }
    };

    this.balanceTeamsWithBots = () => {
        if (server.enableBots && server.getRoundState().type !== 'lobby') {
            let teams = Object.keys(server.teamData);
            if (teams.length) {
                let teamLength = Object.keys(server.teamData).length;
                let largestTeam = null;
                let mostPlayers = 0;
                for (let i=0; i<teamLength; i++) {
                    let team = server.teamData[i];
                    let actualPlayerCount = 0;
                    for (let j=0; j<team.clients.length; j++) {
                        let client = team.clients[j];
                        if (!client.isBot) {
                            actualPlayerCount++;
                        }
                    }

                    if (!team.locked && !team.dead && actualPlayerCount > mostPlayers) {
                        largestTeam = team.id;
                        mostPlayers = actualPlayerCount;
                    }
                }

                let playerDeficit = this.extraBots;
                let totalPlayers = 0;
                for (let i=0; i<teamLength; i++) {
                    let team = server.teamData[i];
                    playerDeficit += mostPlayers - team.clients.length;
                    totalPlayers += team.clients.length;
                }

                let botFillInAmount = 0;
                if (server.gamemodeList[server.gamemode.type].botFillInAmount) {
                    botFillInAmount = server.gamemodeList[server.gamemode.type].botFillInAmount;
                }
                if (botFillInAmount) {
                    if (totalPlayers+playerDeficit < botFillInAmount) {
                        playerDeficit = botFillInAmount - (totalPlayers);
                    }
                }

                if (playerDeficit > 0) {
                    for (let i=0; i<playerDeficit; i++) {
                        let bot = this.createBot();
                        if (bot) {
                            server.joinSmallestTeam(bot, true);
                        }
                    }
                } else if (playerDeficit < 0) {
                    for (let i=0; i<Math.abs(playerDeficit); i++) {
                        let largestTeamInclBots = server.getLargestTeam();
                        this.destroyBot(largestTeamInclBots);
                    }
                }
            }
        }
    };

    this.createBot = (manuallyAddedBot) => {
        if (!server.enableBots || !server.running) {
            return null;
        }

        if (server.averageClientXP > sharedFunctions.constants.MIN_XP_FOR_GUEST_GAME) {
            if (server.averageClientXP >= 1000000) {
                defaultBotSkill = 0.8;
            } else {
                defaultBotSkill = 0.5;
            }
        } else {
            defaultBotSkill = 0.2;
        }

        let bot = {
            name: names[Math.floor(Math.random() * names.length)],
            isBot: true,
            manuallyAddedBot: manuallyAddedBot,
            skill: defaultBotSkill,
            on: () => {

            },
            emit: () => {

            }
        };

        bot.overrideSlotTank = 'medium_tank';
        if (Math.random() < 0.3) {
            bot.overrideSlotTank = 'light_tank';
        } else if (Math.random() < 0.3) {
            bot.overrideSlotTank = 'weevil_mkv';
        }

        if (Math.random() < 0.2) {
            bot.name = bot.name.toUpperCase();
        } else if (Math.random() < 0.4) {
            bot.name = bot.name.toLowerCase();
        } else if (Math.random() < 0.4) {
            bot.name = bot.name.charAt(0).toUpperCase() + bot.name.slice(1);
        }
        bot.name = bot.name.replace('-', '');

        bot.disconnect = () => {
            for (let i=0; i<bots.length; i++) {
                if (bot === bots[i]) {
                    bots.splice(i, 1);
                    break;
                }
            }
            bot.connected = false;
            server.onClientDisconnected(bot);
        };

        this.botInit(bot);

        bots.push(bot);
        bot.connected = true;
        server.onClientConnected(bot, true);
        return bot;
    };

    this.setBotSkill = (newSkill) => {
        if (newSkill > 1) {
            newSkill = 1;
        } else if (newSkill < 0) {
            newSkill = 0;
        }
        defaultBotSkill = newSkill;

        for (let i = 0; i < bots.length; i++) {
            let bot = bots[i];
            bot.skill = defaultBotSkill;
        }
    }

    this.botInit = (bot) => {
        bot.pathTo = (to) => {
            if (!bot || !bot.player || bot.disableMovement) {
                return false;
            }
            let entity = bot.player;

            let finder = new PF.AStarFinder({
                allowDiagonal: true,
                dontCrossCorners: true
            });

            try {
                let from = entity;
                let grid = pfGrid.clone();
                for (let i=0; i<server.entities.length; i++) {
                    let other = server.entities[i];
                    if (other.type === 'vehicle') {
                        grid.setWalkableAt(parseInt(other.x / NODE_DISTANCE), parseInt(other.y / NODE_DISTANCE), false);
                    }
                }

                entity.path = [];
                let path = finder.findPath(parseInt(from.x / NODE_DISTANCE), parseInt(from.y / NODE_DISTANCE), parseInt(to.x / NODE_DISTANCE), parseInt(to.y / NODE_DISTANCE), grid);
                if (path && path.length) {
                    for (let i = (path.length >= 1) ? 1 : 0; i < path.length - 1; i++) {
                        let node = path[i];
                        entity.path.push({
                            x: (node[0] * NODE_DISTANCE) + NODE_DISTANCE / 2,
                            y: (node[1] * NODE_DISTANCE) + NODE_DISTANCE / 2
                        });
                    }
                    entity.moveToPos = null;
                    return true;
                } else {
                    return false;
                }
            } catch (e) {
                return false;
            }
        };
    };

    this.destroyBot = (team) => {
        if (bots.length >= 1) {
            if (team !== null && team !== undefined) {
                for (let i=0; i<bots.length; i++) {
                    let bot = bots[i];
                    if (bot.team === team) {
                        bot.disconnect();
                        return;
                    }
                }
            } else {
                bots[bots.length - 1].disconnect();
            }
        }
    };

    this.destroyAllBots = () => {
        for (let i=0; i<bots.length; i++) {
            this.destroyBot();
            i--;
        }
    };

    this.updateBotOffset = (bot, entity) => {
        entity.botFireOffset = 1 + Math.round(Math.random() * 12);
        let maxOffAngle = (Math.PI / 40) * (0.25+(1-bot.skill));
        entity.botAngleOffset = -maxOffAngle + (Math.random() * (maxOffAngle * 2));
    };

    let rayClosest = new p2.Ray({
        mode: p2.Ray.CLOSEST,
        collisionGroup: collisionGroups.PLAYER,
        collisionMask: collisionGroups.OTHER | collisionGroups.PLAYER,
        skipBackfaces: true
    });
    let hitPoint = p2.vec2.create();
    this.botThink = (bot) => {
        if (bot.player && bot.player.valid && bot.player.netData && bot.player.netData.alive) {
            let entity = bot.player;
            entity.keys = {};

            if (!entity.botInit) {
                entity.botInit = true;
                this.updateBotOffset(bot, entity);
            }

            let closestDist = 10000;
            let canView = false;
            let carryingBall = server.currentBall && server.currentBall.valid && server.currentBall.carrier === entity;
            if (!bot.disableMovement) {
                if (!entity.path || entity.path.length <= 0) {
                    let pos = {x: Math.random() * server.MAP_WIDTH, y: Math.random() * server.MAP_HEIGHT};
                    let teamId = Math.floor(Math.random() * Object.keys(server.teamData).length);
                    if (teamId === bot.team) {
                        teamId--;
                        if (teamId < 0) {
                            teamId = Object.keys(server.teamData).length - 1;
                        }
                    }

                    let posFound = false;
                    if (!entity.target) {
                        let points = [];
                        for (let i = 0; i < server.entities.length; i++) {
                            let other = server.entities[i];
                            if (other.subtype === 'capture_point' && (other.team !== bot.team || other.capturePercentage !== 1)) {
                                points.push(other);
                            }
                        }

                        if (points && points.length) {
                            let point = points[Math.floor(Math.random() * points.length)];
                            if (point) {
                                let offset = 250;
                                pos = {
                                    x: point.x + (-offset + (Math.random() * offset * 2)),
                                    y: point.y + (-offset + (Math.random() * offset * 2))
                                };
                                posFound = true;
                            }
                        }
                    }

                    if (!posFound) {
                        let otherTeam = server.teamData[teamId];
                        if (otherTeam && otherTeam.clients) {
                            let targets = [];
                            for (let i = 0; i < otherTeam.clients.length; i++) {
                                let client = otherTeam.clients[i];
                                if (client.player && client.player.valid && client.player.netData && client.player.netData.alive) {
                                    targets.push(client.player);
                                }
                            }

                            let target = targets[Math.floor(Math.random() * targets.length)];
                            if (target) {
                                let offset = 250;
                                pos = {
                                    x: target.x + (-offset + (Math.random() * offset * 2)),
                                    y: target.y + (-offset + (Math.random() * offset * 2))
                                };
                                entity.target = target;
                                entity.keepTarget = false;
                            }
                        }
                    }

                    //Tank Ball code
                    if (server.currentBall && server.currentBall.valid) {
                        if (carryingBall) {
                            if (!entity?.target || entity?.target?.subtype !== 'dynamic_object' || entity?.target?.netData?.mapProperties?.objectType !== 'goal') {
                                entity.target = null;
                                entity.keepTarget = false;

                                let goals = server.mapDataServer.dynamicObjects['goal'];
                                if (goals) {
                                    for (let i=0; i<goals.length; i++) {
                                        let goal = goals[i];
                                        if (goal.team !== entity.team) {
                                            entity.target = goal;
                                            entity.keepTarget = true;
                                            canView = true;
                                            break;
                                        }
                                    }
                                }
                            }

                            if (!entity.target) {
                                entity.fire();
                            }
                        } else {
                            let target = server.currentBall;
                            if (target) {
                                let offset = 0;
                                pos = {
                                    x: target.x + (-offset + (Math.random() * offset * 2)),
                                    y: target.y + (-offset + (Math.random() * offset * 2))
                                };
                                entity.target = target;
                            }
                        }
                    }

                    bot.pathTo(pos);
                } else {
                    let node = entity.path[0];
                    entity.moveToPos = {
                        x: node.x,
                        y: node.y
                    };

                    let dist = Math.distanceBetween(entity, node);
                    if (dist <= NODE_DISTANCE * 3) {
                        entity.path.shift();
                    } else if (dist > NODE_DISTANCE * 5) {
                        entity.path = null;
                    }
                }
            }

            if (entity.moveToPos) {
                let dist = Math.distanceBetween(entity, entity.moveToPos);
                let rot = entity.rotation - (Math.PI / 2);
                let angle = Math.angleBetween(entity, entity.moveToPos);
                let angleDiff = Math.abs(rot - angle)%(Math.PI*2);

                entity.turretTargetRotation = angle;
                if (entity.turretTargetRotation < 0) {
                    entity.turretTargetRotation += Math.PI*2;
                }
                let testDiff = Math.angleDistance(angle, rot);
                if (testDiff > 0.15) {
                    if (angleDiff > Math.PI) {
                        if (rot < angle) {
                            entity.keys[INPUT_MAP['Turn Left']] = true;
                        } else {
                            entity.keys[INPUT_MAP['Turn Right']] = true;
                        }
                    } else {
                        if (rot > angle) {
                            entity.keys[INPUT_MAP['Turn Left']] = true;
                        } else {
                            entity.keys[INPUT_MAP['Turn Right']] = true;
                        }
                    }
                }

                let moveCompletionDist = NODE_DISTANCE * 3;
                if (!entity.path || entity.path.length <= 0) {
                    moveCompletionDist = 10;
                }
                if (dist <= moveCompletionDist) {
                    entity.moveToPos = null;
                } else {
                    if (testDiff < 1.2) {
                        entity.keys[INPUT_MAP['Forward']] = true;
                    }
                }

                if (entity.netData && entity.netData.hasWheels) {
                    entity.keys[INPUT_MAP['Forward']] = true;
                }

                let speed = Math.magnitude({dx: entity.body.velocity[0], dy: entity.body.velocity[1]});
                if (entity.performRaycast && speed >= 1 && entity.keys[INPUT_MAP['Forward']]) {
                    let raycastDistance = 6*speed;
                    if (raycastDistance < 100) {
                        raycastDistance = 100;
                    }
                    if (raycastDistance > 300) {
                        raycastDistance = 300;
                    }
                    let maxRaycasts = 7;
                    let raycastAngleBetween = Math.PI/12;
                    let hitRaycasts = 0;
                    let turnValue = 0;
                    let middleRaycastIndex = Math.floor(maxRaycasts/2);
                    let hittingPlayer = false;
                    for (let i=0; i<maxRaycasts; i++) {
                        let angle = rot - ((maxRaycasts*raycastAngleBetween)/2) + (i*raycastAngleBetween);
                        let raycast = entity.performRaycast([entity.x, -entity.y], [entity.x + (Math.cos(angle) * raycastDistance), -(entity.y + (Math.sin(angle) * raycastDistance))]);
                        raycast.getHitPoint(hitPoint, rayClosest);
                        if (raycast.hasHit()) {
                            hitRaycasts++;
                            if (i < middleRaycastIndex) {
                                turnValue -= 1;
                            } else if (i > middleRaycastIndex) {
                                turnValue += 1;
                            } else if (raycast.body && raycast.body.entity && raycast.body.entity.currentPlayer && raycast.body.entity.netData && raycast.body.entity.netData.alive && Math.distanceBetween(entity, raycast.body.entity) < 120 && raycast?.body?.entity?.netData?.mapProperties?.disableHitboxCollision) {
                                hittingPlayer = true;
                            }
                        }
                    }
                    if (turnValue !== 0) {
                        if (turnValue > 0) {
                            entity.keys[INPUT_MAP['Turn Left']] = true;
                            entity.keys[INPUT_MAP['Turn Right']] = false;
                        } else {
                            entity.keys[INPUT_MAP['Turn Left']] = false;
                            entity.keys[INPUT_MAP['Turn Right']] = true;
                        }

                        if (entity.netData && entity.netData.hasWheels && Math.abs(turnValue) >= 3) {
                            entity.keys[INPUT_MAP['Handbrake']] = true;
                        }
                    }

                    if (hitRaycasts >= 2 && (speed < 5 || hittingPlayer)) {
                        entity.changeStrategyTime = Date.now();
                        entity.currentStrat = 'unstuck';
                    }
                }
            }

            if (!entity.keepTarget) {
                for (let i = 0; i < server.clients.length; i++) {
                    let client = server.clients[i];
                    if (client.player && client.player.valid && client.player.netData && client.player.netData.alive) {
                        let other = client.player;
                        let otherDist = Math.distanceBetween(entity, other);
                        if (client.player.team !== entity.team && otherDist < closestDist && otherDist < 1500) {
                            let raycast = entity.performRaycast([entity.x, -entity.y], [other.x, -other.y]);
                            raycast.getHitPoint(hitPoint, rayClosest);

                            if (raycast.hasHit() && raycast.body && (raycast.body.entity === other || raycast.body.entity.subtype === 'wall_deployable')) {
                                entity.target = other;
                                closestDist = otherDist;
                                canView = true;
                            }
                        }
                    }
                }
            }

            if (entity.target && (!entity.target.valid || !entity.target.netData || !entity.target.netData.alive)) {
                entity.target = null;
                entity.keepTarget = false;
            }

            if (entity.target) {
                let targetDist = Math.distanceBetween(entity, entity.target);

                if (!bot.disableMovement) {
                    //Change strategy every X seconds.
                    if (!entity.changeStrategyTime || Date.now() - entity.changeStrategyTime > 1000) {
                        entity.changeStrategyTime = Date.now();

                        if ((!canView || (targetDist > 400 + (400 * (1 - bot.skill)))) && Math.random() >= 0.6) {
                            if (entity.currentStrat === 'attack' && Math.random() >= 0.6) {
                                entity.keys[INPUT_MAP['Boost']] = true;
                            }
                            entity.currentStrat = 'attack';
                            bot.pathTo(entity.target);
                        } else if (!entity.netData.loaded && entity.subtype === 'tank' && Math.random() >= 0.8 + (0.2 * bot.skill)) {
                            entity.currentStrat = 'retreat';
                        }
                    }
                }

                let viewDist = 700 + (600 * bot.skill);
                if (bot.rangeOverride) {
                    viewDist = bot.rangeOverride;
                }
                if (!bot.disableMovement || targetDist <= viewDist+150) {
                    if (bot.perfectLeadAi) {
                        entity.botFireOffset = 0;
                        entity.turretTargetRotation = Math.angleBetween(entity, {
                            x: entity.target.x + (entity.target.body.velocity[0] * 0.1),
                            y: entity.target.y + (-entity.target.body.velocity[1] * 0.1)
                        }) + entity.botAngleOffset;
                    } else {
                        entity.turretTargetRotation = Math.angleBetween(entity, {
                            x: entity.target.x + (entity.target.body.velocity[0] * 2),
                            y: entity.target.y + (-entity.target.body.velocity[1] * 2)
                        }) + entity.botAngleOffset;
                    }
                }

                if (carryingBall) {
                    viewDist = 1600;
                }

                if (carryingBall && !canView && entity.target && targetDist <= viewDist) {
                    let raycast = entity.performRaycast([entity.x, -entity.y], [entity.target.x, -entity.target.y]);
                    raycast.getHitPoint(hitPoint, rayClosest);

                    if (server.currentBall) {
                        if (raycast.hasHit() && entity.oldFire && raycast?.body?.entity?.subtype === 'dynamic_object' && raycast?.body?.entity?.netData?.mapProperties?.health && raycast?.body?.entity?.team !== entity.team) {
                            entity.oldFire();
                        } else {
                            let ballRaycast = server.currentBall.performRaycast([entity.x, -entity.y], [entity.target.x, -entity.target.y]);
                            ballRaycast.getHitPoint(hitPoint, rayClosest);

                            if (ballRaycast?.body?.entity === entity.target) {
                                canView = true;
                            }
                        }
                    }
                }

                if (!bot.disableFiring && canView && targetDist <= viewDist && (entity.netData.loaded || carryingBall)) {
                    let angleDist = Math.angleDistance(entity.turretTargetRotation, entity.turretRotation);
                    if (angleDist <= 0.05) {
                        if (entity.botFireOffset <= 0 || (entity.getTankData && entity.getTankData().turretRotationLimit)) {
                            entity.fire();
                            this.updateBotOffset(bot, entity);
                        } else {
                            entity.botFireOffset--;
                        }
                    }
                }
            } else {
                if (entity.currentStrat !== 'unstuck' || !entity.changeStrategyTime || Date.now() - entity.changeStrategyTime > 1000) {
                    entity.currentStrat = null;
                }
            }

            if (entity.target && canView && (entity.getTankData && entity.getTankData().turretRotationLimit)) {
                if (entity.netData && !entity.netData.hasWheels) {
                    let rot = entity.rotation - (Math.PI / 2);
                    let angle = Math.angleBetween(entity, entity.target);
                    let angleDiff = Math.abs(rot - angle)%(Math.PI*2);

                    entity.turretTargetRotation = angle;
                    if (entity.turretTargetRotation < 0) {
                        entity.turretTargetRotation += Math.PI*2;
                    }
                    let testDiff = Math.angleDistance(angle, rot);
                    if (testDiff > entity.getTankData().turretRotationLimit-0.02) {
                        if (angleDiff > Math.PI) {
                            if (rot < angle) {
                                entity.keys[INPUT_MAP['Turn Left']] = true;
                            } else {
                                entity.keys[INPUT_MAP['Turn Right']] = true;
                            }
                        } else {
                            if (rot > angle) {
                                entity.keys[INPUT_MAP['Turn Left']] = true;
                            } else {
                                entity.keys[INPUT_MAP['Turn Right']] = true;
                            }
                        }
                    }
                }
            }

            if (entity.currentStrat) {
                switch (entity.currentStrat) {
                    case 'attack':
                        break;
                    case 'retreat':
                        if ((entity.getTankData && entity.getTankData().turretRotationLimit)) {
                            if (entity.netData && entity.netData.hasWheels) {
                                entity.keys[INPUT_MAP['Forward']] = true;
                                entity.keys[INPUT_MAP['Reverse']] = false;
                            } else {
                                entity.keys[INPUT_MAP['Forward']] = false;
                                entity.keys[INPUT_MAP['Reverse']] = false;
                            }
                        } else {
                            entity.keys[INPUT_MAP['Forward']] = false;
                            entity.keys[INPUT_MAP['Reverse']] = false;
                        }
                        break;
                    case 'unstuck':
                        entity.keys[INPUT_MAP['Forward']] = false;
                        entity.keys[INPUT_MAP['Reverse']] = true;
                        if (entity.keys[INPUT_MAP['Turn Left']]) {
                            entity.keys[INPUT_MAP['Turn Left']] = false;
                            entity.keys[INPUT_MAP['Turn Right']] = true;
                        } else if (entity.keys[INPUT_MAP['Turn Right']]) {
                            entity.keys[INPUT_MAP['Turn Left']] = true;
                            entity.keys[INPUT_MAP['Turn Right']] = false;
                        }
                        break;
                    default:
                        throw new Error('Invalid AI strategy: ' + entity.currentStrat);
                }
            }
        }
    };

    this.getBotCount = () => {
        return bots.length;
    };
}
module.exports = AIManager;
},{"../shared_functions":108,"./entities/collision_groups":119,"./names":125,"fs":1,"p2":54,"pathfinding":80}],110:[function(require,module,exports){
module.exports = ["WaffenSS", "d-umbass", "du-mbass", "dumb-ass", "dumba-ss", "dumbas-s", "dum-bass",  "re-tard", "bit-ch", "bi-tch", "b-itch", "bitc-h", "r-etard", "re-tard", "ret-ard", "reta-rd", "retar-d", "fvking", "fuckk", "fuckkk", "fuckkkk", "fuckkkkk", "fuckkkkk", "pussie", "5h1t", "5hit", "a55", "anal", "anus", "ar5e", "arrse", "arse", "ass", "ass-fucker", "asses", "assfucker", "assfukka", "asshole", "assholes", "asswhole", "a_s_s", "b!tch", "b00bs", "b17ch", "b1tch", "ballbag", "balls", "ballsack", "bastard", "beastial", "beastiality", "bellend", "bestial", "bestiality", "bi+ch", "biatch", "bitch", "bitcher", "bitchers", "bitches", "bitchin", "bitching", "bloody", "blow job", "blowjob", "blowjobs", "boiolas", "bollock", "bollok", "boner", "boob", "boobs", "booobs", "boooobs", "booooobs", "booooooobs", "breasts", "buceta", "bugger", "bum", "bunny fucker", "bullshit", "butt", "butts", "butthole", "buttmuch", "buttplug", "buttfucking", "buttfucker", "buttfuck", "c0ck", "c0cksucker", "carpet muncher", "cawk", "chink", "cipa", "cl1t", "clit", "clitoris", "clits", "cnut", "cock", "cock-sucker", "cockface", "cockhead", "cockmunch", "cockmuncher", "cocks", "cocksuck", "cocksucked", "cocksucker", "cocksucking", "cocksucks", "cocksuka", "cocksukka", "cokmuncher", "coksucka", "cum", "cummer", "cumming", "cums", "cumshot", "cunilingus", "cunillingus", "cunnilingus", "cunt", "cuntlick", "cuntlicker", "cuntlicking", "cunts", "cyalis", "cyberfuc", "cyberfuck", "cyberfucked", "cyberfucker", "cyberfuckers", "cyberfucking", "d1ck", "damn", "dick", "dickhead", "dildo", "dildos", "dink", "dinks", "dirsa", "dlck", "dog-fucker", "doggin", "dogging", "donkeyribber", "doosh", "duche", "dyke", "ejaculate", "ejaculated", "ejaculates", "ejaculating", "ejaculatings", "ejaculation", "ejakulate", "f u c k", "f u c k e r", "f4nny", "fag", "fagging", "faggitt", "faggot", "faggs", "fagot", "fagots", "fags", "fanny", "fannyflaps", "fannyfucker", "fanyy", "fatass", "fcuk", "fcuker", "fcuking", "feck", "fecker", "felching", "fellate", "fellatio", "fingerfuck", "fingerfucked", "fingerfucker", "fingerfuckers", "fingerfucking", "fingerfucks", "fistfuck", "fistfucked", "fistfucker", "fistfuckers", "fistfucking", "fistfuckings", "fistfucks", "flange", "fook", "fooker", "fuck", "fucka", "fucked", "fucker", "fuckers", "fuckhead", "fuckheads", "fuckin", "fucking", "fuckings", "fuckingshitmotherfucker", "fuckme", "fucks", "fuckwhit", "fuckwit", "fudge packer", "fudgepacker", "fuk", "fuker", "fukker", "fukkin", "fuks", "fukwhit", "fukwit", "fux", "fux0r", "f_u_c_k", "gangbang", "gangbanged", "gangbangs", "gaylord", "gaysex", "goatse", "god-dam", "god-damned", "goddamn", "goddamned", "hardcoresex", "hell", "heshe", "hoar", "hoare", "hoer", "homo", "hore", "horniest", "horny", "hotsex", "hitler", "h1tler", "h1t1er", "hit1er", "jack-off", "jackoff", "jap", "jerk-off", "jism", "jiz", "jizm", "jizz", "kawk", "kock", "kondum", "kondums", "kum", "kummer", "kumming", "kums", "kunilingus", "l3i+ch", "l3itch", "labia", "lust", "lusting", "m0f0", "m0fo", "m45terbate", "ma5terb8", "ma5terbate", "masochist", "master-bate", "masterb8", "masterbat*", "masterbat3", "masterbate", "masterbation", "masterbations", "masturbate", "mothafuck", "mothafucka", "mothafuckas", "mothafuckaz", "mothafucked", "mothafucker", "mothafuckers", "mothafuckin", "mothafucking", "mothafuckings", "mothafucks", "mother fucker", "motherfuck", "motherfucked", "motherfucker", "motherfuckers", "motherfuckin", "motherfucking", "motherfuckings", "motherfuckka", "motherfucks", "muff", "mutha", "muthafecker", "muthafuckker", "muther", "mutherfucker", "n1gga", "n1gger", "nazi", "niggerz", "niglons", "niggz", "Niggerz", "Niglons", "niggr", "nigs", "nigz", "neger", "negger", "nigg3r", "n1ggger", "nigg4h", "nigga", "niggah", "niggas", "niggaz", "nigger", "niggers", "NlGGER", "ni99er", "n1gger", "numbnuts", "nutsack", "orgasim", "orgasims", "orgasm", "orgasms", "p0rn", "pawn", "pecker", "penis", "peniss", "pen1s", "penisss", "penisfucker", "phonesex", "phuck", "phuk", "phuked", "phuking", "phukked", "phukking", "phuks", "phuq", "pigfucker", "pimpis", "piss", "pissed", "pisser", "pissers", "pisses", "pissflaps", "pissin", "pissing", "pissoff", "poop", "porn", "porno", "pornography", "pornos", "prick", "pricks", "pube", "pusse", "pussi", "pussies", "pussy", "pussys", "puta", "rectum", "retard", "rape", "rimjob", "rimjaw", "rimming", "s hit", "s.o.b.", "sadist", "schlong", "screwing", "scroat", "scrote", "scrotum", "semen", "sex", "sh!+", "sh!t", "sh1t", "shag", "shagger", "shaggin", "shagging", "shemale", "shi+", "shit", "shitdick", "shlt", "shite", "shited", "shitey", "shitfuck", "shitfull", "shithead", "shiting", "shitings", "shits", "shitted", "shitter", "shitters", "shitting", "shittings", "shitty", "skank", "slut", "sluts", "smegma", "smut", "snatch", "son-of-a-bitch", "spac", "spunk", "s_h_i_t", "t1tt1e5", "t1tties", "teets", "teez", "testical", "testicle", "tit", "titfuck", "tits", "titt", "tittie5", "tittiefucker", "titties", "tittyfuck", "tittywank", "titwank", "tosser", "turd", "tw4t", "twat", "twathead", "twatty", "twunt", "twunter", "v14gra", "v1gra", "vagina", "viagra", "vulva", "w00se", "wang", "wank", "wanker", "wanky", "whoar", "whore", "willies", "willy", "dammit", "whores", "niggre", "niggres"];

},{}],111:[function(require,module,exports){
module.exports = {
    'special': [
        {
            key: 'bundle-starter',
            name: 'Starter Bundle',
            thumbnail: '/assets/promo/starter_bundle_icon.png',
            canOwnMultiple: false,
            shouldUnpackBundle: true,
            items: [
                {
                    key: 'consumable-boost-1-5',
                    quantity: 20
                },
                {
                    key: 'consumable-boost-2',
                    quantity: 10
                },
                {
                    key: 'consumable-boost-3',
                    quantity: 5
                }
            ]
        },
        {
            key: 'bundle-aces-tank',
            name: 'Aces Bundle',
            thumbnail: '/assets/promo/panzer_aces_bundle_icon.png',
            canOwnMultiple: false,
            shouldUnpackBundle: true,
            items: [
                {
                    key: 'tigress_desert_ace'
                },
                {
                    key: 'heckler_bocage_ace'
                },
                {
                    key: 'consumable-boost-3',
                    quantity: 25
                }
            ]
        },
        {
            key: 'bundle-halloween1',
            name: 'Halloween Bundle',
            thumbnail: '/assets/promo/halloween_bundle_icon.png',
            canOwnMultiple: false,
            shouldUnpackBundle: true,
            price: 7000,
            items: [
                {
                    key: 'cheetah_rattler'
                },
                {
                    key: 'weevil_mkv_pumpkin'
                },
                {
                    key: 'decal-halloween1-rip'
                },
                {
                    key: 'skin-halloween1-digital'
                }
            ]
        },
        {
            key: 'bundle-scorched-earth',
            name: 'Scorched Earth Bundle',
            thumbnail: '/assets/promo/scorched_earth_bundle_icon.png',
            canOwnMultiple: false,
            shouldUnpackBundle: true,
            items: [
                {
                    key: 'p_34_85_renegade'
                },
                {
                    key: 'pummeler_ii_roadcaptain'
                },
                {
                    key: 'consumable-boost-3',
                    quantity: 10
                }
            ]
        },
    ],
    'decal': [
        {
            key: 'bundle-cat1',
            name: 'Cat 1',
            thumbnail: '/assets/cosmetics/decals/decal_cat1_calico.png',
            price: 1750,
            items: [
                {
                    key: 'decal-cat1-calico'
                },
                {
                    key: 'decal-cat1-kitty-shell'
                },
                {
                    key: 'decal-cat1-scaredy-cat'
                }
            ]
        },
        {
            key: 'bundle-cat2',
            name: 'Cat 2',
            thumbnail: '/assets/cosmetics/decals/decal_cat2_curious.png',
            price: 1750,
            items: [
                {
                    key: 'decal-cat2-curious'
                },
                {
                    key: 'decal-cat2-fatcat'
                },
                {
                    key: 'decal-cat2-void'
                }
            ]
        },
        {
            key: 'bundle-eyes1',
            name: 'Eyes 1',
            thumbnail: '/assets/cosmetics/decals/decal_eyes1_angry.png',
            price: 2000,
            items: [
                {
                    key: 'decal-eyes1-angry'
                },
                {
                    key: 'decal-eyes1-blue'
                },
                {
                    key: 'decal-eyes1-wings'
                }
            ]
        },
        {
            key: 'bundle-gankyu',
            name: 'Manga Eyes',
            thumbnail: '/assets/cosmetics/decals/decal_gankyu_amber.png',
            price: 2000,
            items: [
                {
                    key: 'decal-gankyu-amber'
                },
                {
                    key: 'decal-gankyu-blue'
                },
                {
                    key: 'decal-gankyu-hearts'
                },
                {
                    key: 'decal-gankyu-smug'
                }
            ]
        },
        {
            key: 'bundle-highway',
            name: 'Highway',
            thumbnail: '/assets/cosmetics/decals/decal_highway_arrow.png',
            price: 1500,
            items: [
                {
                    key: 'decal-highway-arrow'
                },
                {
                    key: 'decal-highway-donotenter'
                },
                {
                    key: 'decal-highway-stop'
                }
            ]
        },
        {
            key: 'bundle-hi-roller',
            name: 'High Roller',
            thumbnail: '/assets/cosmetics/decals/decal_hi-roller_bullion.png',
            price: 2000,
            items: [
                {
                    key: 'decal-hi-roller-bullion'
                },
                {
                    key: 'decal-hi-roller-cherries'
                },
                {
                    key: 'decal-hi-roller-lucky7'
                },
                {
                    key: 'decal-hi-roller-sixes'
                }
            ]
        },
        {
            key: 'bundle-motherland',
            name: 'Motherland',
            thumbnail: '/assets/cosmetics/decals/decal_motherland_banner.png',
            price: 2000,
            items: [
                {
                    key: 'decal-motherland-banner'
                },
                {
                    key: 'decal-motherland-red-star'
                },
                {
                    key: 'decal-motherland-za-rodinu'
                }
            ]
        },
        {
            key: 'bundle-stylish',
            name: 'Stylish',
            thumbnail: '/assets/cosmetics/decals/decal_stylish_ouch.png',
            price: 3000,
            items: [
                {
                    key: 'decal-stylish-ouch'
                },
                {
                    key: 'decal-stylish-s'
                },
                {
                    key: 'decal-stylish-stug'
                }
            ]
        },
        {
            key: 'bundle-trickster',
            name: 'Trickster',
            thumbnail: '/assets/cosmetics/decals/decal_trickster_colossus.png',
            price: 1750,
            items: [
                {
                    key: 'decal-trickster-colossus'
                },
                {
                    key: 'decal-trickster-mine'
                },
                {
                    key: 'decal-trickster-repairkit'
                }
            ]
        },
        {
            key: 'bundle-taunts1',
            name: 'Taunts 1',
            thumbnail: '/assets/cosmetics/decals/decal_jumbo_killer.png',
            price: 2500,
            items: [
                {
                    key: 'decal-taunts1-jumbo-killer'
                },
                {
                    key: 'decal-taunts1-baka'
                },
                {
                    key: 'decal-taunts1-slowpoke'
                }
            ]
        },
        {
            key: 'bundle-taunts2',
            name: 'Taunts 2',
            thumbnail: '/assets/cosmetics/decals/decal_rear_armor_hit.png',
            price: 2500,
            items: [
                {
                    key: 'decal-taunts2-rear-armor-hit'
                },
                {
                    key: 'decal-taunts2-stupid'
                },
                {
                    key: 'decal-taunts2-we-deliver'
                }
            ]
        },
        {
            key: 'bundle-taunts3',
            name: 'Taunts 3',
            thumbnail: '/assets/cosmetics/decals/decal_hund_hunter.png',
            price: 2500,
            items: [
                {
                    key: 'decal-taunts3-hund-hunter'
                },
                {
                    key: 'decal-taunts3-flank-me'
                },
                {
                    key: 'decal-taunts3-front-toward-enemy'
                }
            ]
        },
        {
            key: 'bundle-space',
            name: 'Space',
            thumbnail: '/assets/cosmetics/decals/decal_space_astronaut.png',
            price: 2500,
            items: [
                {
                    key: 'decal-space-astronaut'
                },
                {
                    key: 'decal-space-ayy'
                },
                {
                    key: 'decal-space-meatball'
                }
            ]
        },
        {
            key: 'bundle-cow-decal',
            name: 'Cow',
            thumbnail: '/assets/cosmetics/decals/decal_cow_bovine.png',
            price: 2250,
            items: [
                {
                    key: 'decal-cow-bovine'
                },
                {
                    key: 'decal-cow-cowbell'
                },
                {
                    key: 'decal-cow-horns'
                }
            ]
        },
        {
            key: 'bundle-fungus',
            name: 'Fungus',
            thumbnail: '/assets/cosmetics/decals/decal_fungus_blue.png',
            price: 2250,
            items: [
                {
                    key: 'decal-fungus-blue'
                },
                {
                    key: 'decal-fungus-cluster'
                },
                {
                    key: 'decal-fungus-red'
                }
            ]
        },
        {
            key: 'bundle-streets1',
            name: 'Streets',
            thumbnail: '/assets/cosmetics/decals/decal_streets1_STUG.png',
            price: 2250,
            items: [
                {
                    key: 'decal-streets1-rattlecans'
                },
                {
                    key: 'decal-streets1-stug'
                },
                {
                    key: 'decal-streets1-sutagu'
                }
            ]
        },
        {
            key: 'bundle-decal-jersey',
            name: 'Jersey',
            thumbnail: '/assets/cosmetics/decals/decal_jersey_yellow-seven.png',
            price: 1500,
            items: [
                {
                    key: 'decal-jersey-yellow-seven'
                },
                {
                    key: 'decal-jersey-forty-six'
                },
                {
                    key: 'decal-jersey-big-ten'
                }
            ]
        },
        {
            key: 'bundle-decal-scars',
            name: 'Scars',
            thumbnail: '/assets/cosmetics/decals/decal_scars_scratch.png',
            price: 2250,
            items: [
                {
                    key: 'decal-scars-scratch'
                },
                {
                    key: 'decal-scars-bulletholes'
                },
                {
                    key: 'decal-scars-bandage'
                }
            ]
        },
    ],
    'skin': [
        {
            key: 'bundle-flames',
            name: 'Flames',
            thumbnail: '/assets/cosmetics/camo/premium/flames_1.png',
            price: 1750,
            items: [
                {
                    key: 'skin-flames1'
                },
                {
                    key: 'skin-flames2'
                },
                {
                    key: 'skin-flames3'
                }
            ]
        },
        {
            key: 'bundle-animals',
            name: 'Animals',
            thumbnail: '/assets/cosmetics/camo/premium/animal_tiger.png',
            price: 1400,
            items: [
                {
                    key: 'skin-animal-leopard'
                },
                {
                    key: 'skin-animal-tiger'
                },
                {
                    key: 'skin-animal-zebra'
                }
            ]
        },
        {
            key: 'bundle-fruits',
            name: 'Fruits',
            thumbnail: '/assets/cosmetics/camo/premium/fruit_banana.png',
            price: 1200,
            items: [
                {
                    key: 'skin-fruit-banana'
                },
                {
                    key: 'skin-fruit-orange'
                },
                {
                    key: 'skin-fruit-pineapple'
                }
            ]
        },
        {
            key: 'bundle-digital',
            name: 'Digital',
            thumbnail: '/assets/cosmetics/camo/premium/camo_digital_armydigitalpro.png',
            price: 1400,
            items: [
                {
                    key: 'skin-digital-army-digital'
                },
                {
                    key: 'skin-digital-green-digital'
                },
                {
                    key: 'skin-digital-marine-digital'
                }
            ]
        },
        {
            key: 'bundle-hearts',
            name: 'Hearts',
            thumbnail: '/assets/cosmetics/camo/premium/camo_hearts_sprinkle.png',
            price: 1200,
            items: [
                {
                    key: 'skin-heart-rows'
                },
                {
                    key: 'skin-heart-spots'
                },
                {
                    key: 'skin-heart-sprinkle'
                },
                {
                    key: 'skin-heart-zigzag'
                }
            ]
        },
        {
            key: 'bundle-kaiserliche',
            name: 'Kaiserliche',
            thumbnail: '/assets/cosmetics/camo/premium/camo_kaiserliche_flugzeug.png',
            price: 1600,
            items: [
                {
                    key: 'skin-kaiserliche-flugzeug'
                },
                {
                    key: 'skin-kaiserliche-lozenge'
                },
                {
                    key: 'skin-kaiserliche-trench'
                }
            ]
        },
        {
            key: 'bundle-cow-skin',
            name: 'Cow',
            thumbnail: '/assets/cosmetics/camo/premium/camo_cow_brown.png',
            price: 1300,
            items: [
                {
                    key: 'skin-cow-brown'
                },
                {
                    key: 'skin-cow-holstein'
                },
                {
                    key: 'skin-cow-spots'
                }
            ]
        },
        {
            key: 'bundle-party',
            name: 'Party',
            thumbnail: '/assets/cosmetics/camo/premium/camo_party_collage.png',
            price: 2000,
            items: [
                {
                    key: 'skin-party-collage'
                },
                {
                    key: 'skin-party-squiggle'
                },
                {
                    key: 'skin-party-pink'
                }
            ]
        },
        {
            key: 'bundle-plaid',
            name: 'Plaid',
            thumbnail: '/assets/cosmetics/camo/premium/camo_plaid_gingham.png',
            price: 1200,
            items: [
                {
                    key: 'skin-plaid-gingham'
                },
                {
                    key: 'skin-plaid-green'
                },
                {
                    key: 'skin-plaid-red'
                }
            ]
        },
        {
            key: 'bundle-holiday-digital',
            name: 'Holiday Digital',
            thumbnail: '/assets/cosmetics/camo/premium/holiday_digital1.png',
            price: 2000,
            disableSale: true,
            limitedTime: true,
            items: [
                {
                    key: 'skin-holiday-digital1'
                },
                {
                    key: 'skin-holiday-digital2'
                },
                {
                    key: 'skin-holiday-digital3'
                }
            ]
        },
        {
            key: 'bundle-holiday-holly',
            name: 'Holiday Holly',
            thumbnail: '/assets/cosmetics/camo/premium/holiday_holly1.png',
            price: 2500,
            disableSale: true,
            limitedTime: true,
            items: [
                {
                    key: 'skin-holiday-holly1'
                },
                {
                    key: 'skin-holiday-holly2'
                },
                {
                    key: 'skin-holiday-holly3'
                }
            ]
        },
        {
            key: 'bundle-holiday-splinter',
            name: 'Holiday Splinter',
            thumbnail: '/assets/cosmetics/camo/premium/holiday_splinter1.png',
            price: 2000,
            disableSale: true,
            limitedTime: true,
            items: [
                {
                    key: 'skin-holiday-splinter1'
                },
                {
                    key: 'skin-holiday-splinter2'
                },
                {
                    key: 'skin-holiday-splinter3'
                }
            ]
        },
        {
            key: 'bundle-holiday-sweater',
            name: 'Holiday Sweater',
            thumbnail: '/assets/cosmetics/camo/premium/holiday_sweater1.png',
            price: 2500,
            disableSale: true,
            limitedTime: true,
            items: [
                {
                    key: 'skin-holiday-sweater1'
                },
                {
                    key: 'skin-holiday-sweater2'
                },
                {
                    key: 'skin-holiday-sweater3'
                }
            ]
        },
        {
            key: 'bundle-camo-cubist',
            name: 'Cubist',
            thumbnail: '/assets/cosmetics/camo/premium/camo_cubist_purple.png',
            price: 2000,
            items: [
                {
                    key: 'skin-cubist-purple'
                },
                {
                    key: 'skin-cubist-splinter'
                },
                {
                    key: 'skin-cubist-tiles'
                }
            ]
        },
        {
            key: 'bundle-camo-flaming',
            name: 'Flaming',
            thumbnail: '/assets/cosmetics/camo/premium/camo_flaming_brush.png',
            price: 2500,
            items: [
                {
                    key: 'skin-flaming-brush'
                },
                {
                    key: 'skin-flaming-dark'
                },
                {
                    key: 'skin-flaming-spicy'
                }
            ]
        },
        {
            key: 'bundle-camo-ocean',
            name: 'Ocean',
            thumbnail: '/assets/cosmetics/camo/premium/camo_ocean_shallows.png',
            price: 2250,
            items: [
                {
                    key: 'skin-ocean-shallows'
                },
                {
                    key: 'skin-ocean-spiral'
                },
                {
                    key: 'skin-ocean-wave'
                }
            ]
        },
        {
            key: 'bundle-camo-retro',
            name: 'Retro',
            thumbnail: '/assets/cosmetics/camo/premium/camo_retro_disruptive.png',
            price: 2250,
            items: [
                {
                    key: 'skin-retro-disruptive'
                },
                {
                    key: 'skin-retro-grid'
                },
                {
                    key: 'skin-retro-terminal'
                }
            ]
        },
    ]
};
},{}],112:[function(require,module,exports){
const gamemodeMod = {
    'battle': {
        xpMod: 1.3
    },
    'random': {
        xpMod: 0.9
    }
};

const challenges = {
    'plays': {
        text: 'Finish ${req} games of ${gamemode}.',
        req: {
            easy: [3]
        },
        gamemode: ['conquest', 'battle', 'random'],
        xp: 500,
        onGameEnd: (client, stats) => {
            if (stats?.totals['Win'] || stats?.totals['Loss'] || stats?.totals['Draw']) {
                return 1;
            }
        }
    },
    'wins': {
        text: 'Win ${req} games of ${gamemode}.',
        req: {
            easy: [2],
            hard: [4]
        },
        gamemode: ['conquest', 'battle'],
        xp: 1500,
        onGameEnd: (client, stats) => {
            return stats?.totals['Win'];
        }
    },
    'captures': {
        text: 'Capture ${req} objectives in ${gamemode}.',
        req: {
            easy: [5, 10],
            hard: [20, 30]
        },
        gamemode: 'conquest',
        xp: 350,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Point Captured'];
        }
    },
    'kills': {
        text: 'Get ${req} kills in ${gamemode}.',
        req: {
            easy: [10, 15],
            hard: [20, 25]
        },
        gamemode: ['conquest', 'battle', 'random'],
        xp: 300,
        onKill: () => {
            return 1;
        }
    },
    'kills_heavy': {
        text: 'Get ${req} kills in a Heavy vehicle.',
        req: {
            easy: [10, 20],
            hard: [30, 40, 50]
        },
        xp: 250,
        onKill: (client, attacker) => {
            if (attacker?.getTankData()?.type === 'heavy') {
                return 1;
            }
        }
    },
    'kills_medium': {
        text: 'Get ${req} kills in a Medium vehicle.',
        req: {
            easy: [10, 20],
            hard: [30, 40, 50]
        },
        xp: 250,
        onKill: (client, attacker) => {
            if (attacker?.getTankData()?.type === 'medium') {
                return 1;
            }
        }
    },
    'kills_light': {
        text: 'Get ${req} kills in a Light vehicle.',
        req: {
            easy: [10, 20],
            hard: [30, 40, 50]
        },
        xp: 250,
        onKill: (client, attacker) => {
            if (attacker?.getTankData()?.type === 'light') {
                return 1;
            }
        }
    },
    'rear_kills': {
        text: 'Get ${req} rear shot kills in ${gamemode}.',
        req: {
            easy: [5, 10],
            hard: [15, 20]
        },
        gamemode: ['conquest', 'battle', 'random'],
        xp: 350,
        onKill: (client, attacker, victim, hitData) => {
            if (hitData?.hitType === 'rear') {
                return 1;
            }
        }
    },
    'incoming_ricochets': {
        text: 'Bounce ${req} shots off of your armor.',
        req: {
            easy: [10, 15],
            hard: [30]
        },
        xp: 250,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Incoming Ricochet'];
        }
    },
    'repair_kits': {
        text: 'Collect ${req} repair kits.',
        req: {
            easy: [25, 50],
            hard: [100]
        },
        xp: 100,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Repair Kit'];
        }
    },
    /*
    'grenade_kills': {
        text: 'Get ${req} grenade kills.',
        req: {
            easy: [2],
            hard: [6]
        },
        xp: 1250,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Grenade Kill'];
        }
    },
    */
    'repair_kills': {
        text: 'Kill ${req} enemies that are repairing.',
        req: {
            easy: [2],
            hard: [6]
        },
        xp: 1000,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Repair Kill'];
        }
    },
    'boosting_kills': {
        text: 'Kill ${req} enemies while boosting.',
        req: {
            easy: [5],
            hard: [8, 10]
        },
        xp: 400,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Boosting Kill'];
        }
    },
    'ricochet_kills': {
        text: 'Kill ${req} enemies with a ricochet shot.',
        req: {
            easy: [5],
            hard: [10, 15]
        },
        xp: 600,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Ricochet Kill'];
        }
    },
    /*
    'landmine_kills': {
        text: 'Kill ${req} enemies with landmines.',
        req: {
            easy: [5, 6],
            hard: [15, 20]
        },
        xp: 425,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Landmine Kill'];
        }
    },
    */
    'ram_kills': {
        text: 'Kill ${req} enemies by ramming them.',
        req: {
            easy: [3, 5],
            hard: [10, 15]
        },
        xp: 500,
        onStatsUpdated: (client, stats) => {
            return stats?.totals['Ram Kill'];
        }
    },
};

function copyChallenge(oldKey, newKey) {
    if (challenges[newKey]) {
        throw new Error('Challenge already exists: ' + newKey);
    } else {
        let challenge = challenges[oldKey];
        let copy = JSON.parse(JSON.stringify(challenge));
        let challengeKeys = Object.keys(challenge);
        for (let j=0; j<challengeKeys.length; j++) {
            let ck = challengeKeys[j];
            if (typeof challenge[ck] === 'function') {
                copy[ck] = challenge[ck];
            }
        }
        challenges[newKey] = copy;
        return copy;
    }
}

let keys = Object.keys(challenges);
for (let i=0; i<keys.length; i++) {
    let key = keys[i];
    let challenge = challenges[key];
    if (!challenge.text || !challenge.req || !Object.keys(challenge.req).length || !challenge.xp) {
        throw new Error('Invalid challenge: ' + key);
    }

    let challengeKeys = Object.keys(challenge);
    let hasFunction = false;
    for (let j=0; j<challengeKeys.length; j++) {
        let ck = challengeKeys[j];
        if (typeof challenge[ck] === 'function') {
            hasFunction = true;
            break;
        }
    }
    if (!hasFunction) {
        throw new Error('Challenge missing evaluation function: ' + key);
    }

    //Unroll challenges for different gamemodes.
    if (challenge.gamemode && Array.isArray(challenge.gamemode)) {
        for (let j=0; j<challenge.gamemode.length; j++) {
            let gamemode = challenge.gamemode[j];
            let newKey = key + '_' + gamemode;
            let newChallenge = copyChallenge(key, newKey);
            if (gamemodeMod[gamemode] && gamemodeMod[gamemode].xpMod) {
                newChallenge.xp = Math.round(newChallenge.xp * gamemodeMod[gamemode].xpMod);
            }
            newChallenge.gamemode = gamemode;
        }
        delete challenges[key];
    }
}

module.exports = challenges;
},{}],113:[function(require,module,exports){
module.exports = [
    {
        key: 'decal-dev',
        name: 'Dev',
        texture: 'cosmetics/decals/decal_dev.png',
    },
    {
        key: 'decal-star-white',
        name: 'White Star',
        texture: 'cosmetics/decals/decal_star_white.png',
    },
    {
        key: 'decal-cat1-calico',
        name: 'Calico',
        texture: 'cosmetics/decals/decal_cat1_calico.png'
    },
    {
        key: 'decal-cat1-kitty-shell',
        name: 'Kitty Shell',
        texture: 'cosmetics/decals/decal_cat1_kitty_shell.png'
    },
    {
        key: 'decal-cat1-scaredy-cat',
        name: 'Scaredy Cat',
        texture: 'cosmetics/decals/decal_cat1_scaredy-cat.png'
    },
    {
        key: 'decal-cat2-curious',
        name: 'Curious',
        texture: 'cosmetics/decals/decal_cat2_curious.png'
    },
    {
        key: 'decal-cat2-fatcat',
        name: 'Fat Cat',
        texture: 'cosmetics/decals/decal_cat2_fatcat.png'
    },
    {
        key: 'decal-cat2-void',
        name: 'Void',
        texture: 'cosmetics/decals/decal_cat2_void-cat.png'
    },
    {
        key: 'decal-eyes1-angry',
        name: 'Angry',
        texture: 'cosmetics/decals/decal_eyes1_angry.png'
    },
    {
        key: 'decal-eyes1-blue',
        name: 'Blue',
        texture: 'cosmetics/decals/decal_eyes1_blue.png'
    },
    {
        key: 'decal-eyes1-wings',
        name: 'Winged',
        texture: 'cosmetics/decals/decal_eyes1_wings.png'
    },
    {
        key: 'decal-gankyu-amber',
        name: 'Amber',
        texture: 'cosmetics/decals/decal_gankyu_amber.png'
    },
    {
        key: 'decal-gankyu-blue',
        name: 'Blue',
        texture: 'cosmetics/decals/decal_gankyu_blue.png'
    },
    {
        key: 'decal-gankyu-hearts',
        name: 'Hearts',
        texture: 'cosmetics/decals/decal_gankyu_hearts.png'
    },
    {
        key: 'decal-gankyu-smug',
        name: 'Smug',
        texture: 'cosmetics/decals/decal_gankyu_smug.png'
    },
    {
        key: 'decal-highway-arrow',
        name: 'Arrow',
        texture: 'cosmetics/decals/decal_highway_arrow.png'
    },
    {
        key: 'decal-highway-donotenter',
        name: 'Do Not Enter',
        texture: 'cosmetics/decals/decal_highway_donotenter.png'
    },
    {
        key: 'decal-highway-stop',
        name: 'Stop',
        texture: 'cosmetics/decals/decal_highway_stop.png'
    },
    {
        key: 'decal-hi-roller-bullion',
        name: 'Bullion',
        texture: 'cosmetics/decals/decal_hi-roller_bullion.png'
    },
    {
        key: 'decal-hi-roller-cherries',
        name: 'Cherries',
        texture: 'cosmetics/decals/decal_hi-roller_cherries.png'
    },
    {
        key: 'decal-hi-roller-lucky7',
        name: 'Lucky 7',
        texture: 'cosmetics/decals/decal_hi-roller_lucky7.png'
    },
    {
        key: 'decal-hi-roller-sixes',
        name: 'Sixes',
        texture: 'cosmetics/decals/decal_hi-roller_sixes.png'
    },
    {
        key: 'decal-motherland-banner',
        name: 'Banner',
        texture: 'cosmetics/decals/decal_motherland_banner.png'
    },
    {
        key: 'decal-motherland-red-star',
        name: 'Red Star',
        texture: 'cosmetics/decals/decal_motherland_red-star.png'
    },
    {
        key: 'decal-motherland-za-rodinu',
        name: 'ЗА РОДИНУ!',
        texture: 'cosmetics/decals/decal_motherland_za-rodinu.png'
    },
    {
        key: 'decal-stylish-ouch',
        name: 'Ouch!',
        texture: 'cosmetics/decals/decal_stylish_ouch.png'
    },
    {
        key: 'decal-stylish-s',
        name: 'S',
        texture: 'cosmetics/decals/decal_stylish_S.png'
    },
    {
        key: 'decal-stylish-stug',
        name: 'Stug',
        texture: 'cosmetics/decals/decal_stylish_stug.png'
    },
    {
        key: 'decal-trickster-colossus',
        name: 'Colossus',
        texture: 'cosmetics/decals/decal_trickster_colossus.png'
    },
    {
        key: 'decal-trickster-mine',
        name: 'Mine',
        texture: 'cosmetics/decals/decal_trickster_mine.png'
    },
    {
        key: 'decal-trickster-repairkit',
        name: 'Repair Kit',
        texture: 'cosmetics/decals/decal_trickster_repairkit.png'
    },
    {
        key: 'decal-taunts1-jumbo-killer',
        name: 'Jumbo Killer',
        texture: 'cosmetics/decals/decal_jumbo_killer.png'
    },
    {
        key: 'decal-taunts1-baka',
        name: 'Baka',
        texture: 'cosmetics/decals/decal_baka.png'
    },
    {
        key: 'decal-taunts1-slowpoke',
        name: 'Slow Poke',
        texture: 'cosmetics/decals/decal_slowpoke.png'
    },
    {
        key: 'decal-taunts2-stupid',
        name: 'Stupid',
        texture: 'cosmetics/decals/decal_stupid.png'
    },
    {
        key: 'decal-taunts2-rear-armor-hit',
        name: 'Rear Armor Hit',
        texture: 'cosmetics/decals/decal_rear_armor_hit.png'
    },
    {
        key: 'decal-taunts2-we-deliver',
        name: 'We Deliver',
        texture: 'cosmetics/decals/decal_we_deliver.png'
    },
    {
        key: 'decal-taunts3-hund-hunter',
        name: 'Hund Hunter',
        texture: 'cosmetics/decals/decal_hund_hunter.png'
    },
    {
        key: 'decal-taunts3-flank-me',
        name: 'Flank Me',
        texture: 'cosmetics/decals/decal_flank_me.png'
    },
    {
        key: 'decal-taunts3-front-toward-enemy',
        name: 'Front Toward Enemy',
        texture: 'cosmetics/decals/decal_front_toward_enemy.png'
    },
    {
        key: 'decal-halloween1-rip',
        name: 'RIP',
        texture: 'cosmetics/decals/decal_rip.png'
    },
    {
        key: 'decal-space-astronaut',
        name: 'Astronaut',
        texture: 'cosmetics/decals/decal_space_astronaut.png'
    },
    {
        key: 'decal-space-ayy',
        name: 'AYY',
        texture: 'cosmetics/decals/decal_space_ayy.png'
    },
    {
        key: 'decal-space-meatball',
        name: 'Space Ball',
        texture: 'cosmetics/decals/decal_space_meatball.png'
    },
    {
        key: 'decal-cow-bovine',
        name: 'Bovine',
        texture: 'cosmetics/decals/decal_cow_bovine.png'
    },
    {
        key: 'decal-cow-cowbell',
        name: 'Cowbell',
        texture: 'cosmetics/decals/decal_cow_cowbell.png'
    },
    {
        key: 'decal-cow-horns',
        name: 'Horns',
        texture: 'cosmetics/decals/decal_cow_horns.png'
    },
    {
        key: 'decal-fungus-blue',
        name: 'Fungus Blue',
        texture: 'cosmetics/decals/decal_fungus_blue.png'
    },
    {
        key: 'decal-fungus-cluster',
        name: 'Fungus Cluster',
        texture: 'cosmetics/decals/decal_fungus_cluster.png'
    },
    {
        key: 'decal-fungus-red',
        name: 'Fungus Red',
        texture: 'cosmetics/decals/decal_fungus_red.png'
    },
    {
        key: 'decal-streets1-rattlecans',
        name: 'Rattle Cans',
        texture: 'cosmetics/decals/decal_streets1_rattlecans.png'
    },
    {
        key: 'decal-streets1-stug',
        name: 'STUG',
        texture: 'cosmetics/decals/decal_streets1_STUG.png'
    },
    {
        key: 'decal-streets1-sutagu',
        name: 'SUTAGU',
        texture: 'cosmetics/decals/decal_streets1_SUTAGU.png'
    },
    {
        key: 'decal-jersey-yellow-seven',
        name: 'Jersey Yellow Seven',
        texture: 'cosmetics/decals/decal_jersey_yellow-seven.png'
    },
    {
        key: 'decal-jersey-forty-six',
        name: 'Jersey Forty Six',
        texture: 'cosmetics/decals/decal_jersey_forty-six.png'
    },
    {
        key: 'decal-jersey-big-ten',
        name: 'Jersey Big Ten',
        texture: 'cosmetics/decals/decal_jersey_big-ten.png'
    },
    {
        key: 'decal-scars-scratch',
        name: 'Scars Scratch',
        texture: 'cosmetics/decals/decal_scars_scratch.png'
    },
    {
        key: 'decal-scars-bulletholes',
        name: 'Scars Bullet Holes',
        texture: 'cosmetics/decals/decal_scars_bulletholes.png'
    },
    {
        key: 'decal-scars-bandage',
        name: 'Scars bandage',
        texture: 'cosmetics/decals/decal_scars_bandage.png'
    },
];
},{}],114:[function(require,module,exports){
module.exports = [
    {
        key: 'emote-affirmative',
        name: 'Affirmative',
        texture: 'emotes/emote_affirmative.png',
    },
    {
        key: 'emote-groupup',
        name: 'Group Up',
        texture: 'emotes/emote_groupup.png',
    },
    {
        key: 'emote-hello',
        name: 'Hello',
        texture: 'emotes/emote_hello.png',
    },
    {
        key: 'emote-helpme',
        name: 'Help Me',
        texture: 'emotes/emote_helpme.png',
    },
    {
        key: 'emote-thankyou',
        name: 'Thank You',
        texture: 'emotes/emote_thankyou.png',
    },
    {
        key: 'emote-gg',
        name: 'Good Game',
        texture: 'emotes/emote_gg.png',
    },
    {
        key: 'emote-heart',
        name: 'Heart',
        texture: 'emotes/emote_heart.png',
    },
    {
        key: 'emote-no',
        name: 'Negative',
        texture: 'emotes/emote_no.png',
    },
    {
        key: 'emote-peace',
        name: 'Peace',
        texture: 'emotes/emote_peace.png',
    },
    {
        key: 'emote-retreat',
        name: 'Retreat',
        texture: 'emotes/emote_retreat.png',
    },
    {
        key: 'emote-big-brain',
        name: 'Big Brain',
        price: 2000,
        thumbnail: 'emotes/premium/emote_bigbrain.gif',
        texture: 'emotes/premium/emote_bigbrain.png',
        animation: {
            loop: true,
            frameX: 4,
            frameY: 2
        }
    },
    {
        key: 'emote-locomotive',
        name: 'Locomotive',
        price: 2000,
        thumbnail: 'emotes/premium/emote_locomotive.gif',
        texture: 'emotes/premium/emote_locomotive.png',
        animation: {
            loop: true,
            frameX: 4,
            frameY: 2
        }
    },
    {
        key: 'emote-spilled-milk',
        name: 'Spilled Milk',
        price: 2000,
        thumbnail: 'emotes/premium/emote_spilledmilk.gif',
        texture: 'emotes/premium/emote_spilledmilk.png',
        animation: {
            loop: true,
            speed: 0.25,
            frameX: 4,
            frameY: 2
        }
    },
    {
        key: 'emote-spin-to-win',
        name: 'Spin to Win',
        price: 2000,
        thumbnail: 'emotes/premium/emote_spin_to_win.gif',
        texture: 'emotes/premium/emote_spin_to_win.png',
        animation: {
            loop: true,
            frameX: 4,
            frameY: 2,
            speed: 0.4
        }
    },
    {
        key: 'emote-total-cheese',
        name: 'Total Cheese',
        price: 2000,
        thumbnail: 'emotes/premium/emote_totalcheese.gif',
        texture: 'emotes/premium/emote_totalcheese.png',
        animation: {
            loop: true,
            frameX: 4,
            frameY: 2
        }
    },
    /*
    {
        key: 'emote-buy-gold-now',
        name: 'Gold',
        price: 1500,
        thumbnail: 'emotes/premium/emote_buygoldnow.gif',
        texture: 'emotes/premium/emote_buygoldnow.png',
        animation: {
            loop: true,
            frameX: 4,
            frameY: 2
        }
    },
    */
    {
        key: 'emote-salty',
        name: 'Salty',
        price: 3000,
        thumbnail: 'emotes/premium/emote_salty.gif',
        spine: 'emotes/premium/emote_salty.json',
        animation: {
            loop: true
        }
    },
    {
        key: 'emote-tabby',
        name: 'Tabby',
        price: 2000,
        thumbnail: 'emotes/premium/emote_tabby.gif',
        spine: 'emotes/premium/emote_tabby.json',
        animation: {
            loop: true
        }
    },
];
},{}],115:[function(require,module,exports){
const items = [
    {
        key: 'gold',
        category: 'gold',
        name: 'Gold',
        thumbnail: '/assets/goldicon_large.png',
        sort: -1
    },
    {
        key: 'consumable-boost-1-5',
        category: 'consumable',
        name: 'XP Boost x1.5',
        texture: '/assets/booster1.png',
        thumbnail: '/assets/booster1_thumbnail.png',
        canOwnMultiple: true,
        sound: 'booster1',
        xpMultiplier: 1.5,
        sort: 0,
        price: 150,
    },
    {
        key: 'consumable-boost-2',
        category: 'consumable',
        name: 'XP Boost x2',
        texture: '/assets/booster2.png',
        thumbnail: '/assets/booster2_thumbnail.png',
        canOwnMultiple: true,
        sound: 'booster2',
        xpMultiplier: 2,
        sort: 1,
        price: 400,
    },
    {
        key: 'consumable-boost-3',
        category: 'consumable',
        name: 'XP Boost x3',
        texture: '/assets/booster3.png',
        thumbnail: '/assets/booster3_thumbnail.png',
        canOwnMultiple: true,
        sound: 'booster3',
        xpMultiplier: 3,
        sort: 2,
        price: 850,
    },
    {
        key: 'consumable-boost-5',
        category: 'consumable',
        name: 'XP Boost x5',
        description: 'This x5 booster applies for all players on your team!',
        texture: '/assets/booster5.png',
        thumbnail: '/assets/booster5_thumbnail.png',
        canOwnMultiple: true,
        sound: 'booster3',
        xpMultiplier: 5,
        sort: 3,
        price: 10000,
    }
];
let skinList = require('./skin_list');
for (let i=0; i<skinList['Premium'].length; i++) {
    let skin = skinList['Premium'][i];
    items.push({
        key: skin.key,
        category: 'skin',
        name: skin.name,
        thumbnail: '/assets/' + skin.texture
    });
}

let decalList = require('./decal_list');
for (let i=0; i<decalList.length; i++) {
    let decal = decalList[i];
    items.push({
        key: decal.key,
        category: 'decal',
        name: decal.name,
        thumbnail: '/assets/' + decal.texture
    });
}

let emoteList = require('./emote_list');
for (let i=0; i<emoteList.length; i++) {
    let emote = emoteList[i];
    items.push({
        key: emote.key,
        category: 'emote',
        name: emote.name,
        thumbnail: '/assets/' + emote.thumbnail,
        price: emote.price ? emote.price : undefined,
    });
}

let vehicleList = require('./vehicle_list');
for (let i=0; i<vehicleList.length; i++) {
    let vehicle = vehicleList[i];
    items.push({
        key: vehicle.key,
        category: 'vehicle',
        name: vehicle.name,
        thumbnail: '/assets/vehicles/' + (vehicle.base ? vehicle.base + '/' : '') + vehicle.key + '/' + vehicle.key + '_thumbnail.png',
        price: vehicle.price
    });
}

let bundleList = require('./bundle_list');
let bundleCategories = Object.keys(bundleList);
for (let i=0; i<bundleCategories.length; i++) {
    let category = bundleCategories[i];
    let bundleCategory = bundleList[category];
    for (let j=0; j<bundleCategory.length; j++) {
        let bundle = bundleCategory[j];
        items.push({
            key: bundle.key,
            category: 'bundle',
            bundleType: category,
            name: bundle.name,
            thumbnail: bundle.thumbnail,
            price: bundle.price ? bundle.price : undefined,
            canOwnMultiple: bundle.canOwnMultiple,
            shouldUnpackBundle: bundle.shouldUnpackBundle,
            limitedTime: !!bundle.limitedTime,
            items: bundle.items
        });
    }
}

module.exports = items;
},{"./bundle_list":111,"./decal_list":113,"./emote_list":114,"./skin_list":116,"./vehicle_list":117}],116:[function(require,module,exports){
module.exports = {
    'Color': [
        {
            key: 'skin-olive',
            name: 'Olive',
            texture: 'cosmetics/camo/camo_olive.png',
            requirements: {
                'Win': 0
            }
        },
        {
            key: 'skin-gray',
            name: 'Gray',
            texture: 'cosmetics/camo/camo_gray.png',
            requirements: {
                'Win': 0
            }
        },
        {
            key: 'skin-copper',
            name: 'Copper',
            texture: 'cosmetics/camo/camo_copper.png',
            requirements: {
                'Win': 0
            }
        },
        {
            key: 'skin-birch',
            name: 'Birch',
            texture: 'cosmetics/camo/camo_birch.png',
            requirements: {
                'Win': 1
            }
        },
        {
            key: 'skin-khaki',
            name: 'Khaki',
            texture: 'cosmetics/camo/camo_khaki.png',
            requirements: {
                'Win': 3
            }
        },
        {
            key: 'skin-ash',
            name: 'Ash',
            texture: 'cosmetics/camo/camo_ash.png',
            requirements: {
                'Win': 6
            }
        },
        {
            key: 'skin-seafoam',
            name: 'Sea Foam',
            texture: 'cosmetics/camo/camo_seafoam.png',
            requirements: {
                'Win': 12
            }
        },
        {
            key: 'skin-snow',
            name: 'Snow',
            texture: 'cosmetics/camo/camo_snow.png',
            requirements: {
                'Win': 16
            }
        }
    ],
    'Woodland': [
        {
            key: 'skin-german',
            name: 'German',
            category: 'Camo',
            texture: 'cosmetics/camo/camo_german.png',
            requirements: { Kill: 1 }
        },
        {
            key: 'skin-swamp',
            name: 'Swamp',
            category: 'Camo',
            texture: 'cosmetics/camo/camo_swamp.png',
            requirements: { Kill: 3 }
        },
        {
            key: 'skin-camo_woodland_lightbrush',
            name: 'Lightbrush',
            texture: 'cosmetics/camo/Woodland/camo_woodland_lightbrush.png',
            requirements: { Kill: 5 }
        },
        {
            key: 'skin-camo_woodland_junglestripes',
            name: 'Junglestripes',
            texture: 'cosmetics/camo/Woodland/camo_woodland_junglestripes.png',
            requirements: { Kill: 10 }
        },
        {
            key: 'skin-camo_woodland_spackle',
            name: 'Spackle',
            texture: 'cosmetics/camo/Woodland/camo_woodland_spackle.png',
            requirements: { Kill: 15 }
        },
        {
            key: 'skin-camo_woodland_topsoil',
            name: 'Topsoil',
            texture: 'cosmetics/camo/Woodland/camo_woodland_topsoil.png',
            requirements: { Kill: 20 }
        },
        {
            key: 'skin-camo_woodland_estuary',
            name: 'Estuary',
            texture: 'cosmetics/camo/Woodland/camo_woodland_estuary.png',
            requirements: { Kill: 30 }
        },
        {
            key: 'skin-camo_woodland_clay',
            name: 'Clay',
            texture: 'cosmetics/camo/Woodland/camo_woodland_clay.png',
            requirements: { Kill: 50 }
        },
        {
            key: 'skin-camo_woodland_thicket',
            name: 'Thicket',
            texture: 'cosmetics/camo/Woodland/camo_woodland_thicket.png',
            requirements: { Kill: 100 }
        },
        {
            key: 'skin-camo_woodland_flakes',
            name: 'Flakes',
            texture: 'cosmetics/camo/Woodland/camo_woodland_flakes.png',
            requirements: { Kill: 125 }
        },
        {
            key: 'skin-camo_woodland_chaparral',
            name: 'Chaparral',
            texture: 'cosmetics/camo/Woodland/camo_woodland_chaparral.png',
            requirements: { Kill: 150 }
        },
        {
            key: 'skin-camo_woodland_splinter',
            name: 'Splinter',
            texture: 'cosmetics/camo/Woodland/camo_woodland_splinter.png',
            requirements: { Kill: 200 }
        },
        {
            key: 'skin-camo_woodland_bog',
            name: 'Bog',
            texture: 'cosmetics/camo/Woodland/camo_woodland_bog.png',
            requirements: { Kill: 300 }
        },
        {
            key: 'skin-camo_woodland_jungleblob',
            name: 'Jungleblob',
            texture: 'cosmetics/camo/Woodland/camo_woodland_jungleblob.png',
            requirements: { Kill: 350 }
        },
        {
            key: 'skin-camo_woodland_splitbrush',
            name: 'Splitbrush',
            texture: 'cosmetics/camo/Woodland/camo_woodland_splitbrush.png',
            requirements: { Kill: 400 }
        },
        {
            key: 'skin-camo_woodland_undergrowth',
            name: 'Undergrowth',
            texture: 'cosmetics/camo/Woodland/camo_woodland_undergrowth.png',
            requirements: { Kill: 450 }
        },
        {
            key: 'skin-camo_woodland_disruptive',
            name: 'Disruptive',
            texture: 'cosmetics/camo/Woodland/camo_woodland_disruptive.png',
            requirements: { Kill: 500 }
        },
        {
            key: 'skin-camo_woodland_brushstroke',
            name: 'Brushstroke',
            texture: 'cosmetics/camo/Woodland/camo_woodland_brushstroke.png',
            requirements: { Kill: 600 }
        },
        {
            key: 'skin-camo_woodland_ambush',
            name: 'Ambush',
            texture: 'cosmetics/camo/Woodland/camo_woodland_ambush.png',
            requirements: { Kill: 700 }
        },
        {
            key: 'skin-camo_woodland_greenbrush',
            name: 'Greenbrush',
            texture: 'cosmetics/camo/Woodland/camo_woodland_greenbrush.png',
            requirements: { Kill: 800 }
        },
        {
            key: 'skin-camo_woodland_shrub',
            name: 'Shrub',
            texture: 'cosmetics/camo/Woodland/camo_woodland_shrub.png',
            requirements: { Kill: 900 }
        },
        {
            key: 'skin-camo_woodland_junglebrush',
            name: 'Junglebrush',
            texture: 'cosmetics/camo/Woodland/camo_woodland_junglebrush.png',
            requirements: { Kill: 1000 }
        }
    ],
    'Desert': [
        {
            key: 'skin-desert',
            name: 'Desert',
            category: 'Camo',
            texture: 'cosmetics/camo/camo_desert.png',
            requirements: { 'Ram Kill': 5 }
        },
        {
            key: 'skin-camo_desert_desertsplinter',
            name: 'Desertsplinter',
            texture: 'cosmetics/camo/Desert/camo_desert_desertsplinter.png',
            requirements: { 'Ram Kill': 10 }
        },
        {
            key: 'skin-camo_desert_mustard',
            name: 'Mustard',
            texture: 'cosmetics/camo/Desert/camo_desert_mustard.png',
            requirements: { 'Ram Kill': 15 }
        },
        {
            key: 'skin-camo_desert_desertbrush',
            name: 'Desertbrush',
            texture: 'cosmetics/camo/Desert/camo_desert_desertbrush.png',
            requirements: { 'Ram Kill': 20 }
        },
        {
            key: 'skin-camo_desert_sanddune',
            name: 'Sanddune',
            texture: 'cosmetics/camo/Desert/camo_desert_sanddune.png',
            requirements: { 'Ram Kill': 25 }
        },
        {
            key: 'skin-camo_desert_canyonbrush',
            name: 'Canyonbrush',
            texture: 'cosmetics/camo/Desert/camo_desert_canyonbrush.png',
            requirements: { 'Ram Kill': 30 }
        },
        {
            key: 'skin-camo_desert_desertblot',
            name: 'Desertblot',
            texture: 'cosmetics/camo/Desert/camo_desert_desertblot.png',
            requirements: { 'Ram Kill': 35 }
        },
        {
            key: 'skin-camo_desert_clay',
            name: 'Clay',
            texture: 'cosmetics/camo/Desert/camo_desert_clay.png',
            requirements: { 'Ram Kill': 40 }
        },
        {
            key: 'skin-camo_desert_disruptivesand',
            name: 'Disruptivesand',
            texture: 'cosmetics/camo/Desert/camo_desert_disruptivesand.png',
            requirements: { 'Ram Kill': 50 }
        },
        {
            key: 'skin-camo_desert_oasis',
            name: 'Oasis',
            texture: 'cosmetics/camo/Desert/camo_desert_oasis.png',
            requirements: { 'Ram Kill': 80 }
        },
        {
            key: 'skin-camo_desert_rusty',
            name: 'Rusty',
            texture: 'cosmetics/camo/Desert/camo_desert_rusty.png',
            requirements: { 'Ram Kill': 100 }
        },
        {
            key: 'skin-camo_desert_wadi',
            name: 'Wadi',
            texture: 'cosmetics/camo/Desert/camo_desert_wadi.png',
            requirements: { 'Ram Kill': 150 }
        },
        {
            key: 'skin-camo_desert_dusty',
            name: 'Dusty',
            texture: 'cosmetics/camo/Desert/camo_desert_dusty.png',
            requirements: { 'Ram Kill': 200 }
        },
        {
            key: 'skin-camo_desert_desertambush',
            name: 'Desertambush',
            texture: 'cosmetics/camo/Desert/camo_desert_desertambush.png',
            requirements: { 'Ram Kill': 300 }
        },
        {
            key: 'skin-camo_desert_pixel',
            name: 'Pixel',
            texture: 'cosmetics/camo/Desert/camo_desert_pixel.png',
            requirements: { 'Ram Kill': 400 }
        },
        {
            key: 'skin-camo_desert_squiggle',
            name: 'Squiggle',
            texture: 'cosmetics/camo/Desert/camo_desert_squiggle.png',
            requirements: { 'Ram Kill': 500 }
        }
    ],
    'Urban': [
        {
            key: 'skin-camo_urban_disruptivecubic',
            name: 'Disruptivecubic',
            texture: 'cosmetics/camo/Urban/camo_urban_disruptivecubic.png',
            requirements: { 'Point Blank Hit Kill': 3 }
        },
        {
            key: 'skin-camo_urban_urban-t',
            name: 'Urban-t',
            texture: 'cosmetics/camo/Urban/camo_urban_urban-t.png',
            requirements: { 'Point Blank Hit Kill': 5 }
        },
        {
            key: 'skin-camo_urban_cinderblock',
            name: 'Cinderblock',
            texture: 'cosmetics/camo/Urban/camo_urban_cinderblock.png',
            requirements: { 'Point Blank Hit Kill': 10 }
        },
        {
            key: 'skin-camo_urban_mosaic',
            name: 'Mosaic',
            texture: 'cosmetics/camo/Urban/camo_urban_mosaic.png',
            requirements: { 'Point Blank Hit Kill': 20 }
        },
        {
            key: 'skin-camo_urban_splotch',
            name: 'Splotch',
            texture: 'cosmetics/camo/Urban/camo_urban_splotch.png',
            requirements: { 'Point Blank Hit Kill': 50 }
        },
        {
            key: 'skin-camo_urban_rubble',
            name: 'Rubble',
            texture: 'cosmetics/camo/Urban/camo_urban_rubble.png',
            requirements: { 'Point Blank Hit Kill': 80 }
        },
        {
            key: 'skin-camo_urban_fuzz',
            name: 'Fuzz',
            texture: 'cosmetics/camo/Urban/camo_urban_fuzz.png',
            requirements: { 'Point Blank Hit Kill': 100 }
        },
        {
            key: 'skin-camo_urban_purpleflow',
            name: 'Purpleflow',
            texture: 'cosmetics/camo/Urban/camo_urban_purpleflow.png',
            requirements: { 'Point Blank Hit Kill': 150 }
        },
        {
            key: 'skin-camo_urban_shatter',
            name: 'Shatter',
            texture: 'cosmetics/camo/Urban/camo_urban_shatter.png',
            requirements: { 'Point Blank Hit Kill': 200 }
        },
        {
            key: 'skin-camo_urban_citybrush',
            name: 'Citybrush',
            texture: 'cosmetics/camo/Urban/camo_urban_citybrush.png',
            requirements: { 'Point Blank Hit Kill': 250 }
        }
    ],
    'Alpine': [
        {
            key: 'skin-camo_alpine_avalanche',
            name: 'Avalanche',
            texture: 'cosmetics/camo/Alpine/camo_alpine_avalanche.png',
            requirements: { 'Long Shot Kill': 3 }
        },
        {
            key: 'skin-camo_alpine_glacier',
            name: 'Glacier',
            texture: 'cosmetics/camo/Alpine/camo_alpine_glacier.png',
            requirements: { 'Long Shot Kill': 5 }
        },
        {
            key: 'skin-camo_alpine_moss',
            name: 'Moss',
            texture: 'cosmetics/camo/Alpine/camo_alpine_moss.png',
            requirements: { 'Long Shot Kill': 10 }
        },
        {
            key: 'skin-camo_alpine_springspackle',
            name: 'Springspackle',
            texture: 'cosmetics/camo/Alpine/camo_alpine_springspackle.png',
            requirements: { 'Long Shot Kill': 25 }
        },
        {
            key: 'skin-camo_alpine_snowmelt',
            name: 'Snowmelt',
            texture: 'cosmetics/camo/Alpine/camo_alpine_snowmelt.png',
            requirements: { 'Long Shot Kill': 50 }
        },
        {
            key: 'skin-camo_alpine_snowdrift',
            name: 'Snowdrift',
            texture: 'cosmetics/camo/Alpine/camo_alpine_snowdrift.png',
            requirements: { 'Long Shot Kill': 75 }
        },
        {
            key: 'skin-camo_alpine_mud',
            name: 'Mud',
            texture: 'cosmetics/camo/Alpine/camo_alpine_mud.png',
            requirements: { 'Long Shot Kill': 100 }
        },
        {
            key: 'skin-camo_alpine_cliffside',
            name: 'Cliffside',
            texture: 'cosmetics/camo/Alpine/camo_alpine_cliffside.png',
            requirements: { 'Long Shot Kill': 150 }
        },
        {
            key: 'skin-camo_alpine_tundra',
            name: 'Tundra',
            texture: 'cosmetics/camo/Alpine/camo_alpine_tundra.png',
            requirements: { 'Long Shot Kill': 200 }
        },
        {
            key: 'skin-camo_alpine_winterspackle',
            name: 'Winterspackle',
            texture: 'cosmetics/camo/Alpine/camo_alpine_winterspackle.png',
            requirements: { 'Long Shot Kill': 300 }
        }

    ],
    'Dots': [
        {
            key: 'skin-camo_dots_assorted',
            name: 'Assorted',
            texture: 'cosmetics/camo/Dots/camo_dots_assorted.png',
            requirements: { 'Rear Armor Hit Kill': 3 }
        },
        {
            key: 'skin-pink',
            name: 'Pink',
            texture: 'cosmetics/camo/camo_pink.png',
            requirements: { 'Rear Armor Hit Kill': 5 }
        },
        {
            key: 'skin-camo_dots_stardots',
            name: 'Stardots',
            texture: 'cosmetics/camo/Dots/camo_dots_stardots.png',
            requirements: { 'Rear Armor Hit Kill': 10 }
        },
        {
            key: 'skin-camo_dots_lillypad',
            name: 'Lillypad',
            texture: 'cosmetics/camo/Dots/camo_dots_lillypad.png',
            requirements: { 'Rear Armor Hit Kill': 15 }
        },
        {
            key: 'skin-camo_dots_honeydrop',
            name: 'Honeydrop',
            texture: 'cosmetics/camo/Dots/camo_dots_honeydrop.png',
            requirements: { 'Rear Armor Hit Kill': 20 }
        },
        {
            key: 'skin-camo_dots_dancefloor',
            name: 'Dancefloor',
            texture: 'cosmetics/camo/Dots/camo_dots_dancefloor.png',
            requirements: { 'Rear Armor Hit Kill': 50 }
        },
        {
            key: 'skin-camo_dots_mixer',
            name: 'Mixer',
            texture: 'cosmetics/camo/Dots/camo_dots_mixer.png',
            requirements: { 'Rear Armor Hit Kill': 80 }
        },
        {
            key: 'skin-camo_dots_hydro',
            name: 'Hydro',
            texture: 'cosmetics/camo/Dots/camo_dots_hydro.png',
            requirements: { 'Rear Armor Hit Kill': 100 }
        },
        {
            key: 'skin-camo_dots_spotty',
            name: 'Spotty',
            texture: 'cosmetics/camo/Dots/camo_dots_spotty.png',
            requirements: { 'Rear Armor Hit Kill': 150 }
        },
        {
            key: 'skin-camo_dots_sky',
            name: 'Sky',
            texture: 'cosmetics/camo/Dots/camo_dots_sky.png',
            requirements: { 'Rear Armor Hit Kill': 200 }
        },
        {
            key: 'skin-camo_dots_polkadots',
            name: 'Polkadots',
            texture: 'cosmetics/camo/Dots/camo_dots_polkadots.png',
            requirements: { 'Rear Armor Hit Kill': 300 }
        },
        {
            key: 'skin-camo_dots_sugardots',
            name: 'Sugardots',
            texture: 'cosmetics/camo/Dots/camo_dots_sugardots.png',
            requirements: { 'Rear Armor Hit Kill': 400 }
        },
        {
            key: 'skin-camo_dots_sprinkle',
            name: 'Sprinkle',
            texture: 'cosmetics/camo/Dots/camo_dots_sprinkle.png',
            requirements: { 'Rear Armor Hit Kill': 500 }
        },
        {
            key: 'skin-camo_dots_bubbles',
            name: 'Bubbles',
            texture: 'cosmetics/camo/Dots/camo_dots_bubbles.png',
            requirements: { 'Rear Armor Hit Kill': 600 }
        },
        {
            key: 'skin-camo_dots_autumndots',
            name: 'Autumndots',
            texture: 'cosmetics/camo/Dots/camo_dots_autumndots.png',
            requirements: { 'Rear Armor Hit Kill': 800 }
        },
        {
            key: 'skin-camo_dots_cellular',
            name: 'Cellular',
            texture: 'cosmetics/camo/Dots/camo_dots_cellular.png',
            requirements: { 'Rear Armor Hit Kill': 1000 }
        }
    ],
    'Stripes': [
        {
            key: 'skin-stripes',
            name: 'Stripes',
            texture: 'cosmetics/camo/camo_stripes.png',
            requirements: { 'Ricochet Kill': 3 }
        },
        {
            key: 'skin-camo_stripes_wavyblue',
            name: 'Wavyblue',
            texture: 'cosmetics/camo/Stripes/camo_stripes_wavyblue.png',
            requirements: { 'Ricochet Kill': 5 }
        },
        {
            key: 'skin-camo_stripes_parallel',
            name: 'Parallel',
            texture: 'cosmetics/camo/Stripes/camo_stripes_parallel.png',
            requirements: { 'Ricochet Kill': 10 }
        },
        {
            key: 'skin-camo_stripes_trapezoid',
            name: 'Trapezoid',
            texture: 'cosmetics/camo/Stripes/camo_stripes_trapezoid.png',
            requirements: { 'Ricochet Kill': 15 }
        },
        {
            key: 'skin-camo_stripes_bluechevron',
            name: 'Bluechevron',
            texture: 'cosmetics/camo/Stripes/camo_stripes_bluechevron.png',
            requirements: { 'Ricochet Kill': 25 }
        },
        {
            key: 'skin-camo_stripes_treeline',
            name: 'Treeline',
            texture: 'cosmetics/camo/Stripes/camo_stripes_treeline.png',
            requirements: { 'Ricochet Kill': 50 }
        },
        {
            key: 'skin-camo_stripes_zigzag',
            name: 'Zigzag',
            texture: 'cosmetics/camo/Stripes/camo_stripes_zigzag.png',
            requirements: { 'Ricochet Kill': 75 }
        },
        {
            key: 'skin-camo_stripes_greenchecker',
            name: 'Greenchecker',
            texture: 'cosmetics/camo/Stripes/camo_stripes_greenchecker.png',
            requirements: { 'Ricochet Kill': 100 }
        },
        {
            key: 'skin-camo_stripes_heavystripe',
            name: 'Heavystripe',
            texture: 'cosmetics/camo/Stripes/camo_stripes_heavystripe.png',
            requirements: { 'Ricochet Kill': 150 }
        },
        {
            key: 'skin-camo_stripes_skinny',
            name: 'Skinny',
            texture: 'cosmetics/camo/Stripes/camo_stripes_skinny.png',
            requirements: { 'Ricochet Kill': 200 }
        },
        {
            key: 'skin-camo_stripes_wavypink',
            name: 'Wavypink',
            texture: 'cosmetics/camo/Stripes/camo_stripes_wavypink.png',
            requirements: { 'Ricochet Kill': 250 }
        },
        {
            key: 'skin-camo_stripes_deepblue',
            name: 'Deepblue',
            texture: 'cosmetics/camo/Stripes/camo_stripes_deepblue.png',
            requirements: { 'Ricochet Kill': 300 }
        },
        {
            key: 'skin-camo_stripes_narrow',
            name: 'Narrow',
            texture: 'cosmetics/camo/Stripes/camo_stripes_narrow.png',
            requirements: { 'Ricochet Kill': 350 }
        },
        {
            key: 'skin-camo_stripes_redchevron',
            name: 'Redchevron',
            texture: 'cosmetics/camo/Stripes/camo_stripes_redchevron.png',
            requirements: { 'Ricochet Kill': 400 }
        },
        {
            key: 'skin-camo_stripes_pinkstripe',
            name: 'Pinkstripe',
            texture: 'cosmetics/camo/Stripes/camo_stripes_pinkstripe.png',
            requirements: { 'Ricochet Kill': 450 }
        },
        {
            key: 'skin-camo_stripes_bluediamond',
            name: 'Bluediamond',
            texture: 'cosmetics/camo/Stripes/camo_stripes_bluediamond.png',
            requirements: { 'Ricochet Kill': 500 }
        },
        {
            key: 'skin-camo_stripes_pinkchecker',
            name: 'Pinkchecker',
            texture: 'cosmetics/camo/Stripes/camo_stripes_pinkchecker.png',
            requirements: { 'Ricochet Kill': 600 }
        },
        {
            key: 'skin-camo_stripes_reddiamond',
            name: 'Reddiamond',
            texture: 'cosmetics/camo/Stripes/camo_stripes_reddiamond.png',
            requirements: { 'Ricochet Kill': 700 }
        },
        {
            key: 'skin-camo_stripes_sunbeam',
            name: 'Sunbeam',
            texture: 'cosmetics/camo/Stripes/camo_stripes_sunbeam.png',
            requirements: { 'Ricochet Kill': 800 }
        },
        {
            key: 'skin-camo_stripes_blockstripe',
            name: 'Blockstripe',
            texture: 'cosmetics/camo/Stripes/camo_stripes_blockstripe.png',
            requirements: { 'Ricochet Kill': 900 }
        },
        {
            key: 'skin-camo_stripes_parallelogram',
            name: 'Parallelogram',
            texture: 'cosmetics/camo/Stripes/camo_stripes_parallelogram.png',
            requirements: { 'Ricochet Kill': 1000 }
        }
    ],
    'Dazzle': [
        {
            key: 'skin-dazzle',
            name: 'Dazzle',
            category: 'Camo',
            texture: 'cosmetics/camo/camo_dazzle.png',
            requirements: { 'Boosting Kill': 2 }
        },
        {
            key: 'skin-camo_dazzle_spearmint',
            name: 'Spearmint',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_spearmint.png',
            requirements: { 'Boosting Kill': 3 }
        },
        {
            key: 'skin-camo_dazzle_brushdazzle',
            name: 'Brushdazzle',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_brushdazzle.png',
            requirements: { 'Boosting Kill': 5 }
        },
        {
            key: 'skin-camo_dazzle_autumnshatter',
            name: 'Autumnshatter',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_autumnshatter.png',
            requirements: { 'Boosting Kill': 10 }
        },
        {
            key: 'skin-camo_dazzle_sandstone',
            name: 'Sandstone',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_sandstone.png',
            requirements: { 'Boosting Kill': 25 }
        },
        {
            key: 'skin-camo_dazzle_pinkshatter',
            name: 'Pinkshatter',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_pinkshatter.png',
            requirements: { 'Boosting Kill': 50 }
        },
        {
            key: 'skin-camo_dazzle_frozenlake',
            name: 'Frozenlake',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_frozenlake.png',
            requirements: { 'Boosting Kill': 75 }
        },
        {
            key: 'skin-camo_dazzle_purplebark',
            name: 'Purplebark',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_purplebark.png',
            requirements: { 'Boosting Kill': 100 }
        },
        {
            key: 'skin-camo_dazzle_spicydazzle',
            name: 'Spicydazzle',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_spicydazzle.png',
            requirements: { 'Boosting Kill': 150 }
        },
        {
            key: 'skin-camo_dazzle_littoral',
            name: 'Littoral',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_littoral.png',
            requirements: { 'Boosting Kill': 200 }
        },
        {
            key: 'skin-camo_dazzle_greenshatter',
            name: 'Greenshatter',
            texture: 'cosmetics/camo/Dazzle/camo_dazzle_greenshatter.png',
            requirements: { 'Boosting Kill': 250 }
        }
    ],
    'Skulls': [
        {
            key: 'skin-camo_skulls_decomposed',
            name: 'Decomposed',
            texture: 'cosmetics/camo/Skulls/camo_skulls_decomposed.png',
            requirements: { 'Beyond the Grave Kill': 2 }
        },
        {
            key: 'skin-camo_skulls_apparition',
            name: 'Apparition',
            texture: 'cosmetics/camo/Skulls/camo_skulls_apparition.png',
            requirements: { 'Beyond the Grave Kill': 5 }
        },
        {
            key: 'skin-camo_skulls_autumnskulls',
            name: 'Autumnskulls',
            texture: 'cosmetics/camo/Skulls/camo_skulls_autumnskulls.png',
            requirements: { 'Beyond the Grave Kill': 10 }
        },
        {
            key: 'skin-camo_skulls_deadlock',
            name: 'Deadlock',
            texture: 'cosmetics/camo/Skulls/camo_skulls_deadlock.png',
            requirements: { 'Beyond the Grave Kill': 15 }
        },
        {
            key: 'skin-camo_skulls_lich',
            name: 'Lich',
            texture: 'cosmetics/camo/Skulls/camo_skulls_lich.png',
            requirements: { 'Beyond the Grave Kill': 20 }
        },
        {
            key: 'skin-camo_skulls_ethereal',
            name: 'Ethereal',
            texture: 'cosmetics/camo/Skulls/camo_skulls_ethereal.png',
            requirements: { 'Beyond the Grave Kill': 25 }
        },
        {
            key: 'skin-camo_skulls_bonepile',
            name: 'Bonepile',
            texture: 'cosmetics/camo/Skulls/camo_skulls_bonepile.png',
            requirements: { 'Beyond the Grave Kill': 50 }
        },
        {
            key: 'skin-camo_skulls_phantom',
            name: 'Phantom',
            texture: 'cosmetics/camo/Skulls/camo_skulls_phantom.png',
            requirements: { 'Beyond the Grave Kill': 100 }
        },
        {
            key: 'skin-camo_skulls_numskull',
            name: 'Numskull',
            texture: 'cosmetics/camo/Skulls/camo_skulls_numskull.png',
            requirements: { 'Beyond the Grave Kill': 150 }
        },
        {
            key: 'skin-camo_skulls_tortured',
            name: 'Tortured',
            texture: 'cosmetics/camo/Skulls/camo_skulls_tortured.png',
            requirements: { 'Beyond the Grave Kill': 200 }
        }
    ],
    'Special': [
        {
            key: 'skin-taco',
            name: 'Taco',
            texture: 'cosmetics/camo/camo_taco.png',
            requirements: {
                'Repair Kit': 50
            }
        }
    ],
    'Premium': [
        {
            key: 'skin-flames1',
            name: 'Flames 1',
            texture: 'cosmetics/camo/premium/flames_1.png'
        },
        {
            key: 'skin-flames2',
            name: 'Flames 2',
            texture: 'cosmetics/camo/premium/flames_2.png'
        },
        {
            key: 'skin-flames3',
            name: 'Flames 3',
            texture: 'cosmetics/camo/premium/flames_3.png'
        },
        {
            key: 'skin-animal-leopard',
            name: 'Leopard',
            texture: 'cosmetics/camo/premium/animal_leopard.png'
        },
        {
            key: 'skin-animal-tiger',
            name: 'Tiger',
            texture: 'cosmetics/camo/premium/animal_tiger.png'
        },
        {
            key: 'skin-animal-zebra',
            name: 'Zebra',
            texture: 'cosmetics/camo/premium/animal_zebra.png'
        },
        {
            key: 'skin-fruit-banana',
            name: 'Bananas',
            texture: 'cosmetics/camo/premium/fruit_banana.png'
        },
        {
            key: 'skin-fruit-orange',
            name: 'Oranges',
            texture: 'cosmetics/camo/premium/fruit_orange.png'
        },
        {
            key: 'skin-fruit-pineapple',
            name: 'Pineapples',
            texture: 'cosmetics/camo/premium/fruit_pineapple.png'
        },
        {
            key: 'skin-digital-army-digital',
            name: 'Army Digital',
            texture: 'cosmetics/camo/premium/camo_digital_armydigitalpro.png'
        },
        {
            key: 'skin-digital-green-digital',
            name: 'Green Digital',
            texture: 'cosmetics/camo/premium/camo_digital_greendigitalpro.png'
        },
        {
            key: 'skin-digital-marine-digital',
            name: 'Marine Digital',
            texture: 'cosmetics/camo/premium/camo_digital_marinedigitalpro.png'
        },
        {
            key: 'skin-heart-rows',
            name: 'Heart Rows',
            texture: 'cosmetics/camo/premium/camo_hearts_rowsOLD.png'
        },
        {
            key: 'skin-heart-spots',
            name: 'Heart Spots',
            texture: 'cosmetics/camo/premium/camo_hearts_spots.png'
        },
        {
            key: 'skin-heart-sprinkle',
            name: 'Heart Sprinkle',
            texture: 'cosmetics/camo/premium/camo_hearts_sprinkle.png'
        },
        {
            key: 'skin-heart-zigzag',
            name: 'Heart Zigzag',
            texture: 'cosmetics/camo/premium/camo_hearts_zigzag.png'
        },
        {
            key: 'skin-kaiserliche-flugzeug',
            name: 'Kaiserliche Flugzeug',
            texture: 'cosmetics/camo/premium/camo_kaiserliche_flugzeug.png'
        },
        {
            key: 'skin-kaiserliche-lozenge',
            name: 'Kaiserliche Lozenge',
            texture: 'cosmetics/camo/premium/camo_kaiserliche_lozenge.png'
        },
        {
            key: 'skin-kaiserliche-trench',
            name: 'Kaiserliche Trench',
            texture: 'cosmetics/camo/premium/camo_kaiserliche_trench.png'
        },
        {
            key: 'skin-halloween1-digital',
            name: 'Halloween Digital',
            texture: 'cosmetics/camo/premium/camo_halloween_digital.png'
        },
        {
            key: 'skin-cow-brown',
            name: 'Cow Brown',
            texture: 'cosmetics/camo/premium/camo_cow_brown.png'
        },
        {
            key: 'skin-cow-holstein',
            name: 'Cow Holstein',
            texture: 'cosmetics/camo/premium/camo_cow_holstein.png'
        },
        {
            key: 'skin-cow-spots',
            name: 'Cow Spots',
            texture: 'cosmetics/camo/premium/camo_cow_spots.png'
        },
        {
            key: 'skin-party-collage',
            name: 'Party Collage',
            texture: 'cosmetics/camo/premium/camo_party_collage.png'
        },
        {
            key: 'skin-party-squiggle',
            name: 'Party Squiggle',
            texture: 'cosmetics/camo/premium/camo_party_squiggle.png'
        },
        {
            key: 'skin-party-pink',
            name: 'Party Pink',
            texture: 'cosmetics/camo/premium/camo_party_pink.png'
        },
        {
            key: 'skin-plaid-gingham',
            name: 'Plaid Gingham',
            texture: 'cosmetics/camo/premium/camo_plaid_gingham.png'
        },
        {
            key: 'skin-plaid-green',
            name: 'Plaid Green',
            texture: 'cosmetics/camo/premium/camo_plaid_green.png'
        },
        {
            key: 'skin-plaid-red',
            name: 'Plaid Red',
            texture: 'cosmetics/camo/premium/camo_plaid_red.png'
        },
        {
            key: 'skin-holiday-digital1',
            name: 'Holiday Digital 1',
            texture: 'cosmetics/camo/premium/holiday_digital1.png'
        },
        {
            key: 'skin-holiday-digital2',
            name: 'Holiday Digital 2',
            texture: 'cosmetics/camo/premium/holiday_digital2.png'
        },
        {
            key: 'skin-holiday-digital3',
            name: 'Holiday Digital 3',
            texture: 'cosmetics/camo/premium/holiday_digital3.png'
        },
        {
            key: 'skin-holiday-holly1',
            name: 'Holiday Holly 1',
            texture: 'cosmetics/camo/premium/holiday_holly1.png'
        },
        {
            key: 'skin-holiday-holly2',
            name: 'Holiday Holly 2',
            texture: 'cosmetics/camo/premium/holiday_holly2.png'
        },
        {
            key: 'skin-holiday-holly3',
            name: 'Holiday Holly 3',
            texture: 'cosmetics/camo/premium/holiday_holly3.png'
        },
        {
            key: 'skin-holiday-splinter1',
            name: 'Holiday Splinter 1',
            texture: 'cosmetics/camo/premium/holiday_splinter1.png'
        },
        {
            key: 'skin-holiday-splinter2',
            name: 'Holiday Splinter 2',
            texture: 'cosmetics/camo/premium/holiday_splinter2.png'
        },
        {
            key: 'skin-holiday-splinter3',
            name: 'Holiday Splinter 3',
            texture: 'cosmetics/camo/premium/holiday_splinter3.png'
        },
        {
            key: 'skin-holiday-sweater1',
            name: 'Holiday Sweater Shell',
            texture: 'cosmetics/camo/premium/holiday_sweater1.png'
        },
        {
            key: 'skin-holiday-sweater2',
            name: 'Holiday Sweater Tank',
            texture: 'cosmetics/camo/premium/holiday_sweater2.png'
        },
        {
            key: 'skin-holiday-sweater3',
            name: 'Holiday Sweater Lights',
            texture: 'cosmetics/camo/premium/holiday_sweater3.png'
        },
        {
            key: 'skin-cubist-purple',
            name: 'Cubist Purple',
            texture: 'cosmetics/camo/premium/camo_cubist_purple.png'
        },
        {
            key: 'skin-cubist-splinter',
            name: 'Cubist Splinter',
            texture: 'cosmetics/camo/premium/camo_cubist_splinter.png'
        },
        {
            key: 'skin-cubist-tiles',
            name: 'Cubist Tiles',
            texture: 'cosmetics/camo/premium/camo_cubist_tiles.png'
        },
        {
            key: 'skin-flaming-brush',
            name: 'Flaming Brush',
            texture: 'cosmetics/camo/premium/camo_flaming_brush.png'
        },
        {
            key: 'skin-flaming-dark',
            name: 'Flaming Dark',
            texture: 'cosmetics/camo/premium/camo_flaming_dark.png'
        },
        {
            key: 'skin-flaming-spicy',
            name: 'Flaming Spicy',
            texture: 'cosmetics/camo/premium/camo_flaming_spicy.png'
        },
        {
            key: 'skin-ocean-shallows',
            name: 'Ocean Shallows',
            texture: 'cosmetics/camo/premium/camo_ocean_shallows.png'
        },
        {
            key: 'skin-ocean-spiral',
            name: 'Ocean Spiral',
            texture: 'cosmetics/camo/premium/camo_ocean_spiral.png'
        },
        {
            key: 'skin-ocean-wave',
            name: 'Ocean Wave',
            texture: 'cosmetics/camo/premium/camo_ocean_wave.png'
        },
        {
            key: 'skin-retro-disruptive',
            name: 'Retro Disruptive',
            texture: 'cosmetics/camo/premium/camo_retro_disruptive.png'
        },
        {
            key: 'skin-retro-grid',
            name: 'Retro Grid',
            texture: 'cosmetics/camo/premium/camo_retro_grid.png'
        },
        {
            key: 'skin-retro-terminal',
            name: 'Retro Terminal',
            texture: 'cosmetics/camo/premium/camo_retro_terminal.png'
        },
    ]
};
},{}],117:[function(require,module,exports){
module.exports = [
    {
        key: 'p_34_76_motherland',
        base: 'p_34_76',
        name: 'Motherland',
        price: 3500,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'light_scout_racecar',
        base: 'light_scout',
        name: 'Racecar',
        price: 3500,
        shop: {
            bgx: 1,
            bgy: 0
        }
    },
    {
        key: 'pike_spg_snail',
        base: 'pike_spg',
        name: 'Snail',
        price: 3500,
        shop: {
            bgx: 1,
            bgy: 1
        }
    },
    {
        key: 'light_tank_sushi',
        base: 'light_tank',
        name: 'Sushi',
        price: 3500,
        shop: {
            bgx: 3,
            bgy: 0
        }
    },
    {
        key: 'medium_tank_hotdog',
        base: 'medium_tank',
        name: 'Hot Dog',
        price: 3500,
        shop: {
            bgx: 1,
            bgy: 1
        }
    },
    {
        key: 'cy122_gunboat',
        base: 'cy122',
        name: 'Pirate',
        price: 3800,
        shop: {
            bgx: 7,
            bgy: 1
        }
    },
    {
        key: 'm4_jumbo_large_iron',
        base: 'm4_jumbo',
        name: 'Large Iron',
        price: 4500,
        shop: {
            bgx: 0,
            bgy: 1
        }
    },
    {
        key: 'pt5_mantid',
        base: 'pt5',
        name: 'Mantid',
        price: 4000,
        shop: {
            bgx: 1,
            bgy: 1
        }
    },
    {
        key: 'assault_gun_dryad',
        base: 'assault_gun',
        name: 'Dryad',
        price: 4000,
        shop: {
            bgx: 1,
            bgy: 1
        }
    },
    {
        key: 'tigur1_cat',
        base: 'tigur1',
        name: 'Tiger Cat',
        price: 5000,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'panthur_cat',
        base: 'panthur',
        name: 'Black Cat',
        price: 5000,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'light_scout_rover',
        base: 'light_scout',
        name: 'Rover',
        price: 4000,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'cy76_firetruck',
        base: 'cy76',
        name: 'Firetruck',
        price: 3600,
        shop: {
            bgx: 1,
            bgy: 0
        }
    },
    {
        key: 'hefty_mk1_slimy',
        base: 'hefty_mk1',
        name: 'Slimy Mk. I',
        price: 3200,
        shop: {
            bgx: 1,
            bgy: 1
        }
    },
    {
        key: 'vk_2_warthog',
        base: 'vk_2',
        name: 'Warthog',
        price: 7500,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'jagdsherwin_ambush',
        base: 'jagdsherwin',
        name: 'Ambush',
        price: 4500,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'm4_jumbo_furious',
        base: 'm4_jumbo',
        name: 'Furious',
        price: 5000,
        shop: {
            bgx: 0,
            bgy: 1
        }
    },
    {
        key: 'tigress_desert_ace',
        base: 'tigur1',
        name: 'Desert Ace',
        price: 10000,
        disablePurchaseInShop: true,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'heckler_bocage_ace',
        base: 'heckler',
        name: 'Bocage Ace',
        price: 10000,
        disablePurchaseInShop: true,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'cheetah_rattler',
        base: 'cheetah',
        name: 'Rattler',
        price: 10000,
        disablePurchaseInShop: true,
        shop: {
            bgx: 0,
            bgy: 1
        }
    },
    {
        key: 'weevil_mkv_pumpkin',
        base: 'weevil_mkv',
        name: 'Pumpkin',
        price: 10000,
        disablePurchaseInShop: true,
        shop: {
            bgx: 0,
            bgy: 1
        }
    },
    {
        key: 'hamonag_at_death_clown',
        base: 'hamonag_at',
        name: 'Death Clown',
        price: 4500,
        shop: {
            bgx: 1,
            bgy: 0
        }
    },
    {
        key: 'm88_greyman_gunboat',
        base: 'm88_greyman',
        name: 'Gunboat',
        price: 5500,
        shop: {
            bgx: 3,
            bgy: 1
        }
    },
    {
        key: 'medium_halftrack_jungle',
        base: 'medium_halftrack',
        name: 'Jungle',
        price: 3500,
        shop: {
            bgx: 2,
            bgy: 1
        }
    },
    {
        key: 'si_2_wasteland',
        base: 'si_2',
        name: 'Wasteland',
        price: 5500,
        shop: {
            bgx: 0,
            bgy: 0
        }
    },
    {
        key: 'vk_1_imperial',
        base: 'vk_1',
        name: 'Imperial',
        price: 4500,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'm4_sherwin_pixel',
        base: 'm4_sherwin',
        name: 'Pixel',
        price: 3500,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'm42_chuffy_pixel',
        base: 'm42_chuffy',
        name: 'Pixel',
        price: 3000,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'p_34_85_pixel',
        base: 'p_34_85',
        name: 'Pixel',
        price: 4200,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'pummeler_iv_pixel',
        base: 'pummeler_iv',
        name: 'Pixel',
        price: 3000,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'assault_gun_pixel',
        base: 'assault_gun',
        name: 'Pixel',
        price: 4000,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'p_34_85_renegade',
        base: 'p_34_85',
        name: 'Renegade',
        price: 10000,
        disablePurchaseInShop: true,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
    {
        key: 'pummeler_ii_roadcaptain',
        base: 'pummeler_ii',
        name: 'Road Captain',
        price: 10000,
        disablePurchaseInShop: true,
        shop: {
            bgx: 2,
            bgy: 0
        }
    },
];
},{}],118:[function(require,module,exports){
const p2 = require('p2');
const collisionGroups = require('./collision_groups');
const PENETRATION_ANGLE =  Math.PI/1.75;
const PENETRATION_ANGLE_STATIC = degrees_to_radians(75);
const MAX_BOUNCE_AMOUNT = 4;
const MAX_SHELL_DISTANCE = 1600;
function degrees_to_radians(degrees)
{
    var pi = Math.PI;
    return degrees * (pi/180);
}

module.exports = function(subtype, x, y, z, rotation, width, height, team, netData) {
    const server = this;

    if (!netData) {
        netData = {};
    }
    let entity = server.createEntity('actor', subtype, x, y, z, rotation, width, height, -1, netData);
    entity.keys = {};

    let shape = new p2.Circle({radius: width*0.35});
    shape.collisionGroup = collisionGroups.PLAYER;
    shape.collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER;

    entity.body = new p2.Body({mass: 3, position: [x, -y], angle: -entity.rotation});
    entity.body.addShape(shape);
    entity.body.damping = 0.95;
    entity.body.entity = entity;
    server.world.addBody(entity.body);

    entity.turretTargetRotation = 0;

    let oldTick = entity.tick;
    entity.tick = () => {
        entity.x = entity.body.position[0];
        entity.y = -entity.body.position[1];
        entity.rotation = -entity.body.angle;


        let force = 220;
        if (entity.currentPlayer && entity.currentPlayer.isBot) {
            let moveAngle = entity.turretTargetRotation;
            entity.body.applyForce([Math.cos(moveAngle) * force, Math.sin(moveAngle) * -force]);
        } else {
            let movePos = {x: 0, y: 0};
            if (entity.keys[87]) {
                movePos.y = -1;
            } else if (entity.keys[83]) {
                movePos.y = 1;
            }

            if (entity.keys[65]) {
                movePos.x = -1;
            } else if (entity.keys[68]) {
                movePos.x = 1;
            }

            if (movePos.x || movePos.y) {
                let moveAngle = Math.angleBetween({x: 0, y: 0}, movePos);
                entity.body.applyForce([Math.cos(moveAngle) * force, Math.sin(moveAngle) * -force]);
            }
        }

        entity.body.angle = -entity.turretTargetRotation;

        oldTick();
        if (entity.netData.alive) {
            entity.sendMoveUpdate = true;
        }
    };

    entity.collision = (body) => {

    };

    let rayClosest = new p2.Ray({
        mode: p2.Ray.CLOSEST,
        collisionGroup: collisionGroups.HITBOX,
        collisionMask: collisionGroups.OTHER | collisionGroups.HITBOX | collisionGroups.PLAYER,
        skipBackfaces: true
    });

    let raycastResult = new p2.RaycastResult();
    entity.performRaycast = (start, end) => {
        p2.vec2.copy(rayClosest.from, start);
        p2.vec2.copy(rayClosest.to, end);
        rayClosest.update();
        raycastResult.reset();
        server.world.raycast(raycastResult, rayClosest);
        return raycastResult;
    };

    let hitPoint = p2.vec2.create();
    entity.traceShell = (from, to, paths, traceCount) => {
        let raycast = entity.performRaycast(from, to);
        raycast.getHitPoint(hitPoint, rayClosest);

        let testedHit = null;
        if (traceCount === 0) {
            let hitTests = server.world.hitTest(from, server.world.bodies);
            if (hitTests && hitTests[0]) {
                testedHit = hitTests[0];
                if (testedHit && testedHit.entity && testedHit.entity === entity) {
                    testedHit = null;
                }
                if (testedHit && entity.ignoreInteralTerrainShot && testedHit.entity && testedHit.entity.type === 'static_object') {
                    testedHit = null;
                }
            }
        }

        if (testedHit) {
            raycast.set(
                0,
                testedHit.shapes[0],
                testedHit,
                0.01,
                0
            );
            raycast.getHitPoint(hitPoint, rayClosest);
        }

        let outTo = {x: to[0], y: to[1]};
        if (raycast.hasHit()) {
            outTo.x = hitPoint[0];
            outTo.y = hitPoint[1];
        }

        paths.push({
            from: {
                x: from[0],
                y: -from[1]
            },
            to: {
                x: outTo.x,
                y: -outTo.y
            },
            normal: [
                raycast.normal[0],
                -raycast.normal[1]
            ]
        });

        if (raycast.hasHit()) {
            p2.vec2.reflect(rayClosest.direction, rayClosest.direction, raycast.normal);

            let hitAngle = Math.angleBetween(outTo, {
                x: from[0],
                y: from[1]
            });

            let normalAngle = Math.angleBetween({
                x: 0,
                y: 0
            }, {
                x: raycast.normal[0],
                y: raycast.normal[1]
            });
            paths[paths.length-1].normalAngle = -normalAngle;

            let hitType = 'front';
            if (raycast.shape && raycast.shape.hitboxProperties) {
                if (raycast.shape.hitboxProperties['face' + raycast.faceIndex]) {
                    hitType = raycast.shape.hitboxProperties['face' + raycast.faceIndex];
                }
            } else {
                if (raycast.faceIndex === 0) {
                    hitType = 'rear';
                } else if (raycast.faceIndex === 1 || raycast.faceIndex === 3) {
                    hitType = 'side';
                } else {
                    hitType = 'front';
                }
            }

            let reflectAngle = Math.angleBetween(outTo, {
                x: outTo.x + rayClosest.direction[0]*50,
                y: outTo.y + rayClosest.direction[1]*50
            });
            let angleDiff = Math.PI - Math.abs(Math.abs(reflectAngle - hitAngle) - Math.PI);
            let penetrationAngle = PENETRATION_ANGLE;
            if (raycast.body && raycast.body.entity && raycast.body.entity.type === 'static_object') {
                penetrationAngle = PENETRATION_ANGLE_STATIC;
            } else {
                let penetrationMod = 1;
                if (raycast.body && raycast.body.entity && raycast.body.entity.type === 'vehicle') {
                    let otherTankData = raycast.body.entity.getTankData();
                    let armorMod = otherTankData.armorMod;
                    if (hitType === 'side' && otherTankData.armorModSide) {
                        armorMod = otherTankData.armorModSide;
                    }

                    penetrationMod *= 1 - ((armorMod-1) * 0.2);

                    if (hitType === 'side') {
                        penetrationMod *= 1.05;
                    } else if (hitType === 'rear') {
                        penetrationMod *= 1.1;
                    }
                }

                penetrationAngle *= penetrationMod;
            }

            if (raycast.body && raycast.body.entity) {
                paths[paths.length-1].hitEntityID = raycast.body.entity.id;
                paths[paths.length-1].hitOffset = {
                    x: raycast.body.entity.x - paths[paths.length-1].to.x,
                    y: raycast.body.entity.y - paths[paths.length-1].to.y
                };
            }

            if (Math.abs(angleDiff) > penetrationAngle) {
                if (traceCount < MAX_BOUNCE_AMOUNT) {
                    let offsetAmount = 0;
                    if (traceCount >= 1) {
                        offsetAmount = traceCount * 0.1;
                    }
                    let offsetAngle = -offsetAmount + (Math.random() * (offsetAmount*2));
                    let angleBetween = Math.angleBetween({x:0, y:0}, {x: rayClosest.direction[0], y: rayClosest.direction[1]});
                    rayClosest.direction[0] = Math.cos(angleBetween + offsetAngle);
                    rayClosest.direction[1] = Math.sin(angleBetween + offsetAngle);
                    entity.traceShell([outTo.x, outTo.y], [outTo.x + rayClosest.direction[0] * MAX_SHELL_DISTANCE, outTo.y + rayClosest.direction[1] * MAX_SHELL_DISTANCE], paths, traceCount+1);
                }
            } else {
                let totalDist = 0;
                for (let i=0; i<paths.length; i++) {
                    totalDist += Math.distanceBetween(paths[i].from, paths[i].to);
                }
                if (raycast.body && raycast.body.entity) {
                    paths[paths.length-1].didHit = true;
                }
                paths[paths.length-1].didHitVehicle = raycast.body && raycast.body.entity && raycast.body.entity.type === 'vehicle' && raycast.body.entity.netData.alive && entity.team !== raycast.body.entity.team && (!raycast.body.entity.hasSpawnProtection || !raycast.body.entity.hasSpawnProtection());
                paths[paths.length-1].didHitTerrain = raycast.body && raycast.body.entity && raycast.body.entity.type === 'static_object';

                if (raycast.body && raycast.body.entity && raycast.body.entity.delayDamage && (entity.team !== raycast.body.entity.team || !raycast.body.entity.netData.alive || raycast.body.entity.type !== 'vehicle')) {
                    let damage = 30;
                    let xpGains = [];

                    paths[paths.length-1].didHitEnemy = (entity.team !== raycast.body.entity.team && !raycast.body.entity.disableDamage);

                    let hitDistance = 0;

                    damage *= 10;
                    raycast.body.entity.delayDamage(damage, entity, totalDist*0.35, xpGains, {
                        hitType: hitType,
                        position: paths[paths.length-1].to,
                        angle: -hitAngle,
                        distance: hitDistance
                    });
                    paths[paths.length-1].hitTeam = raycast.body.entity.team;
                }
            }
        }

        return paths;
    };

    let lastFireTime = Date.now();
    entity.fire = () => {
        lastFireTime = Date.now();
        entity.netData.loaded = false;

        let barrelLength = 30;

        let turretPos = {x: entity.x, y: entity.y};
        let from = [turretPos.x + (Math.cos(entity.rotation) * barrelLength), -(turretPos.y + (Math.sin(entity.rotation) * barrelLength))];
        let to = [entity.x + (Math.cos(entity.rotation) * MAX_SHELL_DISTANCE), -(entity.y + (Math.sin(entity.rotation) * MAX_SHELL_DISTANCE))];
        let paths = entity.traceShell(from, to, [], 0);
        entity.sendRPC('fire', paths);
    };

    entity.onRemove = () => {
        if (entity.body) {
            server.world.removeBody(entity.body);
        }
    };

    return entity;
};
},{"./collision_groups":119,"p2":54}],119:[function(require,module,exports){
module.exports = {
    PLAYER: Math.pow(2,0), // 00000000000000000000000000000001 in binary
    OTHER: Math.pow(2,1),  // 00000000000000000000000000000010 in binary,
    HITBOX: Math.pow(2,2)  // 00000000000000000000000000000100 in binary
};
},{}],120:[function(require,module,exports){
module.exports = function(type, subtype, x, y, z, rotation, width, height, team, startingNetData) {
    const server = this;
    let entity = {
        id: server.lastEntityId++,
        x: x,
        y: y,
        z: z,
        lastX: x,
        lastY: y,
        lastZ: z,
        width: width,
        height: height,
        team: team,
        spawnTime: Date.now(),
        spawnPosition: {
            x: x,
            y: y,
            z: z
        },
        rotation: rotation,
        dx: 0,
        dy: 0,
        energy: 100,
        type: type,
        subtype: subtype,
        valid: true,
        netData: {
            alive: true,
            health: 100
        }
    };

    if (startingNetData) {
        Object.assign(entity.netData, startingNetData);
    }

    entity.tick = () => {
        if (Math.abs(entity.dx) <= 0.001) {
            entity.dx = 0;
        }
        if (Math.abs(entity.dy) <= 0.001) {
            entity.dy = 0;
        }

        entity.x += entity.dx;
        entity.y += entity.dy;

        entity.sendMoveUpdate = (entity.x !== entity.lastX || entity.y !== entity.lastY || entity.rotation !== entity.lastRotation);

        if (entity.z !== entity.lastZ) {
            entity.sendRPC('changeZLevel', entity.z);
        }

        if (entity.netData.name !== entity.lastName) {
            entity.lastName = entity.netData.name;
            entity.sendRPC('changeName', {
                name: entity.netData.name,
                isDev: entity.netData.isDev,
                settings: entity.netData.settings
            });
        }

        entity.lastX = entity.x;
        entity.lastY = entity.y;
        entity.lastZ = entity.z;
        entity.lastRotation = entity.rotation;
    };

    entity.remove = () => {
        entity.valid = false;
    };

    entity.onRemove = () => {

    };

    entity.getCreateData = () => {
        return {
            id: entity.id,
            x: entity.x,
            y: entity.y,
            z: entity.z,
            width: width,
            height: height,
            rotation: entity.rotation,
            type: entity.type,
            team: entity.team,
            subtype: entity.subtype,
            netData: JSON.parse(JSON.stringify(entity.netData))
        };
    };

    entity.writeSnapshotPayload = (payloadBuffer) => {};

    entity.terrainEnter = (type, terrain, data) => {};
    entity.terrainLeave = (type, terrain, data) => {};

    entity.sendRPC = (name, data) => {
        server.sendMessage('entityrpc', {
            id: entity.id,
            name: name,
            data: data
        });
    };

    server.addEntity(entity);
    return entity;
};
},{}],121:[function(require,module,exports){
const p2 = require('p2');
const collisionGroups = require('./collision_groups');

module.exports = function(subtype, x, y, z, rotation, width, height, team, netData) {
    const server = this;

    if (!netData) {
        netData = {};
    }
    if (subtype === 'capture_point') {
        netData.currentCapturedTeam = -1;
    }
    let entity = server.createEntity('object', subtype, x, y, z, rotation, width, height, team, netData);

    if (subtype === 'capture_point') {
        entity.capturePercentage = 0;
    } else if (subtype === 'dynamic_object') {
        let collisionGroup = collisionGroups.OTHER;
        let collisionMask = collisionGroups.OTHER;
        if (!netData.mapProperties.disablePlayerCollision) {
            collisionMask |= collisionGroups.PLAYER;
        }
        if (!netData.mapProperties.disableHitboxCollision) {
            collisionMask |= collisionGroups.HITBOX;
        }

        let sizeOffset = netData.mapProperties.sizeOffset ? netData.mapProperties.sizeOffset : 0;
        let shape;
        if (netData.mapProperties.shape === 'polygon') {
            let polygonsData = netData.mapProperties.polygon.split(' ');
            let vertices = [];
            for (let i=0; i<polygonsData.length; i++) {
                let p = polygonsData[i].split(',');
                let vert = [parseFloat(p[0]), -parseFloat(p[1])];
                vert[0] -= width/2;
                vert[1] -= height/2;
                if (netData.mapProperties.polygonScale) {
                    vert[0] *= netData.mapProperties.polygonScale;
                    vert[1] *= netData.mapProperties.polygonScale;
                }
                vertices.push(vert);
            }
            vertices.reverse();
            try {
                shape = new p2.Convex({vertices: vertices});
            } catch (e) {
                vertices.reverse();
                shape = new p2.Convex({vertices: vertices});
            }
        } else if (netData.mapProperties.shape === 'circle') {
            shape = new p2.Circle({radius: netData.mapProperties.radius ? netData.mapProperties.radius : 32})
        } else {
            shape = new p2.Box({width: width - sizeOffset, height: height - sizeOffset});
        }
        shape.collisionGroup = collisionGroup;
        shape.collisionMask = collisionMask;
        if (netData.mapProperties.material && server.collisionMaterials[netData.mapProperties.material]) {
            shape.material = server.collisionMaterials[netData.mapProperties.material];
        }
        if (netData.mapProperties.isSensor) {
            shape.sensor = true;
        }
        entity.body = new p2.Body({
            mass: netData.mapProperties.mass ? netData.mapProperties.mass : 0,
            position: [x, -y],
            angle: -entity.rotation,
            angularVelocity: 0,
            material: server.collisionMaterials.standard
        });
        entity.body.addShape(shape);

        if (netData.mapProperties && netData.mapProperties.pickupType === 'health') {
            let pickupShape = new p2.Circle({radius: 40});
            pickupShape.collisionGroup = collisionGroup;
            pickupShape.collisionMask = collisionMask;
            pickupShape.sensor = true;
            entity.body.addShape(pickupShape);
        }

        entity.body.damping = 0.5;
        entity.body.angularDamping = 0.5;
        entity.body.entity = entity;
        server.world.addBody(entity.body);
    } else if (subtype === 'wall_deployable') {
        let collisionGroup = collisionGroups.OTHER;
        let collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER | collisionGroups.HITBOX;

        let shape = new p2.Box({width: width, height: height/4});
        shape.collisionGroup = collisionGroup;
        shape.collisionMask = collisionMask;
        entity.body = new p2.Body({mass: 500, position: [x, -y], angle: -entity.rotation, angularVelocity: 0});
        entity.body.addShape(shape);
        entity.body.damping = 0.5;
        entity.body.angularDamping = 0.5;
        entity.body.entity = entity;
        server.world.addBody(entity.body);
    } else if (subtype === 'grenade') {
        let collisionGroup = collisionGroups.PLAYER;
        let collisionMask = 0;

        let shape = new p2.Circle({radius: width/3});
        shape.collisionGroup = collisionGroup;
        shape.collisionMask = collisionMask;
        let bodyData = {};

        entity.body = new p2.Body({mass: 2, position: [x, -y], angle: -entity.rotation});
        entity.body.addShape(shape);
        entity.body.damping = 0.05;
        if (netData.subtype === 'smoke') {
            entity.body.angularDamping = 0.2;
            entity.bombCount = 6;
        } else {
            entity.body.angularDamping = 1;
        }
        entity.body.entity = entity;
        server.world.addBody(entity.body);

        entity.explodeTime = Date.now() + 4000;
    } else if (subtype === 'landmine') {
        let collisionGroup = collisionGroups.PLAYER;
        let collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER;

        let shape = new p2.Circle({radius: width/3});
        shape.collisionGroup = collisionGroup;
        shape.collisionMask = collisionMask;
        entity.body = new p2.Body({mass: 2, position: [x, -y], angle: -entity.rotation, angularVelocity: 0});
        entity.body.addShape(shape);
        entity.body.damping = 0.95;
        entity.body.angularDamping = 0.95;
        entity.body.entity = entity;
        server.world.addBody(entity.body);
    } else if (subtype === 'airstrike') {
        entity.startBombing = false;
        entity.nextBomb = Date.now();
        entity.bombCount = 5;
    } else if (subtype === 'bomb') {
        entity.explodeTime = Date.now() + 3000;
    } else if (subtype === 'artillery') {
        entity.explodeTime = Date.now() + 4000;
    }

    let delayedDamage = [];
    entity.objectTick = null;
    if (entity.subtype === 'flag') {
        entity.objectTick = () => {
            if (carrier) {
                entity.x = carrier.x;
                entity.y = carrier.y;

                if (carrier.body) {
                    carrier.body.velocity[0] *= 0.85;
                    carrier.body.velocity[1] *= 0.85;
                }

                if (carrier && (!carrier.valid || (carrier.netData && !carrier.netData.alive))) {
                    if (carrier.netData && carrier.netData.name) {
                        server.sendMessage('setAnnouncement', {
                            title: 'flag_dropped',
                            playerName: carrier.netData.name,
                            team: entity.team,
                            sound: 'flag_dropped',
                            time: 2500
                        });
                    }
                    dropped = true;
                    carrier = null;
                }
            }
        };
    } else if (entity.subtype === 'capture_point') {
        entity.capturingTeams = {};
        const CAPTURE_RATE_DEFAULT = 0.01;
        const CAPTURE_RATE_LIGHT = 0.006;
        const CAPTURE_RATE_HEAVY = 0.014;
        const CAPTURE_RESET_RATE = 0.001;
        entity.objectTick = () => {
            let keys = Object.keys(entity.capturingTeams);
            if (keys.length === 1) {
                let capturingTeam = parseInt(keys[0]);
                let capturingCount = entity.capturingTeams[keys[0]].length;
                let totalCaptureRate = 0;
                for (let i=0; i<entity.capturingTeams[keys[0]].length; i++) {
                    let vehicle = entity.capturingTeams[keys[0]][i];
                    if (vehicle && vehicle.getTankData && vehicle.getTankData()) {
                        if (vehicle.getTankData().type === 'heavy') {
                            totalCaptureRate += CAPTURE_RATE_HEAVY;
                        } else if (vehicle.getTankData().type === 'light') {
                            totalCaptureRate += CAPTURE_RATE_LIGHT;
                        } else {
                            totalCaptureRate += CAPTURE_RATE_DEFAULT;
                        }
                    } else {
                        totalCaptureRate += CAPTURE_RATE_DEFAULT;
                    }
                }

                if (entity.netData.currentCapturedTeam === capturingTeam) {
                    entity.capturePercentage += totalCaptureRate;
                    if (entity.team !== capturingTeam && entity.capturePercentage >= 1) {
                        entity.team = capturingTeam;
                        server.sendMessage('setAnnouncement', {
                            title: 'point_captured',
                            name: entity.netData.name,
                            team: entity.team,
                            sound: 'flag_dropped',
                            time: 2500
                        });

                        let awardPlayers = entity.capturingTeams[keys[0]];
                        for (let i=0; i<awardPlayers.length; i++) {
                            let vehicle = awardPlayers[i];
                            server.recordXP(vehicle.currentPlayer, [{
                                xp: 150,
                                reason: 'Point Captured'
                            }], 0);
                        }
                    }
                } else {
                    entity.capturePercentage -= totalCaptureRate;
                    if (entity.capturePercentage <= 0) {
                        entity.capturePercentage = 0;
                        entity.updateCurrentCapturedTeam(capturingTeam);
                    }
                }
            } else if (keys.length <= 0) {
                if (entity.team !== -1 && entity.team === entity.netData.currentCapturedTeam) {
                    entity.capturePercentage += CAPTURE_RESET_RATE;
                } else {
                    entity.capturePercentage -= CAPTURE_RESET_RATE;
                    if (entity.capturePercentage <= 0 && entity.team !== -1) {
                        entity.team = -1;
                        entity.capturePercentage = 0;
                        entity.updateCurrentCapturedTeam(entity.team);
                    }
                }
            }

            if (entity.capturePercentage < 0) {
                entity.capturePercentage = 0;
            }
            if (entity.capturePercentage > 1) {
                entity.capturePercentage = 1;
            }
            entity.capturingTeams = {};
        };

        entity.updateCurrentCapturedTeam = (currentCapturedTeam) => {
            entity.netData.currentCapturedTeam = currentCapturedTeam;
            entity.sendRPC('updateCurrentCapturedTeam', entity.netData.currentCapturedTeam);
        };
    } else if (entity.subtype === 'grenade') {
        entity.objectTick = () => {
            if (Date.now() >= entity.explodeTime) {
                if (exploded) {
                    if (entity.netData.subtype === 'smoke') {
                        if (Date.now() >= entity.nextBomb && entity.bombCount > 0) {
                            entity.bombCount--;
                            if (entity.bombCount <= 0) {
                                entity.nextBomb = Date.now() + 4000;
                            } else {
                                entity.nextBomb = Date.now() + 750 + Math.round(Math.random() * 250);
                            }
                            if (!entity.fireAngle) {
                                entity.fireAngle = Math.random() * Math.PI * 2;
                            } else {
                                entity.fireAngle += (Math.PI * 0.1) + (Math.random() * Math.PI);
                            }
                            let dist = 50 + Math.round(Math.random() * 250);
                            entity.switchBombside = !entity.switchBombside;
                            let bomb = server.createObject('artillery', entity.x + (Math.cos(entity.fireAngle) * dist), entity.y + (Math.sin(entity.fireAngle) * dist), 0, rotation, 32, 64, entity.team);
                            bomb.owner = entity.owner;
                        } else if (Date.now() >= entity.nextBomb) {
                            entity.remove();
                        }
                    }
                } else {
                    entity.explode();
                }
            } else if (!entity.stoppedFlying && Date.now() >= entity.explodeTime - 2000) {
                entity.stoppedFlying = true;
                if (entity.body) {
                    entity.body.damping = 0.15;
                    entity.body.angularDamping = 0.25;
                    entity.body.shapes[0].collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER;
                    entity.body.angularVelocity = -2 + (Math.random() * 4);
                }
            }
        };
    } else if (entity.subtype === 'bomb') {
        entity.objectTick = () => {
            if (Date.now() >= entity.explodeTime) {
                entity.explode();
            }

            entity.dx *= 0.98;
            entity.dy *= 0.98;
        };
    } else if (entity.subtype === 'artillery') {
        entity.objectTick = () => {
            if (Date.now() >= entity.explodeTime) {
                entity.explode();
            }
        };
    } else if (entity.subtype === 'airstrike') {
        entity.objectTick = () => {
            if (entity.startBombing && Date.now() >= entity.nextBomb && entity.bombCount > 0) {
                entity.bombCount--;
                entity.nextBomb = Date.now() + 100;
                let dist = 0;
                if (entity.switchBombside) {
                    dist = -(35 + (Math.random() * 40));
                } else {
                    dist = 35 + (Math.random() * 40);
                }
                entity.switchBombside = !entity.switchBombside;
                let bomb = server.createObject('bomb', entity.x + (Math.cos(rotation) * dist), entity.y + (Math.sin(rotation) * dist), 0, rotation, 32, 64, entity.team);
                bomb.owner = entity.owner;
                let angle = rotation - Math.PI / 2;
                let speed = 5 + Math.round(Math.random() * 2);
                bomb.dx = Math.cos(angle) * speed;
                bomb.dy = Math.sin(angle) * speed;
            }

            if (entity.bombCount <= 0) {
                if (Date.now() >= entity.nextBomb + 10000) {
                    entity.remove();
                }
            }

            if (!entity.startBombing) {
                let dist = Math.distanceBetween(entity, entity.strikePosition);
                if (dist <= 200) {
                    entity.startBombing = true;
                    entity.switchBombside = Math.random() >= 0.5;
                }
            }
        };
    }

    let carrier = null;
    let dropped = false;
    let oldTick = entity.tick;
    entity.tick = () => {
        if (subtype === 'dynamic_object') {
            if (netData.mapProperties.despawnTime) {
                if (Date.now() >= entity.spawnTime + (netData.mapProperties.despawnTime * 1000)) {
                    entity.remove();
                }
            }
        }

        if (entity.body) {
            entity.x = entity.body.position[0];
            entity.y = -entity.body.position[1];
            entity.rotation = -entity.body.angle;
        }

        if (entity.objectTick) {
            entity.objectTick();
        }

        if (delayedDamage.length) {
            if (Date.now() >= delayedDamage[0].delay) {
                let damage = delayedDamage.shift();
                if (entity.damage) {
                    entity.damage(damage.amount, damage.attacker, damage.xpGains, damage.recordingTime, damage.hitData);
                }
            }
        }

        oldTick();
        entity.sendMoveUpdate = true;
    };

    if (subtype === 'landmine') {
        entity.collision = (body) => {
            if (body && body.entity && body.entity.type === 'vehicle' && body.entity.team !== entity.team) {
                entity.explode();
            }
        };
    } else {
        entity.collision = (body) => {};
    }

    if (subtype === 'grenade' || subtype === 'landmine') {
        entity.damage = () => {
            entity.explode();
        };
    }
    if (subtype === 'wall_deployable') {
        entity.damage = (amount) => {
            if (entity.netData.alive) {
                entity.netData.health -= amount;
                if (entity.netData.health <= 0) {
                    entity.sendRPC('explode', null);
                    entity.remove();
                    entity.netData.alive = false;
                }
            }
        };
    }
    if (subtype === 'dynamic_object') {
        function pickupRepair(other) {
            if (entity.valid && entity.netData.mapProperties.pickupType === 'health' && entity.netData.mapProperties.pickupAmount && other.repair) {
                other.repair(entity.netData.mapProperties.pickupAmount);
                other.delayDamage(0, other, 50, [{
                    xp: entity.team === other.team ? 10 : 25,
                    reason: 'Repair Kit'
                }]);
            }
            entity.remove();
        }

        if (entity.netData.mapProperties.pickupType) {
            entity.collision = (body) => {
                if (entity.valid && entity.netData.alive && body && body.entity && body.entity.type === 'vehicle' && body.entity.netData.alive) {
                    pickupRepair(body.entity);
                }
            };
        } else if (entity.netData.mapProperties.canRunOver) {
            entity.collision = (body) => {
                if (entity.netData.alive && body && body.entity && body.entity.type === 'vehicle' && body.entity.netData.alive) {
                    if (body.mass > entity.body.mass + 1) {
                        entity.kill();
                    } else {
                        entity.damage(5);
                    }
                }
            };
        }

        entity.damage = (amount, attacker, additionalXpGains, recordingTimeOverride, hitData) => {
            if (attacker && attacker.owner) {
                attacker = attacker.owner;
            }
            if (hitData && hitData.angle && hitData.position && entity.body) {
                let force = Math.round(amount * 4);
                if (force > 1000) {
                    force = 1000;
                }
                let forceDir = [Math.cos(hitData.angle + Math.PI) * force, Math.sin(hitData.angle + Math.PI) * -force];
                entity.body.applyForce(forceDir, [hitData.position.x - entity.x, -(hitData.position.y - entity.y)]);
            }

            if (attacker && attacker.team === entity.team) {
                return;
            }

            if (entity.netData.mapProperties.health) {
                if (entity.netData.alive) {
                    entity.netData.health -= amount;
                    if (entity.netData.health <= 0) {
                        entity.kill();
                    } else {
                        entity.sendRPC('onDamage', Math.ceil(entity.netData.health));
                    }
                }
            }
        };

        entity.kill = () => {
            if (entity.netData.alive) {
                entity.netData.alive = false;
                entity.netData.health = 0;
                entity.sendRPC('onDamage', entity.netData.health);
                entity.sendRPC('explode', null);

                if (entity.netData.mapProperties.disableDestructionOnDeath || entity.netData.mapProperties.canRunOver) {
                    server.world.removeBody(entity.body);
                    entity.body = null;
                } else {
                    entity.remove();
                }
            }
        };
    }

    entity.delayDamage = (amount, attacker, delayAmountInMilliseconds, xpGains, hitData) => {
        delayedDamage.push({
            amount: amount,
            attacker: attacker,
            delay: Date.now() + Math.ceil(delayAmountInMilliseconds),
            xpGains: xpGains,
            recordingTime: server.recording.getCurrentTime(),
            hitData: hitData
        });
    };

    entity.resetFlag = () => {
        entity.x = origX;
        entity.y = origY;
        carrier = null;
        dropped = false;
    };

    let origX = x;
    let origY = y;
    if (entity.subtype === 'flag') {
        entity.thinkEntity = (other, dist) => {
            if (other && other.type === 'object' && other.subtype === 'landmine' && other.explode && dist <= 400) {
                other.explode();
                return;
            }

            if (!carrier) {
                if (other.type === 'vehicle' && other.valid && other.netData && other.netData.alive && dist < 80) {
                    if (other.team === team && other.currentPlayer) {
                        if (dropped) {
                            if (other.currentPlayer && other.currentPlayer.name) {
                                server.sendMessage('setAnnouncement', {
                                    title: 'flag_returned',
                                    playerName: other.currentPlayer.name,
                                    team: other.team,
                                    sound: 'flag_dropped',
                                    time: 2000
                                });
                            }

                            entity.resetFlag();
                            server.recordXP(other.currentPlayer, [{
                                xp: 100,
                                reason: 'Flag Returned'
                            }]);
                        }
                    } else if (other.currentPlayer && !other.currentPlayer.isBot) {
                        carrier = other;
                        if (carrier.netData && carrier.netData.name) {
                            server.sendMessage('setAnnouncement', {
                                title: 'flag_taken',
                                playerName: carrier.netData.name,
                                team: carrier.team,
                                sound: 'flag_taken',
                                time: 2500
                            });
                            server.recordXP(carrier.currentPlayer, [{
                                xp: 100,
                                reason: 'Flag Taken'
                            }]);
                        }
                    }
                }
            } else {
                if (other.subtype === 'flag' && !other.getCarrier() && other.team !== entity.team && dist < 80) {
                    if (carrier.netData && carrier.netData.name) {
                        server.sendMessage('setAnnouncement', {
                            title: 'flag_captured',
                            playerName: carrier.netData.name,
                            team: carrier.team,
                            sound: 'flag_captured',
                            time: 2500
                        });
                    }
                    server.recordXP(carrier.currentPlayer, [{
                        xp: 250,
                        reason: 'Flag Captured'
                    }]);

                    server.recordScore(carrier.team, 1);
                    entity.resetFlag();
                }
            }
        };
    } else if (entity.subtype === 'capture_point') {
        entity.thinkEntity = (other, dist) => {
            if (other.type === 'vehicle' && other.valid && other.netData && other.netData.alive && dist < 300) {
                if (!entity.capturingTeams[other.team]) {
                    entity.capturingTeams[other.team] = [];
                }
                entity.capturingTeams[other.team].push(other);
            }
        };
    }

    let exploded = false;
    entity.explode = () => {
        if (exploded) {
            return;
        }

        exploded = true;
        entity.sendRPC('explode', null);

        if (entity.netData.subtype === 'smoke') {
            entity.body.shapes[0].collisionMask = 0;
            entity.body.velocity = [0, 0];
            entity.nextBomb = Date.now() + 1500;

            if (entity.body) {
                server.world.removeBody(entity.body);
                entity.body = null;
            }
        } else {
            entity.remove();
            let maxDist = 250;
            for (let i = 0; i < server.entities.length; i++) {
                let other = server.entities[i];
                let dist = Math.distanceBetween(entity, other);
                if (dist <= maxDist) {
                    let angle = Math.angleBetween(entity, other);
                    let percent = 1 - (dist / maxDist);
                    let force = 3000 * percent;
                    let damage = 150 * percent;
                    if (other.body) {
                        other.body.applyForce([Math.cos(angle) * force, Math.sin(angle) * -force]);
                    }
                    if (entity.subtype !== 'bomb' && entity.subtype !== 'artillery') {
                        if (damage > 85) {
                            damage = 85;
                        }
                    }
                    if (entity.team !== other.team) {
                        if (damage && other.damage) {
                            let xpGains = [];
                            if (entity.subtype === 'grenade') {
                                xpGains.push({
                                    xp: 50,
                                    reason: 'Grenade'
                                });
                            } else if (entity.subtype === 'landmine') {
                                xpGains.push({
                                    xp: 50,
                                    reason: 'Landmine'
                                });
                            } else if (entity.subtype === 'bomb') {
                                xpGains.push({
                                    xp: 50,
                                    reason: 'Bomb'
                                });
                            } else if (entity.subtype === 'artillery') {
                                xpGains.push({
                                    xp: 50,
                                    reason: 'Artillery'
                                });
                            }
                            if (damage >= 5) {
                                other.damage(damage, entity, xpGains);
                            }
                        }
                    }
                }
            }
        }
    };

    entity.getCarrier = () => {
        return carrier;
    };

    entity.onRemove = () => {
        if (entity.body) {
            server.world.removeBody(entity.body);
        }
    };

    return entity;
};
},{"./collision_groups":119,"p2":54}],122:[function(require,module,exports){
const p2 = require('p2');
const collisionGroups = require('./collision_groups');

module.exports = function(subtype, x, y, z, width, height, rotation, netData) {
    const server = this;

    if (!netData) {
        netData = {};
    }
    let entity = server.createEntity('static_object', subtype, x, y, z, rotation, width, height, -1, netData);

    if (!netData.mapProperties.disableCollisions) {
        let collisionGroup = collisionGroups.OTHER;
        let collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER | collisionGroups.HITBOX;
        if (subtype === 'terrain') {
            collisionMask = collisionGroups.PLAYER;
        }


        entity.body = new p2.Body({
            mass: 0,
            position: [x, -y],
            angle: -entity.rotation,
            angularVelocity: 0
        });

        if (netData.mapProperties.polygon) {
            let polygonsData = netData.mapProperties.polygon[0].points.split(' ');
            let vertices = [];
            for (let i=0; i<polygonsData.length; i++) {
                let p = polygonsData[i].split(',');
                let px = parseFloat(p[0]);
                let py = parseFloat(p[1]);
                vertices.push([px, -(py)]);
            }
            vertices.reverse();
            let shape = null;
            try {
                shape = new p2.Convex({
                    vertices: vertices,
                    material: server.collisionMaterials.standard
                });
                entity.body.addShape(shape);
            } catch (e) {
                vertices.reverse();
                shape = new p2.Convex({
                    vertices: vertices,
                    material: server.collisionMaterials.standard
                });
                entity.body.addShape(shape);
            }

            if (subtype === 'terrain') {
                shape.sensor = true;
            }

            //TODO: Support concave polygons.
            //entity.body.fromPolygon(vertices);
        } else {
            entity.body.addShape(new p2.Box({
                width: width,
                height: height,
                material: server.collisionMaterials.standard
            }));
        }

        for (let i=0; i<entity.body.shapes.length; i++) {
            let shape = entity.body.shapes[i];
            shape.collisionGroup = collisionGroup;
            shape.collisionMask = collisionMask;
        }

        entity.body.damping = 0.5;
        entity.body.angularDamping = 0.5;
        entity.body.entity = entity;
        server.world.addBody(entity.body);
    }

    entity.tick = () => {
        //TODO: Make this not run.
        entity.sendMoveUpdate = false;
    };

    entity.collision = (body) => {};

    entity.onRemove = () => {
        if (entity.body) {
            server.world.removeBody(entity.body);
        }
    };

    return entity;
};
},{"./collision_groups":119,"p2":54}],123:[function(require,module,exports){
const p2 = require('p2');
const collisionGroups = require('./collision_groups');
const sharedFunctions = require('../../shared_functions');

const INPUT_MAP = sharedFunctions.constants.INPUT_MAP;
const PIXEL_TO_METER = 21;
const PENETRATION_ANGLE =  Math.PI/1.75;
const PENETRATION_ANGLE_STATIC = degrees_to_radians(75);
const MAX_BOUNCE_AMOUNT = 4;
const MAX_SHELL_DISTANCE = 1600;
function degrees_to_radians(degrees)
{
    return degrees * (Math.PI/180);
}

module.exports = function(subtype, x, y, z, rotation, width, height, team, netData) {
    const server = this;

    if (!netData) {
        netData = {};
    }

    if (!server.vehicleData[netData.tankType]) {
        netData.tankType = 'medium_tank';
    }

    let vehicleInfo = server.vehicleData[netData.tankType];
    if (subtype === 'colossus') {
        netData.tankType = 'colossus';
    }
    let engineBoostMaxTime = 12000;

    let tankData = {};
    if (subtype === 'colossus') {
        tankData = {
            name: 'Colossus',
            engineForce: 300,
            engineForceWithTurn: 225,
            engineBoostForce: 800,
            turnForce: 0.2,
            turnForceWithEngine: 0.2,
            damageMod: 1,
            armorMod: 0.1,
            mass: 15,
            reverseMod: 0.75
        };
    } else if (vehicleInfo) {
        tankData = JSON.parse(JSON.stringify(vehicleInfo.properties));
    } else {
        throw new Error('Invalid vehicle info: ' + subtype);
    }

    if (tankData.type === 'heavy') {
        engineBoostMaxTime = 15000;
    } else if (tankData.type === 'light') {
        engineBoostMaxTime = 10000;
    }

    let hasTracks = false;
    let tankParts = {};
    netData.hasWheels = false;
    for (let i=0; i<vehicleInfo.objectgroup.length; i++) {
        let group = vehicleInfo.objectgroup[i];
        if (group && group.object) {
            if (group.name === 'Wheels' && group.object.length) {
                netData.hasWheels = true;
            } else if (group.name === 'Tracks' && group.object.length) {
                hasTracks = true;
            }
            tankParts[group.name] = group;
        }
    }

    netData.reloadTime = 5000;
    if (tankData) {
        if (tankData.reloadTime) {
            netData.reloadTime = tankData.reloadTime;
        }
        if (tankData.engineBoostTime) {
            engineBoostMaxTime = tankData.engineBoostTime;
        }
    }

    if (server.tutorial) {
        netData.reloadTime = 2500;
    }

    netData.loaded = true;
    netData.repairing = false;
    let entity = server.createEntity('vehicle', subtype, x, y, z, rotation, width, height, team, netData);
    if (!tankData) {
        console.error('Invalid tank type:', netData.tankType);
        entity.remove();
        return entity;
    }
    entity.tankData = tankData;

    entity.keys = {};
    entity.turretTargetRotation = entity.rotation - Math.PI/2 + 0.00001;
    entity.turretInternalRotation = -Math.PI/2;
    entity.turretRotation = entity.rotation + entity.turretInternalRotation;
    entity.wheelRotation = 0;

    let vehicleWidth = parseFloat(vehicleInfo.width) * parseFloat(vehicleInfo.tilewidth);
    let vehicleHeight = parseFloat(vehicleInfo.height) * parseFloat(vehicleInfo.tileheight);

    let scale = 0.5;
    let shapes = [];
    let hasShapeAsTerrainHitbox = false;
    let hasAttachmentPoint = false;
    for (let i=0; i<vehicleInfo.objectgroup.length; i++) {
        let group = vehicleInfo.objectgroup[i];
        if (group && group.object) {
            for (let j=0; j<group.object.length; j++) {
                let object = group.object[j];
                if (object && object.polygon) {
                    let ox = object.x ? parseFloat(object.x) : 0;
                    let oy = object.y ? parseFloat(object.y) : 0;
                    let polygonsData = object.polygon[0].points.split(' ');
                    let vertices = [];
                    for (let i=0; i<polygonsData.length; i++) {
                        let p = polygonsData[i].split(',');
                        let vx = ((parseFloat(p[0]) + ox) - vehicleWidth/2) * scale;
                        let vy = ((parseFloat(p[1]) + oy) - vehicleHeight/2) * scale;
                        vertices.push([vx, -vy]);

                        /*
                        server.createStaticObject('wall', x + vx, y + vy + 200 , 0, 4, 4, 0, {
                            asset: 'assets/maps/tractorfactory/factory_1x1.jpg',
                            mapProperties: {}
                        });
                        */
                    }

                    let shape = null;
                    try {
                        shape = new p2.Convex({vertices: vertices});
                    } catch (e) {
                        if (e.message === 'Convex vertices must be given in conter-clockwise winding.') {
                            vertices.reverse();
                            shape = new p2.Convex({vertices: vertices});
                        }
                    }

                    if (shape) {
                        shapes.push(shape);
                        shape.hitboxProperties = server.getObjectProperties(object);

                        if (shape.hitboxProperties.isAttachmentPoint) {
                            hasAttachmentPoint = true;
                        }

                        if (shape.hitboxProperties.useOnlyAsTerrainHitbox) {
                            hasShapeAsTerrainHitbox = true;
                            shape.collisionGroup = collisionGroups.PLAYER;
                            shape.collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER;
                        } else if (shape.hitboxProperties.useAsTerrainHitbox) {
                            hasShapeAsTerrainHitbox = true;
                            shape.collisionGroup = collisionGroups.PLAYER;
                            shape.collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER | collisionGroups.HITBOX;
                        } else {
                            shape.collisionGroup = collisionGroups.HITBOX;
                            shape.collisionMask = collisionGroups.HITBOX;
                        }
                    }
                }
            }
        }
    }

    /*
    server.createStaticObject('wall', x , y + 200 , 0, 6, 6, 0, {
        asset: 'assets/maps/tractorfactory/factory_1x1.jpg',
        mapProperties: {}
    });
    */

    if (!shapes.length) {
        let shape = new p2.Box({width: width * 0.5, height: height});
        shape.collisionGroup = collisionGroups.HITBOX;
        shape.collisionMask = collisionGroups.HITBOX;
        shapes.push(shape);
    }

    let tankMass = 20;
    if (tankData.mass || tankData.mass === 0) {
        tankMass = tankData.mass;
    }
    entity.body = new p2.Body({
        mass: tankMass,
        position: [x, -y],
        angle: -entity.rotation,
        angularVelocity: 0
    });

    if (!hasShapeAsTerrainHitbox) {
        let shape = new p2.Box({width: width * 0.5, height: height * 0.95});
        shape.collisionGroup = collisionGroups.PLAYER;
        shape.collisionMask = collisionGroups.OTHER | collisionGroups.PLAYER;
        shapes.push(shape);
    }

    for (let i=0; i<shapes.length; i++) {
        let shape = shapes[i];
        entity.body.addShape(shape);
    }
    let turnForceMod = 1;
    let engineForceMod = 1;
    let sideFrictionMod = 1;
    entity.updatePhysics = () => {
        turnForceMod = 1;
        engineForceMod = 1;
        sideFrictionMod = 1;
        if (entity.netData.hasWheels) {
            if (hasTracks) {
                entity.body.damping = 0.15;
            } else {
                entity.body.damping = 0.1;
            }
            entity.body.angularDamping = 0.1;
        } else {
            entity.body.damping = 0.5;
            entity.body.angularDamping = 0.5;
        }

        if (entity.currentTerrain) {
            if (entity.currentTerrain.type === 'water') {
                if (entity.netData.hasWheels) {
                    entity.body.damping = 0.3;
                    entity.body.angularDamping = 0.3;
                } else {
                    entity.body.damping = 0.7;
                    entity.body.angularDamping = 0.7;
                }
            } else if (entity.currentTerrain.type === 'ice') {
                if (entity.netData.hasWheels) {
                    engineForceMod = 0.25;
                    turnForceMod = 0.4;
                    entity.body.damping = 0.1;
                    entity.body.angularDamping = 0.005;
                    sideFrictionMod = 0.12;
                    if (hasTracks) {
                        entity.body.damping = 0.11;
                        engineForceMod = 0.3;
                        turnForceMod = 0.4;
                    }
                } else {
                    engineForceMod = 0.35;
                    turnForceMod = 0.45;
                    entity.body.damping = 0.11;
                    entity.body.angularDamping = 0.05;
                }

                let speed = Math.magnitude({
                    dx: entity.body.velocity[0],
                    dy: entity.body.velocity[1]
                });
                let speedTurnMod = speed/50;
                if (speedTurnMod > 1) {
                    speedTurnMod = 1;
                }
                turnForceMod -= 0.15 * speedTurnMod;
            }
        }

        if (entity.netData.hasWheels) {
            p2FrontWheel.setSideFriction(Math.round(120 * sideFrictionMod));
        }
    };
    entity.body.entity = entity;
    server.world.addBody(entity.body, hasAttachmentPoint);

    let p2Vehicle = null;
    let p2FrontWheel = null;
    let p2BackWheel = null;
    if (entity.netData.hasWheels) {
        p2Vehicle = new p2.TopDownVehicle(entity.body);

        p2FrontWheel = p2Vehicle.addWheel({
            localPosition: [0, 50]
        });
        p2FrontWheel.setSideFriction(Math.round(120 * sideFrictionMod));

        p2BackWheel = p2Vehicle.addWheel({
            localPosition: [0, -50]
        });
        p2BackWheel.setSideFriction(Math.round(100 * sideFrictionMod));

        p2Vehicle.addToWorld(server.world);
    }

    entity.updatePhysics();

    entity.hasTurret = true;

    let rayClosest = new p2.Ray({
        mode: p2.Ray.CLOSEST,
        collisionGroup: collisionGroups.HITBOX,
        collisionMask: collisionGroups.OTHER | collisionGroups.HITBOX | collisionGroups.PLAYER,
        skipBackfaces: true
    });
    let rayBarrelClosest = new p2.Ray({
        mode: p2.Ray.CLOSEST,
        collisionGroup: collisionGroups.HITBOX,
        collisionMask: collisionGroups.OTHER | collisionGroups.HITBOX | collisionGroups.PLAYER,
        skipBackfaces: true
    });

    let fakeBot = null;
    if (netData.tankType === 'turret') {
        fakeBot = {
            isBot: true,
            team: entity.team,
            player: entity,
            skill: 1,
            perfectLeadAi: true,
            disableMovement: true,
            disableFiring: !!entity.netData.disableFiring,
            rangeOverride: entity.netData.range ? entity.netData.range : 500
        };
        server.aiManager.botInit(fakeBot);
    } else if (subtype === 'colossus') {
        fakeBot = {
            isBot: true,
            team: entity.team,
            player: entity,
            skill: 1
        };
        server.aiManager.botInit(fakeBot);

        entity.hasTurret = false;
    }

    let forceTurnLeft = false;
    let forceTurnRight = false;
    let delayedDamage = [];
    let lastFireTime = Date.now();
    let lastBoostTime = 0;
    let boostEndTime = null;
    let boosting = 0;
    let repairEnd = null;
    let repairDelay = 0;
    let drifting = false;
    let oldTick = entity.tick;
    entity.tick = () => {
        entity.x = entity.body.position[0];
        entity.y = -entity.body.position[1];
        entity.rotation = -entity.body.angle;

        if (p2BackWheel && p2BackWheel.equations && p2BackWheel.equations.length >= 1) {
            let eq = p2BackWheel.equations[1];
            if (Math.abs(eq.multiplier) >= eq.maxForce) {
                if (!drifting) {
                    drifting = true;
                    entity.sendRPC('drifting', true);
                }
            } else {
                if (drifting) {
                    drifting = false;
                    entity.sendRPC('drifting', null);
                }
            }
        }

        entity.updatePhysics();
        if (entity.netData.alive) {
            if (!entity.netData.loaded && Date.now() - lastFireTime > entity.netData.reloadTime) {
                entity.netData.loaded = true;
                entity.sendRPC('reload', null);
            }

            if (entity.netData.repairing) {
                if (repairEnd && Date.now() >= repairEnd) {
                    entity.endRepairing();
                }
            } else {
                if (entity.keys[INPUT_MAP['Repair']]) {
                    if (repairDelay < 10) {
                        repairDelay++;
                    } else {
                        repairDelay = 0;
                        entity.startRepairing();
                    }
                }
            }

            if (!entity.currentPlayer) {
                if (netData.tankType === 'turret') {
                    server.aiManager.botThink(fakeBot);
                } else if (subtype === 'colossus') {
                    server.aiManager.botThink(fakeBot);

                    if (entity.target && entity.target.valid && entity.target.netData && entity.target.netData.alive) {
                        let dist = Math.distanceBetween(entity, entity.target);
                        if (dist <= 125) {
                            entity.explode();
                        }
                    }
                }
            }

            if (entity.hasTurret) {
                entity.rotateTurret(tankData.turretSpeed);
                entity.turretRotation = entity.rotation + entity.turretInternalRotation;
            }

            if (!entity.netData.repairing) {
                if (tankData.engineBoostForce && entity.keys[INPUT_MAP['Boost']] && Date.now() - lastBoostTime > engineBoostMaxTime) {
                    lastBoostTime = Date.now();
                    boosting = 18;
                    entity.sendRPC('boost', engineBoostMaxTime);
                }

                if (entity.netData.hasWheels) {
                    let turnSpeed = 0.15;
                    if (entity.keys[INPUT_MAP['Turn Left']]) {
                        entity.wheelRotation -= turnSpeed;
                    } else if (entity.keys[INPUT_MAP['Turn Right']]) {
                        entity.wheelRotation += turnSpeed;
                    } else {
                        if (Math.abs(entity.wheelRotation) > turnSpeed) {
                            if (entity.wheelRotation > 0) {
                                entity.wheelRotation -= turnSpeed;
                            } else {
                                entity.wheelRotation += turnSpeed;
                            }
                        } else {
                            entity.wheelRotation = 0;
                        }
                    }

                    let maxSteer = Math.PI / 5;

                    if (entity.movementAxisX) {
                        entity.wheelRotation = maxSteer * -entity.movementAxisX;
                    }

                    if (entity.wheelRotation > maxSteer) {
                        entity.wheelRotation = maxSteer;
                    } else if (entity.wheelRotation < -maxSteer) {
                        entity.wheelRotation = -maxSteer;
                    }

                    p2FrontWheel.steerValue = entity.wheelRotation * -1;

                    p2BackWheel.engineForce = 0;
                    p2BackWheel.setBrakeForce(0);
                    p2BackWheel.setSideFriction(Math.round(100 * sideFrictionMod));
                    let engineForce = tankData.engineForce ? tankData.engineForce : 0;

                    let turnForce = tankData.turnForce ? tankData.turnForce : 0;
                    let turning = false;
                    if (hasTracks) {
                        if (entity.movementAxisX) {
                            let invertTurn = 1;
                            if (entity.movementAxisY < 0) {
                                invertTurn = -1;
                            }

                            entity.body.angularVelocity = turnForce * entity.movementAxisX * invertTurn;
                            turning = true;
                        } else {
                            if (entity.keys[INPUT_MAP['Reverse']]) {
                                if (entity.keys[INPUT_MAP['Turn Left']]) {
                                    entity.body.angularVelocity = -turnForce;
                                    turning = true;
                                } else if (entity.keys[INPUT_MAP['Turn Right']]) {
                                    entity.body.angularVelocity = turnForce;
                                    turning = true;
                                }
                            } else {
                                if (entity.keys[INPUT_MAP['Turn Left']]) {
                                    entity.body.angularVelocity = turnForce;
                                    turning = true;
                                } else if (entity.keys[INPUT_MAP['Turn Right']]) {
                                    entity.body.angularVelocity = -turnForce;
                                    turning = true;
                                }
                            }
                        }
                    }

                    if (turning) {
                        engineForce = tankData.engineForceWithTurn;
                    }

                    if (boosting > 0) {
                        boosting--;
                        engineForce = tankData.engineBoostForce;
                        p2BackWheel.setSideFriction(Math.round(80 * sideFrictionMod));
                        if (boosting <= 0) {
                            entity.sendRPC('endBoost', null);
                            boostEndTime = Date.now();
                        }
                    }

                    if (entity.keys[INPUT_MAP['Forward']] || boosting > 0) {
                        p2BackWheel.engineForce = engineForce;
                    } else if (entity.movementAxisY) {
                        p2BackWheel.engineForce = engineForce * entity.movementAxisY;
                    }

                    if (entity.keys[INPUT_MAP['Reverse']]) {
                        if(p2BackWheel.getSpeed() > 0.5){
                            p2BackWheel.setBrakeForce(Math.round(100 * sideFrictionMod));
                            p2BackWheel.setSideFriction(Math.round(70 * sideFrictionMod));
                        } else {
                            p2BackWheel.setBrakeForce(0);
                            let reverseMod = tankData.reverseMod ? tankData.reverseMod : 0.75;
                            p2BackWheel.engineForce = -engineForce * reverseMod;
                        }
                    }

                    if (entity.keys[INPUT_MAP['Handbrake']]) {
                        p2BackWheel.setBrakeForce(Math.round(50 * sideFrictionMod));
                        p2BackWheel.setSideFriction(Math.round(60 * sideFrictionMod));
                    }
                } else {
                    let usingEngine = false;
                    if (entity.keys[INPUT_MAP['Forward']] || entity.keys[INPUT_MAP['Reverse']]) {
                        usingEngine = true;
                    }

                    let turning = false;
                    let turnForce = tankData.turnForce;
                    if (usingEngine) {
                        turnForce = tankData.turnForceWithEngine;
                    }
                    if (boosting > 0) {
                        turnForce = 0.3;
                        entity.body.angularDamping = tankData.engineBoostAngularDamping ? tankData.engineBoostAngularDamping : 0.1;
                    }

                    turnForce *= turnForceMod;

                    if (!usingEngine) {
                        if (forceTurnLeft) {
                            entity.body.angularVelocity = -turnForce;
                            turning = true;
                        } else if (forceTurnRight) {
                            entity.body.angularVelocity = turnForce;
                            turning = true;
                        }
                    }

                    if (entity.movementAxisX) {
                        entity.body.angularVelocity = turnForce * entity.movementAxisX;
                        turning = true;
                    } else {
                        if (entity.keys[INPUT_MAP['Reverse']]) {
                            if (entity.keys[INPUT_MAP['Turn Left']]) {
                                entity.body.angularVelocity = -turnForce;
                                turning = true;
                            } else if (entity.keys[INPUT_MAP['Turn Right']]) {
                                entity.body.angularVelocity = turnForce;
                                turning = true;
                            }
                        } else {
                            if (entity.keys[INPUT_MAP['Turn Left']]) {
                                entity.body.angularVelocity = turnForce;
                                turning = true;
                            } else if (entity.keys[INPUT_MAP['Turn Right']]) {
                                entity.body.angularVelocity = -turnForce;
                                turning = true;
                            }
                        }
                    }

                    let angle = entity.rotation - (Math.PI / 2);
                    let engineForce = tankData.engineForce;
                    if (turning) {
                        engineForce = tankData.engineForceWithTurn;
                    }
                    if (boosting > 0) {
                        boosting--;
                        engineForce = tankData.engineBoostForce;
                        if (boosting <= 0) {
                            entity.sendRPC('endBoost', null);
                            boostEndTime = Date.now();
                        }
                    }

                    if (entity.movementAxisY) {
                        if (entity.movementAxisY < 0) {
                            engineForce = engineForce * (tankData.reverseMod ? tankData.reverseMod : 0.75);
                        }
                        engineForce *= entity.movementAxisY;
                        engineForce *= engineForceMod;
                        entity.body.applyForce([Math.cos(angle) * engineForce, Math.sin(angle) * -engineForce]);
                    } else {
                        engineForce *= engineForceMod;
                        if (entity.keys[INPUT_MAP['Forward']] || boosting > 0) {
                            entity.body.applyForce([Math.cos(angle) * engineForce, Math.sin(angle) * -engineForce]);
                        } else if (entity.keys[INPUT_MAP['Reverse']]) {
                            let reverseForce = engineForce * (tankData.reverseMod ? tankData.reverseMod : 0.75);
                            entity.body.applyForce([Math.cos(angle) * -reverseForce, Math.sin(angle) * reverseForce]);
                        }
                    }
                }
            } else {
                if (p2BackWheel) {
                    p2BackWheel.engineForce = 0;
                    p2BackWheel.setBrakeForce(Math.round(50 * sideFrictionMod));
                }
            }
        } else {
            if (p2BackWheel) {
                p2BackWheel.engineForce = 0;
                p2BackWheel.setBrakeForce(Math.round(50 * sideFrictionMod));
                p2FrontWheel.steerValue = entity.wheelRotation * -1;
            }
            if (entity.valid && server.gamemodeList[server.gamemode.type].allowRespawns && entity.deathTime && Date.now() > entity.deathTime+30000) {
                entity.remove();
            }
        }

        if (delayedDamage.length) {
            if (Date.now() >= delayedDamage[0].delay) {
                let damage = delayedDamage.shift();
                entity.damage(damage.amount, damage.attacker, damage.xpGains, damage.recordingData, damage.hitData);
            }
        }

        oldTick();
        if (entity.netData.alive) {
            entity.sendMoveUpdate = true;
        }
    };

    let turretGroup = null;
    for (let i = 0; i < vehicleInfo.objectgroup.length; i++) {
        let group = vehicleInfo.objectgroup[i];
        if (group.name === 'Turret') {
            turretGroup = group;
            turretGroup.offsetx = turretGroup.offsetx ? parseFloat(turretGroup.offsetx) : 0;
            turretGroup.offsety = turretGroup.offsety ? parseFloat(turretGroup.offsety) : 0;
            break;
        }
    }
    if (!turretGroup) {
        entity.hasTurret = false;
    }
    entity.getCurrentTurretPosition = () => {
        if (turretGroup) {
            let xoffx = (Math.cos(entity.rotation) * (turretGroup.offsetx * scale));
            let yoffx = (Math.sin(entity.rotation) * (turretGroup.offsetx * scale));
            let xoffy = (Math.cos(entity.rotation + Math.PI/2) * (turretGroup.offsety * scale));
            let yoffy = (Math.sin(entity.rotation + Math.PI/2) * (turretGroup.offsety * scale));
            return {
                x: entity.x + xoffx + xoffy,
                y: entity.y + yoffx + yoffy
            };
        }
        return {
            x: entity.x,
            y: entity.y
        };
    };

    entity.rotateTurret = (rotationSpeed) => {
        let diff = Math.abs(entity.turretRotation - entity.turretTargetRotation)%(Math.PI2);
        let modTurretTargetRotation = entity.turretTargetRotation - entity.rotation;

        if (tankData.turretRotationLimit) {
            if (diff <= rotationSpeed) {
                rotationSpeed *= 0.25;
            }
        }

        if (diff > rotationSpeed) {
            if (diff > Math.PI) {
                if (entity.turretInternalRotation < modTurretTargetRotation) {
                    entity.turretInternalRotation -= rotationSpeed;
                } else {
                    entity.turretInternalRotation += rotationSpeed;
                }
            } else {
                if (entity.turretInternalRotation < modTurretTargetRotation) {
                    entity.turretInternalRotation += rotationSpeed;
                } else {
                    entity.turretInternalRotation -= rotationSpeed;
                }
            }
        } else {
            entity.turretInternalRotation = modTurretTargetRotation;
        }

        if (tankData.turretRotationLimit) {
            forceTurnLeft = false;
            forceTurnRight = false;

            let rot = (entity.turretInternalRotation % Math.PI2 + Math.PI2) % Math.PI2;
            let rotationLimitRight = ((-tankData.turretRotationLimit - Math.PI / 2) % Math.PI2 + Math.PI2) % Math.PI2;
            let rotationLimitLeft = ((tankData.turretRotationLimit - Math.PI / 2) % Math.PI2 + Math.PI2) % Math.PI2;
            if (rot < rotationLimitRight) {
                forceTurnRight = true;
                entity.turretInternalRotation = rotationLimitRight;
            } else if (rot > rotationLimitLeft) {
                forceTurnLeft = true;
                entity.turretInternalRotation = rotationLimitLeft;
            }

            if (entity.currentPlayer && entity.currentPlayer.isBot) {
                forceTurnLeft = false;
                forceTurnRight = false;
            }
        }
    };

    entity.startRepairing = () => {
        if (!entity.netData.repairing && entity.netData.health < 100 && !entity.netData.disableRepairing) {
            repairEnd = Date.now() + 7500;
            entity.netData.repairing = true;
            entity.sendRPC('setRepairing', entity.netData.repairing);
        }
    };

    entity.endRepairing = () => {
        if (entity.netData.repairing) {
            entity.damageAssists = {};
            repairEnd = null;
            entity.netData.health = 100;
            entity.netData.repairing = false;
            entity.sendRPC('setRepairing', entity.netData.repairing);
        }
    };

    entity.repair = (amount) => {
        entity.netData.health += amount;
        if (entity.netData.health > 100) {
            entity.damageAssists = {};
            entity.netData.health = 100;
        }
        entity.sendRPC('repair', Math.ceil(entity.netData.health));
    };

    entity.useAbility = (index) => {
        if (index === null || index === undefined || !entity.netData.alive || !entity.currentPlayer || !entity.currentPlayer.killstreakSlots || !entity.currentPlayer.killstreakSlots[index] || !entity.currentPlayer.killstreakSlots[index].active) {
            return;
        }

        let ability = entity.currentPlayer.killstreakSlots[index].type;
        entity.currentPlayer.killstreakSlots[index].active = false;
        server.sendKillstreakInfo(entity.currentPlayer);

        if (ability === 'wall') {
            let angle = entity.rotation - (Math.PI/2);
            let dist = (height/2) + 6;
            server.createObject('wall_deployable', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), 0, entity.rotation, 128, 64, entity.team);
        } else if (ability === 'grenade') {
            let angle = entity.turretRotation;
            let dist = 12;
            let grenade = server.createObject('grenade', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), 0, angle + Math.PI/2, 38, 38, entity.team);
            let force = 55;
            grenade.owner = entity;
            grenade.body.velocity[0] = (Math.cos(angle) * force);
            grenade.body.velocity[1] = -(Math.sin(angle) * force);
        } else if (ability === 'landmine') {
            let angle = entity.rotation + (Math.PI/2);
            let dist = (height/2) + 12;
            let landmine = server.createObject('landmine', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), 0, entity.rotation, 64, 64, entity.team);
            landmine.owner = entity;
        } else if (ability === 'colossus') {
            let angle = entity.rotation + (Math.PI/2);
            let dist = (height/2) + 12;
            let colossus = server.createVehicle('colossus', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), 0, entity.rotation + Math.PI, 64, 64, entity.team);
            colossus.owner = entity;
        } else if (ability === 'airstrike') {
            let angle = entity.turretRotation;
            let dist = 5000;
            let size = Math.round(128*1.5);
            let airstrike = server.createObject('airstrike', entity.x + (Math.cos(angle - Math.PI) * dist), entity.y + (Math.sin(angle - Math.PI) * dist), 0, angle + Math.PI/2, size, size, entity.team);
            airstrike.owner = entity;
            let strikeDist = 250;
            airstrike.strikePosition = {
                x: entity.x + (Math.cos(angle) * strikeDist),
                y: entity.y + (Math.sin(angle) * strikeDist)
            };
            airstrike.dx = Math.cos(angle) * 150;
            airstrike.dy = Math.sin(angle) * 150;

            entity.sendRPC('soundPlay', {
                sound: 'airstrike',
                volume: 0.35
            });
        } else if (ability === 'artillery') {
            let angle = entity.turretRotation;
            let dist = 12;
            let grenade = server.createObject('grenade', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), 0, angle + Math.PI/2, 32, 16, entity.team, {
                subtype: 'smoke'
            });
            grenade.body.angularVelocity = -2 + (Math.random()*4);
            let force = 55;
            grenade.owner = entity;
            grenade.body.velocity[0] = (Math.cos(angle) * force);
            grenade.body.velocity[1] = -(Math.sin(angle) * force);
        }
    };

    let exploded = false;
    entity.explode = () => {
        if (exploded) {
            return;
        }

        exploded = true;
        entity.sendRPC('explode', null);
        entity.remove();
        let maxDist = 250;
        for (let i = 0; i < server.entities.length; i++) {
            let other = server.entities[i];
            let dist = Math.distanceBetween(entity, other);
            if (dist <= maxDist) {
                let angle = Math.angleBetween(entity, other);
                let percent = 1 - (dist / maxDist);
                let force = 3000 * percent;
                let damage = 150 * percent;
                if (other.body) {
                    other.body.applyForce([Math.cos(angle) * force, Math.sin(angle) * -force]);
                }
                if (damage > 85) {
                    damage = 85;
                }
                if (entity.team !== other.team && other.netData.alive) {
                    if (damage && other.damage) {
                        let xpGains = [];
                        if (entity.subtype === 'colossus') {
                            xpGains.push({
                                xp: 50,
                                reason: 'Colossus'
                            });
                        }
                        if (damage >= 5) {
                            other.damage(damage, entity, xpGains);
                        }
                    }
                }
            }
        }
    };

    entity.onKeyDown = () => {
        if (entity.keys[INPUT_MAP['Killstreak 1']]) {
            entity.useAbility(0);
        } else if (entity.keys[INPUT_MAP['Killstreak 2']]) {
            entity.useAbility(1);
        } else if (entity.keys[INPUT_MAP['Killstreak 3']]) {
            entity.useAbility(2);
        }
    };

    let hitPoint = p2.vec2.create();
    entity.traceShell = (from, to, paths, traceCount) => {
        let raycast = entity.performRaycast(from, to);
        raycast.getHitPoint(hitPoint, rayClosest);

        let testedHit = null;
        if (traceCount === 0) {
            let hitTests = server.world.hitTest(from, server.world.bodies);
            if (hitTests && hitTests[0]) {
                testedHit = hitTests[0];
                if (testedHit?.entity === entity || !testedHit?.collisionResponse) {
                    testedHit = null;
                } else if (testedHit?.entity?.type === 'static_object' && (entity.ignoreInteralTerrainShot || testedHit.entity.subtype === 'terrain')) {
                    testedHit = null;
                } else if (testedHit?.entity?.netData?.mapProperties?.disableHitboxCollision) {
                    testedHit = null;
                }
            }

            if (!testedHit) {
                let turretPos = entity.getCurrentTurretPosition();
                let barrelFrom = [turretPos.x, -turretPos.y];
                let barrelTo = [from[0], from[1]];
                let barrelRaycast = entity.performBarrelRaycast(barrelFrom, barrelTo);

                if (barrelRaycast.hasHit() && barrelRaycast?.body && barrelRaycast?.body?.entity !== entity) {
                    entity.performRaycast(barrelFrom, barrelTo);
                    testedHit = raycast.body;
                }
            }
        }

        if (testedHit) {
            raycast.set(
                0,
                testedHit.shapes[0],
                testedHit,
                0.01,
                0
            );
            raycast.getHitPoint(hitPoint, rayClosest);
        }

        let outTo = {x: to[0], y: to[1]};
        if (raycast.hasHit()) {
            outTo.x = hitPoint[0];
            outTo.y = hitPoint[1];
        }

        paths.push({
            from: {
                x: from[0],
                y: -from[1]
            },
            to: {
                x: outTo.x,
                y: -outTo.y
            },
            normal: [
                raycast.normal[0],
                -raycast.normal[1]
            ]
        });

        if (raycast.hasHit()) {
            p2.vec2.reflect(rayClosest.direction, rayClosest.direction, raycast.normal);

            let hitAngle = Math.angleBetween(outTo, {
                x: from[0],
                y: from[1]
            });

            let normalAngle = Math.angleBetween({
                x: 0,
                y: 0
            }, {
                x: raycast.normal[0],
                y: raycast.normal[1]
            });
            paths[paths.length-1].normalAngle = -normalAngle;

            let hitType = 'front';
            if (raycast.shape && raycast.shape.hitboxProperties) {
                if (raycast.shape.hitboxProperties['face' + raycast.faceIndex]) {
                    hitType = raycast.shape.hitboxProperties['face' + raycast.faceIndex];
                }
            } else {
                if (raycast.faceIndex === 0) {
                    hitType = 'rear';
                } else if (raycast.faceIndex === 1 || raycast.faceIndex === 3) {
                    hitType = 'side';
                } else {
                    hitType = 'front';
                }
            }

            let reflectAngle = Math.angleBetween(outTo, {
                x: outTo.x + rayClosest.direction[0]*50,
                y: outTo.y + rayClosest.direction[1]*50
            });
            let angleDiff = Math.PI - Math.abs(Math.abs(reflectAngle - hitAngle) - Math.PI);
            let penetrationAngle = PENETRATION_ANGLE;
            if (raycast?.body?.entity?.type === 'static_object') {
                penetrationAngle = PENETRATION_ANGLE_STATIC;
            } else {
                let penetrationMod = 1 + ((tankData.damageMod-1) * 0.3);
                if (raycast?.body?.entity?.type === 'vehicle') {
                    let otherTankData = raycast.body.entity.getTankData();
                    let armorMod = otherTankData.armorMod;
                    if (hitType === 'side' && otherTankData.armorModSide) {
                        armorMod = otherTankData.armorModSide;
                    }
                    if (hitType === 'rear' && otherTankData.armorModRear) {
                        armorMod = otherTankData.armorModRear;
                    }

                    penetrationMod *= 1 - ((armorMod-1) * 0.2);

                    if (hitType === 'side') {
                        penetrationMod *= 1.05;
                    } else if (hitType === 'rear') {
                        penetrationMod *= 1.1;
                    }
                }

                penetrationAngle *= penetrationMod;
            }

            if (raycast.body && raycast.body.entity) {
                paths[paths.length-1].hitEntityID = raycast.body.entity.id;
                paths[paths.length-1].hitOffset = {
                    x: raycast.body.entity.x - paths[paths.length-1].to.x,
                    y: raycast.body.entity.y - paths[paths.length-1].to.y
                };
            }

            if (Math.abs(angleDiff) > penetrationAngle) {
                if (traceCount < MAX_BOUNCE_AMOUNT) {
                    if (raycast.body && raycast.body.entity && raycast.body.entity.currentPlayer && raycast.body.entity.team !== entity.team) {
                        raycast.body.entity.delayDamage(0, raycast.body.entity, 250, [{
                            xp: 25,
                            reason: 'Incoming Ricochet'
                        }]);
                    }
                    let offsetAmount = 0;
                    if (traceCount >= 1) {
                        offsetAmount = traceCount * 0.1;
                    }
                    let offsetAngle = -offsetAmount + (Math.random() * (offsetAmount*2));
                    let angleBetween = Math.angleBetween({x:0, y:0}, {x: rayClosest.direction[0], y: rayClosest.direction[1]});
                    rayClosest.direction[0] = Math.cos(angleBetween + offsetAngle);
                    rayClosest.direction[1] = Math.sin(angleBetween + offsetAngle);
                    entity.traceShell([outTo.x, outTo.y], [outTo.x + rayClosest.direction[0] * MAX_SHELL_DISTANCE, outTo.y + rayClosest.direction[1] * MAX_SHELL_DISTANCE], paths, traceCount+1);
                }
            } else {
                let totalDist = 0;
                for (let i=0; i<paths.length; i++) {
                    totalDist += Math.distanceBetween(paths[i].from, paths[i].to);
                }
                if (raycast.body && raycast.body.entity) {
                    paths[paths.length-1].didHit = true;
                }
                paths[paths.length-1].didHitVehicle = raycast.body && raycast.body.entity && (raycast.body.entity.type === 'vehicle' || raycast.body.entity?.netData?.mapProperties?.hitEffect === 'vehicle') && raycast.body.entity.netData.alive && entity.team !== raycast.body.entity.team && (!raycast.body.entity.hasSpawnProtection || !raycast.body.entity.hasSpawnProtection());
                paths[paths.length-1].didHitTerrain = raycast.body && raycast.body.entity && raycast.body.entity.type === 'static_object';

                if (raycast.body && raycast.body.entity && raycast.body.entity.delayDamage && (entity.team !== raycast.body.entity.team || !raycast.body.entity.netData.alive || raycast.body.entity.type !== 'vehicle')) {
                    let damage = 30;
                    let xpGains = [];

                    paths[paths.length-1].didHitEnemy = (entity.team !== raycast.body.entity.team && !raycast.body.entity.disableDamage);

                    let hitDistance = 0;
                    if (raycast.body.entity.type === 'vehicle') {
                        if (raycast.body.entity.subtype === 'colossus') {
                            damage = 10000;
                            xpGains.push({
                                xp: 50,
                                reason: 'Colossus'
                            });
                        } else if (testedHit) {
                            damage = 75;
                            xpGains.push({
                                xp: 75,
                                reason: 'Point Blank Hit'
                            });
                            hitType = 'point_blank';
                        } else {
                            switch (hitType) {
                                case 'rear':
                                    damage = 10000;
                                    xpGains.push({
                                        xp: 100,
                                        reason: 'Rear Armor Hit'
                                    });
                                    break;
                                case 'side':
                                    damage = 50;
                                    xpGains.push({
                                        xp: 50,
                                        reason: 'Side Armor Hit'
                                    });
                                    break;
                                default:
                                    xpGains.push({
                                        xp: 25,
                                        reason: 'Front Armor Hit'
                                    });
                                    break;
                            }
                        }

                        if (traceCount >= 1) {
                            for (let i = 0; i < traceCount; i++) {
                                xpGains.push({
                                    xp: 75,
                                    reason: 'Ricochet'
                                });
                            }
                        }

                        if (boosting > 0 || (boostEndTime && Date.now()-boostEndTime <= 750)) {
                            xpGains.push({
                                xp: 50,
                                reason: 'Boosting'
                            });
                        }

                        let distInMeters = Math.round(totalDist / PIXEL_TO_METER);
                        hitDistance = distInMeters;
                        if (distInMeters >= 60) {
                            xpGains.push({
                                xp: Math.round(distInMeters),
                                reason: 'Long Shot',
                                extraReason: '(' + distInMeters + 'm)'
                            });
                        }
                    }

                    damage *= tankData.damageMod;
                    raycast.body.entity.delayDamage(damage, entity, totalDist*0.35, xpGains, {
                        hitType: hitType,
                        position: paths[paths.length-1].to,
                        angle: -hitAngle,
                        distance: hitDistance
                    });
                    paths[paths.length-1].hitTeam = raycast.body.entity.team;
                }
            }
        }

        return paths;
    };

    entity.fire = () => {
        if (subtype === 'colossus') {
            entity.kill();
            return;
        }
        if (!entity.netData.loaded || !entity.netData.alive || !entity.hasTurret) {
            return;
        }
        lastFireTime = Date.now();
        entity.netData.loaded = false;

        let barrelLength = 45;
        if (tankData && tankData.barrelLength) {
            barrelLength = tankData.barrelLength;
        }

        let turretPos = entity.getCurrentTurretPosition();
        let from = [turretPos.x + (Math.cos(entity.turretRotation) * barrelLength), -(turretPos.y + (Math.sin(entity.turretRotation) * barrelLength))];
        let to = [entity.x + (Math.cos(entity.turretRotation) * MAX_SHELL_DISTANCE), -(entity.y + (Math.sin(entity.turretRotation) * MAX_SHELL_DISTANCE))];
        let paths = entity.traceShell(from, to, [], 0);
        entity.sendRPC('fire', paths);

        let force = tankData.fireForce;
        let forceDir = [Math.cos(entity.turretRotation + Math.PI) * force, Math.sin(entity.turretRotation + Math.PI) * -force];
        entity.body.applyForce(forceDir, [from[0] - entity.x, from[1] + entity.y]);
    };

    let lastPing = Date.now()-5000;
    entity.pingLocation = (pos) => {
        if (Date.now() > lastPing + 7500) {
            entity.sendRPC('pingLocation', {
                x: pos.x,
                y: pos.y
            });
            lastPing = Date.now();
        }
    };

    let raycastResult = new p2.RaycastResult();
    entity.performRaycast = (start, end) => {
        p2.vec2.copy(rayClosest.from, start);
        p2.vec2.copy(rayClosest.to, end);
        rayClosest.update();
        raycastResult.reset();
        server.world.raycast(raycastResult, rayClosest);
        return raycastResult;
    };

    let raycastBarrelResult = new p2.RaycastResult();
    entity.performBarrelRaycast = (start, end) => {
        p2.vec2.copy(rayBarrelClosest.from, start);
        p2.vec2.copy(rayBarrelClosest.to, end);
        rayBarrelClosest.update();
        raycastBarrelResult.reset();
        server.world.raycast(raycastBarrelResult, rayBarrelClosest);
        return raycastBarrelResult;
    };

    entity.delayDamage = (amount, attacker, delayAmountInMilliseconds, xpGains, hitData) => {
        delayedDamage.push({
            amount: amount,
            attacker: attacker,
            delay: Date.now() + Math.ceil(delayAmountInMilliseconds),
            xpGains: xpGains,
            recordingData: {
                recordingTime: server.recording.getCurrentTime(),
                recordingLength: Math.ceil(delayAmountInMilliseconds)
            },
            hitData: hitData
        });
    };

    entity.hasSpawnProtection = () => {
        if (!server.tutorial && !server.getConfig().isSandbox && entity.subtype !== 'colossus' && entity.spawnPosition) {
            let spawnProtectionLifetime = 12000;
            if (server.gamemodeList[server.gamemode.type]?.spawnProtectionLifetime) {
                spawnProtectionLifetime = server.gamemodeList[server.gamemode.type].spawnProtectionLifetime;
            }
            if (Date.now() < entity.spawnTime + spawnProtectionLifetime && Math.distanceBetween(entity, entity.spawnPosition) <= 300) {
                return true;
            } else if(entity.spawnPosition) {
                delete entity.spawnPosition;
            }
        }
        return false;
    };

    entity.damageAssists = {};
    entity.damage = (amount, attacker, additionalXpGains, recordingData, hitData) => {
        if (hitData && hitData.impactDamage) {
            let m1 = 10;
            let m2 = 10;
            let v1 = hitData.body1M;
            let v2 = hitData.body2M;
            let v1f = Math.magnitude({dx: hitData.body1.velocity[0], dy: hitData.body1.velocity[1]});
            let v2f = Math.magnitude({dx: hitData.body2.velocity[0], dy: hitData.body2.velocity[1]});
            let impactForce = Math.abs((m1 * v1 + m2 * v2 - m1 * v1f - m2 * v2f) / (1/2));

            if (impactForce > 600) {
                let damageMul = 5;
                if (impactForce >= 2000) {
                    damageMul = 15;
                }
                amount = Math.round((impactForce/300) * damageMul);
                entity.sendRPC('onRam');
            }

            hitData = null;
        }

        let originalAttacker = attacker;
        if (attacker && attacker.owner) {
            attacker = attacker.owner;
        }
        if (entity.disableDamage) {
            return;
        }
        let spawnProtected = false;
        if (entity.hasSpawnProtection()) {
            amount = 0;
            spawnProtected = true;
        }

        if (attacker && entity.currentPlayer && !entity.currentPlayer.isBot && attacker.currentPlayer && attacker.currentPlayer.isBot) {
            amount = Math.round(amount * 0.7);
        }

        if (entity.netData.alive) {
            let armorMod = tankData.armorMod;
            if (hitData && hitData.hitType === 'side' && tankData.armorModSide) {
                armorMod = tankData.armorModSide;
            }
            amount *= 1+(1-armorMod);
            if (amount < 0) {
                amount = 0;
            }
            entity.netData.health -= amount;

            if (amount > 0 && attacker && attacker.currentPlayer && !attacker.currentPlayer.isBot) {
                if (!entity.damageAssists[attacker.currentPlayer.id]) {
                    entity.damageAssists[attacker.currentPlayer.id] = 0;
                }
                entity.damageAssists[attacker.currentPlayer.id] += amount;
            }

            let xpGains = [];
            let isKill = false;
            if (entity.netData.health <= 0 || (amount > 0 && entity.netData.repairing)) {
                entity.netData.health = 0;

                if (entity.subtype === 'tank') {
                    isKill = true;
                    xpGains = [
                        {
                            xp: 200,
                            reason: 'Kill'
                        }
                    ];

                    if (entity.netData.repairing) {
                        xpGains.push({
                            xp: 50,
                            reason: 'Repair Kill'
                        });
                    }
                }

                if (attacker && attacker.netData && !attacker.netData.alive) {
                    xpGains.push({
                        xp: 50,
                        reason: 'Beyond the Grave'
                    });
                }
            }

            if (server.gamemodeList[server.gamemode.type].onPlayerDamaged) {
                if (!additionalXpGains) {
                    additionalXpGains = [];
                }
                server.gamemodeList[server.gamemode.type].onPlayerDamaged(entity, amount, isKill, additionalXpGains);
            }

            if (attacker && attacker.currentPlayer && !spawnProtected) {
                if (additionalXpGains && additionalXpGains.length) {
                    xpGains = xpGains.concat(additionalXpGains);
                }
                let totalXP = server.recordXP(attacker.currentPlayer, xpGains, Math.floor(amount));

                if (entity.netData.health <= 0) {
                    let recordingTime = server.recording.getCurrentTime();
                    let recordingLength = null;
                    if (recordingData) {
                        if (recordingData.recordingTime) {
                            recordingTime = recordingData.recordingTime;
                        }
                        if (recordingData.recordingLength) {
                            recordingLength = recordingData.recordingLength;
                        }
                    }
                    let bestClipData = {
                        score: totalXP*1.25,
                        serverTime: Date.now(),
                        entityId: attacker.id,
                        clientId: attacker?.currentPlayer?.id,
                        victimId: entity.id,
                        originalAttackerId: originalAttacker.id,
                        attackerIsBot: !!attacker.currentPlayer?.isBot,
                        victimIsBot: !!entity.currentPlayer?.isBot,
                        playerName: attacker.currentPlayer ? attacker.currentPlayer.name : null,
                        playerXP: (attacker.currentPlayer && attacker.currentPlayer.user && attacker.currentPlayer.user.xp) ? attacker.currentPlayer.user.xp : null,
                        followShot: recordingTime - 1500,
                        timeOfInterest: recordingTime,
                        recordingLength: recordingLength
                    };
                    if (attacker.currentPlayer) {
                        attacker.currentPlayer.lastBestClipData = bestClipData;
                    }
                    server.recordPotentialBestClip(bestClipData);
                }
            }

            entity.sendRPC('onDamage', Math.ceil(entity.netData.health));

            if (entity.netData.health <= 0) {
                if (hitData) {
                    hitData.damage = Math.round(amount);
                    if (hitData.damage > 100) {
                        hitData.damage = 100;
                    }
                }
                entity.kill(attacker, hitData);
            }
        } else if (!entity.netData.alive && entity.valid) {
            if (!entity.deadHitDamage) {
                entity.deadHitDamage = 0;
            }
            entity.deadHitDamage += amount;
            if (entity.deadHitDamage >= 20) {
                entity.sendRPC('explode', null);
                entity.remove();

                let debrisAngle = entity.rotation;
                let debrisScale = 0.6;

                let debris = [1, 2, 3];
                let debrisToRemove = Math.round(Math.random() * 2);
                for (let i=0; i<1+debrisToRemove; i++) {
                    delete debris[Math.floor(Math.random()*debris.length)];
                }

                let angle = debrisAngle + Math.PI;
                let dist = 30;
                if (debris.includes(1)) {
                    let obj = server.createObject('dynamic_object', entity.x + (Math.cos(angle) * dist), entity.y + (Math.sin(angle) * dist), 0, debrisAngle, 128 * debrisScale, 128 * debrisScale, -1, {
                        health: 20,
                        asset: {
                            texture: 'debris1',
                            tilewidth: 128,
                            tileheight: 128
                        },
                        mapProperties: {
                            shape: 'polygon',
                            polygon: '-3.09091,5.81818 91.7273,-63.5 52.5,-107 -4.81818,-107.5',
                            polygonScale: debrisScale,
                            effect: 'burning',
                            effectLifetime: 500,
                            fadeFrameX: 1,
                            despawnTime: 30,
                            sizeOffset: 12 * debrisScale,
                            health: 20,
                            frameX: 0,
                            frameY: 0,
                            mass: 20
                        }
                    });
                    obj.body.applyForce([Math.cos(angle) * 500, Math.sin(angle) * -500]);
                    obj.body.angularVelocity = ((Math.random() * 2) - 1) * 0.25;
                }

                if (debris.includes(2)) {
                    let angle = debrisAngle - (Math.PI/8);
                    let dist = 20;
                    let obj = server.createObject('dynamic_object', entity.x + (Math.cos(angle) * dist), entity.y+ (Math.sin(angle) * dist), 0, debrisAngle, 128*debrisScale, 128*debrisScale, -1, {
                        health: 20,
                        asset: {
                            texture: 'debris2',
                            tilewidth: 128,
                            tileheight: 128
                        },
                        mapProperties: {
                            shape: 'polygon',
                            polygon: '-2.54545,8 -2.31818,-106.455 88.7273,-49.9545',
                            polygonScale: debrisScale,
                            effect: 'burning',
                            effectLifetime: 500,
                            fadeFrameX: 1,
                            despawnTime: 30,
                            sizeOffset: 12 * debrisScale,
                            health: 20,
                            frameX: 0,
                            frameY: 0,
                            mass: 20
                        }
                    });
                    obj.body.applyForce([Math.cos(angle)*200, Math.sin(angle)*-200]);
                    obj.body.angularVelocity = ((Math.random() * 2) - 1) * 0.25;
                }

                if (debris.includes(3)) {
                    let angle = debrisAngle + Math.PI/2;
                    let dist = 30;
                    let obj = server.createObject('dynamic_object', entity.x + (Math.cos(angle) * dist), entity.y+ (Math.sin(angle) * dist), 0, debrisAngle-(Math.PI/2), 128*debrisScale, 128*debrisScale, -1, {
                        health: 20,
                        asset: {
                            texture: 'debris3',
                            tilewidth: 128,
                            tileheight: 128
                        },
                        mapProperties: {
                            shape: 'polygon',
                            polygon: '-1.81818,3.45455 79.7727,2.72727 79.6364,-105 -1.36364,-43.5909',
                            polygonScale: debrisScale,
                            effect: 'burning',
                            effectLifetime: 500,
                            fadeFrameX: 1,
                            despawnTime: 30,
                            sizeOffset: 12 * debrisScale,
                            health: 20,
                            frameX: 0,
                            frameY: 0,
                            mass: 20
                        }
                    });
                    obj.body.applyForce([Math.cos(angle)*1000, Math.sin(angle)*-1000]);
                    obj.body.angularVelocity = ((Math.random() * 2) - 1) * 0.25;
                }

                let totalRepairKits = 3;
                for (let i=0; i<totalRepairKits; i++) {
                    let angle = debrisAngle + (i * ((Math.PI*2)/totalRepairKits));
                    let dist = 40;
                    let obj = server.createObject('dynamic_object', entity.x + (Math.cos(angle) * dist), entity.y+ (Math.sin(angle) * dist), 0, debrisAngle-(Math.PI/2), 32, 64, entity.team, {
                        health: 20,
                        asset: {
                            texture: 'repair_kit'
                        },
                        mapProperties: {
                            despawnTime: 30,
                            sizeOffset: 8,
                            frameX: 0,
                            frameY: 0,
                            mass: 5,
                            disableHitboxCollision: true,
                            pickupType: 'health',
                            pickupAmount: 10
                        }
                    });
                    obj.body.applyForce([Math.cos(angle)*200, Math.sin(angle)*-200]);
                    obj.body.angularVelocity = ((Math.random() * 2) - 1) * 0.25;
                }
            }
        }
    };

    let previousTerrains = [];
    entity.currentTerrain = null;
    entity.terrainEnter = (type, terrain) => {
        let newTerrain;
        if (type === 'default') {
            newTerrain = null;
        } else {
            newTerrain = {
                type: type
            };
        }

        if (entity.currentTerrain) {
            previousTerrains.push(entity.currentTerrain);
        }
        entity.currentTerrain = newTerrain;
        entity.sendRPC('updateTerrain', entity.currentTerrain);
    };

    entity.terrainLeave = (type) => {
        if (entity.currentTerrain && type === entity.currentTerrain.type) {
            entity.currentTerrain = null;
        }
        if (!entity.currentTerrain && previousTerrains.length) {
            entity.currentTerrain = previousTerrains.pop();
        }
        entity.sendRPC('updateTerrain', entity.currentTerrain);
    };

    let lastRamEntity = null;
    let lastRamTime = 0;
    entity.collision = (body, data, shape) => {
        if (body && body.entity) {
            //Code for trailers
            let trailer = null;
            let trailerShape = null;
            let other = null;
            if (data.shapeA && data.shapeA.hitboxProperties && data.shapeA.hitboxProperties.isAttachmentPoint) {
                trailer = data.bodyA.entity;
                trailerShape = data.shapeA;
                other = data.bodyB.entity;
            } else if (data.shapeB && data.shapeB.hitboxProperties && data.shapeB.hitboxProperties.isAttachmentPoint) {
                trailer = data.bodyB.entity;
                trailerShape = data.shapeB;
                other = data.bodyA.entity;
            }
            if (trailer && trailer.valid && trailerShape && other && other.valid && other.type === 'vehicle' && other.netData.alive && !trailer.body.constraint && !other.body.constraint) {
                if (!trailer.carrier || !trailer.carrier.valid) {
                    trailer.carrier = other;

                    let constraint = new p2.RevoluteConstraint(other.body, trailer.body, {
                        localPivotA: [0, -54],
                        localPivotB: trailerShape.centerOfMass,
                    });
                    trailer.body.constraint = constraint;
                    other.body.constraint = constraint;
                    server.world.addConstraint(constraint);
                }
            }

            let otherEntity = body.entity;
            if (entity.netData.alive && boosting && (entity.team !== otherEntity.team || !otherEntity.netData.alive) && !entity.netData.repairing && (otherEntity.type === 'vehicle' || otherEntity.subtype === 'dynamic_object')) {
                let relativeVelocity = Math.magnitude({
                    dx: entity.body.velocity[0] - body.velocity[0],
                    dy: entity.body.velocity[1] - body.velocity[1]
                });

                let angle = Math.angleBetween(entity, otherEntity) + (Math.PI / 2);
                let angleDiff = Math.abs(angle - entity.rotation);
                if (angleDiff > Math.PI) {
                    angleDiff = Math.abs(angleDiff - (Math.PI * 2));
                }
                if (relativeVelocity >= 30 && angleDiff <= Math.PI / 6 && (otherEntity !== lastRamEntity || Date.now()-lastRamTime >= 1000)) {
                    lastRamTime = Date.now();
                    lastRamEntity = otherEntity;
                    let ramDamage = 25;
                    if (data.type === 'light') {
                        ramDamage = 15;
                    } else if (data.type === 'medium') {
                        ramDamage = 25;
                    } else if (data.type === 'heavy') {
                        ramDamage = 35;
                    }
                    ramDamage = Math.round(ramDamage + ((tankMass-20) * 0.75));
                    otherEntity.delayDamage(ramDamage, entity, 150, [{
                        xp: 100,
                        reason: 'Ram'
                    }]);
                    entity.sendRPC('onRam');
                }
            }

            if (netData.tankType === 'racecar') {
                let relativeVelocity = Math.magnitude({
                    dx: entity.body.velocity[0] - body.velocity[0],
                    dy: entity.body.velocity[1] - body.velocity[1]
                });

                let firstImpact = false;
                for (let i=0; i<data.contactEquations.length; i++) {
                    let eq = data.contactEquations[i];
                    if (eq.firstImpact) {
                        firstImpact = true;
                        break;
                    }
                }

                if (firstImpact && relativeVelocity >= 1) {
                    entity.delayDamage(0, null, 50, null, {
                        impactDamage: true,
                        body1M: Math.magnitude({dx: entity.body.velocity[0], dy: entity.body.velocity[1]}),
                        body2M: Math.magnitude({dx: body.velocity[0], dy: body.velocity[1]}),
                        body1: entity.body,
                        body2: body
                    });
                }
            }
        }
    };

    entity.kill = (attacker, hitData) => {
        if (entity.netData.alive) {
            entity.netData.alive = false;

            if (entity.currentPlayer) {
                server.resetKillstreakSlots(entity.currentPlayer);
                server.recordStatTotalIncludeVehicle(entity.currentPlayer, 'Death', 1);
            }

            if (entity.damageAssists && Object.keys(entity.damageAssists).length) {
                for (let i=0; i<server.getClients().length; i++) {
                    let client = server.getClients()[i];
                    if (client && client.connected && client.player !== attacker) {
                        let damageAmount = entity.damageAssists[client.id];
                        if (damageAmount && client.player) {
                            client.player.delayDamage(0, client.player, 250, [{
                                xp: 100,
                                reason: 'Assist'
                            }]);
                        }
                    }
                }
                entity.damageAssists = {};
            }

            entity.deathTime = Date.now();
            let data = {};
            if (hitData) {
                data.hitData = hitData;
            }
            if (attacker && attacker.netData) {
                data.attackerId = attacker.id;
                data.attackerName = attacker.netData.name;
                data.attackerVehicleType = attacker.netData.tankType;
            }

            if (entity.subtype === 'colossus') {
                entity.explode();
            } else {
                if (entity.netData.repairing) {
                    data.tip = 'You die in one shot while you are repairing, get behind cover to repair!'
                }
                entity.sendRPC('kill', data);
            }

            if (entity.currentPlayer) {
                server.recordKill(attacker, entity, hitData);
            }
        }
    };

    entity.onRemove = () => {
        if (p2Vehicle) {
            p2Vehicle.removeFromWorld();
        }
        if (entity.body.constraint) {
            let constraint = entity.body.constraint;
            if (constraint.bodyA.constraint) {
                delete constraint.bodyA.constraint;
            }
            if (constraint.bodyB.constraint) {
                delete constraint.bodyB.constraint;
            }
            server.world.removeConstraint(constraint);
        }
        server.world.removeBody(entity.body);
    };

    entity.getTankData = () => {
        return tankData;
    };

    return entity;
};
},{"../../shared_functions":108,"./collision_groups":119,"p2":54}],124:[function(require,module,exports){
(function (global){(function (){
const p2 = require("p2");
const collisionGroups = require("./entities/collision_groups");
const gunGameVehicles = [
    'pummeler_ii',
    'light_tank',
    'm42_chuffy',
    'zag_mm',
    'medium_halftrack',
    'heckler',
    'jagdsherwin',
    'jagdpanthera',
    'ant_57',
    'hamonag_at',
    'p_34_85',
    'hefty_mk1',
    'tigur1',
    'queen_tigress',
    'm88_greyman',
    'cheetah',
    'light_scout',
    'colossus'
];

module.exports = function(server) {
    return {
        sandbox: {
            allowRespawns: true,
            onGameStarted: () => {
                server.enableBots = false;
                server.aiManager.destroyAllBots();
            },
        },
        racing: {
            title: 'Racing',
            text: 'Race other players to be the first to cross the finish line. Use space for the handbrake!',
            maxPlayers: 16,
            maxPlayersPerTeam: 8,
            mapRotation: [
                'racetrack'
            ],
            allowRespawns: true,
            disableVehicleSelection: true,
            disableTeamJoining: true,
            teamCount: 0,
            onGameStarted: () => {
                for (let i=0; i<server.clients.length; i++) {
                    server.createTeam();
                }

                let teams = Object.keys(server.teamData);
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    team.spawns = [server.mapData.randomSpawns.shift()];
                }
            },
            onSpawnPlayer: (client) => {
                client.overrideSlotTank = 'racecar';
            }
        },
        battle: {
            title: 'Battle',
            text: 'Destroy the entire enemy team. You only have one life per round.',
            maxPlayers: 8,
            maxPlayersPerTeam: 4,
            botFillInAmount: 4,
            xpMultiplier: 2,
            spawnProtectionLifetime: 5000,
            disableTeamJoining: true,
            mapRotation: [
                'trainyard',
                'cargo',
                'caverns_final',
                'battlements',
                'garrison',
                'strangefields_battle',
                'artillery_battle'
            ],
            maxScore: 4,
            allowRespawns: false,
            maxRounds: 7,
            roundLength: Math.round(2.5 * 60 * 1000),
            onMapLoaded: () => {
                for (let i=0; i<server.entities.length; i++) {
                    let entity = server.entities[i];
                    if (entity.subtype === 'tank' && entity.netData.tankType === 'turret') {
                        entity.remove();
                    }
                }
            },
            onPlayerKilled: (player) => {
                let teams = Object.keys(server.teamData);
                let aliveTeamCount = 0;
                let alivePlayerCounts = {
                    0: 0,
                    1: 0
                };
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    let checkAliveTeam = false;
                    for (let j = 0; j < team.clients.length; j++) {
                        let client = team.clients[j];
                        if (client.player && client.player.valid && client.player.netData.alive) {
                            alivePlayerCounts[client.team]++;
                            if (!checkAliveTeam) {
                                checkAliveTeam = true;
                                aliveTeamCount++;
                            }
                        }
                    }
                }

                if (alivePlayerCounts[0] && alivePlayerCounts[1]) {
                    for (let i = 0; i < teams.length; i++) {
                        let team = server.teamData[i];
                        for (let j = 0; j < team.clients.length; j++) {
                            let client = team.clients[j];

                            let friendlyTeam = 0;
                            let enemyTeam = 1;
                            if (client.team === 1) {
                                friendlyTeam = 1;
                                enemyTeam = 0;
                            }

                            client.emit('setAnnouncement', {
                                title: alivePlayerCounts[friendlyTeam] + ' VS ' + alivePlayerCounts[enemyTeam],
                                text: '',
                                sound: 'flag_taken',
                                time: 2000
                            });
                        }
                    }
                }

                if (aliveTeamCount <= 1) {
                    server.endRound();
                }
            },
            onRoundEnded: () => {
                let teams = Object.keys(server.teamData);
                let teamCounts = {};
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    for (let j = 0; j < team.clients.length; j++) {
                        let client = team.clients[j];
                        if (client.player && client.player.valid && client.player.netData.alive) {
                            if (!teamCounts[team.id]) {
                                teamCounts[team.id] = {
                                    id: team.id,
                                    alivePlayers: 0
                                }
                            }
                            teamCounts[team.id].alivePlayers++
                        }
                    }
                }

                let teamCountsList = Object.values(teamCounts);
                teamCountsList.sort((a, b) => {
                    return b.alivePlayers - a.alivePlayers;
                });

                let bestTeam = teamCountsList[0];
                if (teamCountsList.length >= 2) {
                    if (bestTeam.alivePlayers === teamCountsList[1].alivePlayers) {
                        bestTeam = null;
                    }
                }

                if (bestTeam) {
                    server.recordScore(bestTeam.id, 1);
                    server.gamemode.lastRoundWinner = bestTeam.id;
                }
            }
        },
        tiger_hunt: {
            title: 'Tiger Hunt',
            text: 'Destroy the enemy Queen Tigress while defending your own.',
            maxPlayers: 8,
            maxPlayersPerTeam: 4,
            botFillInAmount: 6,
            disableTeamJoining: true,
            disableVehicleSelection: true,
            disableRecordingStats: true,
            spawnProtectionLifetime: 5000,
            mapRotation: [
                'garrison',
            ],
            maxScore: 4,
            allowRespawns: true,
            respawnTime: 5000,
            maxRounds: 7,
            roundLength: Math.round(5 * 60 * 1000),
            onMapLoaded: () => {
                for (let i=0; i<server.entities.length; i++) {
                    let entity = server.entities[i];
                    if (entity.subtype === 'tank' && entity.netData.tankType === 'turret') {
                        entity.remove();
                    }
                }
            },
            onRoundStarted: function() {
                let potentialVehicles = [
                    'pummeler_iv',
                    'pummeler_iii',
                    'pummeler_ii',
                    'panthur',
                    'tigur1',
                    'jagdpanthera',
                    'heckler',
                    'stub_iii',
                    'stub_iv'
                ];
                let tigerHuntVehicles = ['queen_tigress_large'];
                for (let i=0; i<3; i++) {
                    let index = Math.floor(Math.random()*potentialVehicles.length);
                    tigerHuntVehicles.push(potentialVehicles[index]);
                    //potentialVehicles.splice(index, 1);
                }

                server.tigerHuntVehicles = tigerHuntVehicles;

                let teams = Object.keys(server.teamData);
                for (let i=0; i<teams.length; i++) {
                    let team = server.teamData[i];
                    team.queenSpawned = false;
                }

                setTimeout(() => {
                    let teams = Object.keys(server.teamData);
                    if (server.getRoundState() && server.getRoundState().type === 'playing' && !server.hasRoundEnded() && teams && teams.length) {
                        for (let i = 0; i < teams.length; i++) {
                            let team = server.teamData[i];

                            if (team && team.clients && team.clients.length) {
                                let missingQueen = true;
                                for (let j = 0; j < team.clients.length; j++) {
                                    let client = team.clients[j];
                                    if (client && client.player && client.player.valid && client.player.netData && client.player.netData.alive && client.player.netData.tankType === server.tigerHuntVehicles[0]) {
                                        missingQueen = false;
                                        break;
                                    }
                                }

                                if (missingQueen) {
                                    team.queenSpawned = false;
                                    this.replaceExistingQueen(null, team.clients[0]);
                                }
                            }
                        }
                    }
                }, 1500);
            },
            onSpawnPlayer: (client, playerNetData) => {
                if (client.tempOverrideSlotTank) {
                    client.overrideSlotTank = client.tempOverrideSlotTank;
                    delete client.tempOverrideSlotTank;
                    if (client.overrideSlotTank === server.tigerHuntVehicles[0]) {
                        playerNetData.isObjective = true;
                        playerNetData.disableRepairing = true;
                        client.spawnType = 'queen';
                    }
                    return;
                }

                client.overrideSlotTank = server.tigerHuntVehicles[0];
                delete client.spawnType;
                if (server.teamData[client.team]) {
                    if (!server.teamData[client.team].tigerHuntSelectionOffset) {
                        server.teamData[client.team].tigerHuntSelectionOffset = 0;
                    }

                    let clientIndex = server.teamData[client.team].clients.indexOf(client);
                    if (clientIndex !== -1) {
                        let vehIndex = clientIndex - server.teamData[client.team].tigerHuntSelectionOffset;
                        try {
                            if (vehIndex < 0) {
                                vehIndex += server.tigerHuntVehicles.length;
                            }
                            if (vehIndex >= server.tigerHuntVehicles.length) {
                                vehIndex -= server.tigerHuntVehicles.length;
                            }
                            client.overrideSlotTank = server.tigerHuntVehicles[vehIndex];
                        } catch (e) {
                            console.error('Failed to set slot override for Tiger Hunt:', e);
                        }
                    }

                    if (server.teamData[client.team].queenSpawned && client.overrideSlotTank === server.tigerHuntVehicles[0]) {
                        client.overrideSlotTank = server.tigerHuntVehicles[1];
                    }
                }

                let botBannedVehicles = [
                    'jagdpanthera',
                    'heckler',
                    'stub_iii',
                    'stub_iv'
                ];
                if (client.isBot && botBannedVehicles.includes(client.overrideSlotTank)) {
                    let botReplacement = [
                        'pummeler_iv'
                    ];

                    client.overrideSlotTank = botReplacement[Math.floor(Math.random()*botReplacement.length)];
                }

                if (client.overrideSlotTank === server.tigerHuntVehicles[0]) {
                    playerNetData.isObjective = true;
                    playerNetData.disableRepairing = true;
                    client.spawnType = 'queen';
                }
            },
            onPlayerVehicleCreated: (client, player) => {
                if (server.teamData[client.team] && player && player.valid && player.netData && player.netData.alive && player.netData.tankType === server.tigerHuntVehicles[0]) {
                    server.teamData[client.team].queenSpawned = true;
                }
            },
            replaceExistingQueen: (client, newClient) => {
                if (newClient && client !== newClient && newClient.player && newClient.player.valid && newClient.player.netData && newClient.player.netData.alive) {
                    newClient.tempOverrideSlotTank = server.tigerHuntVehicles[0];
                    newClient.player.remove();

                    let newPlayer = server.spawnPlayer(newClient, newClient.player.x, newClient.player.y, Math.degrees(newClient.player.rotation));
                    newPlayer.spawnTime = Date.now() - 10000;
                    if (client && client.player && client.player.netData && client.player.netData.health) {
                        newPlayer.netData.health = client.player.netData.health;
                    }
                    newPlayer.keys = newClient.player.keys;
                    newPlayer.body.position = newClient.player.body.position;
                    newPlayer.body.velocity = newClient.player.body.velocity;
                } else if (client && client.player && client.player.valid && client.player.netData && client.player.netData.alive) {
                    client.player.kill();
                }
            },
            findNewQueen: function(client) {
                let newClientFound = false;
                let foundClientIndex = 0;
                if (client && server.teamData[client.team] && server.teamData[client.team].clients.length) {
                    for (let i=0; i<server.teamData[client.team].clients.length; i++) {
                        let newClient = server.teamData[client.team].clients[i];
                        if (newClient && !newClient.isBot && client !== newClient && newClient.player && newClient.player.netData && newClient.player.netData.alive) {
                            this.replaceExistingQueen(client, newClient);
                            newClientFound = true;
                            foundClientIndex = i;
                            break;
                        }
                    }

                    if (!newClientFound) {
                        //If a new client is not found, then try to replace with a bot.
                        for (let i=0; i<server.teamData[client.team].clients.length; i++) {
                            let newClient = server.teamData[client.team].clients[i];
                            if (newClient && client !== newClient && newClient.player && newClient.player.netData && newClient.player.netData.alive) {
                                this.replaceExistingQueen(client, newClient);
                                newClientFound = true;
                                foundClientIndex = i;
                                break;
                            }
                        }
                    }

                    if (newClientFound) {
                        server.teamData[client.team].tigerHuntSelectionOffset = foundClientIndex;
                    }
                }

                if (!newClientFound && client && client.player) {
                    client.player.kill();
                }
                return newClientFound;
            },
            onClientDisconnected: function(client) {
                if (server.teamData[client.team] && client.player && client.player.netData && client.player.netData.tankType === server.tigerHuntVehicles[0]) {
                    server.teamData[client.team].queenSpawned = false;
                    this.findNewQueen(client);

                    let realPlayers = 0;
                    for (let j = 0; j < server.teamData[client.team].clients.length; j++) {
                        let teamClient = server.teamData[client.team].clients[j];
                        if (!teamClient.isBot && teamClient !== client) {
                            realPlayers++;
                        }
                    }
                    if (!server.teamData[client.team].tigerHuntSelectionOffset) {
                        server.teamData[client.team].tigerHuntSelectionOffset = 0;
                    }
                    if (server.teamData[client.team].tigerHuntSelectionOffset >= realPlayers) {
                        server.teamData[client.team].tigerHuntSelectionOffset = 0;
                    }
                    if (server.teamData[client.team].tigerHuntSelectionOffset >= server.tigerHuntVehicles.length) {
                        server.teamData[client.team].tigerHuntSelectionOffset = 0;
                    }
                }
            },
            onPlayerDamaged: (vehicle, amount, isKill, additionalXpGains) => {
                if (amount > 0 && vehicle && vehicle.valid && vehicle.netData && vehicle.netData.alive && vehicle.netData.tankType === server.tigerHuntVehicles[0]) {
                    if (isKill) {
                        additionalXpGains.push({
                            xp: 200,
                            reason: 'Queen Kill'
                        });
                    } else {
                        additionalXpGains.push({
                            xp: 50,
                            reason: 'Queen Hit'
                        });
                    }
                }
            },
            onPlayerKilled: (attacker, victim) => {
                if (server.getRoundState() && server.getRoundState().type === 'playing' && victim && victim.currentPlayer && victim.netData && victim.netData.tankType === server.tigerHuntVehicles[0]) {
                    server.endRound();
                }
            },
            onRoundEnded: () => {
                let teams = Object.keys(server.teamData);
                let teamCounts = {};
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    let realPlayers = 0;
                    for (let j = 0; j < team.clients.length; j++) {
                        let client = team.clients[j];
                        if (client.player && client.player.valid && client.player.netData && client.player.netData.alive && client.player.netData.tankType  === server.tigerHuntVehicles[0]) {
                            if (!teamCounts[team.id]) {
                                teamCounts[team.id] = {
                                    id: team.id,
                                    alivePlayers: 0
                                }
                            }
                            teamCounts[team.id].alivePlayers++
                        }
                        if (!client.isBot) {
                            realPlayers++;
                        }
                    }

                    if (!team.tigerHuntSelectionOffset) {
                        team.tigerHuntSelectionOffset = 0;
                    }
                    team.tigerHuntSelectionOffset++;
                    if (team.tigerHuntSelectionOffset >= realPlayers) {
                        team.tigerHuntSelectionOffset = 0;
                    }
                    if (team.tigerHuntSelectionOffset >= server.tigerHuntVehicles.length) {
                        team.tigerHuntSelectionOffset = 0;
                    }
                }

                let teamCountsList = Object.values(teamCounts);
                teamCountsList.sort((a, b) => {
                    return b.alivePlayers - a.alivePlayers;
                });

                let bestTeam = teamCountsList[0];
                if (teamCountsList.length >= 2) {
                    if (bestTeam.alivePlayers === teamCountsList[1].alivePlayers) {
                        bestTeam = null;
                    }
                }

                if (bestTeam) {
                    server.recordScore(bestTeam.id, 1);
                    server.gamemode.lastRoundWinner = bestTeam.id;
                }
            }
        },
        tank_ball: {
            title: 'Tank Ball',
            text: 'Get the ball in the enemy goal to score!',
            maxPlayers: 8,
            maxPlayersPerTeam: 4,
            disableTeamJoining: true,
            mapRotation: [
                'armorden_arena',
                'betrapt_13',
                'vulgrad_outskirts'
            ],
            maxScore: 4,
            allowRespawns: true,
            botFillInAmount: 2,
            respawnTime: 4500,
            xpMultiplier: 0.6,
            spawnProtectionLifetime: 4000,
            forceAllowVehicleSelection: true,
            disableKillstreaks: true,
            disableRecordingStats: true,
            disableSpawnFlipping: true,
            maxRounds: 7,
            roundLength: Math.round(5 * 60 * 1000),
            onBeforeMapObjectLoaded: (object) => {
                if (server.gamemode.rounds !== 0) {
                    if (object.properties.team === 0 || object.properties.team === 1) {
                        object.properties.team = object.properties.team === 0 ? 1 : 0;
                    }
                }
            },
            onGameStarted: () => {
                server.gamemode.lastRoundWinner = null;
            },
            onSpawnPlayer: (client) => {
                if (client.isBot) {
                    let random = Math.random();
                    if (random <= 0.33) {
                        client.overrideSlotTank = 'pt5';
                    } else if (random > 0.33 && random <= 0.66) {
                        client.overrideSlotTank = 'pummeler_ii';
                    } else {
                        client.overrideSlotTank = 'light_scout';
                    }
                }
            },
            onClientConnected: function(client) {
                if (!client?.user?.settings?.slots) {
                    if (!client.user) {
                        client.user = {};
                    }
                    if (!client.user.settings) {
                        client.user.settings = {};
                    }
                    client.user.settings.slots = [
                        {},
                        {},
                        {}
                    ];
                }

                let replacementVehicles = ['pt5', 'pummeler_ii', 'light_scout'];
                for (let i=0; i<client.user.settings.slots.length; i++) {
                    let slot = client.user.settings.slots[i];
                    let tankData = global.gameServer.vehicleListMap[slot.vehicle];
                    if (tankData && tankData.base === replacementVehicles[i]) {
                        continue;
                    }
                    client.user.settings.slots[i].vehicle = replacementVehicles[i];
                }
            },
            onPlayerDamaged: (vehicle, amount, isKill, additionalXpGains) => {
                if (server.currentBall && vehicle === server.currentBall.carrier) {
                    let shouldDrop = false;
                    if (amount || isKill) {
                        shouldDrop = true;
                    }

                    if (!shouldDrop) {
                        for (let i=0; i<additionalXpGains.length; i++) {
                            let gain = additionalXpGains[i];
                            if (gain?.reason?.toLowerCase()?.indexOf('incoming ricochet') !== -1) {
                                shouldDrop = true;
                                break;
                            }
                        }
                    }

                    if (shouldDrop) {
                        server.currentBall.carrier = null;
                        server.currentBall.thrownTime = 0;
                        vehicle.keepTarget = false;
                        server.currentBall.netData.animationState = 'default';
                        server.currentBall.sendRPC('playEffect', {
                            sound: 'ball_impact_0' + (Math.floor(Math.random() * 5) + 1),
                            effect: 'ball_kick',
                            animationState: server.currentBall.netData.animationState
                        });
                    }
                }
            },
            onPlayerVehicleCreated: (client, vehicle) => {
                let oldFire = vehicle.fire;
                vehicle.oldFire = oldFire;
                vehicle.fire = () => {
                    if (server.currentBall && server.currentBall.body && server.currentBall.carrier === vehicle) {
                        server.currentBall.carrier = null;
                        server.currentBall.body.collisionResponse = false;
                        server.currentBall.thrownTime = 1;
                        vehicle.keepTarget = false;

                        let launchForce = 500;
                        let raycast = server.currentBall.performRaycast([
                            server.currentBall.body.position[0],
                            server.currentBall.body.position[1]
                        ], [
                            server.currentBall.body.position[0] + server.currentBall.body.velocity[0] + (Math.cos(vehicle.turretRotation)*100),
                            server.currentBall.body.position[1] + server.currentBall.body.velocity[1] + (-Math.sin(vehicle.turretRotation)*100)
                        ]);
                        if (raycast.hasHit() && raycast?.body?.entity) {
                            launchForce = 100;
                            server.currentBall.body.velocity[0] = 0;
                            server.currentBall.body.velocity[1] = 0;
                        }

                        server.currentBall.body.applyForce([
                            Math.cos(vehicle.turretRotation) * launchForce,
                            -Math.sin(vehicle.turretRotation) * launchForce,
                        ]);

                        server.currentBall.netData.animationState = 'default';
                        server.currentBall.sendRPC('playEffect', {
                            sound: 'ball_kick_0' + (Math.floor(Math.random() * 3) + 1),
                            effect: 'ball_kick',
                            animationState: server.currentBall.netData.animationState
                        });
                    } else {
                        oldFire();
                    }
                };
            },
            onRoundStarted: () => {
                server.updateAmbientSound('crowd_loop');

                server.sendMessage('playEffect', {
                    sound: 'whistle'
                });

                let ballScale = 0.5;
                let spawn = {
                    x: server.MAP_WIDTH/2,
                    y: server.MAP_HEIGHT/2
                };
                if (server.gamemode.lastRoundWinner !== null && server.gamemode.lastRoundWinner !== undefined) {
                    let otherTeam = server.gamemode.lastRoundWinner === 1 ? 0 : 1;
                    let ballSpawns = server.teamData[otherTeam].specialSpawns['ball'];
                    if (ballSpawns && ballSpawns.length) {
                        spawn = ballSpawns[Math.floor(Math.random() * ballSpawns.length)];
                    }
                } else if (server.mapData.randomSpawns) {
                    spawn = server.mapData.randomSpawns[Math.floor(Math.random() * server.mapData.randomSpawns.length)];
                }

                let ball = server.createObject('dynamic_object', spawn.x, spawn.y, 0, 0, 128 * ballScale, 128 * ballScale, -1, {
                    animationState: 'default',
                    asset: {
                        texture: 'ball',
                        tilewidth: 128,
                        tileheight: 128
                    },
                    mapProperties: {
                        shape: 'circle',
                        material: 'ball',
                        objectType: 'ball',
                        radius: (128 * ballScale)/2,
                        mass: 1,
                        zOffset: -400,
                        enableArrowPointer: true,
                        animateMovement: 0.11
                    }
                });
                ball.body.damping = 0.1;
                ball.body.angularDamping = 0.05;
                server.currentBall = ball;
                ball.carrier = null;
                ball.lastCarrier = null;

                let rayClosest = new p2.Ray({
                    mode: p2.Ray.CLOSEST,
                    collisionGroup: collisionGroups.OTHER,
                    collisionMask: collisionGroups.OTHER,
                    skipBackfaces: true
                });
                let raycastResult = new p2.RaycastResult();
                ball.performRaycast = (start, end) => {
                    p2.vec2.copy(rayClosest.from, start);
                    p2.vec2.copy(rayClosest.to, end);
                    rayClosest.update();
                    raycastResult.reset();
                    server.world.raycast(raycastResult, rayClosest);
                    return raycastResult;
                };

                ball.objectTick = () => {
                    if (ball.carrier && ball.carrier.valid && ball.carrier.netData && ball.carrier.netData.alive) {
                        ball.body.position = [ball.carrier.body.position[0], ball.carrier.body.position[1]];
                        ball.body.velocity = [ball.carrier.body.velocity[0], ball.carrier.body.velocity[1]];
                    } else {
                        ball.carrier = null;
                        if (ball.thrownTime) {
                            ball.thrownTime--;
                            if (ball.thrownTime <= 0) {
                                delete ball.thrownTime;
                            }
                        } else {
                            ball.body.collisionResponse = true;
                        }
                    }

                    if (ball && ball.body && (ball.body.position[0] <= 0 || -ball.body.position[1] <= 0 || ball.body.position[0] >= server.MAP_WIDTH || -ball.body.position[1] >= server.MAP_HEIGHT)) {
                        let spawn = {
                            x: server.MAP_WIDTH/2,
                            y: server.MAP_HEIGHT/2
                        };
                        if (spawn) {
                            ball.body.position = [spawn.x, -spawn.y];
                            ball.body.velocity = [0, 0];
                            ball.body.angularVelocity = 0;
                        }
                    }

                    if (ball.carrier) {
                        ball.rotation = ball.carrier.rotation;
                    } else {
                        ball.rotation = Math.angleBetween({x: 0, y: 0}, {
                            x: ball.body.velocity[0],
                            y: -ball.body.velocity[1]
                        }) + Math.PI / 2;
                    }
                };
                ball.collision = (body) => {
                    if (ball.valid && body && body.entity && body.entity.valid && body.entity.type === 'vehicle' && body.entity.netData.alive && body.entity?.netData?.tankType !== 'turret') {
                        if (!ball.carrier || !ball.carrier.valid || !ball.carrier.netData || !ball.carrier.netData.alive) {
                            ball.carrier = body.entity;

                            let towardsGoal = null;
                            let raycast = ball.performRaycast([
                                ball.body.position[0],
                                ball.body.position[1]
                            ], [
                                ball.body.position[0] + (ball.body.velocity[0]*8),
                                ball.body.position[1] + (ball.body.velocity[1]*8)
                            ]);
                            if (raycast.hasHit() && raycast?.body?.entity && raycast?.body?.entity !== ball && raycast?.body?.entity?.netData?.mapProperties?.objectType === 'goal') {
                                towardsGoal = raycast?.body?.entity;
                            }
                            if (towardsGoal && towardsGoal.team === ball.carrier.team && ball?.lastCarrier?.team !== ball.carrier.team && (!ball?.carrier?.currentPlayer?.lastSave || Date.now()-ball.carrier.currentPlayer.lastSave > 10000)) {
                                ball.carrier.currentPlayer.lastSave = Date.now();
                                server.recordXP(ball.carrier.currentPlayer, [{
                                    xp: 500,
                                    reason: 'Save'
                                }]);
                                server.sendMessage('playEffect', {
                                    sound: 'cheer_kill_0' + (Math.floor(Math.random() * 3) + 1)
                                });
                            }

                            ball.lastCarrier = ball.carrier;
                            body.entity.target = null;
                            ball.team = ball.carrier.team;
                            ball.sendRPC('updateTeam', ball.team);
                            ball.body.collisionResponse = false;
                            ball.netData.animationState = 'none';
                            ball.sendRPC('playEffect', {
                                sound: 'ball_catch_0' + (Math.floor(Math.random() * 3) + 1),
                                animationState: ball.netData.animationState
                            });
                        }
                    } else if (ball.valid && body && body.entity && body.entity.valid && body.entity.type === 'object' && body.entity.subtype === 'dynamic_object') {
                        if (body.entity.netData && body.entity.netData.mapProperties && body.entity.netData.mapProperties.objectType === 'goal') {
                            ball.body.damping = 0.5;
                            ball.collision = () => {};

                            if (ball.lastCarrier && ball.lastCarrier.currentPlayer && ball.lastCarrier.currentPlayer.team !== body.entity.netData.mapProperties.team) {
                                let gains = [{
                                    xp: 500,
                                    reason: 'Goal'
                                }];
                                if (ball.carrier === ball.lastCarrier) {
                                    gains.push({
                                        xp: 500,
                                        reason: 'Touchdown'
                                    });
                                }
                                server.recordXP(ball.lastCarrier.currentPlayer, gains);
                            }

                            let bestClipData = {
                                score: 10000000000,
                                serverTime: Date.now(),
                                entityId: ball?.lastCarrier?.id ? ball?.lastCarrier?.id : ball.id,
                                clientId: ball?.lastCarrier?.currentPlayer?.id,
                                victimId: ball.id,
                                originalAttackerId: ball?.lastCarrier?.id,
                                attackerIsBot: false,
                                victimIsBot: false,
                                followVictimAfterSnapshotCount: 26,
                                disableSendToMasterServer: true,
                                playerName: ball?.lastCarrier?.currentPlayer ? ball?.lastCarrier?.currentPlayer.name : null,
                                playerXP: ball?.lastCarrier?.currentPlayer?.user?.xp ? ball?.lastCarrier?.currentPlayer.user.xp : null,
                                followShot: null,
                                timeOfInterest: server.recording.getCurrentTime(),
                                recordingLength: 500
                            };
                            if (ball?.lastCarrier?.currentPlayer) {
                                ball.lastCarrier.currentPlayer.lastBestClipData = bestClipData;
                            }
                            server.recordPotentialBestClip(bestClipData);

                            server.gamemode.roundWinner = body.entity.netData.mapProperties.team === 1 ? 0 : 1;
                            server.endRound();
                        }
                    } else {
                        ball.sendRPC('playEffect', {
                            sound: 'ball_impact_0' + (Math.floor(Math.random() * 5) + 1)
                        });
                    }
                };
                ball.damage = (amount, attacker, additionalXpGains, recordingTimeOverride, hitData) => {
                    if (hitData && hitData.angle && hitData.position && ball.body) {
                        let force = 100;
                        ball.body.velocity = [ball.body.velocity[0]*0.5, ball.body.velocity[1]*0.5];
                        let forceDir = [Math.cos(hitData.angle + Math.PI) * force, Math.sin(hitData.angle + Math.PI) * -force];
                        ball.body.applyForce(forceDir, [hitData.position.x - ball.x, -(hitData.position.y - ball.y)]);

                        ball.sendRPC('playEffect', {
                            sound: 'ball_impact_0' + (Math.floor(Math.random() * 5) + 1)
                        });
                    }
                };
            },
            onPlayerKilled: (attacker, victim) => {
                server.sendMessage('playEffect', {
                    sound: 'cheer_kill_0' + (Math.floor(Math.random() * 3) + 1)
                });

                setTimeout(() => {
                    if (victim) {
                        victim.remove();
                    }
                }, 10);
            },
            onRoundEnded: () => {
                server.recordScore(server.gamemode.roundWinner, 1);
                server.gamemode.lastRoundWinner = server.gamemode.roundWinner;

                server.sendMessage('playEffect', {
                    sound: 'goal_horn'
                });

                server.sendMessage('playEffect', {
                    sound: 'cheer_goal_0' + (Math.floor(Math.random() * 3) + 1)
                });
            }
        },
        tank_game: {
            title: 'Tank Game',
            text: 'Destroy enemy tanks to unlock the next tank, unlock all tanks to win!',
            maxPlayers: 8,
            maxPlayersPerTeam: 1,
            mapRotation: [
                'strangefields',
                'artillery'
            ],
            guiType: 'none',
            disableTeamJoining: true,
            maxScore: gunGameVehicles.length,
            disableVehicleSelection: true,
            disableRecordingStats: true,
            disableKillstreaks: true,
            spawnProtectionLifetime: 4000,
            allowRespawns: true,
            useRandomSpawns: true,
            roundLength: Math.round(15 * 60 * 1000),
            teamCount: 0,
            onGameStarted: () => {
                let maxTeams = server.clients.length;
                if (maxTeams < 8) {
                    maxTeams = 8;
                }
                for (let i=0; i<maxTeams; i++) {
                    server.createTeam();
                }

                let teams = Object.keys(server.teamData);
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    team.spawns = null;
                }

                for (let j = 0; j < server.clients.length; j++) {
                    let client = server.clients[j];
                    client.currentGunGameVehicle = 0;
                }
            },
            onSpawnPlayer: (client) => {
                if (!client.currentGunGameVehicle) {
                    client.currentGunGameVehicle = 0;
                }
                let currentVehicle = client.currentGunGameVehicle;
                client.overrideSlotTank = gunGameVehicles[currentVehicle];
            },
            onPlayerKilled: (attacker, victim) => {
                if (attacker && victim && attacker.team !== null && victim.team !== null && server.teamData[attacker.team]) {
                    server.recordScore(attacker.team, 1);
                }

                if (attacker && attacker.currentPlayer) {
                    if (!attacker.currentPlayer.currentGunGameVehicle) {
                        attacker.currentPlayer.currentGunGameVehicle = 0;
                    }
                    attacker.currentPlayer.currentGunGameVehicle++;

                    if (attacker.netData.alive) {
                        if (attacker.currentPlayer.currentGunGameVehicle < gunGameVehicles.length) {
                            attacker.remove();
                            let newPlayer = server.spawnPlayer(attacker.currentPlayer, attacker.x, attacker.y, Math.degrees(attacker.rotation));
                            newPlayer.spawnTime = Date.now() - 10000;
                            newPlayer.keys = attacker.keys;
                            newPlayer.body.position = attacker.body.position;
                            newPlayer.body.velocity = attacker.body.velocity;
                        }
                    }
                }
            },
            onClientDisconnected: function(client) {
                if (client.team !== null && server.teamData[client.team] && server.teamData[client.team].clients && server.teamData[client.team].clients.length <= 1) {
                    server.teamData[client.team].score = 0;
                }
            }
        },
        capture_the_flag: {
            title: 'CTF',
            text: 'Take the enemy flag and return it to your own flag to score points.',
            maxPlayers: 16,
            maxPlayersPerTeam: 8,
            mapRotation: [
                'tankpark',
                'wadi',
                'snowfall',
                'jungle',
                'battlements_conquest'
            ],
            maxScore: 4,
            allowRespawns: true,
            botFillInAmount: 8,
            roundLength: (10 * 60 * 1000),
            onMapLoaded: () => {
                for (let i=0; i<server.entities.length; i++) {
                    let entity = server.entities[i];
                    if (entity.subtype === 'tank' && entity.netData.tankType === 'turret') {
                        entity.remove();
                    }
                }
            }
        },
        capture_the_pretzel: {
            title: 'Capture the Pretzel',
            text: 'Capture the pretzel in the middle and return it to your base to score points!',
            maxPlayers: 16,
            maxPlayersPerTeam: 8,
            mapRotation: [
                'tankpark',
                'wadi',
                'snowfall',
                'jungle',
                'battlements_conquest'
            ],
            maxScore: 4,
            allowRespawns: true,
            disableRecordingStats: true,
            roundLength: (10 * 60 * 1000),
            onGameStarted: () => {
                server.enableBots = false;
                server.aiManager.destroyAllBots();

                /*
                server.createVehicle('tank', 500, 500, 0, -180, 128, 128, -1, {
                    tankType: 'trailer',
                    disableOutlines: true,
                    cosmetics: {}
                });
                */

                /*
                setTimeout(() => {
                    for (let i=0; i<6; i++) {
                        server.spawnPlayer({
                            overrideSlotTank: 'trailer',
                            team: 0,
                            emit: () => {
                            }
                        });
                    }
                }, 5000);
                */

                server.createVehicle('tank', 800, 500, 0, -180, 128, 128, -1, {
                    tankType: 'trailer',
                    disableOutlines: true,
                    cosmetics: {}
                });

                setTimeout(() => {
                    server.createVehicle('tank', 1200, 500, 0, 1800, 128, 128, -1, {
                        tankType: 'trailer',
                        disableOutlines: true,
                        cosmetics: {}
                    });
                }, 1000);
            }
        },
        conquest: {
            title: 'Conquest',
            text: 'Capture and hold the points on the map to increase your teams score.',
            maxPlayers: 16,
            maxPlayersPerTeam: 8,
            guiType: 'gui_conquest',
            mapRotation: [
                'tankpark',
                'wadi',
                'snowfall',
                'jungle',
                'battlements_conquest'
            ],
            maxScore: 100,
            allowRespawns: true,
            botFillInAmount: 8,
            roundLength: (10 * 60 * 1000),
            nextPointTick: Date.now(),
            /*
            onGameStarted: () => {
                server.createVehicle('tank', 500, 500, 0, 180, 128, 128, -1, {
                    tankType: 'trailer',
                    disableOutlines: true,
                    cosmetics: {}
                });
            },
            */
            calculateRespawnTime: (client) => {
                if (server.teamData) {
                    let team = server.teamData[client.team];
                    if (team && team.performance === 'losing' && team.performanceAmount <= -25) {
                        return 7500;
                    }
                }
                return 10000;
            },
            tick: function () {
                if (Date.now() >= this.nextPointTick) {
                    let teamCapturedPoints = {};
                    for (let i=0; i<server.entities.length; i++) {
                        let entity = server.entities[i];
                        if (entity.subtype === 'capture_point' && entity.capturePercentage >= 1 && entity.team !== -1) {
                            if (!teamCapturedPoints[entity.team]) {
                                teamCapturedPoints[entity.team] = 0;
                            }
                            teamCapturedPoints[entity.team]++;
                        }
                    }

                    let keys = Object.keys(teamCapturedPoints);
                    for (let i=0; i<keys.length; i++) {
                        let team = keys[i];
                        let points = teamCapturedPoints[team] * 2;
                        server.recordScore(team, points);
                    }

                    this.nextPointTick = Date.now() + 15000;
                }
            }
        },
        hunt: {
            title: 'Hunt',
            text: 'Hunt the stealth tank.',
            maxPlayers: 8,
            maxPlayersPerTeam: 7,
            mapRotation: [
                'tankpark',
                'wadi',
                'snowfall',
                'jungle',
                'battlements_conquest'
            ],
            maxScore: 100,
            guiType: 'none',
            allowRespawns: true,
            disableTeamJoining: true,
            disableVehicleSelection: true,
            disableRecordingStats: true,
            disableKillstreaks: true,
            roundLength: (10 * 60 * 1000),
            teamCount: 2,
            onMapLoaded: () => {
                server.mapData.properties.brightness = 0.0;
                server.mapData.properties.lightColor = '#CCCCCC';

                for (let i=0; i<server.entities.length; i++) {
                    let entity = server.entities[i];
                    if (entity.subtype === 'tank' && entity.netData.tankType === 'turret') {
                        entity.remove();
                    }
                }
            },
            onGameStarted: () => {
                server.enableBots = false;
                server.aiManager.destroyAllBots();

                server.teamData[0].maxPlayers = 7;
                server.teamData[1].maxPlayers = 1;
            },
            onSpawnPlayer: (client) => {
                if (client.team === 1) {
                    client.overrideSlotTank = 'light_scout';
                } else {
                    client.overrideSlotTank = 'medium_tank';
                }
            },
            tick: function () {

            }
        },
        team_deathmatch: {
            title: 'Team Deathmatch',
            text: 'Kill enemy tanks to score points for your team.',
            maxPlayers: 16,
            maxPlayersPerTeam: 8,
            botFillInAmount: 6,
            mapRotation: [
                'tankpark',
                'wadi',
                'snowfall',
                'jungle',
                'battlements_conquest'
            ],
            guiType: 'percentage_only',
            allowRespawns: true,
            maxScore: 50,
            roundLength: (10 * 60 * 1000),
            onPlayerKilled: (attacker, victim) => {
                if (attacker && victim && attacker.team !== null && victim.team !== null && server.teamData[attacker.team]) {
                    server.recordScore(attacker.team, 1);
                }
            }
        },
        mystery_tanks: {
            title: 'Mystery Tanks',
            text: 'Every player has the same random tank. Kill enemy tanks to score points for your team.',
            maxPlayers: 16,
            maxPlayersPerTeam: 8,
            botFillInAmount: 8,
            mapRotation: [
                'tankpark',
                'wadi',
                'snowfall',
                'jungle',
                'battlements_conquest'
            ],
            guiType: 'percentage_only',
            allowRespawns: true,
            disableVehicleSelection: true,
            disableRecordingStats: true,
            maxScore: 50,
            roundLength: (8 * 60 * 1000),
            onGameStarted: () => {
                let filteredVehicleList = [];
                let vehicles = JSON.parse(JSON.stringify(global.gameServer.vehicleList));
                for (let i=0; i<vehicles.length; i++) {
                    let vehicle = vehicles[i];
                    if (!vehicle.premium) {
                        filteredVehicleList.push(vehicle);
                    }
                }

                let tankData = filteredVehicleList[Math.floor(Math.random()*filteredVehicleList.length)];
                if (tankData && tankData.key) {
                    server.currentMysteryTanksVehicle = tankData.key;
                    if (tankData.properties && tankData.properties.name) {
                        server.sendMessage('chat', {
                            message: 'Random Vehicle: ' + tankData.properties.name
                        });
                    }
                } else {
                    server.currentMysteryTanksVehicle = 'medium_tank';
                }
            },
            onSpawnPlayer: (client) => {
                client.overrideSlotTank = server.currentMysteryTanksVehicle;
            },
            onPlayerKilled: (attacker, victim) => {
                if (attacker && victim && attacker.team !== null && victim.team !== null && server.teamData[attacker.team]) {
                    server.recordScore(attacker.team, 1);
                }
            }
        },
        tag: {
            title: 'Tag',
            text: 'Kill enemy tanks to get them to join your team.',
            mapRotation: [
                'strangefields',
                'artillery'
            ],
            allowRespawns: true,
            disableTeamJoining: true,
            spawnProtectionLifetime: 4000,
            disableRecordingStats: true,
            teamCount: 0,
            roundLength: (10 * 60 * 1000),
            onGameStarted: () => {
                for (let i=0; i<server.clients.length; i++) {
                    server.createTeam();
                }

                let teams = Object.keys(server.teamData);
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    team.spawns = [server.mapData.randomSpawns.shift()];
                }
            },
            onPlayerKilled: (attacker, victim) => {
                if (attacker && victim && attacker.team !== null && victim.team !== null && victim.currentPlayer && server.teamData[attacker.team]) {
                    let victimTeam = victim.team;
                    server.setClientTeam(victim.currentPlayer, attacker.team);
                    if (server.teamData[victimTeam].clients.length <= 0) {
                        server.teamData[victimTeam].locked = true;
                    }
                }

                let teams = Object.keys(server.teamData);
                let aliveTeamCount = 0;
                let bestTeam = null;
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    for (let j = 0; j < team.clients.length; j++) {
                        let client = team.clients[j];
                        if (client) {
                            aliveTeamCount++;
                            bestTeam = team;
                            break;
                        }
                    }
                }

                if (aliveTeamCount <= 1) {
                    if (bestTeam) {
                        server.gamemode.lastRoundWinner = bestTeam.id;
                    }
                    server.endRound();
                }
            },
            onRoundEnded: () => {
                let teams = Object.keys(server.teamData);
                let teamCounts = {};
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    for (let j = 0; j < team.clients.length; j++) {
                        let client = team.clients[j];
                        if (client) {
                            if (!teamCounts[team.id]) {
                                teamCounts[team.id] = {
                                    id: team.id,
                                    alivePlayers: 0
                                }
                            }
                            teamCounts[team.id].alivePlayers++
                        }
                    }
                }

                let teamCountsList = Object.values(teamCounts);
                teamCountsList.sort((a, b) => {
                    return b.alivePlayers - a.alivePlayers;
                });

                let bestTeam = teamCountsList[0];
                if (teamCountsList.length >= 2) {
                    if (bestTeam.alivePlayers === teamCountsList[1].alivePlayers) {
                        bestTeam = null;
                    }
                }

                if (bestTeam) {
                    server.gamemode.lastRoundWinner = bestTeam.id;
                }
            }
        },
        free_for_all: {
            title: 'Free for All',
            text: 'Destroy enemy vehicles to score points.',
            maxPlayers: 8,
            maxPlayersPerTeam: 1,
            mapRotation: [
                'strangefields',
                'artillery'
            ],
            guiType: 'none',
            disableTeamJoining: true,
            spawnProtectionLifetime: 4000,
            maxScore: 20,
            botFillInAmount: 1,
            allowRespawns: true,
            useRandomSpawns: true,
            roundLength: Math.round(8 * 60 * 1000),
            teamCount: 0,
            onGameStarted: () => {
                let maxTeams = server.clients.length;
                if (maxTeams < 8) {
                    maxTeams = 8;
                }
                for (let i=0; i<maxTeams; i++) {
                    server.createTeam();
                }
                let teams = Object.keys(server.teamData);
                for (let i = 0; i < teams.length; i++) {
                    let team = server.teamData[i];
                    team.spawns = null;
                }
            },
            onPlayerKilled: (attacker, victim) => {
                if (attacker && victim && attacker.team !== null && victim.team !== null && server.teamData[attacker.team]) {
                    server.recordScore(attacker.team, 1);
                }
            },
            onClientDisconnected: function(client) {
                if (client.team !== null && server.teamData[client.team] && server.teamData[client.team].clients && server.teamData[client.team].clients.length <= 1) {
                    server.teamData[client.team].score = 0;
                }
            }
        },
    };
};
}).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./entities/collision_groups":119,"p2":54}],125:[function(require,module,exports){
module.exports = [
    "Aaren"
    ,
    "Aarika"
    ,
    "Abagael"
    ,
    "Abagail"
    ,
    "Abbe"
    ,
    "Abbey"
    ,
    "Abbi"
    ,
    "Abbie"
    ,
    "Abby"
    ,
    "Abbye"
    ,
    "Abigael"
    ,
    "Abigail"
    ,
    "Abigale"
    ,
    "Abra"
    ,
    "Ada"
    ,
    "Adah"
    ,
    "Adaline"
    ,
    "Adan"
    ,
    "Adara"
    ,
    "Adda"
    ,
    "Addi"
    ,
    "Addia"
    ,
    "Addie"
    ,
    "Addy"
    ,
    "Adel"
    ,
    "Adela"
    ,
    "Adelaida"
    ,
    "Adelaide"
    ,
    "Adele"
    ,
    "Adelheid"
    ,
    "Adelice"
    ,
    "Adelina"
    ,
    "Adelind"
    ,
    "Adeline"
    ,
    "Adella"
    ,
    "Adelle"
    ,
    "Adena"
    ,
    "Adey"
    ,
    "Adi"
    ,
    "Adiana"
    ,
    "Adina"
    ,
    "Adora"
    ,
    "Adore"
    ,
    "Adoree"
    ,
    "Adorne"
    ,
    "Adrea"
    ,
    "Adria"
    ,
    "Adriaens"
    ,
    "Adrian"
    ,
    "Adriana"
    ,
    "Adriane"
    ,
    "Adrianna"
    ,
    "Adrianne"
    ,
    "Adriena"
    ,
    "Adrienne"
    ,
    "Aeriel"
    ,
    "Aeriela"
    ,
    "Aeriell"
    ,
    "Afton"
    ,
    "Ag"
    ,
    "Agace"
    ,
    "Agata"
    ,
    "Agatha"
    ,
    "Agathe"
    ,
    "Aggi"
    ,
    "Aggie"
    ,
    "Aggy"
    ,
    "Agna"
    ,
    "Agnella"
    ,
    "Agnes"
    ,
    "Agnese"
    ,
    "Agnesse"
    ,
    "Agneta"
    ,
    "Agnola"
    ,
    "Agretha"
    ,
    "Aida"
    ,
    "Aidan"
    ,
    "Aigneis"
    ,
    "Aila"
    ,
    "Aile"
    ,
    "Ailee"
    ,
    "Aileen"
    ,
    "Ailene"
    ,
    "Ailey"
    ,
    "Aili"
    ,
    "Ailina"
    ,
    "Ailis"
    ,
    "Ailsun"
    ,
    "Ailyn"
    ,
    "Aime"
    ,
    "Aimee"
    ,
    "Aimil"
    ,
    "Aindrea"
    ,
    "Ainslee"
    ,
    "Ainsley"
    ,
    "Ainslie"
    ,
    "Ajay"
    ,
    "Alaine"
    ,
    "Alameda"
    ,
    "Alana"
    ,
    "Alanah"
    ,
    "Alane"
    ,
    "Alanna"
    ,
    "Alayne"
    ,
    "Alberta"
    ,
    "Albertina"
    ,
    "Albertine"
    ,
    "Albina"
    ,
    "Alecia"
    ,
    "Aleda"
    ,
    "Aleece"
    ,
    "Aleen"
    ,
    "Alejandra"
    ,
    "Alejandrina"
    ,
    "Alena"
    ,
    "Alene"
    ,
    "Alessandra"
    ,
    "Aleta"
    ,
    "Alethea"
    ,
    "Alex"
    ,
    "Alexa"
    ,
    "Alexandra"
    ,
    "Alexandrina"
    ,
    "Alexi"
    ,
    "Alexia"
    ,
    "Alexina"
    ,
    "Alexine"
    ,
    "Alexis"
    ,
    "Alfi"
    ,
    "Alfie"
    ,
    "Alfreda"
    ,
    "Alfy"
    ,
    "Ali"
    ,
    "Alia"
    ,
    "Alica"
    ,
    "Alice"
    ,
    "Alicea"
    ,
    "Alicia"
    ,
    "Alida"
    ,
    "Alidia"
    ,
    "Alie"
    ,
    "Alika"
    ,
    "Alikee"
    ,
    "Alina"
    ,
    "Aline"
    ,
    "Alis"
    ,
    "Alisa"
    ,
    "Alisha"
    ,
    "Alison"
    ,
    "Alissa"
    ,
    "Alisun"
    ,
    "Alix"
    ,
    "Aliza"
    ,
    "Alla"
    ,
    "Alleen"
    ,
    "Allegra"
    ,
    "Allene"
    ,
    "Alli"
    ,
    "Allianora"
    ,
    "Allie"
    ,
    "Allina"
    ,
    "Allis"
    ,
    "Allison"
    ,
    "Allissa"
    ,
    "Allix"
    ,
    "Allsun"
    ,
    "Allx"
    ,
    "Ally"
    ,
    "Allyce"
    ,
    "Allyn"
    ,
    "Allys"
    ,
    "Allyson"
    ,
    "Alma"
    ,
    "Almeda"
    ,
    "Almeria"
    ,
    "Almeta"
    ,
    "Almira"
    ,
    "Almire"
    ,
    "Aloise"
    ,
    "Aloisia"
    ,
    "Aloysia"
    ,
    "Alta"
    ,
    "Althea"
    ,
    "Alvera"
    ,
    "Alverta"
    ,
    "Alvina"
    ,
    "Alvinia"
    ,
    "Alvira"
    ,
    "Alyce"
    ,
    "Alyda"
    ,
    "Alys"
    ,
    "Alysa"
    ,
    "Alyse"
    ,
    "Alysia"
    ,
    "Alyson"
    ,
    "Alyss"
    ,
    "Alyssa"
    ,
    "Amabel"
    ,
    "Amabelle"
    ,
    "Amalea"
    ,
    "Amalee"
    ,
    "Amaleta"
    ,
    "Amalia"
    ,
    "Amalie"
    ,
    "Amalita"
    ,
    "Amalle"
    ,
    "Amanda"
    ,
    "Amandi"
    ,
    "Amandie"
    ,
    "Amandy"
    ,
    "Amara"
    ,
    "Amargo"
    ,
    "Amata"
    ,
    "Amber"
    ,
    "Amberly"
    ,
    "Ambur"
    ,
    "Ame"
    ,
    "Amelia"
    ,
    "Amelie"
    ,
    "Amelina"
    ,
    "Ameline"
    ,
    "Amelita"
    ,
    "Ami"
    ,
    "Amie"
    ,
    "Amii"
    ,
    "Amil"
    ,
    "Amitie"
    ,
    "Amity"
    ,
    "Ammamaria"
    ,
    "Amy"
    ,
    "Amye"
    ,
    "Ana"
    ,
    "Anabal"
    ,
    "Anabel"
    ,
    "Anabella"
    ,
    "Anabelle"
    ,
    "Analiese"
    ,
    "Analise"
    ,
    "Anallese"
    ,
    "Anallise"
    ,
    "Anastasia"
    ,
    "Anastasie"
    ,
    "Anastassia"
    ,
    "Anatola"
    ,
    "Andee"
    ,
    "Andeee"
    ,
    "Anderea"
    ,
    "Andi"
    ,
    "Andie"
    ,
    "Andra"
    ,
    "Andrea"
    ,
    "Andreana"
    ,
    "Andree"
    ,
    "Andrei"
    ,
    "Andria"
    ,
    "Andriana"
    ,
    "Andriette"
    ,
    "Andromache"
    ,
    "Andy"
    ,
    "Anestassia"
    ,
    "Anet"
    ,
    "Anett"
    ,
    "Anetta"
    ,
    "Anette"
    ,
    "Ange"
    ,
    "Angel"
    ,
    "Angela"
    ,
    "Angele"
    ,
    "Angelia"
    ,
    "Angelica"
    ,
    "Angelika"
    ,
    "Angelina"
    ,
    "Angeline"
    ,
    "Angelique"
    ,
    "Angelita"
    ,
    "Angelle"
    ,
    "Angie"
    ,
    "Angil"
    ,
    "Angy"
    ,
    "Ania"
    ,
    "Anica"
    ,
    "Anissa"
    ,
    "Anita"
    ,
    "Anitra"
    ,
    "Anjanette"
    ,
    "Anjela"
    ,
    "Ann"
    ,
    "Ann-Marie"
    ,
    "Anna"
    ,
    "Anna-Diana"
    ,
    "Anna-Diane"
    ,
    "Anna-Maria"
    ,
    "Annabal"
    ,
    "Annabel"
    ,
    "Annabela"
    ,
    "Annabell"
    ,
    "Annabella"
    ,
    "Annabelle"
    ,
    "Annadiana"
    ,
    "Annadiane"
    ,
    "Annalee"
    ,
    "Annaliese"
    ,
    "Annalise"
    ,
    "Annamaria"
    ,
    "Annamarie"
    ,
    "Anne"
    ,
    "Anne-Corinne"
    ,
    "Anne-Marie"
    ,
    "Annecorinne"
    ,
    "Anneliese"
    ,
    "Annelise"
    ,
    "Annemarie"
    ,
    "Annetta"
    ,
    "Annette"
    ,
    "Anni"
    ,
    "Annice"
    ,
    "Annie"
    ,
    "Annis"
    ,
    "Annissa"
    ,
    "Annmaria"
    ,
    "Annmarie"
    ,
    "Annnora"
    ,
    "Annora"
    ,
    "Anny"
    ,
    "Anselma"
    ,
    "Ansley"
    ,
    "Anstice"
    ,
    "Anthe"
    ,
    "Anthea"
    ,
    "Anthia"
    ,
    "Anthiathia"
    ,
    "Antoinette"
    ,
    "Antonella"
    ,
    "Antonetta"
    ,
    "Antonia"
    ,
    "Antonie"
    ,
    "Antonietta"
    ,
    "Antonina"
    ,
    "Anya"
    ,
    "Appolonia"
    ,
    "April"
    ,
    "Aprilette"
    ,
    "Ara"
    ,
    "Arabel"
    ,
    "Arabela"
    ,
    "Arabele"
    ,
    "Arabella"
    ,
    "Arabelle"
    ,
    "Arda"
    ,
    "Ardath"
    ,
    "Ardeen"
    ,
    "Ardelia"
    ,
    "Ardelis"
    ,
    "Ardella"
    ,
    "Ardelle"
    ,
    "Arden"
    ,
    "Ardene"
    ,
    "Ardenia"
    ,
    "Ardine"
    ,
    "Ardis"
    ,
    "Ardisj"
    ,
    "Ardith"
    ,
    "Ardra"
    ,
    "Ardyce"
    ,
    "Ardys"
    ,
    "Ardyth"
    ,
    "Aretha"
    ,
    "Ariadne"
    ,
    "Ariana"
    ,
    "Aridatha"
    ,
    "Ariel"
    ,
    "Ariela"
    ,
    "Ariella"
    ,
    "Arielle"
    ,
    "Arlana"
    ,
    "Arlee"
    ,
    "Arleen"
    ,
    "Arlen"
    ,
    "Arlena"
    ,
    "Arlene"
    ,
    "Arleta"
    ,
    "Arlette"
    ,
    "Arleyne"
    ,
    "Arlie"
    ,
    "Arliene"
    ,
    "Arlina"
    ,
    "Arlinda"
    ,
    "Arline"
    ,
    "Arluene"
    ,
    "Arly"
    ,
    "Arlyn"
    ,
    "Arlyne"
    ,
    "Aryn"
    ,
    "Ashely"
    ,
    "Ashia"
    ,
    "Ashien"
    ,
    "Ashil"
    ,
    "Ashla"
    ,
    "Ashlan"
    ,
    "Ashlee"
    ,
    "Ashleigh"
    ,
    "Ashlen"
    ,
    "Ashley"
    ,
    "Ashli"
    ,
    "Ashlie"
    ,
    "Ashly"
    ,
    "Asia"
    ,
    "Astra"
    ,
    "Astrid"
    ,
    "Astrix"
    ,
    "Atalanta"
    ,
    "Athena"
    ,
    "Athene"
    ,
    "Atlanta"
    ,
    "Atlante"
    ,
    "Auberta"
    ,
    "Aubine"
    ,
    "Aubree"
    ,
    "Aubrette"
    ,
    "Aubrey"
    ,
    "Aubrie"
    ,
    "Aubry"
    ,
    "Audi"
    ,
    "Audie"
    ,
    "Audra"
    ,
    "Audre"
    ,
    "Audrey"
    ,
    "Audrie"
    ,
    "Audry"
    ,
    "Audrye"
    ,
    "Audy"
    ,
    "Augusta"
    ,
    "Auguste"
    ,
    "Augustina"
    ,
    "Augustine"
    ,
    "Aundrea"
    ,
    "Aura"
    ,
    "Aurea"
    ,
    "Aurel"
    ,
    "Aurelea"
    ,
    "Aurelia"
    ,
    "Aurelie"
    ,
    "Auria"
    ,
    "Aurie"
    ,
    "Aurilia"
    ,
    "Aurlie"
    ,
    "Auroora"
    ,
    "Aurora"
    ,
    "Aurore"
    ,
    "Austin"
    ,
    "Austina"
    ,
    "Austine"
    ,
    "Ava"
    ,
    "Aveline"
    ,
    "Averil"
    ,
    "Averyl"
    ,
    "Avie"
    ,
    "Avis"
    ,
    "Aviva"
    ,
    "Avivah"
    ,
    "Avril"
    ,
    "Avrit"
    ,
    "Ayn"
    ,
    "Bab"
    ,
    "Babara"
    ,
    "Babb"
    ,
    "Babbette"
    ,
    "Babbie"
    ,
    "Babette"
    ,
    "Babita"
    ,
    "Babs"
    ,
    "Bambi"
    ,
    "Bambie"
    ,
    "Bamby"
    ,
    "Barb"
    ,
    "Barbabra"
    ,
    "Barbara"
    ,
    "Barbara-Anne"
    ,
    "Barbaraanne"
    ,
    "Barbe"
    ,
    "Barbee"
    ,
    "Barbette"
    ,
    "Barbey"
    ,
    "Barbi"
    ,
    "Barbie"
    ,
    "Barbra"
    ,
    "Barby"
    ,
    "Bari"
    ,
    "Barrie"
    ,
    "Barry"
    ,
    "Basia"
    ,
    "Bathsheba"
    ,
    "Batsheva"
    ,
    "Bea"
    ,
    "Beatrice"
    ,
    "Beatrisa"
    ,
    "Beatrix"
    ,
    "Beatriz"
    ,
    "Bebe"
    ,
    "Becca"
    ,
    "Becka"
    ,
    "Becki"
    ,
    "Beckie"
    ,
    "Becky"
    ,
    "Bee"
    ,
    "Beilul"
    ,
    "Beitris"
    ,
    "Bekki"
    ,
    "Bel"
    ,
    "Belia"
    ,
    "Belicia"
    ,
    "Belinda"
    ,
    "Belita"
    ,
    "Bell"
    ,
    "Bella"
    ,
    "Bellanca"
    ,
    "Belle"
    ,
    "Bellina"
    ,
    "Belva"
    ,
    "Belvia"
    ,
    "Bendite"
    ,
    "Benedetta"
    ,
    "Benedicta"
    ,
    "Benedikta"
    ,
    "Benetta"
    ,
    "Benita"
    ,
    "Benni"
    ,
    "Bennie"
    ,
    "Benny"
    ,
    "Benoite"
    ,
    "Berenice"
    ,
    "Beret"
    ,
    "Berget"
    ,
    "Berna"
    ,
    "Bernadene"
    ,
    "Bernadette"
    ,
    "Bernadina"
    ,
    "Bernadine"
    ,
    "Bernardina"
    ,
    "Bernardine"
    ,
    "Bernelle"
    ,
    "Bernete"
    ,
    "Bernetta"
    ,
    "Bernette"
    ,
    "Berni"
    ,
    "Bernice"
    ,
    "Bernie"
    ,
    "Bernita"
    ,
    "Berny"
    ,
    "Berri"
    ,
    "Berrie"
    ,
    "Berry"
    ,
    "Bert"
    ,
    "Berta"
    ,
    "Berte"
    ,
    "Bertha"
    ,
    "Berthe"
    ,
    "Berti"
    ,
    "Bertie"
    ,
    "Bertina"
    ,
    "Bertine"
    ,
    "Berty"
    ,
    "Beryl"
    ,
    "Beryle"
    ,
    "Bess"
    ,
    "Bessie"
    ,
    "Bessy"
    ,
    "Beth"
    ,
    "Bethanne"
    ,
    "Bethany"
    ,
    "Bethena"
    ,
    "Bethina"
    ,
    "Betsey"
    ,
    "Betsy"
    ,
    "Betta"
    ,
    "Bette"
    ,
    "Bette-Ann"
    ,
    "Betteann"
    ,
    "Betteanne"
    ,
    "Betti"
    ,
    "Bettina"
    ,
    "Bettine"
    ,
    "Betty"
    ,
    "Bettye"
    ,
    "Beulah"
    ,
    "Bev"
    ,
    "Beverie"
    ,
    "Beverlee"
    ,
    "Beverley"
    ,
    "Beverlie"
    ,
    "Beverly"
    ,
    "Bevvy"
    ,
    "Bianca"
    ,
    "Bianka"
    ,
    "Bibbie"
    ,
    "Bibby"
    ,
    "Bibbye"
    ,
    "Bibi"
    ,
    "Biddie"
    ,
    "Biddy"
    ,
    "Bidget"
    ,
    "Bili"
    ,
    "Bill"
    ,
    "Billi"
    ,
    "Billie"
    ,
    "Billy"
    ,
    "Billye"
    ,
    "Binni"
    ,
    "Binnie"
    ,
    "Binny"
    ,
    "Bird"
    ,
    "Birdie"
    ,
    "Birgit"
    ,
    "Birgitta"
    ,
    "Blair"
    ,
    "Blaire"
    ,
    "Blake"
    ,
    "Blakelee"
    ,
    "Blakeley"
    ,
    "Blanca"
    ,
    "Blanch"
    ,
    "Blancha"
    ,
    "Blanche"
    ,
    "Blinni"
    ,
    "Blinnie"
    ,
    "Blinny"
    ,
    "Bliss"
    ,
    "Blisse"
    ,
    "Blithe"
    ,
    "Blondell"
    ,
    "Blondelle"
    ,
    "Blondie"
    ,
    "Blondy"
    ,
    "Blythe"
    ,
    "Bobbe"
    ,
    "Bobbee"
    ,
    "Bobbette"
    ,
    "Bobbi"
    ,
    "Bobbie"
    ,
    "Bobby"
    ,
    "Bobbye"
    ,
    "Bobette"
    ,
    "Bobina"
    ,
    "Bobine"
    ,
    "Bobinette"
    ,
    "Bonita"
    ,
    "Bonnee"
    ,
    "Bonni"
    ,
    "Bonnibelle"
    ,
    "Bonnie"
    ,
    "Bonny"
    ,
    "Brana"
    ,
    "Brandais"
    ,
    "Brande"
    ,
    "Brandea"
    ,
    "Brandi"
    ,
    "Brandice"
    ,
    "Brandie"
    ,
    "Brandise"
    ,
    "Brandy"
    ,
    "Breanne"
    ,
    "Brear"
    ,
    "Bree"
    ,
    "Breena"
    ,
    "Bren"
    ,
    "Brena"
    ,
    "Brenda"
    ,
    "Brenn"
    ,
    "Brenna"
    ,
    "Brett"
    ,
    "Bria"
    ,
    "Briana"
    ,
    "Brianna"
    ,
    "Brianne"
    ,
    "Bride"
    ,
    "Bridget"
    ,
    "Bridgette"
    ,
    "Bridie"
    ,
    "Brier"
    ,
    "Brietta"
    ,
    "Brigid"
    ,
    "Brigida"
    ,
    "Brigit"
    ,
    "Brigitta"
    ,
    "Brigitte"
    ,
    "Brina"
    ,
    "Briney"
    ,
    "Brinn"
    ,
    "Brinna"
    ,
    "Briny"
    ,
    "Brit"
    ,
    "Brita"
    ,
    "Britney"
    ,
    "Britni"
    ,
    "Britt"
    ,
    "Britta"
    ,
    "Brittan"
    ,
    "Brittaney"
    ,
    "Brittani"
    ,
    "Brittany"
    ,
    "Britte"
    ,
    "Britteny"
    ,
    "Brittne"
    ,
    "Brittney"
    ,
    "Brittni"
    ,
    "Brook"
    ,
    "Brooke"
    ,
    "Brooks"
    ,
    "Brunhilda"
    ,
    "Brunhilde"
    ,
    "Bryana"
    ,
    "Bryn"
    ,
    "Bryna"
    ,
    "Brynn"
    ,
    "Brynna"
    ,
    "Brynne"
    ,
    "Buffy"
    ,
    "Bunni"
    ,
    "Bunnie"
    ,
    "Bunny"
    ,
    "Cacilia"
    ,
    "Cacilie"
    ,
    "Cahra"
    ,
    "Cairistiona"
    ,
    "Caitlin"
    ,
    "Caitrin"
    ,
    "Cal"
    ,
    "Calida"
    ,
    "Calla"
    ,
    "Calley"
    ,
    "Calli"
    ,
    "Callida"
    ,
    "Callie"
    ,
    "Cally"
    ,
    "Calypso"
    ,
    "Cam"
    ,
    "Camala"
    ,
    "Camel"
    ,
    "Camella"
    ,
    "Camellia"
    ,
    "Cami"
    ,
    "Camila"
    ,
    "Camile"
    ,
    "Camilla"
    ,
    "Camille"
    ,
    "Cammi"
    ,
    "Cammie"
    ,
    "Cammy"
    ,
    "Candace"
    ,
    "Candi"
    ,
    "Candice"
    ,
    "Candida"
    ,
    "Candide"
    ,
    "Candie"
    ,
    "Candis"
    ,
    "Candra"
    ,
    "Candy"
    ,
    "Caprice"
    ,
    "Cara"
    ,
    "Caralie"
    ,
    "Caren"
    ,
    "Carena"
    ,
    "Caresa"
    ,
    "Caressa"
    ,
    "Caresse"
    ,
    "Carey"
    ,
    "Cari"
    ,
    "Caria"
    ,
    "Carie"
    ,
    "Caril"
    ,
    "Carilyn"
    ,
    "Carin"
    ,
    "Carina"
    ,
    "Carine"
    ,
    "Cariotta"
    ,
    "Carissa"
    ,
    "Carita"
    ,
    "Caritta"
    ,
    "Carla"
    ,
    "Carlee"
    ,
    "Carleen"
    ,
    "Carlen"
    ,
    "Carlene"
    ,
    "Carley"
    ,
    "Carlie"
    ,
    "Carlin"
    ,
    "Carlina"
    ,
    "Carline"
    ,
    "Carlita"
    ,
    "Carlota"
    ,
    "Carlotta"
    ,
    "Carly"
    ,
    "Carlye"
    ,
    "Carlyn"
    ,
    "Carlynn"
    ,
    "Carlynne"
    ,
    "Carma"
    ,
    "Carmel"
    ,
    "Carmela"
    ,
    "Carmelia"
    ,
    "Carmelina"
    ,
    "Carmelita"
    ,
    "Carmella"
    ,
    "Carmelle"
    ,
    "Carmen"
    ,
    "Carmencita"
    ,
    "Carmina"
    ,
    "Carmine"
    ,
    "Carmita"
    ,
    "Carmon"
    ,
    "Caro"
    ,
    "Carol"
    ,
    "Carol-Jean"
    ,
    "Carola"
    ,
    "Carolan"
    ,
    "Carolann"
    ,
    "Carole"
    ,
    "Carolee"
    ,
    "Carolin"
    ,
    "Carolina"
    ,
    "Caroline"
    ,
    "Caroljean"
    ,
    "Carolyn"
    ,
    "Carolyne"
    ,
    "Carolynn"
    ,
    "Caron"
    ,
    "Carree"
    ,
    "Carri"
    ,
    "Carrie"
    ,
    "Carrissa"
    ,
    "Carroll"
    ,
    "Carry"
    ,
    "Cary"
    ,
    "Caryl"
    ,
    "Caryn"
    ,
    "Casandra"
    ,
    "Casey"
    ,
    "Casi"
    ,
    "Casie"
    ,
    "Cass"
    ,
    "Cassandra"
    ,
    "Cassandre"
    ,
    "Cassandry"
    ,
    "Cassaundra"
    ,
    "Cassey"
    ,
    "Cassi"
    ,
    "Cassie"
    ,
    "Cassondra"
    ,
    "Cassy"
    ,
    "Catarina"
    ,
    "Cate"
    ,
    "Caterina"
    ,
    "Catha"
    ,
    "Catharina"
    ,
    "Catharine"
    ,
    "Cathe"
    ,
    "Cathee"
    ,
    "Catherin"
    ,
    "Catherina"
    ,
    "Catherine"
    ,
    "Cathi"
    ,
    "Cathie"
    ,
    "Cathleen"
    ,
    "Cathlene"
    ,
    "Cathrin"
    ,
    "Cathrine"
    ,
    "Cathryn"
    ,
    "Cathy"
    ,
    "Cathyleen"
    ,
    "Cati"
    ,
    "Catie"
    ,
    "Catina"
    ,
    "Catlaina"
    ,
    "Catlee"
    ,
    "Catlin"
    ,
    "Catrina"
    ,
    "Catriona"
    ,
    "Caty"
    ,
    "Caye"
    ,
    "Cayla"
    ,
    "Cecelia"
    ,
    "Cecil"
    ,
    "Cecile"
    ,
    "Ceciley"
    ,
    "Cecilia"
    ,
    "Cecilla"
    ,
    "Cecily"
    ,
    "Ceil"
    ,
    "Cele"
    ,
    "Celene"
    ,
    "Celesta"
    ,
    "Celeste"
    ,
    "Celestia"
    ,
    "Celestina"
    ,
    "Celestine"
    ,
    "Celestyn"
    ,
    "Celestyna"
    ,
    "Celia"
    ,
    "Celie"
    ,
    "Celina"
    ,
    "Celinda"
    ,
    "Celine"
    ,
    "Celinka"
    ,
    "Celisse"
    ,
    "Celka"
    ,
    "Celle"
    ,
    "Cesya"
    ,
    "Chad"
    ,
    "Chanda"
    ,
    "Chandal"
    ,
    "Chandra"
    ,
    "Channa"
    ,
    "Chantal"
    ,
    "Chantalle"
    ,
    "Charil"
    ,
    "Charin"
    ,
    "Charis"
    ,
    "Charissa"
    ,
    "Charisse"
    ,
    "Charita"
    ,
    "Charity"
    ,
    "Charla"
    ,
    "Charlean"
    ,
    "Charleen"
    ,
    "Charlena"
    ,
    "Charlene"
    ,
    "Charline"
    ,
    "Charlot"
    ,
    "Charlotta"
    ,
    "Charlotte"
    ,
    "Charmain"
    ,
    "Charmaine"
    ,
    "Charmane"
    ,
    "Charmian"
    ,
    "Charmine"
    ,
    "Charmion"
    ,
    "Charo"
    ,
    "Charyl"
    ,
    "Chastity"
    ,
    "Chelsae"
    ,
    "Chelsea"
    ,
    "Chelsey"
    ,
    "Chelsie"
    ,
    "Chelsy"
    ,
    "Cher"
    ,
    "Chere"
    ,
    "Cherey"
    ,
    "Cheri"
    ,
    "Cherianne"
    ,
    "Cherice"
    ,
    "Cherida"
    ,
    "Cherie"
    ,
    "Cherilyn"
    ,
    "Cherilynn"
    ,
    "Cherin"
    ,
    "Cherise"
    ,
    "Cherish"
    ,
    "Cherlyn"
    ,
    "Cherri"
    ,
    "Cherrita"
    ,
    "Cherry"
    ,
    "Chery"
    ,
    "Cherye"
    ,
    "Cheryl"
    ,
    "Cheslie"
    ,
    "Chiarra"
    ,
    "Chickie"
    ,
    "Chicky"
    ,
    "Chiquia"
    ,
    "Chiquita"
    ,
    "Chlo"
    ,
    "Chloe"
    ,
    "Chloette"
    ,
    "Chloris"
    ,
    "Chris"
    ,
    "Chrissie"
    ,
    "Chrissy"
    ,
    "Christa"
    ,
    "Christabel"
    ,
    "Christabella"
    ,
    "Christal"
    ,
    "Christalle"
    ,
    "Christan"
    ,
    "Christean"
    ,
    "Christel"
    ,
    "Christen"
    ,
    "Christi"
    ,
    "Christian"
    ,
    "Christiana"
    ,
    "Christiane"
    ,
    "Christie"
    ,
    "Christin"
    ,
    "Christina"
    ,
    "Christine"
    ,
    "Christy"
    ,
    "Christye"
    ,
    "Christyna"
    ,
    "Chrysa"
    ,
    "Chrysler"
    ,
    "Chrystal"
    ,
    "Chryste"
    ,
    "Chrystel"
    ,
    "Cicely"
    ,
    "Cicily"
    ,
    "Ciel"
    ,
    "Cilka"
    ,
    "Cinda"
    ,
    "Cindee"
    ,
    "Cindelyn"
    ,
    "Cinderella"
    ,
    "Cindi"
    ,
    "Cindie"
    ,
    "Cindra"
    ,
    "Cindy"
    ,
    "Cinnamon"
    ,
    "Cissiee"
    ,
    "Cissy"
    ,
    "Clair"
    ,
    "Claire"
    ,
    "Clara"
    ,
    "Clarabelle"
    ,
    "Clare"
    ,
    "Claresta"
    ,
    "Clareta"
    ,
    "Claretta"
    ,
    "Clarette"
    ,
    "Clarey"
    ,
    "Clari"
    ,
    "Claribel"
    ,
    "Clarice"
    ,
    "Clarie"
    ,
    "Clarinda"
    ,
    "Clarine"
    ,
    "Clarissa"
    ,
    "Clarisse"
    ,
    "Clarita"
    ,
    "Clary"
    ,
    "Claude"
    ,
    "Claudelle"
    ,
    "Claudetta"
    ,
    "Claudette"
    ,
    "Claudia"
    ,
    "Claudie"
    ,
    "Claudina"
    ,
    "Claudine"
    ,
    "Clea"
    ,
    "Clem"
    ,
    "Clemence"
    ,
    "Clementia"
    ,
    "Clementina"
    ,
    "Clementine"
    ,
    "Clemmie"
    ,
    "Clemmy"
    ,
    "Cleo"
    ,
    "Cleopatra"
    ,
    "Clerissa"
    ,
    "Clio"
    ,
    "Clo"
    ,
    "Cloe"
    ,
    "Cloris"
    ,
    "Clotilda"
    ,
    "Clovis"
    ,
    "Codee"
    ,
    "Codi"
    ,
    "Codie"
    ,
    "Cody"
    ,
    "Coleen"
    ,
    "Colene"
    ,
    "Coletta"
    ,
    "Colette"
    ,
    "Colleen"
    ,
    "Collen"
    ,
    "Collete"
    ,
    "Collette"
    ,
    "Collie"
    ,
    "Colline"
    ,
    "Colly"
    ,
    "Con"
    ,
    "Concettina"
    ,
    "Conchita"
    ,
    "Concordia"
    ,
    "Conni"
    ,
    "Connie"
    ,
    "Conny"
    ,
    "Consolata"
    ,
    "Constance"
    ,
    "Constancia"
    ,
    "Constancy"
    ,
    "Constanta"
    ,
    "Constantia"
    ,
    "Constantina"
    ,
    "Constantine"
    ,
    "Consuela"
    ,
    "Consuelo"
    ,
    "Cookie"
    ,
    "Cora"
    ,
    "Corabel"
    ,
    "Corabella"
    ,
    "Corabelle"
    ,
    "Coral"
    ,
    "Coralie"
    ,
    "Coraline"
    ,
    "Coralyn"
    ,
    "Cordelia"
    ,
    "Cordelie"
    ,
    "Cordey"
    ,
    "Cordi"
    ,
    "Cordie"
    ,
    "Cordula"
    ,
    "Cordy"
    ,
    "Coreen"
    ,
    "Corella"
    ,
    "Corenda"
    ,
    "Corene"
    ,
    "Coretta"
    ,
    "Corette"
    ,
    "Corey"
    ,
    "Cori"
    ,
    "Corie"
    ,
    "Corilla"
    ,
    "Corina"
    ,
    "Corine"
    ,
    "Corinna"
    ,
    "Corinne"
    ,
    "Coriss"
    ,
    "Corissa"
    ,
    "Corliss"
    ,
    "Corly"
    ,
    "Cornela"
    ,
    "Cornelia"
    ,
    "Cornelle"
    ,
    "Cornie"
    ,
    "Corny"
    ,
    "Correna"
    ,
    "Correy"
    ,
    "Corri"
    ,
    "Corrianne"
    ,
    "Corrie"
    ,
    "Corrina"
    ,
    "Corrine"
    ,
    "Corrinne"
    ,
    "Corry"
    ,
    "Cortney"
    ,
    "Cory"
    ,
    "Cosetta"
    ,
    "Cosette"
    ,
    "Costanza"
    ,
    "Courtenay"
    ,
    "Courtnay"
    ,
    "Courtney"
    ,
    "Crin"
    ,
    "Cris"
    ,
    "Crissie"
    ,
    "Crissy"
    ,
    "Crista"
    ,
    "Cristabel"
    ,
    "Cristal"
    ,
    "Cristen"
    ,
    "Cristi"
    ,
    "Cristie"
    ,
    "Cristin"
    ,
    "Cristina"
    ,
    "Cristine"
    ,
    "Cristionna"
    ,
    "Cristy"
    ,
    "Crysta"
    ,
    "Crystal"
    ,
    "Crystie"
    ,
    "Cthrine"
    ,
    "Cyb"
    ,
    "Cybil"
    ,
    "Cybill"
    ,
    "Cymbre"
    ,
    "Cynde"
    ,
    "Cyndi"
    ,
    "Cyndia"
    ,
    "Cyndie"
    ,
    "Cyndy"
    ,
    "Cynthea"
    ,
    "Cynthia"
    ,
    "Cynthie"
    ,
    "Cynthy"
    ,
    "Dacey"
    ,
    "Dacia"
    ,
    "Dacie"
    ,
    "Dacy"
    ,
    "Dael"
    ,
    "Daffi"
    ,
    "Daffie"
    ,
    "Daffy"
    ,
    "Dagmar"
    ,
    "Dahlia"
    ,
    "Daile"
    ,
    "Daisey"
    ,
    "Daisi"
    ,
    "Daisie"
    ,
    "Daisy"
    ,
    "Dale"
    ,
    "Dalenna"
    ,
    "Dalia"
    ,
    "Dalila"
    ,
    "Dallas"
    ,
    "Daloris"
    ,
    "Damara"
    ,
    "Damaris"
    ,
    "Damita"
    ,
    "Dana"
    ,
    "Danell"
    ,
    "Danella"
    ,
    "Danette"
    ,
    "Dani"
    ,
    "Dania"
    ,
    "Danica"
    ,
    "Danice"
    ,
    "Daniela"
    ,
    "Daniele"
    ,
    "Daniella"
    ,
    "Danielle"
    ,
    "Danika"
    ,
    "Danila"
    ,
    "Danit"
    ,
    "Danita"
    ,
    "Danna"
    ,
    "Danni"
    ,
    "Dannie"
    ,
    "Danny"
    ,
    "Dannye"
    ,
    "Danya"
    ,
    "Danyelle"
    ,
    "Danyette"
    ,
    "Daphene"
    ,
    "Daphna"
    ,
    "Daphne"
    ,
    "Dara"
    ,
    "Darb"
    ,
    "Darbie"
    ,
    "Darby"
    ,
    "Darcee"
    ,
    "Darcey"
    ,
    "Darci"
    ,
    "Darcie"
    ,
    "Darcy"
    ,
    "Darda"
    ,
    "Dareen"
    ,
    "Darell"
    ,
    "Darelle"
    ,
    "Dari"
    ,
    "Daria"
    ,
    "Darice"
    ,
    "Darla"
    ,
    "Darleen"
    ,
    "Darlene"
    ,
    "Darline"
    ,
    "Darlleen"
    ,
    "Daron"
    ,
    "Darrelle"
    ,
    "Darryl"
    ,
    "Darsey"
    ,
    "Darsie"
    ,
    "Darya"
    ,
    "Daryl"
    ,
    "Daryn"
    ,
    "Dasha"
    ,
    "Dasi"
    ,
    "Dasie"
    ,
    "Dasya"
    ,
    "Datha"
    ,
    "Daune"
    ,
    "Daveen"
    ,
    "Daveta"
    ,
    "Davida"
    ,
    "Davina"
    ,
    "Davine"
    ,
    "Davita"
    ,
    "Dawn"
    ,
    "Dawna"
    ,
    "Dayle"
    ,
    "Dayna"
    ,
    "Ddene"
    ,
    "De"
    ,
    "Deana"
    ,
    "Deane"
    ,
    "Deanna"
    ,
    "Deanne"
    ,
    "Deb"
    ,
    "Debbi"
    ,
    "Debbie"
    ,
    "Debby"
    ,
    "Debee"
    ,
    "Debera"
    ,
    "Debi"
    ,
    "Debor"
    ,
    "Debora"
    ,
    "Deborah"
    ,
    "Debra"
    ,
    "Dede"
    ,
    "Dedie"
    ,
    "Dedra"
    ,
    "Dee"
    ,
    "Dee Dee"
    ,
    "Deeann"
    ,
    "Deeanne"
    ,
    "Deedee"
    ,
    "Deena"
    ,
    "Deerdre"
    ,
    "Deeyn"
    ,
    "Dehlia"
    ,
    "Deidre"
    ,
    "Deina"
    ,
    "Deirdre"
    ,
    "Del"
    ,
    "Dela"
    ,
    "Delcina"
    ,
    "Delcine"
    ,
    "Delia"
    ,
    "Delila"
    ,
    "Delilah"
    ,
    "Delinda"
    ,
    "Dell"
    ,
    "Della"
    ,
    "Delly"
    ,
    "Delora"
    ,
    "Delores"
    ,
    "Deloria"
    ,
    "Deloris"
    ,
    "Delphine"
    ,
    "Delphinia"
    ,
    "Demeter"
    ,
    "Demetra"
    ,
    "Demetria"
    ,
    "Demetris"
    ,
    "Dena"
    ,
    "Deni"
    ,
    "Denice"
    ,
    "Denise"
    ,
    "Denna"
    ,
    "Denni"
    ,
    "Dennie"
    ,
    "Denny"
    ,
    "Deny"
    ,
    "Denys"
    ,
    "Denyse"
    ,
    "Deonne"
    ,
    "Desdemona"
    ,
    "Desirae"
    ,
    "Desiree"
    ,
    "Desiri"
    ,
    "Deva"
    ,
    "Devan"
    ,
    "Devi"
    ,
    "Devin"
    ,
    "Devina"
    ,
    "Devinne"
    ,
    "Devon"
    ,
    "Devondra"
    ,
    "Devonna"
    ,
    "Devonne"
    ,
    "Devora"
    ,
    "Di"
    ,
    "Diahann"
    ,
    "Dian"
    ,
    "Diana"
    ,
    "Diandra"
    ,
    "Diane"
    ,
    "Diane-Marie"
    ,
    "Dianemarie"
    ,
    "Diann"
    ,
    "Dianna"
    ,
    "Dianne"
    ,
    "Diannne"
    ,
    "Didi"
    ,
    "Dido"
    ,
    "Diena"
    ,
    "Dierdre"
    ,
    "Dina"
    ,
    "Dinah"
    ,
    "Dinnie"
    ,
    "Dinny"
    ,
    "Dion"
    ,
    "Dione"
    ,
    "Dionis"
    ,
    "Dionne"
    ,
    "Dita"
    ,
    "Dix"
    ,
    "Dixie"
    ,
    "Dniren"
    ,
    "Dode"
    ,
    "Dodi"
    ,
    "Dodie"
    ,
    "Dody"
    ,
    "Doe"
    ,
    "Doll"
    ,
    "Dolley"
    ,
    "Dolli"
    ,
    "Dollie"
    ,
    "Dolly"
    ,
    "Dolores"
    ,
    "Dolorita"
    ,
    "Doloritas"
    ,
    "Domeniga"
    ,
    "Dominga"
    ,
    "Domini"
    ,
    "Dominica"
    ,
    "Dominique"
    ,
    "Dona"
    ,
    "Donella"
    ,
    "Donelle"
    ,
    "Donetta"
    ,
    "Donia"
    ,
    "Donica"
    ,
    "Donielle"
    ,
    "Donna"
    ,
    "Donnamarie"
    ,
    "Donni"
    ,
    "Donnie"
    ,
    "Donny"
    ,
    "Dora"
    ,
    "Doralia"
    ,
    "Doralin"
    ,
    "Doralyn"
    ,
    "Doralynn"
    ,
    "Doralynne"
    ,
    "Dore"
    ,
    "Doreen"
    ,
    "Dorelia"
    ,
    "Dorella"
    ,
    "Dorelle"
    ,
    "Dorena"
    ,
    "Dorene"
    ,
    "Doretta"
    ,
    "Dorette"
    ,
    "Dorey"
    ,
    "Dori"
    ,
    "Doria"
    ,
    "Dorian"
    ,
    "Dorice"
    ,
    "Dorie"
    ,
    "Dorine"
    ,
    "Doris"
    ,
    "Dorisa"
    ,
    "Dorise"
    ,
    "Dorita"
    ,
    "Doro"
    ,
    "Dorolice"
    ,
    "Dorolisa"
    ,
    "Dorotea"
    ,
    "Doroteya"
    ,
    "Dorothea"
    ,
    "Dorothee"
    ,
    "Dorothy"
    ,
    "Dorree"
    ,
    "Dorri"
    ,
    "Dorrie"
    ,
    "Dorris"
    ,
    "Dorry"
    ,
    "Dorthea"
    ,
    "Dorthy"
    ,
    "Dory"
    ,
    "Dosi"
    ,
    "Dot"
    ,
    "Doti"
    ,
    "Dotti"
    ,
    "Dottie"
    ,
    "Dotty"
    ,
    "Dre"
    ,
    "Dreddy"
    ,
    "Dredi"
    ,
    "Drona"
    ,
    "Dru"
    ,
    "Druci"
    ,
    "Drucie"
    ,
    "Drucill"
    ,
    "Drucy"
    ,
    "Drusi"
    ,
    "Drusie"
    ,
    "Drusilla"
    ,
    "Drusy"
    ,
    "Dulce"
    ,
    "Dulcea"
    ,
    "Dulci"
    ,
    "Dulcia"
    ,
    "Dulciana"
    ,
    "Dulcie"
    ,
    "Dulcine"
    ,
    "Dulcinea"
    ,
    "Dulcy"
    ,
    "Dulsea"
    ,
    "Dusty"
    ,
    "Dyan"
    ,
    "Dyana"
    ,
    "Dyane"
    ,
    "Dyann"
    ,
    "Dyanna"
    ,
    "Dyanne"
    ,
    "Dyna"
    ,
    "Dynah"
    ,
    "Eachelle"
    ,
    "Eada"
    ,
    "Eadie"
    ,
    "Eadith"
    ,
    "Ealasaid"
    ,
    "Eartha"
    ,
    "Easter"
    ,
    "Eba"
    ,
    "Ebba"
    ,
    "Ebonee"
    ,
    "Ebony"
    ,
    "Eda"
    ,
    "Eddi"
    ,
    "Eddie"
    ,
    "Eddy"
    ,
    "Ede"
    ,
    "Edee"
    ,
    "Edeline"
    ,
    "Eden"
    ,
    "Edi"
    ,
    "Edie"
    ,
    "Edin"
    ,
    "Edita"
    ,
    "Edith"
    ,
    "Editha"
    ,
    "Edithe"
    ,
    "Ediva"
    ,
    "Edna"
    ,
    "Edwina"
    ,
    "Edy"
    ,
    "Edyth"
    ,
    "Edythe"
    ,
    "Effie"
    ,
    "Eileen"
    ,
    "Eilis"
    ,
    "Eimile"
    ,
    "Eirena"
    ,
    "Ekaterina"
    ,
    "Elaina"
    ,
    "Elaine"
    ,
    "Elana"
    ,
    "Elane"
    ,
    "Elayne"
    ,
    "Elberta"
    ,
    "Elbertina"
    ,
    "Elbertine"
    ,
    "Eleanor"
    ,
    "Eleanora"
    ,
    "Eleanore"
    ,
    "Electra"
    ,
    "Eleen"
    ,
    "Elena"
    ,
    "Elene"
    ,
    "Eleni"
    ,
    "Elenore"
    ,
    "Eleonora"
    ,
    "Eleonore"
    ,
    "Elfie"
    ,
    "Elfreda"
    ,
    "Elfrida"
    ,
    "Elfrieda"
    ,
    "Elga"
    ,
    "Elianora"
    ,
    "Elianore"
    ,
    "Elicia"
    ,
    "Elie"
    ,
    "Elinor"
    ,
    "Elinore"
    ,
    "Elisa"
    ,
    "Elisabet"
    ,
    "Elisabeth"
    ,
    "Elisabetta"
    ,
    "Elise"
    ,
    "Elisha"
    ,
    "Elissa"
    ,
    "Elita"
    ,
    "Eliza"
    ,
    "Elizabet"
    ,
    "Elizabeth"
    ,
    "Elka"
    ,
    "Elke"
    ,
    "Ella"
    ,
    "Elladine"
    ,
    "Elle"
    ,
    "Ellen"
    ,
    "Ellene"
    ,
    "Ellette"
    ,
    "Elli"
    ,
    "Ellie"
    ,
    "Ellissa"
    ,
    "Elly"
    ,
    "Ellyn"
    ,
    "Ellynn"
    ,
    "Elmira"
    ,
    "Elna"
    ,
    "Elnora"
    ,
    "Elnore"
    ,
    "Eloisa"
    ,
    "Eloise"
    ,
    "Elonore"
    ,
    "Elora"
    ,
    "Elsa"
    ,
    "Elsbeth"
    ,
    "Else"
    ,
    "Elset"
    ,
    "Elsey"
    ,
    "Elsi"
    ,
    "Elsie"
    ,
    "Elsinore"
    ,
    "Elspeth"
    ,
    "Elsy"
    ,
    "Elva"
    ,
    "Elvera"
    ,
    "Elvina"
    ,
    "Elvira"
    ,
    "Elwira"
    ,
    "Elyn"
    ,
    "Elyse"
    ,
    "Elysee"
    ,
    "Elysha"
    ,
    "Elysia"
    ,
    "Elyssa"
    ,
    "Em"
    ,
    "Ema"
    ,
    "Emalee"
    ,
    "Emalia"
    ,
    "Emelda"
    ,
    "Emelia"
    ,
    "Emelina"
    ,
    "Emeline"
    ,
    "Emelita"
    ,
    "Emelyne"
    ,
    "Emera"
    ,
    "Emilee"
    ,
    "Emili"
    ,
    "Emilia"
    ,
    "Emilie"
    ,
    "Emiline"
    ,
    "Emily"
    ,
    "Emlyn"
    ,
    "Emlynn"
    ,
    "Emlynne"
    ,
    "Emma"
    ,
    "Emmalee"
    ,
    "Emmaline"
    ,
    "Emmalyn"
    ,
    "Emmalynn"
    ,
    "Emmalynne"
    ,
    "Emmeline"
    ,
    "Emmey"
    ,
    "Emmi"
    ,
    "Emmie"
    ,
    "Emmy"
    ,
    "Emmye"
    ,
    "Emogene"
    ,
    "Emyle"
    ,
    "Emylee"
    ,
    "Engracia"
    ,
    "Enid"
    ,
    "Enrica"
    ,
    "Enrichetta"
    ,
    "Enrika"
    ,
    "Enriqueta"
    ,
    "Eolanda"
    ,
    "Eolande"
    ,
    "Eran"
    ,
    "Erda"
    ,
    "Erena"
    ,
    "Erica"
    ,
    "Ericha"
    ,
    "Ericka"
    ,
    "Erika"
    ,
    "Erin"
    ,
    "Erina"
    ,
    "Erinn"
    ,
    "Erinna"
    ,
    "Erma"
    ,
    "Ermengarde"
    ,
    "Ermentrude"
    ,
    "Ermina"
    ,
    "Erminia"
    ,
    "Erminie"
    ,
    "Erna"
    ,
    "Ernaline"
    ,
    "Ernesta"
    ,
    "Ernestine"
    ,
    "Ertha"
    ,
    "Eryn"
    ,
    "Esma"
    ,
    "Esmaria"
    ,
    "Esme"
    ,
    "Esmeralda"
    ,
    "Essa"
    ,
    "Essie"
    ,
    "Essy"
    ,
    "Esta"
    ,
    "Estel"
    ,
    "Estele"
    ,
    "Estell"
    ,
    "Estella"
    ,
    "Estelle"
    ,
    "Ester"
    ,
    "Esther"
    ,
    "Estrella"
    ,
    "Estrellita"
    ,
    "Ethel"
    ,
    "Ethelda"
    ,
    "Ethelin"
    ,
    "Ethelind"
    ,
    "Etheline"
    ,
    "Ethelyn"
    ,
    "Ethyl"
    ,
    "Etta"
    ,
    "Etti"
    ,
    "Ettie"
    ,
    "Etty"
    ,
    "Eudora"
    ,
    "Eugenia"
    ,
    "Eugenie"
    ,
    "Eugine"
    ,
    "Eula"
    ,
    "Eulalie"
    ,
    "Eunice"
    ,
    "Euphemia"
    ,
    "Eustacia"
    ,
    "Eva"
    ,
    "Evaleen"
    ,
    "Evangelia"
    ,
    "Evangelin"
    ,
    "Evangelina"
    ,
    "Evangeline"
    ,
    "Evania"
    ,
    "Evanne"
    ,
    "Eve"
    ,
    "Eveleen"
    ,
    "Evelina"
    ,
    "Eveline"
    ,
    "Evelyn"
    ,
    "Evey"
    ,
    "Evie"
    ,
    "Evita"
    ,
    "Evonne"
    ,
    "Evvie"
    ,
    "Evvy"
    ,
    "Evy"
    ,
    "Eyde"
    ,
    "Eydie"
    ,
    "Ezmeralda"
    ,
    "Fae"
    ,
    "Faina"
    ,
    "Faith"
    ,
    "Fallon"
    ,
    "Fan"
    ,
    "Fanchette"
    ,
    "Fanchon"
    ,
    "Fancie"
    ,
    "Fancy"
    ,
    "Fanechka"
    ,
    "Fania"
    ,
    "Fanni"
    ,
    "Fannie"
    ,
    "Fanny"
    ,
    "Fanya"
    ,
    "Fara"
    ,
    "Farah"
    ,
    "Farand"
    ,
    "Farica"
    ,
    "Farra"
    ,
    "Farrah"
    ,
    "Farrand"
    ,
    "Faun"
    ,
    "Faunie"
    ,
    "Faustina"
    ,
    "Faustine"
    ,
    "Fawn"
    ,
    "Fawne"
    ,
    "Fawnia"
    ,
    "Fay"
    ,
    "Faydra"
    ,
    "Faye"
    ,
    "Fayette"
    ,
    "Fayina"
    ,
    "Fayre"
    ,
    "Fayth"
    ,
    "Faythe"
    ,
    "Federica"
    ,
    "Fedora"
    ,
    "Felecia"
    ,
    "Felicdad"
    ,
    "Felice"
    ,
    "Felicia"
    ,
    "Felicity"
    ,
    "Felicle"
    ,
    "Felipa"
    ,
    "Felisha"
    ,
    "Felita"
    ,
    "Feliza"
    ,
    "Fenelia"
    ,
    "Feodora"
    ,
    "Ferdinanda"
    ,
    "Ferdinande"
    ,
    "Fern"
    ,
    "Fernanda"
    ,
    "Fernande"
    ,
    "Fernandina"
    ,
    "Ferne"
    ,
    "Fey"
    ,
    "Fiann"
    ,
    "Fianna"
    ,
    "Fidela"
    ,
    "Fidelia"
    ,
    "Fidelity"
    ,
    "Fifi"
    ,
    "Fifine"
    ,
    "Filia"
    ,
    "Filide"
    ,
    "Filippa"
    ,
    "Fina"
    ,
    "Fiona"
    ,
    "Fionna"
    ,
    "Fionnula"
    ,
    "Fiorenze"
    ,
    "Fleur"
    ,
    "Fleurette"
    ,
    "Flo"
    ,
    "Flor"
    ,
    "Flora"
    ,
    "Florance"
    ,
    "Flore"
    ,
    "Florella"
    ,
    "Florence"
    ,
    "Florencia"
    ,
    "Florentia"
    ,
    "Florenza"
    ,
    "Florette"
    ,
    "Flori"
    ,
    "Floria"
    ,
    "Florida"
    ,
    "Florie"
    ,
    "Florina"
    ,
    "Florinda"
    ,
    "Floris"
    ,
    "Florri"
    ,
    "Florrie"
    ,
    "Florry"
    ,
    "Flory"
    ,
    "Flossi"
    ,
    "Flossie"
    ,
    "Flossy"
    ,
    "Flss"
    ,
    "Fran"
    ,
    "Francene"
    ,
    "Frances"
    ,
    "Francesca"
    ,
    "Francine"
    ,
    "Francisca"
    ,
    "Franciska"
    ,
    "Francoise"
    ,
    "Francyne"
    ,
    "Frank"
    ,
    "Frankie"
    ,
    "Franky"
    ,
    "Franni"
    ,
    "Frannie"
    ,
    "Franny"
    ,
    "Frayda"
    ,
    "Fred"
    ,
    "Freda"
    ,
    "Freddi"
    ,
    "Freddie"
    ,
    "Freddy"
    ,
    "Fredelia"
    ,
    "Frederica"
    ,
    "Fredericka"
    ,
    "Frederique"
    ,
    "Fredi"
    ,
    "Fredia"
    ,
    "Fredra"
    ,
    "Fredrika"
    ,
    "Freida"
    ,
    "Frieda"
    ,
    "Friederike"
    ,
    "Fulvia"
    ,
    "Gabbey"
    ,
    "Gabbi"
    ,
    "Gabbie"
    ,
    "Gabey"
    ,
    "Gabi"
    ,
    "Gabie"
    ,
    "Gabriel"
    ,
    "Gabriela"
    ,
    "Gabriell"
    ,
    "Gabriella"
    ,
    "Gabrielle"
    ,
    "Gabriellia"
    ,
    "Gabrila"
    ,
    "Gaby"
    ,
    "Gae"
    ,
    "Gael"
    ,
    "Gail"
    ,
    "Gale"
    ,
    "Gale"
    ,
    "Galina"
    ,
    "Garland"
    ,
    "Garnet"
    ,
    "Garnette"
    ,
    "Gates"
    ,
    "Gavra"
    ,
    "Gavrielle"
    ,
    "Gelya"
    ,
    "Gena"
    ,
    "Gene"
    ,
    "Geneva"
    ,
    "Genevieve"
    ,
    "Genevra"
    ,
    "Genia"
    ,
    "Genna"
    ,
    "Genni"
    ,
    "Gennie"
    ,
    "Gennifer"
    ,
    "Genny"
    ,
    "Genovera"
    ,
    "Genvieve"
    ,
    "George"
    ,
    "Georgeanna"
    ,
    "Georgeanne"
    ,
    "Georgena"
    ,
    "Georgeta"
    ,
    "Georgetta"
    ,
    "Georgette"
    ,
    "Georgia"
    ,
    "Georgiana"
    ,
    "Georgianna"
    ,
    "Georgianne"
    ,
    "Georgie"
    ,
    "Georgina"
    ,
    "Georgine"
    ,
    "Geralda"
    ,
    "Geraldine"
    ,
    "Gerda"
    ,
    "Gerhardine"
    ,
    "Geri"
    ,
    "Gerianna"
    ,
    "Gerianne"
    ,
    "Gerladina"
    ,
    "Germain"
    ,
    "Germaine"
    ,
    "Germana"
    ,
    "Gerri"
    ,
    "Gerrie"
    ,
    "Gerrilee"
    ,
    "Gerry"
    ,
    "Gert"
    ,
    "Gerta"
    ,
    "Gerti"
    ,
    "Gertie"
    ,
    "Gertrud"
    ,
    "Gertruda"
    ,
    "Gertrude"
    ,
    "Gertrudis"
    ,
    "Gerty"
    ,
    "Giacinta"
    ,
    "Giana"
    ,
    "Gianina"
    ,
    "Gianna"
    ,
    "Gigi"
    ,
    "Gilberta"
    ,
    "Gilberte"
    ,
    "Gilbertina"
    ,
    "Gilbertine"
    ,
    "Gilda"
    ,
    "Gilemette"
    ,
    "Gill"
    ,
    "Gillan"
    ,
    "Gilli"
    ,
    "Gillian"
    ,
    "Gillie"
    ,
    "Gilligan"
    ,
    "Gilly"
    ,
    "Gina"
    ,
    "Ginelle"
    ,
    "Ginevra"
    ,
    "Ginger"
    ,
    "Ginni"
    ,
    "Ginnie"
    ,
    "Ginnifer"
    ,
    "Ginny"
    ,
    "Giorgia"
    ,
    "Giovanna"
    ,
    "Gipsy"
    ,
    "Giralda"
    ,
    "Gisela"
    ,
    "Gisele"
    ,
    "Gisella"
    ,
    "Giselle"
    ,
    "Giuditta"
    ,
    "Giulia"
    ,
    "Giulietta"
    ,
    "Giustina"
    ,
    "Gizela"
    ,
    "Glad"
    ,
    "Gladi"
    ,
    "Gladys"
    ,
    "Gleda"
    ,
    "Glen"
    ,
    "Glenda"
    ,
    "Glenine"
    ,
    "Glenn"
    ,
    "Glenna"
    ,
    "Glennie"
    ,
    "Glennis"
    ,
    "Glori"
    ,
    "Gloria"
    ,
    "Gloriana"
    ,
    "Gloriane"
    ,
    "Glory"
    ,
    "Glyn"
    ,
    "Glynda"
    ,
    "Glynis"
    ,
    "Glynnis"
    ,
    "Gnni"
    ,
    "Godiva"
    ,
    "Golda"
    ,
    "Goldarina"
    ,
    "Goldi"
    ,
    "Goldia"
    ,
    "Goldie"
    ,
    "Goldina"
    ,
    "Goldy"
    ,
    "Grace"
    ,
    "Gracia"
    ,
    "Gracie"
    ,
    "Grata"
    ,
    "Gratia"
    ,
    "Gratiana"
    ,
    "Gray"
    ,
    "Grayce"
    ,
    "Grazia"
    ,
    "Greer"
    ,
    "Greta"
    ,
    "Gretal"
    ,
    "Gretchen"
    ,
    "Grete"
    ,
    "Gretel"
    ,
    "Grethel"
    ,
    "Gretna"
    ,
    "Gretta"
    ,
    "Grier"
    ,
    "Griselda"
    ,
    "Grissel"
    ,
    "Guendolen"
    ,
    "Guenevere"
    ,
    "Guenna"
    ,
    "Guglielma"
    ,
    "Gui"
    ,
    "Guillema"
    ,
    "Guillemette"
    ,
    "Guinevere"
    ,
    "Guinna"
    ,
    "Gunilla"
    ,
    "Gus"
    ,
    "Gusella"
    ,
    "Gussi"
    ,
    "Gussie"
    ,
    "Gussy"
    ,
    "Gusta"
    ,
    "Gusti"
    ,
    "Gustie"
    ,
    "Gusty"
    ,
    "Gwen"
    ,
    "Gwendolen"
    ,
    "Gwendolin"
    ,
    "Gwendolyn"
    ,
    "Gweneth"
    ,
    "Gwenette"
    ,
    "Gwenneth"
    ,
    "Gwenni"
    ,
    "Gwennie"
    ,
    "Gwenny"
    ,
    "Gwenora"
    ,
    "Gwenore"
    ,
    "Gwyn"
    ,
    "Gwyneth"
    ,
    "Gwynne"
    ,
    "Gypsy"
    ,
    "Hadria"
    ,
    "Hailee"
    ,
    "Haily"
    ,
    "Haleigh"
    ,
    "Halette"
    ,
    "Haley"
    ,
    "Hali"
    ,
    "Halie"
    ,
    "Halimeda"
    ,
    "Halley"
    ,
    "Halli"
    ,
    "Hallie"
    ,
    "Hally"
    ,
    "Hana"
    ,
    "Hanna"
    ,
    "Hannah"
    ,
    "Hanni"
    ,
    "Hannie"
    ,
    "Hannis"
    ,
    "Hanny"
    ,
    "Happy"
    ,
    "Harlene"
    ,
    "Harley"
    ,
    "Harli"
    ,
    "Harlie"
    ,
    "Harmonia"
    ,
    "Harmonie"
    ,
    "Harmony"
    ,
    "Harri"
    ,
    "Harrie"
    ,
    "Harriet"
    ,
    "Harriett"
    ,
    "Harrietta"
    ,
    "Harriette"
    ,
    "Harriot"
    ,
    "Harriott"
    ,
    "Hatti"
    ,
    "Hattie"
    ,
    "Hatty"
    ,
    "Hayley"
    ,
    "Hazel"
    ,
    "Heath"
    ,
    "Heather"
    ,
    "Heda"
    ,
    "Hedda"
    ,
    "Heddi"
    ,
    "Heddie"
    ,
    "Hedi"
    ,
    "Hedvig"
    ,
    "Hedvige"
    ,
    "Hedwig"
    ,
    "Hedwiga"
    ,
    "Hedy"
    ,
    "Heida"
    ,
    "Heidi"
    ,
    "Heidie"
    ,
    "Helaina"
    ,
    "Helaine"
    ,
    "Helen"
    ,
    "Helen-Elizabeth"
    ,
    "Helena"
    ,
    "Helene"
    ,
    "Helenka"
    ,
    "Helga"
    ,
    "Helge"
    ,
    "Helli"
    ,
    "Heloise"
    ,
    "Helsa"
    ,
    "Helyn"
    ,
    "Hendrika"
    ,
    "Henka"
    ,
    "Henrie"
    ,
    "Henrieta"
    ,
    "Henrietta"
    ,
    "Henriette"
    ,
    "Henryetta"
    ,
    "Hephzibah"
    ,
    "Hermia"
    ,
    "Hermina"
    ,
    "Hermine"
    ,
    "Herminia"
    ,
    "Hermione"
    ,
    "Herta"
    ,
    "Hertha"
    ,
    "Hester"
    ,
    "Hesther"
    ,
    "Hestia"
    ,
    "Hetti"
    ,
    "Hettie"
    ,
    "Hetty"
    ,
    "Hilary"
    ,
    "Hilda"
    ,
    "Hildagard"
    ,
    "Hildagarde"
    ,
    "Hilde"
    ,
    "Hildegaard"
    ,
    "Hildegarde"
    ,
    "Hildy"
    ,
    "Hillary"
    ,
    "Hilliary"
    ,
    "Hinda"
    ,
    "Holli"
    ,
    "Hollie"
    ,
    "Holly"
    ,
    "Holly-Anne"
    ,
    "Hollyanne"
    ,
    "Honey"
    ,
    "Honor"
    ,
    "Honoria"
    ,
    "Hope"
    ,
    "Horatia"
    ,
    "Hortense"
    ,
    "Hortensia"
    ,
    "Hulda"
    ,
    "Hyacinth"
    ,
    "Hyacintha"
    ,
    "Hyacinthe"
    ,
    "Hyacinthia"
    ,
    "Hyacinthie"
    ,
    "Hynda"
    ,
    "Ianthe"
    ,
    "Ibbie"
    ,
    "Ibby"
    ,
    "Ida"
    ,
    "Idalia"
    ,
    "Idalina"
    ,
    "Idaline"
    ,
    "Idell"
    ,
    "Idelle"
    ,
    "Idette"
    ,
    "Ileana"
    ,
    "Ileane"
    ,
    "Ilene"
    ,
    "Ilise"
    ,
    "Ilka"
    ,
    "Illa"
    ,
    "Ilsa"
    ,
    "Ilse"
    ,
    "Ilysa"
    ,
    "Ilyse"
    ,
    "Ilyssa"
    ,
    "Imelda"
    ,
    "Imogen"
    ,
    "Imogene"
    ,
    "Imojean"
    ,
    "Ina"
    ,
    "Indira"
    ,
    "Ines"
    ,
    "Inesita"
    ,
    "Inessa"
    ,
    "Inez"
    ,
    "Inga"
    ,
    "Ingaberg"
    ,
    "Ingaborg"
    ,
    "Inge"
    ,
    "Ingeberg"
    ,
    "Ingeborg"
    ,
    "Inger"
    ,
    "Ingrid"
    ,
    "Ingunna"
    ,
    "Inna"
    ,
    "Iolande"
    ,
    "Iolanthe"
    ,
    "Iona"
    ,
    "Iormina"
    ,
    "Ira"
    ,
    "Irena"
    ,
    "Irene"
    ,
    "Irina"
    ,
    "Iris"
    ,
    "Irita"
    ,
    "Irma"
    ,
    "Isa"
    ,
    "Isabel"
    ,
    "Isabelita"
    ,
    "Isabella"
    ,
    "Isabelle"
    ,
    "Isadora"
    ,
    "Isahella"
    ,
    "Iseabal"
    ,
    "Isidora"
    ,
    "Isis"
    ,
    "Isobel"
    ,
    "Issi"
    ,
    "Issie"
    ,
    "Issy"
    ,
    "Ivett"
    ,
    "Ivette"
    ,
    "Ivie"
    ,
    "Ivonne"
    ,
    "Ivory"
    ,
    "Ivy"
    ,
    "Izabel"
    ,
    "Jacenta"
    ,
    "Jacinda"
    ,
    "Jacinta"
    ,
    "Jacintha"
    ,
    "Jacinthe"
    ,
    "Jackelyn"
    ,
    "Jacki"
    ,
    "Jackie"
    ,
    "Jacklin"
    ,
    "Jacklyn"
    ,
    "Jackquelin"
    ,
    "Jackqueline"
    ,
    "Jacky"
    ,
    "Jaclin"
    ,
    "Jaclyn"
    ,
    "Jacquelin"
    ,
    "Jacqueline"
    ,
    "Jacquelyn"
    ,
    "Jacquelynn"
    ,
    "Jacquenetta"
    ,
    "Jacquenette"
    ,
    "Jacquetta"
    ,
    "Jacquette"
    ,
    "Jacqui"
    ,
    "Jacquie"
    ,
    "Jacynth"
    ,
    "Jada"
    ,
    "Jade"
    ,
    "Jaime"
    ,
    "Jaimie"
    ,
    "Jaine"
    ,
    "Jami"
    ,
    "Jamie"
    ,
    "Jamima"
    ,
    "Jammie"
    ,
    "Jan"
    ,
    "Jana"
    ,
    "Janaya"
    ,
    "Janaye"
    ,
    "Jandy"
    ,
    "Jane"
    ,
    "Janean"
    ,
    "Janeczka"
    ,
    "Janeen"
    ,
    "Janel"
    ,
    "Janela"
    ,
    "Janella"
    ,
    "Janelle"
    ,
    "Janene"
    ,
    "Janenna"
    ,
    "Janessa"
    ,
    "Janet"
    ,
    "Janeta"
    ,
    "Janetta"
    ,
    "Janette"
    ,
    "Janeva"
    ,
    "Janey"
    ,
    "Jania"
    ,
    "Janice"
    ,
    "Janie"
    ,
    "Janifer"
    ,
    "Janina"
    ,
    "Janine"
    ,
    "Janis"
    ,
    "Janith"
    ,
    "Janka"
    ,
    "Janna"
    ,
    "Jannel"
    ,
    "Jannelle"
    ,
    "Janot"
    ,
    "Jany"
    ,
    "Jaquelin"
    ,
    "Jaquelyn"
    ,
    "Jaquenetta"
    ,
    "Jaquenette"
    ,
    "Jaquith"
    ,
    "Jasmin"
    ,
    "Jasmina"
    ,
    "Jasmine"
    ,
    "Jayme"
    ,
    "Jaymee"
    ,
    "Jayne"
    ,
    "Jaynell"
    ,
    "Jazmin"
    ,
    "Jean"
    ,
    "Jeana"
    ,
    "Jeane"
    ,
    "Jeanelle"
    ,
    "Jeanette"
    ,
    "Jeanie"
    ,
    "Jeanine"
    ,
    "Jeanna"
    ,
    "Jeanne"
    ,
    "Jeannette"
    ,
    "Jeannie"
    ,
    "Jeannine"
    ,
    "Jehanna"
    ,
    "Jelene"
    ,
    "Jemie"
    ,
    "Jemima"
    ,
    "Jemimah"
    ,
    "Jemmie"
    ,
    "Jemmy"
    ,
    "Jen"
    ,
    "Jena"
    ,
    "Jenda"
    ,
    "Jenelle"
    ,
    "Jeni"
    ,
    "Jenica"
    ,
    "Jeniece"
    ,
    "Jenifer"
    ,
    "Jeniffer"
    ,
    "Jenilee"
    ,
    "Jenine"
    ,
    "Jenn"
    ,
    "Jenna"
    ,
    "Jennee"
    ,
    "Jennette"
    ,
    "Jenni"
    ,
    "Jennica"
    ,
    "Jennie"
    ,
    "Jennifer"
    ,
    "Jennilee"
    ,
    "Jennine"
    ,
    "Jenny"
    ,
    "Jeralee"
    ,
    "Jere"
    ,
    "Jeri"
    ,
    "Jermaine"
    ,
    "Jerrie"
    ,
    "Jerrilee"
    ,
    "Jerrilyn"
    ,
    "Jerrine"
    ,
    "Jerry"
    ,
    "Jerrylee"
    ,
    "Jess"
    ,
    "Jessa"
    ,
    "Jessalin"
    ,
    "Jessalyn"
    ,
    "Jessamine"
    ,
    "Jessamyn"
    ,
    "Jesse"
    ,
    "Jesselyn"
    ,
    "Jessi"
    ,
    "Jessica"
    ,
    "Jessie"
    ,
    "Jessika"
    ,
    "Jessy"
    ,
    "Jewel"
    ,
    "Jewell"
    ,
    "Jewelle"
    ,
    "Jill"
    ,
    "Jillana"
    ,
    "Jillane"
    ,
    "Jillayne"
    ,
    "Jilleen"
    ,
    "Jillene"
    ,
    "Jilli"
    ,
    "Jillian"
    ,
    "Jillie"
    ,
    "Jilly"
    ,
    "Jinny"
    ,
    "Jo"
    ,
    "Jo Ann"
    ,
    "Jo-Ann"
    ,
    "Jo-Anne"
    ,
    "Joan"
    ,
    "Joana"
    ,
    "Joane"
    ,
    "Joanie"
    ,
    "Joann"
    ,
    "Joanna"
    ,
    "Joanne"
    ,
    "Joannes"
    ,
    "Jobey"
    ,
    "Jobi"
    ,
    "Jobie"
    ,
    "Jobina"
    ,
    "Joby"
    ,
    "Jobye"
    ,
    "Jobyna"
    ,
    "Jocelin"
    ,
    "Joceline"
    ,
    "Jocelyn"
    ,
    "Jocelyne"
    ,
    "Jodee"
    ,
    "Jodi"
    ,
    "Jodie"
    ,
    "Jody"
    ,
    "Joeann"
    ,
    "Joela"
    ,
    "Joelie"
    ,
    "Joell"
    ,
    "Joella"
    ,
    "Joelle"
    ,
    "Joellen"
    ,
    "Joelly"
    ,
    "Joellyn"
    ,
    "Joelynn"
    ,
    "Joete"
    ,
    "Joey"
    ,
    "Johanna"
    ,
    "Johannah"
    ,
    "Johna"
    ,
    "Johnath"
    ,
    "Johnette"
    ,
    "Johnna"
    ,
    "Joice"
    ,
    "Jojo"
    ,
    "Jolee"
    ,
    "Joleen"
    ,
    "Jolene"
    ,
    "Joletta"
    ,
    "Joli"
    ,
    "Jolie"
    ,
    "Joline"
    ,
    "Joly"
    ,
    "Jolyn"
    ,
    "Jolynn"
    ,
    "Jonell"
    ,
    "Joni"
    ,
    "Jonie"
    ,
    "Jonis"
    ,
    "Jordain"
    ,
    "Jordan"
    ,
    "Jordana"
    ,
    "Jordanna"
    ,
    "Jorey"
    ,
    "Jori"
    ,
    "Jorie"
    ,
    "Jorrie"
    ,
    "Jorry"
    ,
    "Joscelin"
    ,
    "Josee"
    ,
    "Josefa"
    ,
    "Josefina"
    ,
    "Josepha"
    ,
    "Josephina"
    ,
    "Josephine"
    ,
    "Josey"
    ,
    "Josi"
    ,
    "Josie"
    ,
    "Josselyn"
    ,
    "Josy"
    ,
    "Jourdan"
    ,
    "Joy"
    ,
    "Joya"
    ,
    "Joyan"
    ,
    "Joyann"
    ,
    "Joyce"
    ,
    "Joycelin"
    ,
    "Joye"
    ,
    "Jsandye"
    ,
    "Juana"
    ,
    "Juanita"
    ,
    "Judi"
    ,
    "Judie"
    ,
    "Judith"
    ,
    "Juditha"
    ,
    "Judy"
    ,
    "Judye"
    ,
    "Juieta"
    ,
    "Julee"
    ,
    "Juli"
    ,
    "Julia"
    ,
    "Juliana"
    ,
    "Juliane"
    ,
    "Juliann"
    ,
    "Julianna"
    ,
    "Julianne"
    ,
    "Julie"
    ,
    "Julienne"
    ,
    "Juliet"
    ,
    "Julieta"
    ,
    "Julietta"
    ,
    "Juliette"
    ,
    "Julina"
    ,
    "Juline"
    ,
    "Julissa"
    ,
    "Julita"
    ,
    "June"
    ,
    "Junette"
    ,
    "Junia"
    ,
    "Junie"
    ,
    "Junina"
    ,
    "Justina"
    ,
    "Justine"
    ,
    "Justinn"
    ,
    "Jyoti"
    ,
    "Kacey"
    ,
    "Kacie"
    ,
    "Kacy"
    ,
    "Kaela"
    ,
    "Kai"
    ,
    "Kaia"
    ,
    "Kaila"
    ,
    "Kaile"
    ,
    "Kailey"
    ,
    "Kaitlin"
    ,
    "Kaitlyn"
    ,
    "Kaitlynn"
    ,
    "Kaja"
    ,
    "Kakalina"
    ,
    "Kala"
    ,
    "Kaleena"
    ,
    "Kali"
    ,
    "Kalie"
    ,
    "Kalila"
    ,
    "Kalina"
    ,
    "Kalinda"
    ,
    "Kalindi"
    ,
    "Kalli"
    ,
    "Kally"
    ,
    "Kameko"
    ,
    "Kamila"
    ,
    "Kamilah"
    ,
    "Kamillah"
    ,
    "Kandace"
    ,
    "Kandy"
    ,
    "Kania"
    ,
    "Kanya"
    ,
    "Kara"
    ,
    "Kara-Lynn"
    ,
    "Karalee"
    ,
    "Karalynn"
    ,
    "Kare"
    ,
    "Karee"
    ,
    "Karel"
    ,
    "Karen"
    ,
    "Karena"
    ,
    "Kari"
    ,
    "Karia"
    ,
    "Karie"
    ,
    "Karil"
    ,
    "Karilynn"
    ,
    "Karin"
    ,
    "Karina"
    ,
    "Karine"
    ,
    "Kariotta"
    ,
    "Karisa"
    ,
    "Karissa"
    ,
    "Karita"
    ,
    "Karla"
    ,
    "Karlee"
    ,
    "Karleen"
    ,
    "Karlen"
    ,
    "Karlene"
    ,
    "Karlie"
    ,
    "Karlotta"
    ,
    "Karlotte"
    ,
    "Karly"
    ,
    "Karlyn"
    ,
    "Karmen"
    ,
    "Karna"
    ,
    "Karol"
    ,
    "Karola"
    ,
    "Karole"
    ,
    "Karolina"
    ,
    "Karoline"
    ,
    "Karoly"
    ,
    "Karon"
    ,
    "Karrah"
    ,
    "Karrie"
    ,
    "Karry"
    ,
    "Kary"
    ,
    "Karyl"
    ,
    "Karylin"
    ,
    "Karyn"
    ,
    "Kasey"
    ,
    "Kass"
    ,
    "Kassandra"
    ,
    "Kassey"
    ,
    "Kassi"
    ,
    "Kassia"
    ,
    "Kassie"
    ,
    "Kat"
    ,
    "Kata"
    ,
    "Katalin"
    ,
    "Kate"
    ,
    "Katee"
    ,
    "Katerina"
    ,
    "Katerine"
    ,
    "Katey"
    ,
    "Kath"
    ,
    "Katha"
    ,
    "Katharina"
    ,
    "Katharine"
    ,
    "Katharyn"
    ,
    "Kathe"
    ,
    "Katherina"
    ,
    "Katherine"
    ,
    "Katheryn"
    ,
    "Kathi"
    ,
    "Kathie"
    ,
    "Kathleen"
    ,
    "Kathlin"
    ,
    "Kathrine"
    ,
    "Kathryn"
    ,
    "Kathryne"
    ,
    "Kathy"
    ,
    "Kathye"
    ,
    "Kati"
    ,
    "Katie"
    ,
    "Katina"
    ,
    "Katine"
    ,
    "Katinka"
    ,
    "Katleen"
    ,
    "Katlin"
    ,
    "Katrina"
    ,
    "Katrine"
    ,
    "Katrinka"
    ,
    "Katti"
    ,
    "Kattie"
    ,
    "Katuscha"
    ,
    "Katusha"
    ,
    "Katy"
    ,
    "Katya"
    ,
    "Kay"
    ,
    "Kaycee"
    ,
    "Kaye"
    ,
    "Kayla"
    ,
    "Kayle"
    ,
    "Kaylee"
    ,
    "Kayley"
    ,
    "Kaylil"
    ,
    "Kaylyn"
    ,
    "Keeley"
    ,
    "Keelia"
    ,
    "Keely"
    ,
    "Kelcey"
    ,
    "Kelci"
    ,
    "Kelcie"
    ,
    "Kelcy"
    ,
    "Kelila"
    ,
    "Kellen"
    ,
    "Kelley"
    ,
    "Kelli"
    ,
    "Kellia"
    ,
    "Kellie"
    ,
    "Kellina"
    ,
    "Kellsie"
    ,
    "Kelly"
    ,
    "Kellyann"
    ,
    "Kelsey"
    ,
    "Kelsi"
    ,
    "Kelsy"
    ,
    "Kendra"
    ,
    "Kendre"
    ,
    "Kenna"
    ,
    "Keri"
    ,
    "Keriann"
    ,
    "Kerianne"
    ,
    "Kerri"
    ,
    "Kerrie"
    ,
    "Kerrill"
    ,
    "Kerrin"
    ,
    "Kerry"
    ,
    "Kerstin"
    ,
    "Kesley"
    ,
    "Keslie"
    ,
    "Kessia"
    ,
    "Kessiah"
    ,
    "Ketti"
    ,
    "Kettie"
    ,
    "Ketty"
    ,
    "Kevina"
    ,
    "Kevyn"
    ,
    "Ki"
    ,
    "Kiah"
    ,
    "Kial"
    ,
    "Kiele"
    ,
    "Kiersten"
    ,
    "Kikelia"
    ,
    "Kiley"
    ,
    "Kim"
    ,
    "Kimberlee"
    ,
    "Kimberley"
    ,
    "Kimberli"
    ,
    "Kimberly"
    ,
    "Kimberlyn"
    ,
    "Kimbra"
    ,
    "Kimmi"
    ,
    "Kimmie"
    ,
    "Kimmy"
    ,
    "Kinna"
    ,
    "Kip"
    ,
    "Kipp"
    ,
    "Kippie"
    ,
    "Kippy"
    ,
    "Kira"
    ,
    "Kirbee"
    ,
    "Kirbie"
    ,
    "Kirby"
    ,
    "Kiri"
    ,
    "Kirsten"
    ,
    "Kirsteni"
    ,
    "Kirsti"
    ,
    "Kirstin"
    ,
    "Kirstyn"
    ,
    "Kissee"
    ,
    "Kissiah"
    ,
    "Kissie"
    ,
    "Kit"
    ,
    "Kitti"
    ,
    "Kittie"
    ,
    "Kitty"
    ,
    "Kizzee"
    ,
    "Kizzie"
    ,
    "Klara"
    ,
    "Klarika"
    ,
    "Klarrisa"
    ,
    "Konstance"
    ,
    "Konstanze"
    ,
    "Koo"
    ,
    "Kora"
    ,
    "Koral"
    ,
    "Koralle"
    ,
    "Kordula"
    ,
    "Kore"
    ,
    "Korella"
    ,
    "Koren"
    ,
    "Koressa"
    ,
    "Kori"
    ,
    "Korie"
    ,
    "Korney"
    ,
    "Korrie"
    ,
    "Korry"
    ,
    "Kris"
    ,
    "Krissie"
    ,
    "Krissy"
    ,
    "Krista"
    ,
    "Kristal"
    ,
    "Kristan"
    ,
    "Kriste"
    ,
    "Kristel"
    ,
    "Kristen"
    ,
    "Kristi"
    ,
    "Kristien"
    ,
    "Kristin"
    ,
    "Kristina"
    ,
    "Kristine"
    ,
    "Kristy"
    ,
    "Kristyn"
    ,
    "Krysta"
    ,
    "Krystal"
    ,
    "Krystalle"
    ,
    "Krystle"
    ,
    "Krystyna"
    ,
    "Kyla"
    ,
    "Kyle"
    ,
    "Kylen"
    ,
    "Kylie"
    ,
    "Kylila"
    ,
    "Kylynn"
    ,
    "Kym"
    ,
    "Kynthia"
    ,
    "Kyrstin"
    ,
    "La Verne"
    ,
    "Lacee"
    ,
    "Lacey"
    ,
    "Lacie"
    ,
    "Lacy"
    ,
    "Ladonna"
    ,
    "Laetitia"
    ,
    "Laina"
    ,
    "Lainey"
    ,
    "Lana"
    ,
    "Lanae"
    ,
    "Lane"
    ,
    "Lanette"
    ,
    "Laney"
    ,
    "Lani"
    ,
    "Lanie"
    ,
    "Lanita"
    ,
    "Lanna"
    ,
    "Lanni"
    ,
    "Lanny"
    ,
    "Lara"
    ,
    "Laraine"
    ,
    "Lari"
    ,
    "Larina"
    ,
    "Larine"
    ,
    "Larisa"
    ,
    "Larissa"
    ,
    "Lark"
    ,
    "Laryssa"
    ,
    "Latashia"
    ,
    "Latia"
    ,
    "Latisha"
    ,
    "Latrena"
    ,
    "Latrina"
    ,
    "Laura"
    ,
    "Lauraine"
    ,
    "Laural"
    ,
    "Lauralee"
    ,
    "Laure"
    ,
    "Lauree"
    ,
    "Laureen"
    ,
    "Laurel"
    ,
    "Laurella"
    ,
    "Lauren"
    ,
    "Laurena"
    ,
    "Laurene"
    ,
    "Lauretta"
    ,
    "Laurette"
    ,
    "Lauri"
    ,
    "Laurianne"
    ,
    "Laurice"
    ,
    "Laurie"
    ,
    "Lauryn"
    ,
    "Lavena"
    ,
    "Laverna"
    ,
    "Laverne"
    ,
    "Lavina"
    ,
    "Lavinia"
    ,
    "Lavinie"
    ,
    "Layla"
    ,
    "Layne"
    ,
    "Layney"
    ,
    "Lea"
    ,
    "Leah"
    ,
    "Leandra"
    ,
    "Leann"
    ,
    "Leanna"
    ,
    "Leanor"
    ,
    "Leanora"
    ,
    "Lebbie"
    ,
    "Leda"
    ,
    "Lee"
    ,
    "Leeann"
    ,
    "Leeanne"
    ,
    "Leela"
    ,
    "Leelah"
    ,
    "Leena"
    ,
    "Leesa"
    ,
    "Leese"
    ,
    "Legra"
    ,
    "Leia"
    ,
    "Leigh"
    ,
    "Leigha"
    ,
    "Leila"
    ,
    "Leilah"
    ,
    "Leisha"
    ,
    "Lela"
    ,
    "Lelah"
    ,
    "Leland"
    ,
    "Lelia"
    ,
    "Lena"
    ,
    "Lenee"
    ,
    "Lenette"
    ,
    "Lenka"
    ,
    "Lenna"
    ,
    "Lenora"
    ,
    "Lenore"
    ,
    "Leodora"
    ,
    "Leoine"
    ,
    "Leola"
    ,
    "Leoline"
    ,
    "Leona"
    ,
    "Leonanie"
    ,
    "Leone"
    ,
    "Leonelle"
    ,
    "Leonie"
    ,
    "Leonora"
    ,
    "Leonore"
    ,
    "Leontine"
    ,
    "Leontyne"
    ,
    "Leora"
    ,
    "Leshia"
    ,
    "Lesley"
    ,
    "Lesli"
    ,
    "Leslie"
    ,
    "Lesly"
    ,
    "Lesya"
    ,
    "Leta"
    ,
    "Lethia"
    ,
    "Leticia"
    ,
    "Letisha"
    ,
    "Letitia"
    ,
    "Letizia"
    ,
    "Letta"
    ,
    "Letti"
    ,
    "Lettie"
    ,
    "Letty"
    ,
    "Lexi"
    ,
    "Lexie"
    ,
    "Lexine"
    ,
    "Lexis"
    ,
    "Lexy"
    ,
    "Leyla"
    ,
    "Lezlie"
    ,
    "Lia"
    ,
    "Lian"
    ,
    "Liana"
    ,
    "Liane"
    ,
    "Lianna"
    ,
    "Lianne"
    ,
    "Lib"
    ,
    "Libbey"
    ,
    "Libbi"
    ,
    "Libbie"
    ,
    "Libby"
    ,
    "Licha"
    ,
    "Lida"
    ,
    "Lidia"
    ,
    "Liesa"
    ,
    "Lil"
    ,
    "Lila"
    ,
    "Lilah"
    ,
    "Lilas"
    ,
    "Lilia"
    ,
    "Lilian"
    ,
    "Liliane"
    ,
    "Lilias"
    ,
    "Lilith"
    ,
    "Lilla"
    ,
    "Lilli"
    ,
    "Lillian"
    ,
    "Lillis"
    ,
    "Lilllie"
    ,
    "Lilly"
    ,
    "Lily"
    ,
    "Lilyan"
    ,
    "Lin"
    ,
    "Lina"
    ,
    "Lind"
    ,
    "Linda"
    ,
    "Lindi"
    ,
    "Lindie"
    ,
    "Lindsay"
    ,
    "Lindsey"
    ,
    "Lindsy"
    ,
    "Lindy"
    ,
    "Linea"
    ,
    "Linell"
    ,
    "Linet"
    ,
    "Linette"
    ,
    "Linn"
    ,
    "Linnea"
    ,
    "Linnell"
    ,
    "Linnet"
    ,
    "Linnie"
    ,
    "Linzy"
    ,
    "Lira"
    ,
    "Lisa"
    ,
    "Lisabeth"
    ,
    "Lisbeth"
    ,
    "Lise"
    ,
    "Lisetta"
    ,
    "Lisette"
    ,
    "Lisha"
    ,
    "Lishe"
    ,
    "Lissa"
    ,
    "Lissi"
    ,
    "Lissie"
    ,
    "Lissy"
    ,
    "Lita"
    ,
    "Liuka"
    ,
    "Liv"
    ,
    "Liva"
    ,
    "Livia"
    ,
    "Livvie"
    ,
    "Livvy"
    ,
    "Livvyy"
    ,
    "Livy"
    ,
    "Liz"
    ,
    "Liza"
    ,
    "Lizabeth"
    ,
    "Lizbeth"
    ,
    "Lizette"
    ,
    "Lizzie"
    ,
    "Lizzy"
    ,
    "Loella"
    ,
    "Lois"
    ,
    "Loise"
    ,
    "Lola"
    ,
    "Loleta"
    ,
    "Lolita"
    ,
    "Lolly"
    ,
    "Lona"
    ,
    "Lonee"
    ,
    "Loni"
    ,
    "Lonna"
    ,
    "Lonni"
    ,
    "Lonnie"
    ,
    "Lora"
    ,
    "Lorain"
    ,
    "Loraine"
    ,
    "Loralee"
    ,
    "Loralie"
    ,
    "Loralyn"
    ,
    "Loree"
    ,
    "Loreen"
    ,
    "Lorelei"
    ,
    "Lorelle"
    ,
    "Loren"
    ,
    "Lorena"
    ,
    "Lorene"
    ,
    "Lorenza"
    ,
    "Loretta"
    ,
    "Lorette"
    ,
    "Lori"
    ,
    "Loria"
    ,
    "Lorianna"
    ,
    "Lorianne"
    ,
    "Lorie"
    ,
    "Lorilee"
    ,
    "Lorilyn"
    ,
    "Lorinda"
    ,
    "Lorine"
    ,
    "Lorita"
    ,
    "Lorna"
    ,
    "Lorne"
    ,
    "Lorraine"
    ,
    "Lorrayne"
    ,
    "Lorri"
    ,
    "Lorrie"
    ,
    "Lorrin"
    ,
    "Lorry"
    ,
    "Lory"
    ,
    "Lotta"
    ,
    "Lotte"
    ,
    "Lotti"
    ,
    "Lottie"
    ,
    "Lotty"
    ,
    "Lou"
    ,
    "Louella"
    ,
    "Louisa"
    ,
    "Louise"
    ,
    "Louisette"
    ,
    "Loutitia"
    ,
    "Lu"
    ,
    "Luce"
    ,
    "Luci"
    ,
    "Lucia"
    ,
    "Luciana"
    ,
    "Lucie"
    ,
    "Lucienne"
    ,
    "Lucila"
    ,
    "Lucilia"
    ,
    "Lucille"
    ,
    "Lucina"
    ,
    "Lucinda"
    ,
    "Lucine"
    ,
    "Lucita"
    ,
    "Lucky"
    ,
    "Lucretia"
    ,
    "Lucy"
    ,
    "Ludovika"
    ,
    "Luella"
    ,
    "Luelle"
    ,
    "Luisa"
    ,
    "Luise"
    ,
    "Lula"
    ,
    "Lulita"
    ,
    "Lulu"
    ,
    "Lura"
    ,
    "Lurette"
    ,
    "Lurleen"
    ,
    "Lurlene"
    ,
    "Lurline"
    ,
    "Lusa"
    ,
    "Luz"
    ,
    "Lyda"
    ,
    "Lydia"
    ,
    "Lydie"
    ,
    "Lyn"
    ,
    "Lynda"
    ,
    "Lynde"
    ,
    "Lyndel"
    ,
    "Lyndell"
    ,
    "Lyndsay"
    ,
    "Lyndsey"
    ,
    "Lyndsie"
    ,
    "Lyndy"
    ,
    "Lynea"
    ,
    "Lynelle"
    ,
    "Lynett"
    ,
    "Lynette"
    ,
    "Lynn"
    ,
    "Lynna"
    ,
    "Lynne"
    ,
    "Lynnea"
    ,
    "Lynnell"
    ,
    "Lynnelle"
    ,
    "Lynnet"
    ,
    "Lynnett"
    ,
    "Lynnette"
    ,
    "Lynsey"
    ,
    "Lyssa"
    ,
    "Mab"
    ,
    "Mabel"
    ,
    "Mabelle"
    ,
    "Mable"
    ,
    "Mada"
    ,
    "Madalena"
    ,
    "Madalyn"
    ,
    "Maddalena"
    ,
    "Maddi"
    ,
    "Maddie"
    ,
    "Maddy"
    ,
    "Madel"
    ,
    "Madelaine"
    ,
    "Madeleine"
    ,
    "Madelena"
    ,
    "Madelene"
    ,
    "Madelin"
    ,
    "Madelina"
    ,
    "Madeline"
    ,
    "Madella"
    ,
    "Madelle"
    ,
    "Madelon"
    ,
    "Madelyn"
    ,
    "Madge"
    ,
    "Madlen"
    ,
    "Madlin"
    ,
    "Madonna"
    ,
    "Mady"
    ,
    "Mae"
    ,
    "Maegan"
    ,
    "Mag"
    ,
    "Magda"
    ,
    "Magdaia"
    ,
    "Magdalen"
    ,
    "Magdalena"
    ,
    "Magdalene"
    ,
    "Maggee"
    ,
    "Maggi"
    ,
    "Maggie"
    ,
    "Maggy"
    ,
    "Mahala"
    ,
    "Mahalia"
    ,
    "Maia"
    ,
    "Maible"
    ,
    "Maiga"
    ,
    "Maighdiln"
    ,
    "Mair"
    ,
    "Maire"
    ,
    "Maisey"
    ,
    "Maisie"
    ,
    "Maitilde"
    ,
    "Mala"
    ,
    "Malanie"
    ,
    "Malena"
    ,
    "Malia"
    ,
    "Malina"
    ,
    "Malinda"
    ,
    "Malinde"
    ,
    "Malissa"
    ,
    "Malissia"
    ,
    "Mallissa"
    ,
    "Mallorie"
    ,
    "Mallory"
    ,
    "Malorie"
    ,
    "Malory"
    ,
    "Malva"
    ,
    "Malvina"
    ,
    "Malynda"
    ,
    "Mame"
    ,
    "Mamie"
    ,
    "Manda"
    ,
    "Mandi"
    ,
    "Mandie"
    ,
    "Mandy"
    ,
    "Manon"
    ,
    "Manya"
    ,
    "Mara"
    ,
    "Marabel"
    ,
    "Marcela"
    ,
    "Marcelia"
    ,
    "Marcella"
    ,
    "Marcelle"
    ,
    "Marcellina"
    ,
    "Marcelline"
    ,
    "Marchelle"
    ,
    "Marci"
    ,
    "Marcia"
    ,
    "Marcie"
    ,
    "Marcile"
    ,
    "Marcille"
    ,
    "Marcy"
    ,
    "Mareah"
    ,
    "Maren"
    ,
    "Marena"
    ,
    "Maressa"
    ,
    "Marga"
    ,
    "Margalit"
    ,
    "Margalo"
    ,
    "Margaret"
    ,
    "Margareta"
    ,
    "Margarete"
    ,
    "Margaretha"
    ,
    "Margarethe"
    ,
    "Margaretta"
    ,
    "Margarette"
    ,
    "Margarita"
    ,
    "Margaux"
    ,
    "Marge"
    ,
    "Margeaux"
    ,
    "Margery"
    ,
    "Marget"
    ,
    "Margette"
    ,
    "Margi"
    ,
    "Margie"
    ,
    "Margit"
    ,
    "Margo"
    ,
    "Margot"
    ,
    "Margret"
    ,
    "Marguerite"
    ,
    "Margy"
    ,
    "Mari"
    ,
    "Maria"
    ,
    "Mariam"
    ,
    "Marian"
    ,
    "Mariana"
    ,
    "Mariann"
    ,
    "Marianna"
    ,
    "Marianne"
    ,
    "Maribel"
    ,
    "Maribelle"
    ,
    "Maribeth"
    ,
    "Marice"
    ,
    "Maridel"
    ,
    "Marie"
    ,
    "Marie-Ann"
    ,
    "Marie-Jeanne"
    ,
    "Marieann"
    ,
    "Mariejeanne"
    ,
    "Mariel"
    ,
    "Mariele"
    ,
    "Marielle"
    ,
    "Mariellen"
    ,
    "Marietta"
    ,
    "Mariette"
    ,
    "Marigold"
    ,
    "Marijo"
    ,
    "Marika"
    ,
    "Marilee"
    ,
    "Marilin"
    ,
    "Marillin"
    ,
    "Marilyn"
    ,
    "Marin"
    ,
    "Marina"
    ,
    "Marinna"
    ,
    "Marion"
    ,
    "Mariquilla"
    ,
    "Maris"
    ,
    "Marisa"
    ,
    "Mariska"
    ,
    "Marissa"
    ,
    "Marita"
    ,
    "Maritsa"
    ,
    "Mariya"
    ,
    "Marj"
    ,
    "Marja"
    ,
    "Marje"
    ,
    "Marji"
    ,
    "Marjie"
    ,
    "Marjorie"
    ,
    "Marjory"
    ,
    "Marjy"
    ,
    "Marketa"
    ,
    "Marla"
    ,
    "Marlane"
    ,
    "Marleah"
    ,
    "Marlee"
    ,
    "Marleen"
    ,
    "Marlena"
    ,
    "Marlene"
    ,
    "Marley"
    ,
    "Marlie"
    ,
    "Marline"
    ,
    "Marlo"
    ,
    "Marlyn"
    ,
    "Marna"
    ,
    "Marne"
    ,
    "Marney"
    ,
    "Marni"
    ,
    "Marnia"
    ,
    "Marnie"
    ,
    "Marquita"
    ,
    "Marrilee"
    ,
    "Marris"
    ,
    "Marrissa"
    ,
    "Marsha"
    ,
    "Marsiella"
    ,
    "Marta"
    ,
    "Martelle"
    ,
    "Martguerita"
    ,
    "Martha"
    ,
    "Marthe"
    ,
    "Marthena"
    ,
    "Marti"
    ,
    "Martica"
    ,
    "Martie"
    ,
    "Martina"
    ,
    "Martita"
    ,
    "Marty"
    ,
    "Martynne"
    ,
    "Mary"
    ,
    "Marya"
    ,
    "Maryann"
    ,
    "Maryanna"
    ,
    "Maryanne"
    ,
    "Marybelle"
    ,
    "Marybeth"
    ,
    "Maryellen"
    ,
    "Maryjane"
    ,
    "Maryjo"
    ,
    "Maryl"
    ,
    "Marylee"
    ,
    "Marylin"
    ,
    "Marylinda"
    ,
    "Marylou"
    ,
    "Marylynne"
    ,
    "Maryrose"
    ,
    "Marys"
    ,
    "Marysa"
    ,
    "Masha"
    ,
    "Matelda"
    ,
    "Mathilda"
    ,
    "Mathilde"
    ,
    "Matilda"
    ,
    "Matilde"
    ,
    "Matti"
    ,
    "Mattie"
    ,
    "Matty"
    ,
    "Maud"
    ,
    "Maude"
    ,
    "Maudie"
    ,
    "Maura"
    ,
    "Maure"
    ,
    "Maureen"
    ,
    "Maureene"
    ,
    "Maurene"
    ,
    "Maurine"
    ,
    "Maurise"
    ,
    "Maurita"
    ,
    "Maurizia"
    ,
    "Mavis"
    ,
    "Mavra"
    ,
    "Max"
    ,
    "Maxi"
    ,
    "Maxie"
    ,
    "Maxine"
    ,
    "Maxy"
    ,
    "May"
    ,
    "Maybelle"
    ,
    "Maye"
    ,
    "Mead"
    ,
    "Meade"
    ,
    "Meagan"
    ,
    "Meaghan"
    ,
    "Meara"
    ,
    "Mechelle"
    ,
    "Meg"
    ,
    "Megan"
    ,
    "Megen"
    ,
    "Meggi"
    ,
    "Meggie"
    ,
    "Meggy"
    ,
    "Meghan"
    ,
    "Meghann"
    ,
    "Mehetabel"
    ,
    "Mei"
    ,
    "Mel"
    ,
    "Mela"
    ,
    "Melamie"
    ,
    "Melania"
    ,
    "Melanie"
    ,
    "Melantha"
    ,
    "Melany"
    ,
    "Melba"
    ,
    "Melesa"
    ,
    "Melessa"
    ,
    "Melicent"
    ,
    "Melina"
    ,
    "Melinda"
    ,
    "Melinde"
    ,
    "Melisa"
    ,
    "Melisande"
    ,
    "Melisandra"
    ,
    "Melisenda"
    ,
    "Melisent"
    ,
    "Melissa"
    ,
    "Melisse"
    ,
    "Melita"
    ,
    "Melitta"
    ,
    "Mella"
    ,
    "Melli"
    ,
    "Mellicent"
    ,
    "Mellie"
    ,
    "Mellisa"
    ,
    "Mellisent"
    ,
    "Melloney"
    ,
    "Melly"
    ,
    "Melodee"
    ,
    "Melodie"
    ,
    "Melody"
    ,
    "Melonie"
    ,
    "Melony"
    ,
    "Melosa"
    ,
    "Melva"
    ,
    "Mercedes"
    ,
    "Merci"
    ,
    "Mercie"
    ,
    "Mercy"
    ,
    "Meredith"
    ,
    "Meredithe"
    ,
    "Meridel"
    ,
    "Meridith"
    ,
    "Meriel"
    ,
    "Merilee"
    ,
    "Merilyn"
    ,
    "Meris"
    ,
    "Merissa"
    ,
    "Merl"
    ,
    "Merla"
    ,
    "Merle"
    ,
    "Merlina"
    ,
    "Merline"
    ,
    "Merna"
    ,
    "Merola"
    ,
    "Merralee"
    ,
    "Merridie"
    ,
    "Merrie"
    ,
    "Merrielle"
    ,
    "Merrile"
    ,
    "Merrilee"
    ,
    "Merrili"
    ,
    "Merrill"
    ,
    "Merrily"
    ,
    "Merry"
    ,
    "Mersey"
    ,
    "Meryl"
    ,
    "Meta"
    ,
    "Mia"
    ,
    "Micaela"
    ,
    "Michaela"
    ,
    "Michaelina"
    ,
    "Michaeline"
    ,
    "Michaella"
    ,
    "Michal"
    ,
    "Michel"
    ,
    "Michele"
    ,
    "Michelina"
    ,
    "Micheline"
    ,
    "Michell"
    ,
    "Michelle"
    ,
    "Micki"
    ,
    "Mickie"
    ,
    "Micky"
    ,
    "Midge"
    ,
    "Mignon"
    ,
    "Mignonne"
    ,
    "Miguela"
    ,
    "Miguelita"
    ,
    "Mikaela"
    ,
    "Mil"
    ,
    "Mildred"
    ,
    "Mildrid"
    ,
    "Milena"
    ,
    "Milicent"
    ,
    "Milissent"
    ,
    "Milka"
    ,
    "Milli"
    ,
    "Millicent"
    ,
    "Millie"
    ,
    "Millisent"
    ,
    "Milly"
    ,
    "Milzie"
    ,
    "Mimi"
    ,
    "Min"
    ,
    "Mina"
    ,
    "Minda"
    ,
    "Mindy"
    ,
    "Minerva"
    ,
    "Minetta"
    ,
    "Minette"
    ,
    "Minna"
    ,
    "Minnaminnie"
    ,
    "Minne"
    ,
    "Minni"
    ,
    "Minnie"
    ,
    "Minnnie"
    ,
    "Minny"
    ,
    "Minta"
    ,
    "Miof Mela"
    ,
    "Miquela"
    ,
    "Mira"
    ,
    "Mirabel"
    ,
    "Mirabella"
    ,
    "Mirabelle"
    ,
    "Miran"
    ,
    "Miranda"
    ,
    "Mireielle"
    ,
    "Mireille"
    ,
    "Mirella"
    ,
    "Mirelle"
    ,
    "Miriam"
    ,
    "Mirilla"
    ,
    "Mirna"
    ,
    "Misha"
    ,
    "Missie"
    ,
    "Missy"
    ,
    "Misti"
    ,
    "Misty"
    ,
    "Mitzi"
    ,
    "Modesta"
    ,
    "Modestia"
    ,
    "Modestine"
    ,
    "Modesty"
    ,
    "Moina"
    ,
    "Moira"
    ,
    "Moll"
    ,
    "Mollee"
    ,
    "Molli"
    ,
    "Mollie"
    ,
    "Molly"
    ,
    "Mommy"
    ,
    "Mona"
    ,
    "Monah"
    ,
    "Monica"
    ,
    "Monika"
    ,
    "Monique"
    ,
    "Mora"
    ,
    "Moreen"
    ,
    "Morena"
    ,
    "Morgan"
    ,
    "Morgana"
    ,
    "Morganica"
    ,
    "Morganne"
    ,
    "Morgen"
    ,
    "Moria"
    ,
    "Morissa"
    ,
    "Morna"
    ,
    "Moselle"
    ,
    "Moyna"
    ,
    "Moyra"
    ,
    "Mozelle"
    ,
    "Muffin"
    ,
    "Mufi"
    ,
    "Mufinella"
    ,
    "Muire"
    ,
    "Mureil"
    ,
    "Murial"
    ,
    "Muriel"
    ,
    "Murielle"
    ,
    "Myra"
    ,
    "Myrah"
    ,
    "Myranda"
    ,
    "Myriam"
    ,
    "Myrilla"
    ,
    "Myrle"
    ,
    "Myrlene"
    ,
    "Myrna"
    ,
    "Myrta"
    ,
    "Myrtia"
    ,
    "Myrtice"
    ,
    "Myrtie"
    ,
    "Myrtle"
    ,
    "Nada"
    ,
    "Nadean"
    ,
    "Nadeen"
    ,
    "Nadia"
    ,
    "Nadine"
    ,
    "Nadiya"
    ,
    "Nady"
    ,
    "Nadya"
    ,
    "Nalani"
    ,
    "Nan"
    ,
    "Nana"
    ,
    "Nananne"
    ,
    "Nance"
    ,
    "Nancee"
    ,
    "Nancey"
    ,
    "Nanci"
    ,
    "Nancie"
    ,
    "Nancy"
    ,
    "Nanete"
    ,
    "Nanette"
    ,
    "Nani"
    ,
    "Nanice"
    ,
    "Nanine"
    ,
    "Nannette"
    ,
    "Nanni"
    ,
    "Nannie"
    ,
    "Nanny"
    ,
    "Nanon"
    ,
    "Naoma"
    ,
    "Naomi"
    ,
    "Nara"
    ,
    "Nari"
    ,
    "Nariko"
    ,
    "Nat"
    ,
    "Nata"
    ,
    "Natala"
    ,
    "Natalee"
    ,
    "Natalie"
    ,
    "Natalina"
    ,
    "Nataline"
    ,
    "Natalya"
    ,
    "Natasha"
    ,
    "Natassia"
    ,
    "Nathalia"
    ,
    "Nathalie"
    ,
    "Natividad"
    ,
    "Natka"
    ,
    "Natty"
    ,
    "Neala"
    ,
    "Neda"
    ,
    "Nedda"
    ,
    "Nedi"
    ,
    "Neely"
    ,
    "Neila"
    ,
    "Neile"
    ,
    "Neilla"
    ,
    "Neille"
    ,
    "Nelia"
    ,
    "Nelie"
    ,
    "Nell"
    ,
    "Nelle"
    ,
    "Nelli"
    ,
    "Nellie"
    ,
    "Nelly"
    ,
    "Nerissa"
    ,
    "Nerita"
    ,
    "Nert"
    ,
    "Nerta"
    ,
    "Nerte"
    ,
    "Nerti"
    ,
    "Nertie"
    ,
    "Nerty"
    ,
    "Nessa"
    ,
    "Nessi"
    ,
    "Nessie"
    ,
    "Nessy"
    ,
    "Nesta"
    ,
    "Netta"
    ,
    "Netti"
    ,
    "Nettie"
    ,
    "Nettle"
    ,
    "Netty"
    ,
    "Nevsa"
    ,
    "Neysa"
    ,
    "Nichol"
    ,
    "Nichole"
    ,
    "Nicholle"
    ,
    "Nicki"
    ,
    "Nickie"
    ,
    "Nicky"
    ,
    "Nicol"
    ,
    "Nicola"
    ,
    "Nicole"
    ,
    "Nicolea"
    ,
    "Nicolette"
    ,
    "Nicoli"
    ,
    "Nicolina"
    ,
    "Nicoline"
    ,
    "Nicolle"
    ,
    "Nikaniki"
    ,
    "Nike"
    ,
    "Niki"
    ,
    "Nikki"
    ,
    "Nikkie"
    ,
    "Nikoletta"
    ,
    "Nikolia"
    ,
    "Nina"
    ,
    "Ninetta"
    ,
    "Ninette"
    ,
    "Ninnetta"
    ,
    "Ninnette"
    ,
    "Ninon"
    ,
    "Nissa"
    ,
    "Nisse"
    ,
    "Nissie"
    ,
    "Nissy"
    ,
    "Nita"
    ,
    "Nixie"
    ,
    "Noami"
    ,
    "Noel"
    ,
    "Noelani"
    ,
    "Noell"
    ,
    "Noella"
    ,
    "Noelle"
    ,
    "Noellyn"
    ,
    "Noelyn"
    ,
    "Noemi"
    ,
    "Nola"
    ,
    "Nolana"
    ,
    "Nolie"
    ,
    "Nollie"
    ,
    "Nomi"
    ,
    "Nona"
    ,
    "Nonah"
    ,
    "Noni"
    ,
    "Nonie"
    ,
    "Nonna"
    ,
    "Nonnah"
    ,
    "Nora"
    ,
    "Norah"
    ,
    "Norean"
    ,
    "Noreen"
    ,
    "Norene"
    ,
    "Norina"
    ,
    "Norine"
    ,
    "Norma"
    ,
    "Norri"
    ,
    "Norrie"
    ,
    "Norry"
    ,
    "Novelia"
    ,
    "Nydia"
    ,
    "Nyssa"
    ,
    "Octavia"
    ,
    "Odele"
    ,
    "Odelia"
    ,
    "Odelinda"
    ,
    "Odella"
    ,
    "Odelle"
    ,
    "Odessa"
    ,
    "Odetta"
    ,
    "Odette"
    ,
    "Odilia"
    ,
    "Odille"
    ,
    "Ofelia"
    ,
    "Ofella"
    ,
    "Ofilia"
    ,
    "Ola"
    ,
    "Olenka"
    ,
    "Olga"
    ,
    "Olia"
    ,
    "Olimpia"
    ,
    "Olive"
    ,
    "Olivette"
    ,
    "Olivia"
    ,
    "Olivie"
    ,
    "Oliy"
    ,
    "Ollie"
    ,
    "Olly"
    ,
    "Olva"
    ,
    "Olwen"
    ,
    "Olympe"
    ,
    "Olympia"
    ,
    "Olympie"
    ,
    "Ondrea"
    ,
    "Oneida"
    ,
    "Onida"
    ,
    "Oona"
    ,
    "Opal"
    ,
    "Opalina"
    ,
    "Opaline"
    ,
    "Ophelia"
    ,
    "Ophelie"
    ,
    "Ora"
    ,
    "Oralee"
    ,
    "Oralia"
    ,
    "Oralie"
    ,
    "Oralla"
    ,
    "Oralle"
    ,
    "Orel"
    ,
    "Orelee"
    ,
    "Orelia"
    ,
    "Orelie"
    ,
    "Orella"
    ,
    "Orelle"
    ,
    "Oriana"
    ,
    "Orly"
    ,
    "Orsa"
    ,
    "Orsola"
    ,
    "Ortensia"
    ,
    "Otha"
    ,
    "Othelia"
    ,
    "Othella"
    ,
    "Othilia"
    ,
    "Othilie"
    ,
    "Ottilie"
    ,
    "Page"
    ,
    "Paige"
    ,
    "Paloma"
    ,
    "Pam"
    ,
    "Pamela"
    ,
    "Pamelina"
    ,
    "Pamella"
    ,
    "Pammi"
    ,
    "Pammie"
    ,
    "Pammy"
    ,
    "Pandora"
    ,
    "Pansie"
    ,
    "Pansy"
    ,
    "Paola"
    ,
    "Paolina"
    ,
    "Papagena"
    ,
    "Pat"
    ,
    "Patience"
    ,
    "Patrica"
    ,
    "Patrice"
    ,
    "Patricia"
    ,
    "Patrizia"
    ,
    "Patsy"
    ,
    "Patti"
    ,
    "Pattie"
    ,
    "Patty"
    ,
    "Paula"
    ,
    "Paule"
    ,
    "Pauletta"
    ,
    "Paulette"
    ,
    "Pauli"
    ,
    "Paulie"
    ,
    "Paulina"
    ,
    "Pauline"
    ,
    "Paulita"
    ,
    "Pauly"
    ,
    "Pavia"
    ,
    "Pavla"
    ,
    "Pearl"
    ,
    "Pearla"
    ,
    "Pearle"
    ,
    "Pearline"
    ,
    "Peg"
    ,
    "Pegeen"
    ,
    "Peggi"
    ,
    "Peggie"
    ,
    "Peggy"
    ,
    "Pen"
    ,
    "Penelopa"
    ,
    "Penelope"
    ,
    "Penni"
    ,
    "Pennie"
    ,
    "Penny"
    ,
    "Pepi"
    ,
    "Pepita"
    ,
    "Peri"
    ,
    "Peria"
    ,
    "Perl"
    ,
    "Perla"
    ,
    "Perle"
    ,
    "Perri"
    ,
    "Perrine"
    ,
    "Perry"
    ,
    "Persis"
    ,
    "Pet"
    ,
    "Peta"
    ,
    "Petra"
    ,
    "Petrina"
    ,
    "Petronella"
    ,
    "Petronia"
    ,
    "Petronilla"
    ,
    "Petronille"
    ,
    "Petunia"
    ,
    "Phaedra"
    ,
    "Phaidra"
    ,
    "Phebe"
    ,
    "Phedra"
    ,
    "Phelia"
    ,
    "Phil"
    ,
    "Philipa"
    ,
    "Philippa"
    ,
    "Philippe"
    ,
    "Philippine"
    ,
    "Philis"
    ,
    "Phillida"
    ,
    "Phillie"
    ,
    "Phillis"
    ,
    "Philly"
    ,
    "Philomena"
    ,
    "Phoebe"
    ,
    "Phylis"
    ,
    "Phyllida"
    ,
    "Phyllis"
    ,
    "Phyllys"
    ,
    "Phylys"
    ,
    "Pia"
    ,
    "Pier"
    ,
    "Pierette"
    ,
    "Pierrette"
    ,
    "Pietra"
    ,
    "Piper"
    ,
    "Pippa"
    ,
    "Pippy"
    ,
    "Polly"
    ,
    "Pollyanna"
    ,
    "Pooh"
    ,
    "Poppy"
    ,
    "Portia"
    ,
    "Pris"
    ,
    "Prisca"
    ,
    "Priscella"
    ,
    "Priscilla"
    ,
    "Prissie"
    ,
    "Pru"
    ,
    "Prudence"
    ,
    "Prudi"
    ,
    "Prudy"
    ,
    "Prue"
    ,
    "Queenie"
    ,
    "Quentin"
    ,
    "Querida"
    ,
    "Quinn"
    ,
    "Quinta"
    ,
    "Quintana"
    ,
    "Quintilla"
    ,
    "Quintina"
    ,
    "Rachael"
    ,
    "Rachel"
    ,
    "Rachele"
    ,
    "Rachelle"
    ,
    "Rae"
    ,
    "Raeann"
    ,
    "Raf"
    ,
    "Rafa"
    ,
    "Rafaela"
    ,
    "Rafaelia"
    ,
    "Rafaelita"
    ,
    "Rahal"
    ,
    "Rahel"
    ,
    "Raina"
    ,
    "Raine"
    ,
    "Rakel"
    ,
    "Ralina"
    ,
    "Ramona"
    ,
    "Ramonda"
    ,
    "Rana"
    ,
    "Randa"
    ,
    "Randee"
    ,
    "Randene"
    ,
    "Randi"
    ,
    "Randie"
    ,
    "Randy"
    ,
    "Ranee"
    ,
    "Rani"
    ,
    "Rania"
    ,
    "Ranice"
    ,
    "Ranique"
    ,
    "Ranna"
    ,
    "Raphaela"
    ,
    "Raquel"
    ,
    "Raquela"
    ,
    "Rasia"
    ,
    "Rasla"
    ,
    "Raven"
    ,
    "Ray"
    ,
    "Raychel"
    ,
    "Raye"
    ,
    "Rayna"
    ,
    "Raynell"
    ,
    "Rayshell"
    ,
    "Rea"
    ,
    "Reba"
    ,
    "Rebbecca"
    ,
    "Rebe"
    ,
    "Rebeca"
    ,
    "Rebecca"
    ,
    "Rebecka"
    ,
    "Rebeka"
    ,
    "Rebekah"
    ,
    "Rebekkah"
    ,
    "Ree"
    ,
    "Reeba"
    ,
    "Reena"
    ,
    "Reeta"
    ,
    "Reeva"
    ,
    "Regan"
    ,
    "Reggi"
    ,
    "Reggie"
    ,
    "Regina"
    ,
    "Regine"
    ,
    "Reiko"
    ,
    "Reina"
    ,
    "Reine"
    ,
    "Remy"
    ,
    "Rena"
    ,
    "Renae"
    ,
    "Renata"
    ,
    "Renate"
    ,
    "Rene"
    ,
    "Renee"
    ,
    "Renell"
    ,
    "Renelle"
    ,
    "Renie"
    ,
    "Rennie"
    ,
    "Reta"
    ,
    "Retha"
    ,
    "Revkah"
    ,
    "Rey"
    ,
    "Reyna"
    ,
    "Rhea"
    ,
    "Rheba"
    ,
    "Rheta"
    ,
    "Rhetta"
    ,
    "Rhiamon"
    ,
    "Rhianna"
    ,
    "Rhianon"
    ,
    "Rhoda"
    ,
    "Rhodia"
    ,
    "Rhodie"
    ,
    "Rhody"
    ,
    "Rhona"
    ,
    "Rhonda"
    ,
    "Riane"
    ,
    "Riannon"
    ,
    "Rianon"
    ,
    "Rica"
    ,
    "Ricca"
    ,
    "Rici"
    ,
    "Ricki"
    ,
    "Rickie"
    ,
    "Ricky"
    ,
    "Riki"
    ,
    "Rikki"
    ,
    "Rina"
    ,
    "Risa"
    ,
    "Rita"
    ,
    "Riva"
    ,
    "Rivalee"
    ,
    "Rivi"
    ,
    "Rivkah"
    ,
    "Rivy"
    ,
    "Roana"
    ,
    "Roanna"
    ,
    "Roanne"
    ,
    "Robbi"
    ,
    "Robbie"
    ,
    "Robbin"
    ,
    "Robby"
    ,
    "Robbyn"
    ,
    "Robena"
    ,
    "Robenia"
    ,
    "Roberta"
    ,
    "Robin"
    ,
    "Robina"
    ,
    "Robinet"
    ,
    "Robinett"
    ,
    "Robinetta"
    ,
    "Robinette"
    ,
    "Robinia"
    ,
    "Roby"
    ,
    "Robyn"
    ,
    "Roch"
    ,
    "Rochell"
    ,
    "Rochella"
    ,
    "Rochelle"
    ,
    "Rochette"
    ,
    "Roda"
    ,
    "Rodi"
    ,
    "Rodie"
    ,
    "Rodina"
    ,
    "Rois"
    ,
    "Romola"
    ,
    "Romona"
    ,
    "Romonda"
    ,
    "Romy"
    ,
    "Rona"
    ,
    "Ronalda"
    ,
    "Ronda"
    ,
    "Ronica"
    ,
    "Ronna"
    ,
    "Ronni"
    ,
    "Ronnica"
    ,
    "Ronnie"
    ,
    "Ronny"
    ,
    "Roobbie"
    ,
    "Rora"
    ,
    "Rori"
    ,
    "Rorie"
    ,
    "Rory"
    ,
    "Ros"
    ,
    "Rosa"
    ,
    "Rosabel"
    ,
    "Rosabella"
    ,
    "Rosabelle"
    ,
    "Rosaleen"
    ,
    "Rosalia"
    ,
    "Rosalie"
    ,
    "Rosalind"
    ,
    "Rosalinda"
    ,
    "Rosalinde"
    ,
    "Rosaline"
    ,
    "Rosalyn"
    ,
    "Rosalynd"
    ,
    "Rosamond"
    ,
    "Rosamund"
    ,
    "Rosana"
    ,
    "Rosanna"
    ,
    "Rosanne"
    ,
    "Rose"
    ,
    "Roseann"
    ,
    "Roseanna"
    ,
    "Roseanne"
    ,
    "Roselia"
    ,
    "Roselin"
    ,
    "Roseline"
    ,
    "Rosella"
    ,
    "Roselle"
    ,
    "Rosemaria"
    ,
    "Rosemarie"
    ,
    "Rosemary"
    ,
    "Rosemonde"
    ,
    "Rosene"
    ,
    "Rosetta"
    ,
    "Rosette"
    ,
    "Roshelle"
    ,
    "Rosie"
    ,
    "Rosina"
    ,
    "Rosita"
    ,
    "Roslyn"
    ,
    "Rosmunda"
    ,
    "Rosy"
    ,
    "Row"
    ,
    "Rowe"
    ,
    "Rowena"
    ,
    "Roxana"
    ,
    "Roxane"
    ,
    "Roxanna"
    ,
    "Roxanne"
    ,
    "Roxi"
    ,
    "Roxie"
    ,
    "Roxine"
    ,
    "Roxy"
    ,
    "Roz"
    ,
    "Rozalie"
    ,
    "Rozalin"
    ,
    "Rozamond"
    ,
    "Rozanna"
    ,
    "Rozanne"
    ,
    "Roze"
    ,
    "Rozele"
    ,
    "Rozella"
    ,
    "Rozelle"
    ,
    "Rozina"
    ,
    "Rubetta"
    ,
    "Rubi"
    ,
    "Rubia"
    ,
    "Rubie"
    ,
    "Rubina"
    ,
    "Ruby"
    ,
    "Ruperta"
    ,
    "Ruth"
    ,
    "Ruthann"
    ,
    "Ruthanne"
    ,
    "Ruthe"
    ,
    "Ruthi"
    ,
    "Ruthie"
    ,
    "Ruthy"
    ,
    "Ryann"
    ,
    "Rycca"
    ,
    "Saba"
    ,
    "Sabina"
    ,
    "Sabine"
    ,
    "Sabra"
    ,
    "Sabrina"
    ,
    "Sacha"
    ,
    "Sada"
    ,
    "Sadella"
    ,
    "Sadie"
    ,
    "Sadye"
    ,
    "Saidee"
    ,
    "Sal"
    ,
    "Salaidh"
    ,
    "Sallee"
    ,
    "Salli"
    ,
    "Sallie"
    ,
    "Sally"
    ,
    "Sallyann"
    ,
    "Sallyanne"
    ,
    "Saloma"
    ,
    "Salome"
    ,
    "Salomi"
    ,
    "Sam"
    ,
    "Samantha"
    ,
    "Samara"
    ,
    "Samaria"
    ,
    "Sammy"
    ,
    "Sande"
    ,
    "Sandi"
    ,
    "Sandie"
    ,
    "Sandra"
    ,
    "Sandy"
    ,
    "Sandye"
    ,
    "Sapphira"
    ,
    "Sapphire"
    ,
    "Sara"
    ,
    "Sara-Ann"
    ,
    "Saraann"
    ,
    "Sarah"
    ,
    "Sarajane"
    ,
    "Saree"
    ,
    "Sarena"
    ,
    "Sarene"
    ,
    "Sarette"
    ,
    "Sari"
    ,
    "Sarina"
    ,
    "Sarine"
    ,
    "Sarita"
    ,
    "Sascha"
    ,
    "Sasha"
    ,
    "Sashenka"
    ,
    "Saudra"
    ,
    "Saundra"
    ,
    "Savina"
    ,
    "Sayre"
    ,
    "Scarlet"
    ,
    "Scarlett"
    ,
    "Sean"
    ,
    "Seana"
    ,
    "Seka"
    ,
    "Sela"
    ,
    "Selena"
    ,
    "Selene"
    ,
    "Selestina"
    ,
    "Selia"
    ,
    "Selie"
    ,
    "Selina"
    ,
    "Selinda"
    ,
    "Seline"
    ,
    "Sella"
    ,
    "Selle"
    ,
    "Selma"
    ,
    "Sena"
    ,
    "Sephira"
    ,
    "Serena"
    ,
    "Serene"
    ,
    "Shae"
    ,
    "Shaina"
    ,
    "Shaine"
    ,
    "Shalna"
    ,
    "Shalne"
    ,
    "Shana"
    ,
    "Shanda"
    ,
    "Shandee"
    ,
    "Shandeigh"
    ,
    "Shandie"
    ,
    "Shandra"
    ,
    "Shandy"
    ,
    "Shane"
    ,
    "Shani"
    ,
    "Shanie"
    ,
    "Shanna"
    ,
    "Shannah"
    ,
    "Shannen"
    ,
    "Shannon"
    ,
    "Shanon"
    ,
    "Shanta"
    ,
    "Shantee"
    ,
    "Shara"
    ,
    "Sharai"
    ,
    "Shari"
    ,
    "Sharia"
    ,
    "Sharity"
    ,
    "Sharl"
    ,
    "Sharla"
    ,
    "Sharleen"
    ,
    "Sharlene"
    ,
    "Sharline"
    ,
    "Sharon"
    ,
    "Sharona"
    ,
    "Sharron"
    ,
    "Sharyl"
    ,
    "Shaun"
    ,
    "Shauna"
    ,
    "Shawn"
    ,
    "Shawna"
    ,
    "Shawnee"
    ,
    "Shay"
    ,
    "Shayla"
    ,
    "Shaylah"
    ,
    "Shaylyn"
    ,
    "Shaylynn"
    ,
    "Shayna"
    ,
    "Shayne"
    ,
    "Shea"
    ,
    "Sheba"
    ,
    "Sheela"
    ,
    "Sheelagh"
    ,
    "Sheelah"
    ,
    "Sheena"
    ,
    "Sheeree"
    ,
    "Sheila"
    ,
    "Sheila-Kathryn"
    ,
    "Sheilah"
    ,
    "Shel"
    ,
    "Shela"
    ,
    "Shelagh"
    ,
    "Shelba"
    ,
    "Shelbi"
    ,
    "Shelby"
    ,
    "Shelia"
    ,
    "Shell"
    ,
    "Shelley"
    ,
    "Shelli"
    ,
    "Shellie"
    ,
    "Shelly"
    ,
    "Shena"
    ,
    "Sher"
    ,
    "Sheree"
    ,
    "Sheri"
    ,
    "Sherie"
    ,
    "Sherill"
    ,
    "Sherilyn"
    ,
    "Sherline"
    ,
    "Sherri"
    ,
    "Sherrie"
    ,
    "Sherry"
    ,
    "Sherye"
    ,
    "Sheryl"
    ,
    "Shina"
    ,
    "Shir"
    ,
    "Shirl"
    ,
    "Shirlee"
    ,
    "Shirleen"
    ,
    "Shirlene"
    ,
    "Shirley"
    ,
    "Shirline"
    ,
    "Shoshana"
    ,
    "Shoshanna"
    ,
    "Siana"
    ,
    "Sianna"
    ,
    "Sib"
    ,
    "Sibbie"
    ,
    "Sibby"
    ,
    "Sibeal"
    ,
    "Sibel"
    ,
    "Sibella"
    ,
    "Sibelle"
    ,
    "Sibilla"
    ,
    "Sibley"
    ,
    "Sibyl"
    ,
    "Sibylla"
    ,
    "Sibylle"
    ,
    "Sidoney"
    ,
    "Sidonia"
    ,
    "Sidonnie"
    ,
    "Sigrid"
    ,
    "Sile"
    ,
    "Sileas"
    ,
    "Silva"
    ,
    "Silvana"
    ,
    "Silvia"
    ,
    "Silvie"
    ,
    "Simona"
    ,
    "Simone"
    ,
    "Simonette"
    ,
    "Simonne"
    ,
    "Sindee"
    ,
    "Siobhan"
    ,
    "Sioux"
    ,
    "Siouxie"
    ,
    "Sisely"
    ,
    "Sisile"
    ,
    "Sissie"
    ,
    "Sissy"
    ,
    "Siusan"
    ,
    "Sofia"
    ,
    "Sofie"
    ,
    "Sondra"
    ,
    "Sonia"
    ,
    "Sonja"
    ,
    "Sonni"
    ,
    "Sonnie"
    ,
    "Sonnnie"
    ,
    "Sonny"
    ,
    "Sonya"
    ,
    "Sophey"
    ,
    "Sophi"
    ,
    "Sophia"
    ,
    "Sophie"
    ,
    "Sophronia"
    ,
    "Sorcha"
    ,
    "Sosanna"
    ,
    "Stace"
    ,
    "Stacee"
    ,
    "Stacey"
    ,
    "Staci"
    ,
    "Stacia"
    ,
    "Stacie"
    ,
    "Stacy"
    ,
    "Stafani"
    ,
    "Star"
    ,
    "Starla"
    ,
    "Starlene"
    ,
    "Starlin"
    ,
    "Starr"
    ,
    "Stefa"
    ,
    "Stefania"
    ,
    "Stefanie"
    ,
    "Steffane"
    ,
    "Steffi"
    ,
    "Steffie"
    ,
    "Stella"
    ,
    "Stepha"
    ,
    "Stephana"
    ,
    "Stephani"
    ,
    "Stephanie"
    ,
    "Stephannie"
    ,
    "Stephenie"
    ,
    "Stephi"
    ,
    "Stephie"
    ,
    "Stephine"
    ,
    "Stesha"
    ,
    "Stevana"
    ,
    "Stevena"
    ,
    "Stoddard"
    ,
    "Storm"
    ,
    "Stormi"
    ,
    "Stormie"
    ,
    "Stormy"
    ,
    "Sue"
    ,
    "Suellen"
    ,
    "Sukey"
    ,
    "Suki"
    ,
    "Sula"
    ,
    "Sunny"
    ,
    "Sunshine"
    ,
    "Susan"
    ,
    "Susana"
    ,
    "Susanetta"
    ,
    "Susann"
    ,
    "Susanna"
    ,
    "Susannah"
    ,
    "Susanne"
    ,
    "Susette"
    ,
    "Susi"
    ,
    "Susie"
    ,
    "Susy"
    ,
    "Suzann"
    ,
    "Suzanna"
    ,
    "Suzanne"
    ,
    "Suzette"
    ,
    "Suzi"
    ,
    "Suzie"
    ,
    "Suzy"
    ,
    "Sybil"
    ,
    "Sybila"
    ,
    "Sybilla"
    ,
    "Sybille"
    ,
    "Sybyl"
    ,
    "Sydel"
    ,
    "Sydelle"
    ,
    "Sydney"
    ,
    "Sylvia"
    ,
    "Tabatha"
    ,
    "Tabbatha"
    ,
    "Tabbi"
    ,
    "Tabbie"
    ,
    "Tabbitha"
    ,
    "Tabby"
    ,
    "Tabina"
    ,
    "Tabitha"
    ,
    "Taffy"
    ,
    "Talia"
    ,
    "Tallia"
    ,
    "Tallie"
    ,
    "Tallou"
    ,
    "Tallulah"
    ,
    "Tally"
    ,
    "Talya"
    ,
    "Talyah"
    ,
    "Tamar"
    ,
    "Tamara"
    ,
    "Tamarah"
    ,
    "Tamarra"
    ,
    "Tamera"
    ,
    "Tami"
    ,
    "Tamiko"
    ,
    "Tamma"
    ,
    "Tammara"
    ,
    "Tammi"
    ,
    "Tammie"
    ,
    "Tammy"
    ,
    "Tamqrah"
    ,
    "Tamra"
    ,
    "Tana"
    ,
    "Tandi"
    ,
    "Tandie"
    ,
    "Tandy"
    ,
    "Tanhya"
    ,
    "Tani"
    ,
    "Tania"
    ,
    "Tanitansy"
    ,
    "Tansy"
    ,
    "Tanya"
    ,
    "Tara"
    ,
    "Tarah"
    ,
    "Tarra"
    ,
    "Tarrah"
    ,
    "Taryn"
    ,
    "Tasha"
    ,
    "Tasia"
    ,
    "Tate"
    ,
    "Tatiana"
    ,
    "Tatiania"
    ,
    "Tatum"
    ,
    "Tawnya"
    ,
    "Tawsha"
    ,
    "Ted"
    ,
    "Tedda"
    ,
    "Teddi"
    ,
    "Teddie"
    ,
    "Teddy"
    ,
    "Tedi"
    ,
    "Tedra"
    ,
    "Teena"
    ,
    "TEirtza"
    ,
    "Teodora"
    ,
    "Tera"
    ,
    "Teresa"
    ,
    "Terese"
    ,
    "Teresina"
    ,
    "Teresita"
    ,
    "Teressa"
    ,
    "Teri"
    ,
    "Teriann"
    ,
    "Terra"
    ,
    "Terri"
    ,
    "Terrie"
    ,
    "Terrijo"
    ,
    "Terry"
    ,
    "Terrye"
    ,
    "Tersina"
    ,
    "Terza"
    ,
    "Tess"
    ,
    "Tessa"
    ,
    "Tessi"
    ,
    "Tessie"
    ,
    "Tessy"
    ,
    "Thalia"
    ,
    "Thea"
    ,
    "Theadora"
    ,
    "Theda"
    ,
    "Thekla"
    ,
    "Thelma"
    ,
    "Theo"
    ,
    "Theodora"
    ,
    "Theodosia"
    ,
    "Theresa"
    ,
    "Therese"
    ,
    "Theresina"
    ,
    "Theresita"
    ,
    "Theressa"
    ,
    "Therine"
    ,
    "Thia"
    ,
    "Thomasa"
    ,
    "Thomasin"
    ,
    "Thomasina"
    ,
    "Thomasine"
    ,
    "Tiena"
    ,
    "Tierney"
    ,
    "Tiertza"
    ,
    "Tiff"
    ,
    "Tiffani"
    ,
    "Tiffanie"
    ,
    "Tiffany"
    ,
    "Tiffi"
    ,
    "Tiffie"
    ,
    "Tiffy"
    ,
    "Tilda"
    ,
    "Tildi"
    ,
    "Tildie"
    ,
    "Tildy"
    ,
    "Tillie"
    ,
    "Tilly"
    ,
    "Tim"
    ,
    "Timi"
    ,
    "Timmi"
    ,
    "Timmie"
    ,
    "Timmy"
    ,
    "Timothea"
    ,
    "Tina"
    ,
    "Tine"
    ,
    "Tiphani"
    ,
    "Tiphanie"
    ,
    "Tiphany"
    ,
    "Tish"
    ,
    "Tisha"
    ,
    "Tobe"
    ,
    "Tobey"
    ,
    "Tobi"
    ,
    "Toby"
    ,
    "Tobye"
    ,
    "Toinette"
    ,
    "Toma"
    ,
    "Tomasina"
    ,
    "Tomasine"
    ,
    "Tomi"
    ,
    "Tommi"
    ,
    "Tommie"
    ,
    "Tommy"
    ,
    "Toni"
    ,
    "Tonia"
    ,
    "Tonie"
    ,
    "Tony"
    ,
    "Tonya"
    ,
    "Tonye"
    ,
    "Tootsie"
    ,
    "Torey"
    ,
    "Tori"
    ,
    "Torie"
    ,
    "Torrie"
    ,
    "Tory"
    ,
    "Tova"
    ,
    "Tove"
    ,
    "Tracee"
    ,
    "Tracey"
    ,
    "Traci"
    ,
    "Tracie"
    ,
    "Tracy"
    ,
    "Trenna"
    ,
    "Tresa"
    ,
    "Trescha"
    ,
    "Tressa"
    ,
    "Tricia"
    ,
    "Trina"
    ,
    "Trish"
    ,
    "Trisha"
    ,
    "Trista"
    ,
    "Trix"
    ,
    "Trixi"
    ,
    "Trixie"
    ,
    "Trixy"
    ,
    "Truda"
    ,
    "Trude"
    ,
    "Trudey"
    ,
    "Trudi"
    ,
    "Trudie"
    ,
    "Trudy"
    ,
    "Trula"
    ,
    "Tuesday"
    ,
    "Twila"
    ,
    "Twyla"
    ,
    "Tybi"
    ,
    "Tybie"
    ,
    "Tyne"
    ,
    "Ula"
    ,
    "Ulla"
    ,
    "Ulrica"
    ,
    "Ulrika"
    ,
    "Ulrikaumeko"
    ,
    "Ulrike"
    ,
    "Umeko"
    ,
    "Una"
    ,
    "Ursa"
    ,
    "Ursala"
    ,
    "Ursola"
    ,
    "Ursula"
    ,
    "Ursulina"
    ,
    "Ursuline"
    ,
    "Uta"
    ,
    "Val"
    ,
    "Valaree"
    ,
    "Valaria"
    ,
    "Vale"
    ,
    "Valeda"
    ,
    "Valencia"
    ,
    "Valene"
    ,
    "Valenka"
    ,
    "Valentia"
    ,
    "Valentina"
    ,
    "Valentine"
    ,
    "Valera"
    ,
    "Valeria"
    ,
    "Valerie"
    ,
    "Valery"
    ,
    "Valerye"
    ,
    "Valida"
    ,
    "Valina"
    ,
    "Valli"
    ,
    "Vallie"
    ,
    "Vally"
    ,
    "Valma"
    ,
    "Valry"
    ,
    "Van"
    ,
    "Vanda"
    ,
    "Vanessa"
    ,
    "Vania"
    ,
    "Vanna"
    ,
    "Vanni"
    ,
    "Vannie"
    ,
    "Vanny"
    ,
    "Vanya"
    ,
    "Veda"
    ,
    "Velma"
    ,
    "Velvet"
    ,
    "Venita"
    ,
    "Venus"
    ,
    "Vera"
    ,
    "Veradis"
    ,
    "Vere"
    ,
    "Verena"
    ,
    "Verene"
    ,
    "Veriee"
    ,
    "Verile"
    ,
    "Verina"
    ,
    "Verine"
    ,
    "Verla"
    ,
    "Verna"
    ,
    "Vernice"
    ,
    "Veronica"
    ,
    "Veronika"
    ,
    "Veronike"
    ,
    "Veronique"
    ,
    "Vevay"
    ,
    "Vi"
    ,
    "Vicki"
    ,
    "Vickie"
    ,
    "Vicky"
    ,
    "Victoria"
    ,
    "Vida"
    ,
    "Viki"
    ,
    "Vikki"
    ,
    "Vikky"
    ,
    "Vilhelmina"
    ,
    "Vilma"
    ,
    "Vin"
    ,
    "Vina"
    ,
    "Vinita"
    ,
    "Vinni"
    ,
    "Vinnie"
    ,
    "Vinny"
    ,
    "Viola"
    ,
    "Violante"
    ,
    "Viole"
    ,
    "Violet"
    ,
    "Violetta"
    ,
    "Violette"
    ,
    "Virgie"
    ,
    "Virgina"
    ,
    "Virginia"
    ,
    "Virginie"
    ,
    "Vita"
    ,
    "Vitia"
    ,
    "Vitoria"
    ,
    "Vittoria"
    ,
    "Viv"
    ,
    "Viva"
    ,
    "Vivi"
    ,
    "Vivia"
    ,
    "Vivian"
    ,
    "Viviana"
    ,
    "Vivianna"
    ,
    "Vivianne"
    ,
    "Vivie"
    ,
    "Vivien"
    ,
    "Viviene"
    ,
    "Vivienne"
    ,
    "Viviyan"
    ,
    "Vivyan"
    ,
    "Vivyanne"
    ,
    "Vonni"
    ,
    "Vonnie"
    ,
    "Vonny"
    ,
    "Vyky"
    ,
    "Wallie"
    ,
    "Wallis"
    ,
    "Walliw"
    ,
    "Wally"
    ,
    "Waly"
    ,
    "Wanda"
    ,
    "Wandie"
    ,
    "Wandis"
    ,
    "Waneta"
    ,
    "Wanids"
    ,
    "Wenda"
    ,
    "Wendeline"
    ,
    "Wendi"
    ,
    "Wendie"
    ,
    "Wendy"
    ,
    "Wendye"
    ,
    "Wenona"
    ,
    "Wenonah"
    ,
    "Whitney"
    ,
    "Wileen"
    ,
    "Wilhelmina"
    ,
    "Wilhelmine"
    ,
    "Wilie"
    ,
    "Willa"
    ,
    "Willabella"
    ,
    "Willamina"
    ,
    "Willetta"
    ,
    "Willette"
    ,
    "Willi"
    ,
    "Willie"
    ,
    "Willow"
    ,
    "Willy"
    ,
    "Willyt"
    ,
    "Wilma"
    ,
    "Wilmette"
    ,
    "Wilona"
    ,
    "Wilone"
    ,
    "Wilow"
    ,
    "Windy"
    ,
    "Wini"
    ,
    "Winifred"
    ,
    "Winna"
    ,
    "Winnah"
    ,
    "Winne"
    ,
    "Winni"
    ,
    "Winnie"
    ,
    "Winnifred"
    ,
    "Winny"
    ,
    "Winona"
    ,
    "Winonah"
    ,
    "Wren"
    ,
    "Wrennie"
    ,
    "Wylma"
    ,
    "Wynn"
    ,
    "Wynne"
    ,
    "Wynnie"
    ,
    "Wynny"
    ,
    "Xaviera"
    ,
    "Xena"
    ,
    "Xenia"
    ,
    "Xylia"
    ,
    "Xylina"
    ,
    "Yalonda"
    ,
    "Yasmeen"
    ,
    "Yasmin"
    ,
    "Yelena"
    ,
    "Yetta"
    ,
    "Yettie"
    ,
    "Yetty"
    ,
    "Yevette"
    ,
    "Ynes"
    ,
    "Ynez"
    ,
    "Yoko"
    ,
    "Yolanda"
    ,
    "Yolande"
    ,
    "Yolane"
    ,
    "Yolanthe"
    ,
    "Yoshi"
    ,
    "Yoshiko"
    ,
    "Yovonnda"
    ,
    "Ysabel"
    ,
    "Yvette"
    ,
    "Yvonne"
    ,
    "Zabrina"
    ,
    "Zahara"
    ,
    "Zandra"
    ,
    "Zaneta"
    ,
    "Zara"
    ,
    "Zarah"
    ,
    "Zaria"
    ,
    "Zarla"
    ,
    "Zea"
    ,
    "Zelda"
    ,
    "Zelma"
    ,
    "Zena"
    ,
    "Zenia"
    ,
    "Zia"
    ,
    "Zilvia"
    ,
    "Zita"
    ,
    "Zitella"
    ,
    "Zoe"
    ,
    "Zola"
    ,
    "Zonda"
    ,
    "Zondra"
    ,
    "Zonnya"
    ,
    "Zora"
    ,
    "Zorah"
    ,
    "Zorana"
    ,
    "Zorina"
    ,
    "Zorine"
    ,
    "Zsa Zsa"
    ,
    "Zsazsa"
    ,
    "Zulema"
    ,
    "Zuzana",
    "Jim",
    "James",
    "Jimbo",
    "Atticus",
    "Gurney",
    "MrWaffler",
    "Ray",
    "Rayboy",
    "BEEPBEEPIMAJEEP",
    "MAMABEEF",
    "Bug",
    "Buttercup",
    "Glow",
    "Leo",
    "Jeremy",
    "Arbidemic",
    "Kraig",
    "Riley",
    "Toast",
    "Wampa",
    "Pinecone",
    "Tines",
    "Kilo",
    "Elliott",
    "Jorogumo",
    "Ryan",
    "blenderoverlorde",
    "salmonmarine",
    "NoName"
];
},{}],126:[function(require,module,exports){
/*
 * Javascript Quadtree 
 * @version 1.1.1
 * @licence MIT
 * @author Timo Hausmann
 * https://github.com/timohausmann/quadtree-js/
 */
 
/*
 Copyright © 2012 Timo Hausmann

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENthis. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

 /*
  * Quadtree Constructor
  * @param Object bounds		bounds of the node, object with x, y, width, height
  * @param Integer max_objects		(optional) max objects a node can hold before splitting into 4 subnodes (default: 10)
  * @param Integer max_levels		(optional) total max levels inside root Quadtree (default: 4)
  * @param Integer level		(optional) deepth level, required for subnodes
  */
function Quadtree( bounds, max_objects, max_levels, level ) {

	this.max_objects	= max_objects || 10;
	this.max_levels		= max_levels || 4;

	this.level 		= level || 0;
	this.bounds 		= bounds;

	this.objects 		= [];
	this.nodes 		= [];
};


/*
 * Split the node into 4 subnodes
 */
Quadtree.prototype.split = function() {

	var 	nextLevel	= this.level + 1,
		subWidth	= Math.round( this.bounds.width / 2 ),
		subHeight 	= Math.round( this.bounds.height / 2 ),
		x 		= Math.round( this.bounds.x ),
		y 		= Math.round( this.bounds.y );

	//top right node
	this.nodes[0] = new Quadtree({
		x	: x + subWidth,
		y	: y,
		width	: subWidth,
		height	: subHeight
	}, this.max_objects, this.max_levels, nextLevel);

	//top left node
	this.nodes[1] = new Quadtree({
		x	: x,
		y	: y,
		width	: subWidth,
		height	: subHeight
	}, this.max_objects, this.max_levels, nextLevel);

	//bottom left node
	this.nodes[2] = new Quadtree({
		x	: x,
		y	: y + subHeight,
		width	: subWidth,
		height	: subHeight
	}, this.max_objects, this.max_levels, nextLevel);

	//bottom right node
	this.nodes[3] = new Quadtree({
		x	: x + subWidth,
		y	: y + subHeight,
		width	: subWidth,
		height	: subHeight
	}, this.max_objects, this.max_levels, nextLevel);
};


/*
 * Determine which node the object belongs to
 * @param Object pRect		bounds of the area to be checked, with x, y, width, height
 * @return Integer		index of the subnode (0-3), or -1 if pRect cannot completely fit within a subnode and is part of the parent node
 */
Quadtree.prototype.getIndex = function( pRect ) {

	var 	index 			= -1,
		verticalMidpoint 	= this.bounds.x + (this.bounds.width / 2),
		horizontalMidpoint 	= this.bounds.y + (this.bounds.height / 2),

		//pRect can completely fit within the top quadrants
		topQuadrant = (pRect.y < horizontalMidpoint && pRect.y + pRect.height < horizontalMidpoint),

		//pRect can completely fit within the bottom quadrants
		bottomQuadrant = (pRect.y > horizontalMidpoint);

	//pRect can completely fit within the left quadrants
	if( pRect.x < verticalMidpoint && pRect.x + pRect.width < verticalMidpoint ) {
		if( topQuadrant ) {
			index = 1;
		} else if( bottomQuadrant ) {
			index = 2;
		}

	//pRect can completely fit within the right quadrants
	} else if( pRect.x > verticalMidpoint ) {
		if( topQuadrant ) {
			index = 0;
		} else if( bottomQuadrant ) {
			index = 3;
		}
	}

	return index;
};


/*
 * Insert the object into the node. If the node
 * exceeds the capacity, it will split and add all
 * objects to their corresponding subnodes.
 * @param Object pRect		bounds of the object to be added, with x, y, width, height
 */
Quadtree.prototype.insert = function( pRect ) {

	var 	i = 0,
		index;

	//if we have subnodes ...
	if( typeof this.nodes[0] !== 'undefined' ) {
		index = this.getIndex( pRect );

		if( index !== -1 ) {
			this.nodes[index].insert( pRect );
			return;
		}
	}

	this.objects.push( pRect );

	if( this.objects.length > this.max_objects && this.level < this.max_levels ) {

		//split if we don't already have subnodes
		if( typeof this.nodes[0] === 'undefined' ) {
			this.split();
		}

		//add all objects to there corresponding subnodes
		while( i < this.objects.length ) {

			index = this.getIndex( this.objects[ i ] );

			if( index !== -1 ) {
				this.nodes[index].insert( this.objects.splice(i, 1)[0] );
			} else {
				i = i + 1;
			}
		}
	}
 };


/*
 * Return all objects that could collide with the given object
 * @param Object pRect		bounds of the object to be checked, with x, y, width, height
 * @Return Array		array with all detected objects
 */
Quadtree.prototype.retrieve = function( pRect, cancelCenter ) {
	if (!cancelCenter) {
        pRect.x -= pRect.width / 2;
        pRect.y -= pRect.height / 2;
    }
    var index = this.getIndex( pRect ),
		returnObjects = this.objects;

	//if we have subnodes ...
	if( typeof this.nodes[0] !== 'undefined' ) {

		//if pRect fits into a subnode ..
		if( index !== -1 ) {
			returnObjects = returnObjects.concat( this.nodes[index].retrieve( pRect, true ) );

		//if pRect does not fit into a subnode, check it against all subnodes
		} else {
			for( var i=0; i < this.nodes.length; i=i+1 ) {
				returnObjects = returnObjects.concat( this.nodes[i].retrieve( pRect, true ) );
			}
		}
	}

	return returnObjects;
};


/*
 * Clear the quadtree
 */
Quadtree.prototype.clear = function() {

	this.objects = [];

	for( var i=0; i < this.nodes.length; i=i+1 ) {
		if( typeof this.nodes[i] !== 'undefined' ) {
			this.nodes[i].clear();
		}
	}

	this.nodes = [];
};

//make Quadtree available in the global namespace
module.exports = Quadtree;
},{}],127:[function(require,module,exports){
const workerThreads = require('worker_threads');

const runService = (worker, recordingData) => {
    return new Promise((resolve, reject) => {
        if (!worker) {
            worker = new workerThreads.Worker('./src/recordingWorker.js');
        }

        worker.on('message', (data) => {
            resolve(data);
        });
        worker.on('error', reject);
        worker.on('exit', (code) => {
            if (code !== 0) {
                reject(new Error(`Recording worker stopped with ${code} exit code.`));
            }
            worker = null;
        });

        worker.postMessage({
            type: 'start',
            data: recordingData
        });
    });
}

function Recording(server) {
    let worker;
    let events = [];
    let snapshots = [];
    let start = Date.now();
    let recordingPrepared = false;

    this.recordEvent = (type, data) => {
        if (type === 'createEntity' || type === 'entityrpc' || type === 'playEffect'  || type === 'removeEntity') {
            if (type === 'createEntity' && data && data.type === 'static_object') {
                return;
            }

            events.push({
                time: Date.now(),
                type: type,
                data: data
            });
        }
    };

    let lastSnapshot = Date.now();
    let snapshotRate = 100;
    this.recordSnapshot = (snapshot) => {
        snapshotRate = (snapshotRate + (Date.now()-lastSnapshot)) / 2;
        lastSnapshot = Date.now();
        snapshots.push({
            time: Date.now(),
            data: snapshot
        });
    };

    this.getCurrentTime = () => {
        return Date.now() - start;
    };

    this.getLength = () => {
        return Date.now() - start;
    };

    function sendRecordingData(timeout, eventsStart, eventsEnd, snapshotsStart, snapshotsEnd) {
        setTimeout(() => {
            if (worker) {
                let eventSlice = events.slice(eventsStart, eventsEnd);
                let snapshotSlice = snapshots.slice(snapshotsStart, snapshotsEnd);
                if (eventSlice.length || snapshotSlice.length) {
                    worker.postMessage({
                        type: 'snapshots',
                        data: {
                            events: eventSlice,
                            snapshots: snapshotSlice
                        }
                    });
                }
            } else {
                console.error('Tried to send recording data, but worker is already destroyed.');
            }
        }, timeout);
    }

    this.prepareRecording = (preparationTime, chunkSizeMod) => {
        if (!chunkSizeMod) {
            chunkSizeMod = 1;
        }
        recordingPrepared = true;

        worker = new workerThreads.Worker('./src/recordingWorker.js');
        worker.on('exit', (code) => {
            if (code !== 0) {
               console.error(`Recording worker stopped with ${code} exit code.`);
            }
            worker = null;
        });

        let chunkDuration = 1000;
        let timeChunks = Math.ceil(preparationTime/chunkDuration);
        let eventChunkSize = Math.ceil((events.length/timeChunks) * chunkSizeMod);
        let snapshotChunkSize = Math.ceil((snapshots.length/timeChunks) * chunkSizeMod);
        if (eventChunkSize < 20) {
            eventChunkSize = 20;
        }
        if (snapshotChunkSize < 20) {
            snapshotChunkSize = 20;
        }
        for (let i=0; i<timeChunks; i++) {
            let eventsStart = i*eventChunkSize;
            let eventsEnd = (i+1)*eventChunkSize;
            let snapshotsStart = i*snapshotChunkSize;
            let snapshotsEnd = (i+1)*snapshotChunkSize;
            sendRecordingData(i*chunkDuration, eventsStart, eventsEnd, snapshotsStart, snapshotsEnd);
        }
    };

    //Get clip will not work in singleplayer, this will need to be changed.
    this.getClip = async (time, duration) => {
        return await runService(worker, {
            recordingPrepared: recordingPrepared,
            start: start,
            time: time,
            duration: duration,
            events: !recordingPrepared ? events : null,
            snapshots: !recordingPrepared ? snapshots : null,
            snapshotRate: snapshotRate,
            mapName: server.mapData.mapName
        });
    };

    this.destroy = () => {
        if (worker) {
            worker.terminate();
            worker = null;
        }
    };
}
module.exports = Recording;
},{"worker_threads":1}],128:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,setImmediate){(function (){
const fs = require('fs');

const p2 = require('p2');
//This is a fix for trailers, need to prepend their bodies to the front of the body list.
p2.World.prototype.addBody = function(body, prepend){
    if(this.bodies.indexOf(body) === -1){
        if (prepend) {
            this.bodies.unshift(body);
        } else {
            this.bodies.push(body);
        }
        body.world = this;
        let evt = this.addBodyEvent;
        evt.body = body;
        this.emit(evt);
        evt.body = null;
    }
};

const xmlParser = require('fast-xml-parser');
const AIManager = require('./ai');
const Quadtree = require('./quadtree');
const Tutorial = require('./tutorials/tutorial');
const TutorialTankBall = require('./tutorials/tutorial_tank_ball');
const Recording = require('./recording');
const Gamemodes = require('./gamemodes');
const CreateEntity = require('./entities/entity');
const CreateStaticObject = require('./entities/static_object');
const CreateVehicle = require('./entities/vehicle');
const CreateObject = require('./entities/object');
const CreateActor = require('./entities/actor');
const sharedFunctions = require('../shared_functions');

const Filter = require('bad-words');
const filter = new Filter();
const bad_names_list = require('./bad_names');
filter.addWords(...bad_names_list);
filter.removeWords('god');

const challengeList = require('./data/challenge_list');

const MAP_FOLDER = 'assets/maps/';
const maps = {};

maps['research_tree_starter'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"128\" height=\"64\" tilewidth=\"16\" tileheight=\"16\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"156\">\n <tileset firstgid=\"1\" name=\"tanks\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"vehicles/medium_tank/medium_tank_thumbnail.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"1\" height=\"1\" source=\"white.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Graphics\">\n  <object id=\"27\" gid=\"2\" x=\"276\" y=\"86.9282\" width=\"196.533\" height=\"16\" rotation=\"60\"/>\n  <object id=\"28\" gid=\"2\" x=\"288\" y=\"80\" width=\"194.272\" height=\"14.9893\" rotation=\"120\"/>\n  <object id=\"29\" gid=\"2\" x=\"368\" y=\"256\" width=\"320\" height=\"16\" rotation=\"90\"/>\n  <object id=\"30\" gid=\"2\" x=\"192\" y=\"256\" width=\"329.667\" height=\"16\" rotation=\"90\"/>\n  <object id=\"155\" gid=\"2\" x=\"187.561\" y=\"261.567\" width=\"194.272\" height=\"14.9893\" rotation=\"136.347\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Vehicles\">\n  <object id=\"5\" name=\"medium_tank\" gid=\"1\" x=\"219.667\" y=\"159.333\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"6\" name=\"weevil_mkv\" gid=\"1\" x=\"128\" y=\"320\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"medium_tank\"/>\n    <property name=\"xp\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"7\" name=\"light_tank\" gid=\"1\" x=\"304\" y=\"320\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"medium_tank\"/>\n    <property name=\"xp\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"8\" name=\"assault_gun\" gid=\"1\" x=\"128\" y=\"640\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pike_spg\"/>\n    <property name=\"xp\" type=\"int\" value=\"200000\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"medium_halftrack\" gid=\"1\" x=\"304\" y=\"480\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"light_tank\"/>\n    <property name=\"xp\" type=\"int\" value=\"100000\"/>\n   </properties>\n  </object>\n  <object id=\"13\" name=\"light_scout\" gid=\"1\" x=\"304\" y=\"640\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"medium_halftrack\"/>\n    <property name=\"xp\" type=\"int\" value=\"200000\"/>\n   </properties>\n  </object>\n  <object id=\"31\" name=\"pike_spg\" gid=\"1\" x=\"128\" y=\"480\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"weevil_mkv\"/>\n    <property name=\"xp\" type=\"int\" value=\"100000\"/>\n   </properties>\n  </object>\n  <object id=\"154\" name=\"hefty_mk1\" gid=\"1\" x=\"-16\" y=\"480\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"weevil_mkv\"/>\n    <property name=\"xp\" type=\"int\" value=\"100000\"/>\n   </properties>\n  </object>\n </objectgroup>\n</map>\n";
maps['research_tree_us'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"128\" height=\"64\" tilewidth=\"16\" tileheight=\"16\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"166\">\n <tileset firstgid=\"1\" name=\"tanks\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"vehicles/medium_tank/medium_tank_thumbnail.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"1\" height=\"1\" source=\"white.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Graphics\">\n  <object id=\"131\" gid=\"2\" x=\"280\" y=\"80\" width=\"204.533\" height=\"16\" rotation=\"60\"/>\n  <object id=\"132\" gid=\"2\" x=\"280\" y=\"80\" width=\"194.272\" height=\"14.9893\" rotation=\"120\"/>\n  <object id=\"133\" gid=\"2\" x=\"376\" y=\"256\" width=\"160\" height=\"16\" rotation=\"90\"/>\n  <object id=\"134\" gid=\"2\" x=\"184\" y=\"256\" width=\"160\" height=\"16\" rotation=\"90\"/>\n  <object id=\"143\" gid=\"2\" x=\"8\" y=\"256\" width=\"160\" height=\"16\" rotation=\"90\"/>\n  <object id=\"157\" gid=\"2\" x=\"299.72\" y=\"576.464\" width=\"204.533\" height=\"16\" rotation=\"240\"/>\n  <object id=\"158\" gid=\"2\" x=\"299.72\" y=\"576.464\" width=\"194.272\" height=\"14.9893\" rotation=\"300\"/>\n  <object id=\"159\" gid=\"2\" x=\"112\" y=\"576\" width=\"204.533\" height=\"16\" rotation=\"240\"/>\n  <object id=\"160\" gid=\"2\" x=\"112\" y=\"576\" width=\"194.272\" height=\"14.9893\" rotation=\"300\"/>\n  <object id=\"164\" gid=\"2\" x=\"483.248\" y=\"569.913\" width=\"168.768\" height=\"14.9893\" rotation=\"240\"/>\n  <object id=\"165\" name=\"Tree Bounds\" gid=\"2\" x=\"560\" y=\"624\" width=\"1\" height=\"1\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Vehicles\">\n  <object id=\"135\" name=\"m5_stout\" gid=\"1\" x=\"220\" y=\"149\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"200000\"/>\n   </properties>\n  </object>\n  <object id=\"136\" name=\"m4_sherwin\" gid=\"1\" x=\"128\" y=\"312\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m5_stout\"/>\n    <property name=\"xp\" type=\"int\" value=\"600000\"/>\n   </properties>\n  </object>\n  <object id=\"137\" name=\"m42_chuffy\" gid=\"1\" x=\"320\" y=\"312\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m5_stout\"/>\n    <property name=\"xp\" type=\"int\" value=\"600000\"/>\n   </properties>\n  </object>\n  <object id=\"139\" name=\"m88_greyman\" gid=\"1\" x=\"320\" y=\"472\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m42_chuffy\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"140\" name=\"m61b_butcher\" gid=\"1\" x=\"224\" y=\"624\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m88_greyman,m4_jumbo\"/>\n    <property name=\"xp\" type=\"int\" value=\"3000000\"/>\n   </properties>\n  </object>\n  <object id=\"141\" name=\"m4_jumbo\" gid=\"1\" x=\"128\" y=\"472\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m4_sherwin\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"144\" name=\"m108_wolfcat\" gid=\"1\" x=\"-48\" y=\"312\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"400000\"/>\n   </properties>\n  </object>\n  <object id=\"145\" name=\"jagdsherwin\" gid=\"1\" x=\"32\" y=\"624\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m70_beast,m4_jumbo\"/>\n    <property name=\"xp\" type=\"int\" value=\"3000000\"/>\n   </properties>\n  </object>\n  <object id=\"146\" name=\"m70_beast\" gid=\"1\" x=\"-48\" y=\"472\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m108_wolfcat\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"163\" name=\"m61_halftrack\" gid=\"1\" x=\"416\" y=\"624\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"m88_greyman\"/>\n    <property name=\"xp\" type=\"int\" value=\"3000000\"/>\n   </properties>\n  </object>\n </objectgroup>\n</map>\n";
maps['research_tree_russia'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"128\" height=\"64\" tilewidth=\"16\" tileheight=\"16\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"188\">\n <tileset firstgid=\"1\" name=\"tanks\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"vehicles/medium_tank/medium_tank_thumbnail.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"1\" height=\"1\" source=\"white.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Graphics\">\n  <object id=\"165\" gid=\"2\" x=\"250.667\" y=\"92.2615\" width=\"196.533\" height=\"16\" rotation=\"60\"/>\n  <object id=\"166\" gid=\"2\" x=\"262.667\" y=\"85.3333\" width=\"194.272\" height=\"14.9893\" rotation=\"120\"/>\n  <object id=\"167\" gid=\"2\" x=\"346\" y=\"261.333\" width=\"320\" height=\"16\" rotation=\"90\"/>\n  <object id=\"168\" gid=\"2\" x=\"170\" y=\"262.667\" width=\"318\" height=\"16\" rotation=\"90\"/>\n  <object id=\"181\" gid=\"2\" x=\"170.941\" y=\"570.886\" width=\"194.272\" height=\"14.9893\" rotation=\"114.516\"/>\n  <object id=\"182\" gid=\"2\" x=\"12.0076\" y=\"576.423\" width=\"194.272\" height=\"14.9893\" rotation=\"67.5401\"/>\n  <object id=\"183\" gid=\"2\" x=\"345.957\" y=\"256.238\" width=\"435.415\" height=\"16\" rotation=\"48.5913\"/>\n  <object id=\"184\" gid=\"2\" x=\"498\" y=\"412.667\" width=\"172\" height=\"16\" rotation=\"90\"/>\n  <object id=\"187\" name=\"Tree Bounds\" gid=\"2\" x=\"736\" y=\"848\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Vehicles\">\n  <object id=\"169\" name=\"p70\" gid=\"1\" x=\"192\" y=\"160\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"200000\"/>\n   </properties>\n  </object>\n  <object id=\"170\" name=\"cy76\" gid=\"1\" x=\"112\" y=\"320.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"p70\"/>\n    <property name=\"xp\" type=\"int\" value=\"600000\"/>\n   </properties>\n  </object>\n  <object id=\"171\" name=\"pt5\" gid=\"1\" x=\"288\" y=\"320.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"p70\"/>\n    <property name=\"xp\" type=\"int\" value=\"600000\"/>\n   </properties>\n  </object>\n  <object id=\"173\" name=\"p_34_76\" gid=\"1\" x=\"288\" y=\"480.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pt5\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"174\" name=\"p_34_85\" gid=\"1\" x=\"288\" y=\"640.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"p_34_76\"/>\n    <property name=\"xp\" type=\"int\" value=\"3000000\"/>\n   </properties>\n  </object>\n  <object id=\"175\" name=\"cy122\" gid=\"1\" x=\"112\" y=\"480.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"cy76\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"176\" name=\"vk_1\" gid=\"1\" x=\"-48\" y=\"640.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"177\" name=\"vk_2\" gid=\"1\" x=\"26.6667\" y=\"816.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"vk_1,si_2\"/>\n    <property name=\"xp\" type=\"int\" value=\"4000000\"/>\n   </properties>\n  </object>\n  <object id=\"178\" name=\"si_2\" gid=\"1\" x=\"112\" y=\"640.667\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"cy122\"/>\n    <property name=\"xp\" type=\"int\" value=\"2500000\"/>\n   </properties>\n  </object>\n  <object id=\"179\" name=\"ant_57\" gid=\"1\" x=\"442\" y=\"480\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pt5\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"180\" name=\"zag_mm\" gid=\"1\" x=\"442\" y=\"640\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"ant_57\"/>\n    <property name=\"xp\" type=\"int\" value=\"2500000\"/>\n   </properties>\n  </object>\n  <object id=\"186\" name=\"zag_hg\" gid=\"1\" x=\"576\" y=\"640\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"ant_57\"/>\n    <property name=\"xp\" type=\"int\" value=\"2500000\"/>\n   </properties>\n  </object>\n </objectgroup>\n</map>\n";
maps['research_tree_germany'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"128\" height=\"64\" tilewidth=\"16\" tileheight=\"16\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"197\">\n <tileset firstgid=\"1\" name=\"tanks\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"vehicles/medium_tank/medium_tank_thumbnail.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"1\" height=\"1\" source=\"white.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Graphics\">\n  <object id=\"187\" gid=\"2\" x=\"231.513\" y=\"102.477\" width=\"174.275\" height=\"16\" rotation=\"60\"/>\n  <object id=\"188\" gid=\"2\" x=\"240\" y=\"96\" width=\"181.844\" height=\"14.9893\" rotation=\"120\"/>\n  <object id=\"189\" gid=\"2\" x=\"316\" y=\"233.072\" width=\"356\" height=\"16\" rotation=\"90\"/>\n  <object id=\"190\" gid=\"2\" x=\"160\" y=\"233.072\" width=\"342\" height=\"16\" rotation=\"90\"/>\n  <object id=\"191\" gid=\"2\" x=\"491\" y=\"265.072\" width=\"320\" height=\"16\" rotation=\"90\"/>\n  <object id=\"192\" gid=\"2\" x=\"489.564\" y=\"578.779\" width=\"194.272\" height=\"14.9893\" rotation=\"118.729\"/>\n  <object id=\"193\" gid=\"2\" x=\"315\" y=\"574.609\" width=\"194.272\" height=\"14.9893\" rotation=\"67.5401\"/>\n  <object id=\"194\" gid=\"2\" x=\"395\" y=\"745.072\" width=\"160\" height=\"16\" rotation=\"90\"/>\n  <object id=\"195\" gid=\"2\" x=\"151.803\" y=\"254.225\" width=\"220.658\" height=\"14.9893\" rotation=\"129.01\"/>\n  <object id=\"196\" name=\"Tree Bounds\" gid=\"2\" x=\"592\" y=\"1008\" width=\"1\" height=\"1\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Vehicles\">\n  <object id=\"169\" name=\"pummeler_ii\" gid=\"1\" x=\"174.909\" y=\"159.818\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"200000\"/>\n   </properties>\n  </object>\n  <object id=\"171\" name=\"pummeler_iv\" gid=\"1\" x=\"256\" y=\"329.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pummeler_ii\"/>\n    <property name=\"xp\" type=\"int\" value=\"600000\"/>\n   </properties>\n  </object>\n  <object id=\"176\" name=\"stub_iii\" gid=\"1\" x=\"432\" y=\"329.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"xp\" type=\"int\" value=\"400000\"/>\n   </properties>\n  </object>\n  <object id=\"177\" name=\"stub_iv\" gid=\"1\" x=\"432\" y=\"489.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"stub_iii\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"178\" name=\"heckler\" gid=\"1\" x=\"-48\" y=\"489.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pummeler_iii\"/>\n    <property name=\"xp\" type=\"int\" value=\"1500000\"/>\n   </properties>\n  </object>\n  <object id=\"179\" name=\"jagdpanthera\" gid=\"1\" x=\"432\" y=\"649.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"stub_iv\"/>\n    <property name=\"xp\" type=\"int\" value=\"2000000\"/>\n   </properties>\n  </object>\n  <object id=\"180\" name=\"panthur\" gid=\"1\" x=\"256\" y=\"489.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pummeler_iv\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"181\" name=\"tigur1\" gid=\"1\" x=\"256\" y=\"649.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"panthur\"/>\n    <property name=\"xp\" type=\"int\" value=\"2500000\"/>\n   </properties>\n  </object>\n  <object id=\"182\" name=\"queen_tigress\" gid=\"1\" x=\"336\" y=\"809.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"tigur1,jagdpanthera\"/>\n    <property name=\"xp\" type=\"int\" value=\"3000000\"/>\n   </properties>\n  </object>\n  <object id=\"183\" name=\"haus\" gid=\"1\" x=\"336\" y=\"969.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"queen_tigress\"/>\n    <property name=\"xp\" type=\"int\" value=\"4000000\"/>\n   </properties>\n  </object>\n  <object id=\"184\" name=\"hamonag_at\" gid=\"1\" x=\"96\" y=\"489.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pummeler_iii\"/>\n    <property name=\"xp\" type=\"int\" value=\"1000000\"/>\n   </properties>\n  </object>\n  <object id=\"185\" name=\"cheetah\" gid=\"1\" x=\"96\" y=\"649.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"hamonag_at\"/>\n    <property name=\"xp\" type=\"int\" value=\"2000000\"/>\n   </properties>\n  </object>\n  <object id=\"186\" name=\"pummeler_iii\" gid=\"1\" x=\"96\" y=\"329.072\" width=\"128\" height=\"128\">\n   <properties>\n    <property name=\"required\" value=\"pummeler_ii\"/>\n    <property name=\"xp\" type=\"int\" value=\"600000\"/>\n   </properties>\n  </object>\n </objectgroup>\n</map>\n";
maps['cargo'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"13\" nextobjectid=\"233\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff747997\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"BG\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg2.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\">\n  <object id=\"175\" gid=\"1\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"176\" gid=\"1\" x=\"4096\" y=\"1.13687e-13\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\"/>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"225.67\" y=\"514.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"224.333\" y=\"368.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3858.88\" y=\"1594.52\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3865.21\" y=\"1860.18\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3859.87\" y=\"1715.51\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"226.001\" y=\"689.327\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1385.67\" y=\"450.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"2721\" y=\"1624.66\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"224.637\" y=\"199.004\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3861.21\" y=\"1454.52\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" type=\"static_wall\" x=\"1444.62\" y=\"1077.95\" width=\"206.309\" height=\"240.862\" rotation=\"75\"/>\n  <object id=\"97\" type=\"static_wall\" x=\"1306.32\" y=\"1231.17\" width=\"125.479\" height=\"136.936\" rotation=\"120\"/>\n  <object id=\"98\" type=\"static_wall\" x=\"1239.93\" y=\"1169.93\" width=\"32.9661\" height=\"40.7704\" rotation=\"136.753\"/>\n  <object id=\"99\" type=\"static_wall\" x=\"1264.82\" y=\"1339.94\" width=\"20.7818\" height=\"40.7704\" rotation=\"180.346\"/>\n  <object id=\"100\" type=\"static_wall\" x=\"1698.27\" y=\"1041.77\" width=\"146.17\" height=\"287.753\" rotation=\"75\"/>\n  <object id=\"102\" type=\"static_wall\" x=\"1441.5\" y=\"1079.5\">\n   <polygon points=\"0,0 31,-56 109,-77.5 207,-22.5 245,114.5 187.5,211 109,233 50.5,199\"/>\n  </object>\n  <object id=\"103\" type=\"static_wall\" x=\"2651.47\" y=\"969.704\" width=\"206.309\" height=\"240.862\" rotation=\"255\"/>\n  <object id=\"104\" type=\"static_wall\" x=\"2789.77\" y=\"816.484\" width=\"125.479\" height=\"136.936\" rotation=\"300\"/>\n  <object id=\"105\" type=\"static_wall\" x=\"2856.16\" y=\"877.724\" width=\"32.9661\" height=\"40.7704\" rotation=\"316.753\"/>\n  <object id=\"106\" type=\"static_wall\" x=\"2831.27\" y=\"707.714\" width=\"20.7818\" height=\"40.7704\" rotation=\"0.346\"/>\n  <object id=\"107\" type=\"static_wall\" x=\"2397.82\" y=\"1005.88\" width=\"146.17\" height=\"287.753\" rotation=\"255\"/>\n  <object id=\"108\" type=\"static_wall\" x=\"2654.59\" y=\"968.154\" rotation=\"180\">\n   <polygon points=\"0,0 31,-56 109,-77.5 207,-22.5 245,114.5 187.5,211 109,233 50.5,199\"/>\n  </object>\n  <object id=\"112\" type=\"static_wall\" x=\"1974.67\" y=\"967.667\">\n   <polygon points=\"0,0 -62,92 37.6667,141 145.667,112.667 208.333,19.6667 108,-28.3333\"/>\n  </object>\n  <object id=\"113\" type=\"static_wall\" x=\"1065.37\" y=\"1528.41\" rotation=\"181.575\">\n   <polygon points=\"0,0 143.818,-39.2727 151.091,-36.9091 151.818,-29.8182 97.2727,56.5455 89.2727,58.5455 -3.63636,14 -5.81818,7.27273\"/>\n  </object>\n  <object id=\"114\" type=\"static_wall\" x=\"3293.63\" y=\"930.319\" rotation=\"180.431\">\n   <polygon points=\"0,0 143.818,-39.2727 151.091,-36.9091 151.818,-29.8182 97.2727,56.5455 89.2727,58.5455 -3.63636,14 -5.81818,7.27273\"/>\n  </object>\n  <object id=\"115\" type=\"static_wall\" x=\"3030.53\" y=\"520.059\" rotation=\"1.14142\">\n   <polygon points=\"0,0 143.818,-39.2727 151.091,-36.9091 151.818,-29.8182 97.2727,56.5455 89.2727,58.5455 -3.63636,14 -5.81818,7.27273\"/>\n  </object>\n  <object id=\"118\" type=\"static_wall\" x=\"1189.67\" y=\"654.667\">\n   <polygon points=\"0,0 241,-38.6667 258,-21 273,39 270.333,49.6667 12.3333,121.667 -7.33333,16.6667\"/>\n  </object>\n  <object id=\"119\" type=\"static_wall\" x=\"1263\" y=\"743.667\">\n   <polygon points=\"0,0 103,40 172,-46.6667\"/>\n  </object>\n  <object id=\"120\" type=\"static_wall\" x=\"252.667\" y=\"1427\">\n   <polygon points=\"0,0 71.3333,59 24.3333,184.667\"/>\n  </object>\n  <object id=\"127\" type=\"static_wall\" x=\"515.349\" y=\"1804.62\" width=\"50.5409\" height=\"196.365\" rotation=\"280.305\"/>\n  <object id=\"128\" type=\"static_wall\" x=\"342.194\" y=\"1725.41\" width=\"50.5409\" height=\"219.371\" rotation=\"293.141\"/>\n  <object id=\"129\" type=\"static_wall\" x=\"241.244\" y=\"1617.99\" width=\"50.5409\" height=\"161.735\" rotation=\"316.24\"/>\n  <object id=\"130\" type=\"static_wall\" x=\"3149.07\" y=\"-21.4079\" width=\"50.5409\" height=\"776.643\" rotation=\"90.4069\"/>\n  <object id=\"132\" type=\"static_wall\" x=\"3571.69\" y=\"242.693\" width=\"50.5409\" height=\"196.365\" rotation=\"100.305\"/>\n  <object id=\"133\" type=\"static_wall\" x=\"3744.84\" y=\"321.903\" width=\"50.5409\" height=\"219.371\" rotation=\"113.141\"/>\n  <object id=\"134\" type=\"static_wall\" x=\"3845.79\" y=\"429.323\" width=\"50.5409\" height=\"161.735\" rotation=\"136.24\"/>\n  <object id=\"140\" type=\"static_wall\" x=\"2906.82\" y=\"1392.28\" rotation=\"180\">\n   <polygon points=\"0,0 241,-38.6667 258,-21 273,39 270.333,49.6667 12.3333,121.667 -7.33333,16.6667\"/>\n  </object>\n  <object id=\"141\" type=\"static_wall\" x=\"2833.49\" y=\"1303.28\" rotation=\"180\">\n   <polygon points=\"0,0 103,40 172,-46.6667\"/>\n  </object>\n  <object id=\"142\" type=\"static_wall\" x=\"802.59\" y=\"1118.38\" rotation=\"0.317615\">\n   <polygon points=\"0,0 143.818,-39.2727 151.091,-36.9091 151.818,-29.8182 97.2727,56.5455 89.2727,58.5455 -3.63636,14 -5.81818,7.27273\"/>\n  </object>\n  <object id=\"145\" type=\"static_wall\" x=\"1335.3\" y=\"184.841\" width=\"248.279\" height=\"61.5088\" rotation=\"345\"/>\n  <object id=\"151\" type=\"static_wall\" x=\"840\" y=\"714.186\">\n   <polygon points=\"0,0 103.5,-16.5192 118.5,0.971717 139.5,103.974 133.5,124.866 45.5,143.814\"/>\n  </object>\n  <object id=\"154\" type=\"static_wall\" x=\"2760.81\" y=\"1862.94\" width=\"248.279\" height=\"61.5088\" rotation=\"165\"/>\n  <object id=\"160\" type=\"static_wall\" x=\"202.143\" y=\"1292.54\" width=\"50.5409\" height=\"161.735\" rotation=\"0.354645\"/>\n  <object id=\"161\" type=\"static_wall\" x=\"242.129\" y=\"1205.29\" width=\"50.5409\" height=\"167.297\" rotation=\"14.1463\"/>\n  <object id=\"162\" type=\"static_wall\" x=\"319.942\" y=\"1128.46\" width=\"50.5409\" height=\"167.297\" rotation=\"33.5385\"/>\n  <object id=\"163\" type=\"static_wall\" x=\"442.117\" y=\"1009.45\" width=\"50.5409\" height=\"216.035\" rotation=\"43.3692\"/>\n  <object id=\"166\" type=\"static_wall\" x=\"937.707\" y=\"789.444\" width=\"50.5409\" height=\"263.909\" rotation=\"69.9088\"/>\n  <object id=\"167\" type=\"static_wall\" x=\"3892.21\" y=\"754.379\" width=\"50.5409\" height=\"161.735\" rotation=\"180.355\"/>\n  <object id=\"168\" type=\"static_wall\" x=\"3853.47\" y=\"840.129\" width=\"50.5409\" height=\"167.297\" rotation=\"194.146\"/>\n  <object id=\"169\" type=\"static_wall\" x=\"3775.91\" y=\"918.959\" width=\"50.5409\" height=\"167.297\" rotation=\"213.538\"/>\n  <object id=\"170\" type=\"static_wall\" x=\"3653.73\" y=\"1037.97\" width=\"50.5409\" height=\"216.035\" rotation=\"223.369\"/>\n  <object id=\"174\" type=\"static_wall\" x=\"3844.6\" y=\"620.659\" rotation=\"180\">\n   <polygon points=\"0,0 71.3333,59 24.3333,184.667\"/>\n  </object>\n  <object id=\"177\" type=\"static_wall\" x=\"24.9808\" y=\"-3.1094\" width=\"987.309\" height=\"152.195\" rotation=\"90\"/>\n  <object id=\"178\" type=\"static_wall\" x=\"1004.4\" y=\"25.3212\" width=\"1079.31\" height=\"174.195\" rotation=\"180\"/>\n  <object id=\"179\" type=\"static_wall\" x=\"1053.95\" y=\"213.792\" width=\"263.147\" height=\"142.671\" rotation=\"255\"/>\n  <object id=\"180\" type=\"static_wall\" x=\"460.176\" y=\"980.902\" width=\"529.551\" height=\"152.195\" rotation=\"166.311\"/>\n  <object id=\"181\" type=\"static_wall\" x=\"619.667\" y=\"397\">\n   <polygon points=\"0,0 36,-71 198.667,-115 207.667,-108 256.667,10.6667 254,28.3333 130,80\"/>\n  </object>\n  <object id=\"182\" type=\"static_wall\" x=\"619.667\" y=\"397.333\">\n   <polygon points=\"0,0 26.3333,115.333 50.3333,123 171.333,94.3333 192.667,77 175,9.66667\"/>\n  </object>\n  <object id=\"183\" type=\"static_wall\" x=\"1045.5\" y=\"165\">\n   <polygon points=\"0,0 -3.5,38.5 41.5,154 65,171.5 341.5,66.5\"/>\n  </object>\n  <object id=\"184\" type=\"static_wall\" x=\"308.5\" y=\"1044.5\">\n   <polygon points=\"0,0 114.5,-212 132.5,-190.5 174,18.5 117.5,45.5\"/>\n  </object>\n  <object id=\"185\" type=\"static_wall\" x=\"841.667\" y=\"715\">\n   <polygon points=\"0,0 -122.333,28 -177.667,84.6667 -142.667,223 47.6667,114.667\"/>\n  </object>\n  <object id=\"197\" type=\"static_wall\" x=\"3255.29\" y=\"1333.68\" rotation=\"180\">\n   <polygon points=\"0,0 103.5,-16.5192 118.5,0.971717 139.5,103.974 133.5,124.866 45.5,143.814\"/>\n  </object>\n  <object id=\"198\" type=\"static_wall\" x=\"3157.58\" y=\"1258.42\" width=\"50.5409\" height=\"263.909\" rotation=\"249.909\"/>\n  <object id=\"199\" type=\"static_wall\" x=\"4070.31\" y=\"2050.98\" width=\"987.309\" height=\"152.195\" rotation=\"270\"/>\n  <object id=\"200\" type=\"static_wall\" x=\"3090.89\" y=\"2022.55\" width=\"1079.31\" height=\"174.195\"/>\n  <object id=\"201\" type=\"static_wall\" x=\"3041.34\" y=\"1834.08\" width=\"263.147\" height=\"142.671\" rotation=\"75\"/>\n  <object id=\"202\" type=\"static_wall\" x=\"3635.11\" y=\"1066.97\" width=\"529.551\" height=\"152.195\" rotation=\"346.311\"/>\n  <object id=\"203\" type=\"static_wall\" x=\"3475.62\" y=\"1650.87\" rotation=\"180\">\n   <polygon points=\"0,0 36,-71 198.667,-115 207.667,-108 256.667,10.6667 254,28.3333 130,80\"/>\n  </object>\n  <object id=\"204\" type=\"static_wall\" x=\"3475.62\" y=\"1650.54\" rotation=\"180\">\n   <polygon points=\"0,0 26.3333,115.333 50.3333,123 171.333,94.3333 192.667,77 175,9.66667\"/>\n  </object>\n  <object id=\"205\" type=\"static_wall\" x=\"3049.79\" y=\"1882.87\" rotation=\"180\">\n   <polygon points=\"0,0 -3.5,38.5 41.5,154 65,171.5 341.5,66.5\"/>\n  </object>\n  <object id=\"206\" type=\"static_wall\" x=\"3786.79\" y=\"1003.37\" rotation=\"180\">\n   <polygon points=\"0,0 114.5,-212 132.5,-190.5 174,18.5 117.5,45.5\"/>\n  </object>\n  <object id=\"207\" type=\"static_wall\" x=\"3253.62\" y=\"1332.87\" rotation=\"180\">\n   <polygon points=\"0,0 -122.333,28 -177.667,84.6667 -142.667,223 47.6667,114.667\"/>\n  </object>\n  <object id=\"208\" type=\"static_wall\" x=\"2724.33\" y=\"314.333\">\n   <polygon points=\"0,0 50.3333,-66 199.333,-113.333 213.333,-93.6667 223,-27.6667 213.667,-5.33333 39.3333,42\"/>\n  </object>\n  <object id=\"209\" type=\"static_wall\" x=\"3166.03\" y=\"183.416\" rotation=\"2.29371\">\n   <polygon points=\"0,0 8.5,66.5 21.5,81.5 228,67 55,-134.5\"/>\n  </object>\n  <object id=\"210\" type=\"static_wall\" x=\"3297.4\" y=\"39.6862\" width=\"106.049\" height=\"161.849\" rotation=\"130.5\"/>\n  <object id=\"212\" type=\"static_wall\" x=\"1577.5\" y=\"179\">\n   <polygon points=\"0,0 61,47 282.5,-16.5 345,-95.5\"/>\n  </object>\n  <object id=\"213\" type=\"static_wall\" x=\"1828.2\" y=\"29.7255\" width=\"264.403\" height=\"102.715\" rotation=\"347.952\"/>\n  <object id=\"214\" type=\"static_wall\" x=\"2109\" y=\"-21\">\n   <polygon points=\"0,0 -29.5,96.5 50,134 213.5,98 299,30.5\"/>\n  </object>\n  <object id=\"215\" type=\"static_wall\" x=\"2519.69\" y=\"1870.12\" rotation=\"180\">\n   <polygon points=\"0,0 61,47 282.5,-16.5 345,-95.5\"/>\n  </object>\n  <object id=\"216\" type=\"static_wall\" x=\"2268.99\" y=\"2019.39\" width=\"264.403\" height=\"102.715\" rotation=\"167.952\"/>\n  <object id=\"217\" type=\"static_wall\" x=\"1988.19\" y=\"2070.12\" rotation=\"180\">\n   <polygon points=\"0,0 -29.5,96.5 50,134 213.5,98 299,30.5\"/>\n  </object>\n  <object id=\"219\" type=\"static_wall\" x=\"2447\" y=\"286\">\n   <polygon points=\"0,0 30.5,104.5 3,153.5 -224,215.5 -260.5,181.5 -277,106 -228.5,32.5 -72,-16\"/>\n  </object>\n  <object id=\"221\" type=\"static_wall\" x=\"2419\" y=\"435.5\">\n   <polygon points=\"0,0 99.5,37 152.5,-30 190,-148.5 2.5,-104\"/>\n  </object>\n  <object id=\"222\" type=\"static_wall\" x=\"2609\" y=\"286.996\">\n   <polygon points=\"0,0 73.25,36.25 61.5,91.25 -52.5,123\"/>\n  </object>\n  <object id=\"223\" type=\"static_wall\" x=\"946.98\" y=\"2069.24\" width=\"50.5409\" height=\"776.643\" rotation=\"270.407\"/>\n  <object id=\"224\" type=\"static_wall\" x=\"1371.72\" y=\"1733.5\" rotation=\"180\">\n   <polygon points=\"0,0 50.3333,-66 199.333,-113.333 213.333,-93.6667 223,-27.6667 213.667,-5.33333 39.3333,42\"/>\n  </object>\n  <object id=\"225\" type=\"static_wall\" x=\"930.02\" y=\"1864.42\" rotation=\"182.294\">\n   <polygon points=\"0,0 8.5,66.5 21.5,81.5 228,67 55,-134.5\"/>\n  </object>\n  <object id=\"226\" type=\"static_wall\" x=\"798.65\" y=\"2008.15\" width=\"106.049\" height=\"161.849\" rotation=\"310.5\"/>\n  <object id=\"227\" type=\"static_wall\" x=\"1649.05\" y=\"1761.83\" rotation=\"180\">\n   <polygon points=\"0,0 30.5,104.5 3,153.5 -224,215.5 -260.5,181.5 -277,106 -228.5,32.5 -72,-16\"/>\n  </object>\n  <object id=\"228\" type=\"static_wall\" x=\"1677.05\" y=\"1612.33\" rotation=\"180\">\n   <polygon points=\"0,0 99.5,37 152.5,-30 190,-148.5 2.5,-104\"/>\n  </object>\n  <object id=\"229\" type=\"static_wall\" x=\"1487.05\" y=\"1760.84\" rotation=\"180\">\n   <polygon points=\"0,0 73.25,36.25 61.5,91.25 -52.5,123\"/>\n  </object>\n  <object id=\"230\" type=\"static_wall\" x=\"2403.33\" y=\"1405\">\n   <polygon points=\"0,0 -301,80 -312.333,93.6667 -303,155 -277.667,196.333 -240.333,214 -14.6667,157.333 23.6667,64.6667\"/>\n  </object>\n  <object id=\"232\" type=\"static_wall\" x=\"1692.67\" y=\"643.167\" rotation=\"180\">\n   <polygon points=\"0,0 -301,80 -312.333,93.6667 -303,155 -277.667,196.333 -240.333,214 -14.6667,157.333 23.6667,64.6667\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['garage'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"4\" height=\"4\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"14\" nextobjectid=\"195\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc4b4a8\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"light\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prop_lightfixture.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"bg_z\" tilewidth=\"2048\" tileheight=\"700\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg_z.jpg\" width=\"2048\" height=\"700\"/>\n </tileset>\n <objectgroup id=\"13\" name=\"Background\">\n  <object id=\"190\" gid=\"1\" x=\"-2.61261\" y=\"1044.42\" width=\"1030.4\" height=\"1030.4\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" offsetx=\"53.3333\" offsety=\"-16\">\n  <object id=\"191\" gid=\"2\" x=\"389.914\" y=\"443.513\" width=\"128.8\" height=\"128.8\">\n   <properties>\n    <property name=\"zIndex\" type=\"float\" value=\"-3000\"/>\n   </properties>\n  </object>\n  <object id=\"192\" gid=\"3\" x=\"-55.9459\" y=\"382.21\" width=\"1030.4\" height=\"352.187\">\n   <properties>\n    <property name=\"zIndex\" type=\"float\" value=\"-2000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"135\" name=\"spawn\" type=\"entity_spawn\" x=\"515.814\" y=\"516.281\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"193\" name=\"spawn1\" type=\"entity_spawn\" x=\"-138.817\" y=\"678.733\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"194\" name=\"spawn2\" type=\"entity_spawn\" x=\"1129.44\" y=\"671.187\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['long_map'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.2\" tiledversion=\"1.3.5\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"80\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"3\" nextobjectid=\"37\">\n <tileset firstgid=\"1\" name=\"Long Map Tileset\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"../../wall.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"2\" name=\"Object Layer 1\">\n  <object id=\"1\" type=\"static_wall\" gid=\"1\" x=\"0\" y=\"2048\" width=\"64\" height=\"2048\"/>\n  <object id=\"2\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"2048\" width=\"4992\" height=\"64\"/>\n  <object id=\"3\" type=\"static_wall\" gid=\"1\" x=\"5056\" y=\"2048\" width=\"64\" height=\"2048\"/>\n  <object id=\"4\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"64\" width=\"4992\" height=\"64\"/>\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"482\" y=\"427\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"7\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4608\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"8\" type=\"static_wall\" gid=\"1\" x=\"960\" y=\"960\" width=\"937.091\" height=\"64\" rotation=\"-90\"/>\n  <object id=\"9\" type=\"static_wall\" gid=\"1\" x=\"4160\" y=\"2048\" width=\"937.091\" height=\"64\" rotation=\"-90\"/>\n  <object id=\"10\" name=\"flag_red\" type=\"entity_flag\" x=\"1344\" y=\"448\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"11\" name=\"flag_blue\" type=\"entity_flag\" x=\"3648\" y=\"1536\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" type=\"static_wall\" gid=\"1\" x=\"1672.27\" y=\"1547.36\" width=\"616.912\" height=\"42.1329\" rotation=\"-64.2778\"/>\n  <object id=\"13\" type=\"static_wall\" gid=\"1\" x=\"2095.83\" y=\"1354.58\" width=\"616.912\" height=\"42.1329\" rotation=\"-154.278\"/>\n  <object id=\"14\" type=\"static_wall\" gid=\"1\" x=\"2081.85\" y=\"656.364\" width=\"616.912\" height=\"42.1329\" rotation=\"-365.441\"/>\n  <object id=\"15\" type=\"static_wall\" gid=\"1\" x=\"2465.99\" y=\"919.041\" width=\"616.912\" height=\"42.1329\" rotation=\"-455.442\"/>\n  <object id=\"16\" type=\"static_wall\" gid=\"1\" x=\"3138.37\" y=\"1677.58\" width=\"616.912\" height=\"42.1329\" rotation=\"-129.618\"/>\n  <object id=\"17\" type=\"static_wall\" gid=\"1\" x=\"3139.89\" y=\"1212.21\" width=\"616.912\" height=\"42.1329\" rotation=\"-219.619\"/>\n  <object id=\"18\" type=\"static_wall\" gid=\"1\" x=\"3237.34\" y=\"790.475\" width=\"616.912\" height=\"42.1329\" rotation=\"-64.2778\"/>\n  <object id=\"19\" type=\"static_wall\" gid=\"1\" x=\"3660.9\" y=\"597.695\" width=\"616.912\" height=\"42.1329\" rotation=\"-154.278\"/>\n  <object id=\"20\" type=\"static_wall\" gid=\"1\" x=\"712.899\" y=\"1287.41\" width=\"616.912\" height=\"42.1329\" rotation=\"-323.959\"/>\n  <object id=\"21\" type=\"static_wall\" gid=\"1\" x=\"826.691\" y=\"1738.65\" width=\"616.912\" height=\"42.1329\" rotation=\"-413.959\"/>\n  <object id=\"22\" type=\"static_wall\" gid=\"1\" x=\"4189.09\" y=\"415.213\" width=\"616.912\" height=\"42.1329\" rotation=\"-326.723\"/>\n  <object id=\"23\" type=\"static_wall\" gid=\"1\" x=\"4324.51\" y=\"860.441\" width=\"616.912\" height=\"42.1329\" rotation=\"-416.724\"/>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"226\" y=\"427\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"738\" y=\"427\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"26\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4352\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"27\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4864\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"481\" y=\"182\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"34\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4609\" y=\"1746\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['racetrack'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.2\" tiledversion=\"1.3.5\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"100\" height=\"100\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"3\" nextobjectid=\"97\">\n <tileset firstgid=\"1\" name=\"Long Map Tileset\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"../../wall.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"2\" name=\"Object Layer 1\">\n  <object id=\"1\" type=\"static_wall\" gid=\"1\" x=\"0\" y=\"4876\" width=\"64\" height=\"3000\"/>\n  <object id=\"2\" type=\"static_wall\" gid=\"1\" x=\"2012\" y=\"6400\" width=\"2652\" height=\"64\"/>\n  <object id=\"4\" type=\"static_wall\" gid=\"1\" x=\"1952\" y=\"64\" width=\"3052\" height=\"64\"/>\n  <object id=\"25\" name=\"spawn\" type=\"entity_spawn\" x=\"3008\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"37\" name=\"spawn\" type=\"entity_spawn\" x=\"3008\" y=\"512\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"38\" name=\"spawn\" type=\"entity_spawn\" x=\"3328\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"39\" name=\"spawn\" type=\"entity_spawn\" x=\"3328\" y=\"512\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"spawn\" type=\"entity_spawn\" x=\"3648\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"spawn\" type=\"entity_spawn\" x=\"3648\" y=\"512\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"spawn\" type=\"entity_spawn\" x=\"3968\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"43\" name=\"spawn\" type=\"entity_spawn\" x=\"3968\" y=\"512\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"44\" type=\"static_wall\" gid=\"1\" x=\"1920\" y=\"704\" width=\"2696\" height=\"64\"/>\n  <object id=\"45\" type=\"static_wall\" gid=\"1\" x=\"1163.37\" y=\"1097.08\" width=\"894.737\" height=\"64\" rotation=\"-26.6789\"/>\n  <object id=\"46\" type=\"static_wall\" gid=\"1\" x=\"882.032\" y=\"1883.2\" width=\"894.737\" height=\"64\" rotation=\"-68.7963\"/>\n  <object id=\"47\" type=\"static_wall\" gid=\"1\" x=\"913.102\" y=\"4624.9\" width=\"2765.3\" height=\"64\" rotation=\"-90.5067\"/>\n  <object id=\"48\" type=\"static_wall\" gid=\"1\" x=\"456.937\" y=\"830.244\" width=\"1729.21\" height=\"64\" rotation=\"-26.6789\"/>\n  <object id=\"49\" type=\"static_wall\" gid=\"1\" x=\"48.4877\" y=\"1944.01\" width=\"1246.18\" height=\"64\" rotation=\"-68.7963\"/>\n  <object id=\"52\" type=\"static_wall\" gid=\"1\" x=\"1499.02\" y=\"5227.39\" width=\"894.737\" height=\"64\" rotation=\"-132.967\"/>\n  <object id=\"53\" type=\"static_wall\" gid=\"1\" x=\"2289.52\" y=\"5593.9\" width=\"894.737\" height=\"64\" rotation=\"-154.677\"/>\n  <object id=\"55\" type=\"static_wall\" gid=\"1\" x=\"1005.59\" y=\"5856.08\" width=\"1435.04\" height=\"64\" rotation=\"-132.967\"/>\n  <object id=\"56\" type=\"static_wall\" gid=\"1\" x=\"2054.18\" y=\"6344.71\" width=\"1180.26\" height=\"64\" rotation=\"-154.677\"/>\n  <object id=\"57\" type=\"static_wall\" gid=\"1\" x=\"2217.58\" y=\"5646.91\" width=\"1902.06\" height=\"64\"/>\n  <object id=\"58\" type=\"static_wall\" gid=\"1\" x=\"5203.56\" y=\"5687.19\" width=\"894.737\" height=\"64\" rotation=\"-228.944\"/>\n  <object id=\"59\" type=\"static_wall\" gid=\"1\" x=\"5195.08\" y=\"4695.59\" width=\"1050.97\" height=\"64\" rotation=\"-269.305\"/>\n  <object id=\"60\" type=\"static_wall\" gid=\"1\" x=\"4379.25\" y=\"5234.2\" width=\"486.268\" height=\"64\" rotation=\"-228.944\"/>\n  <object id=\"61\" type=\"static_wall\" gid=\"1\" x=\"4177.74\" y=\"4889.8\" width=\"462.332\" height=\"64\" rotation=\"-293.741\"/>\n  <object id=\"62\" type=\"static_wall\" gid=\"1\" x=\"2332.97\" y=\"4940\" width=\"1902.06\" height=\"64\"/>\n  <object id=\"63\" type=\"static_wall\" gid=\"1\" x=\"4764.16\" y=\"4233.18\" width=\"682.995\" height=\"64\" rotation=\"-310.725\"/>\n  <object id=\"64\" type=\"static_wall\" gid=\"1\" x=\"2560.97\" y=\"4252\" width=\"2262.06\" height=\"64\"/>\n  <object id=\"65\" type=\"static_wall\" gid=\"1\" x=\"2368.63\" y=\"4876\" width=\"754.696\" height=\"64\" rotation=\"-154.677\"/>\n  <object id=\"66\" type=\"static_wall\" gid=\"1\" x=\"2353.62\" y=\"3910.91\" width=\"486.268\" height=\"64\" rotation=\"-421.123\"/>\n  <object id=\"67\" type=\"static_wall\" gid=\"1\" x=\"2623.25\" y=\"4205.05\" width=\"462.332\" height=\"64\" rotation=\"-485.92\"/>\n  <object id=\"68\" type=\"static_wall\" gid=\"1\" x=\"1732.36\" y=\"4592.81\" width=\"668.559\" height=\"64\" rotation=\"-117.117\"/>\n  <object id=\"69\" type=\"static_wall\" gid=\"1\" x=\"1426.09\" y=\"4044.43\" width=\"831.673\" height=\"64\" rotation=\"-71.664\"/>\n  <object id=\"70\" type=\"static_wall\" gid=\"1\" x=\"1656.32\" y=\"3296.72\" width=\"831.673\" height=\"64\" rotation=\"-41.1071\"/>\n  <object id=\"71\" type=\"static_wall\" gid=\"1\" x=\"2224.97\" y=\"2776\" width=\"2262.06\" height=\"64\"/>\n  <object id=\"72\" type=\"static_wall\" gid=\"1\" x=\"2532.97\" y=\"3520\" width=\"3070.06\" height=\"64\"/>\n  <object id=\"73\" type=\"static_wall\" gid=\"1\" x=\"6186.46\" y=\"2727.01\" width=\"971.411\" height=\"64\" rotation=\"-228.944\"/>\n  <object id=\"74\" type=\"static_wall\" gid=\"1\" x=\"6177.98\" y=\"1735.41\" width=\"1050.97\" height=\"64\" rotation=\"-269.305\"/>\n  <object id=\"75\" type=\"static_wall\" gid=\"1\" x=\"5941.52\" y=\"933.724\" width=\"868.153\" height=\"64\" rotation=\"-286.076\"/>\n  <object id=\"76\" type=\"static_wall\" gid=\"1\" x=\"4480.16\" y=\"2788\" width=\"954.359\" height=\"64\" rotation=\"-41.1071\"/>\n  <object id=\"77\" type=\"static_wall\" gid=\"1\" x=\"5191.78\" y=\"2155.88\" width=\"850.54\" height=\"64\" rotation=\"-88.8544\"/>\n  <object id=\"78\" type=\"static_wall\" gid=\"1\" x=\"5199.43\" y=\"1313.09\" width=\"894.195\" height=\"64\" rotation=\"-131.198\"/>\n  <object id=\"79\" type=\"static_wall\" gid=\"1\" x=\"269.318\" y=\"2148.83\" width=\"125.12\" height=\"135.573\" rotation=\"-406.061\"/>\n  <object id=\"80\" type=\"static_wall\" gid=\"1\" x=\"584.782\" y=\"2335.49\" width=\"125.12\" height=\"135.573\" rotation=\"-362.733\"/>\n  <object id=\"81\" type=\"static_wall\" gid=\"1\" x=\"366.808\" y=\"2937.16\" width=\"125.12\" height=\"135.573\" rotation=\"-334.095\"/>\n  <object id=\"82\" type=\"static_wall\" gid=\"1\" x=\"719.843\" y=\"3261.47\" width=\"125.12\" height=\"135.573\" rotation=\"-322.66\"/>\n  <object id=\"83\" type=\"static_wall\" gid=\"1\" x=\"453.987\" y=\"3761.35\" width=\"125.12\" height=\"135.573\" rotation=\"-397.286\"/>\n  <object id=\"84\" type=\"static_wall\" gid=\"1\" x=\"682.979\" y=\"4489.69\" width=\"125.12\" height=\"135.573\" rotation=\"-666.587\"/>\n  <object id=\"85\" type=\"static_wall\" gid=\"1\" x=\"15.44\" y=\"3272.21\" width=\"125.12\" height=\"135.573\" rotation=\"-322.66\"/>\n  <object id=\"86\" type=\"static_wall\" gid=\"1\" x=\"299.44\" y=\"4246.21\" width=\"170.345\" height=\"138.845\" rotation=\"-397.286\"/>\n  <object id=\"87\" type=\"static_wall\" gid=\"1\" x=\"4690.48\" y=\"5567.58\" width=\"125.12\" height=\"135.573\" rotation=\"-674.297\"/>\n  <object id=\"88\" type=\"static_wall\" gid=\"1\" x=\"4400.2\" y=\"6259.15\" width=\"125.12\" height=\"135.573\" rotation=\"-630.969\"/>\n  <object id=\"89\" type=\"static_wall\" gid=\"1\" x=\"3901.53\" y=\"5878.75\" width=\"125.12\" height=\"135.573\" rotation=\"-602.331\"/>\n  <object id=\"90\" type=\"static_wall\" gid=\"1\" x=\"3299.04\" y=\"6154.51\" width=\"125.12\" height=\"135.573\" rotation=\"-665.522\"/>\n  <object id=\"91\" type=\"static_wall\" gid=\"1\" x=\"2242\" y=\"6222.97\" width=\"125.12\" height=\"135.573\" rotation=\"-934.823\"/>\n  <object id=\"92\" type=\"static_wall\" gid=\"1\" x=\"3479.45\" y=\"5593.24\" width=\"125.12\" height=\"135.573\" rotation=\"-590.896\"/>\n  <object id=\"93\" type=\"static_wall\" gid=\"1\" x=\"2521.17\" y=\"5939.11\" width=\"170.345\" height=\"138.845\" rotation=\"-665.522\"/>\n  <object id=\"94\" type=\"static_wall\" gid=\"1\" x=\"4888.22\" y=\"3016.42\" width=\"225.227\" height=\"1024.08\" rotation=\"-674.297\"/>\n  <object id=\"95\" gid=\"1\" x=\"2857.51\" y=\"692\" width=\"13.98\" height=\"660\"/>\n  <object id=\"96\" type=\"static_wall\" gid=\"1\" x=\"6003.05\" y=\"923.744\" width=\"1374.54\" height=\"64\" rotation=\"-137.816\"/>\n </objectgroup>\n</map>\n";
maps['square'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.2\" tiledversion=\"1.3.5\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"3\" nextobjectid=\"69\">\n <tileset firstgid=\"1\" name=\"Long Map Tileset\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"../../wall.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"2\" name=\"Object Layer 1\">\n  <object id=\"1\" type=\"static_wall\" gid=\"1\" x=\"0\" y=\"4096\" width=\"64\" height=\"4096\"/>\n  <object id=\"2\" type=\"static_wall\" gid=\"1\" x=\"0\" y=\"4096\" width=\"4096\" height=\"64\"/>\n  <object id=\"4\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"64\" width=\"4032\" height=\"64\"/>\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"466\" y=\"551\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"8\" type=\"static_wall\" gid=\"1\" x=\"960\" y=\"960\" width=\"937.091\" height=\"64\" rotation=\"-90\"/>\n  <object id=\"10\" name=\"flag_red\" type=\"entity_flag\" x=\"2560\" y=\"448\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"11\" name=\"flag_blue\" type=\"entity_flag\" x=\"1536\" y=\"3712\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" type=\"static_wall\" gid=\"1\" x=\"965.301\" y=\"1349.86\" width=\"616.912\" height=\"42.1329\" rotation=\"-241.08\"/>\n  <object id=\"13\" type=\"static_wall\" gid=\"1\" x=\"531.646\" y=\"1518.71\" width=\"616.912\" height=\"42.1329\" rotation=\"-331.08\"/>\n  <object id=\"14\" type=\"static_wall\" gid=\"1\" x=\"1536\" y=\"704\" width=\"616.912\" height=\"42.1329\" rotation=\"-340.59\"/>\n  <object id=\"15\" type=\"static_wall\" gid=\"1\" x=\"1774.18\" y=\"1103.79\" width=\"616.912\" height=\"42.1329\" rotation=\"-430.591\"/>\n  <object id=\"18\" type=\"static_wall\" gid=\"1\" x=\"3148\" y=\"2782.78\" width=\"616.912\" height=\"42.1329\" rotation=\"-64.2778\"/>\n  <object id=\"19\" type=\"static_wall\" gid=\"1\" x=\"3571.56\" y=\"2590\" width=\"616.912\" height=\"42.1329\" rotation=\"-154.278\"/>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"210\" y=\"551\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"722\" y=\"551\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"465\" y=\"306\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"38\" type=\"static_wall\" gid=\"1\" x=\"4032\" y=\"4096\" width=\"64\" height=\"4096\"/>\n  <object id=\"39\" type=\"static_wall\" gid=\"1\" x=\"2977.42\" y=\"733.652\" width=\"722.36\" height=\"49.3346\" rotation=\"-337.2\"/>\n  <object id=\"40\" type=\"static_wall\" gid=\"1\" x=\"3228.13\" y=\"1217.46\" width=\"722.36\" height=\"49.3346\" rotation=\"-427.2\"/>\n  <object id=\"42\" type=\"static_wall\" gid=\"1\" x=\"2539\" y=\"3402.52\" width=\"616.912\" height=\"42.1329\" rotation=\"-139.642\"/>\n  <object id=\"43\" type=\"static_wall\" gid=\"1\" x=\"2459.5\" y=\"2944\" width=\"616.912\" height=\"42.1329\" rotation=\"-229.642\"/>\n  <object id=\"44\" type=\"static_wall\" gid=\"1\" x=\"3200\" y=\"4096\" width=\"937.091\" height=\"64\" rotation=\"-90\"/>\n  <object id=\"45\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3603\" y=\"3665\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"46\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3347\" y=\"3665\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"47\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3859\" y=\"3665\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"48\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3608.67\" y=\"3870\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"49\" type=\"static_wall\" gid=\"1\" x=\"1738.18\" y=\"1528.36\" width=\"616.912\" height=\"42.1329\"/>\n  <object id=\"53\" type=\"static_wall\" gid=\"1\" x=\"1735.27\" y=\"2599.03\" width=\"616.912\" height=\"42.1329\"/>\n  <object id=\"54\" type=\"static_wall\" gid=\"1\" x=\"1406.85\" y=\"1782.55\" width=\"462.367\" height=\"31.578\" rotation=\"-270\"/>\n  <object id=\"56\" type=\"static_wall\" gid=\"1\" x=\"2624\" y=\"1792\" width=\"462.367\" height=\"31.578\" rotation=\"-270\"/>\n  <object id=\"57\" type=\"static_wall\" gid=\"1\" x=\"1156.76\" y=\"3441.24\" width=\"722.36\" height=\"49.3346\" rotation=\"-516.141\"/>\n  <object id=\"58\" type=\"static_wall\" gid=\"1\" x=\"915.04\" y=\"2952.88\" width=\"722.36\" height=\"49.3346\" rotation=\"-606.141\"/>\n  <object id=\"59\" name=\"spawn_random\" type=\"entity_spawn\" x=\"576\" y=\"1728\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"60\" name=\"spawn_random\" type=\"entity_spawn\" x=\"1721.94\" y=\"582.061\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"61\" name=\"spawn_random\" type=\"entity_spawn\" x=\"3584\" y=\"768\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" name=\"spawn_random\" type=\"entity_spawn\" x=\"3456\" y=\"2432\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"63\" name=\"spawn_random\" type=\"entity_spawn\" x=\"2276.36\" y=\"3406.65\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"64\" name=\"spawn_random\" type=\"entity_spawn\" x=\"439.636\" y=\"3431.39\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"65\" name=\"spawn_random\" type=\"entity_spawn\" x=\"2669.94\" y=\"1519.39\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"66\" name=\"spawn_random\" type=\"entity_spawn\" x=\"1390.79\" y=\"2561.09\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"67\" type=\"static_wall\" gid=\"1\" x=\"2689.58\" y=\"1236.86\" width=\"383.698\" height=\"58.9533\" rotation=\"-314.452\"/>\n  <object id=\"68\" type=\"static_wall\" gid=\"1\" x=\"1093\" y=\"2573.55\" width=\"383.698\" height=\"58.9533\" rotation=\"-314.452\"/>\n </objectgroup>\n</map>\n";
maps['the_pit'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"8\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"14\" nextobjectid=\"190\">\n <properties>\n  <property name=\"backgroundColor\" type=\"color\" value=\"#ff231313\"/>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffe9d6d6\"/>\n  <property name=\"unconstrainCamera\" type=\"bool\" value=\"true\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"BG\" tilewidth=\"1024\" tileheight=\"1024\" tilecount=\"1\" columns=\"1\">\n  <image source=\"thepit_bg.jpg\" width=\"1024\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"PitProps\" tilewidth=\"512\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"256\" height=\"256\" source=\"pitprop01.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"pitprop02.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"512\" height=\"256\" source=\"pitprop03.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"13\" name=\"Background\" locked=\"1\">\n  <object id=\"97\" gid=\"1\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"98\" gid=\"1\" x=\"1024\" y=\"0\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"99\" gid=\"1\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"100\" gid=\"1\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" offsetx=\"53.3333\" offsety=\"-16\">\n  <object id=\"101\" gid=\"2\" x=\"694.831\" y=\"1116.48\" width=\"256\" height=\"256\" rotation=\"347.841\"/>\n  <object id=\"102\" gid=\"4\" x=\"539.642\" y=\"1269.47\" width=\"512\" height=\"256\" rotation=\"39.0072\"/>\n  <object id=\"103\" gid=\"3\" x=\"476.794\" y=\"852.874\" width=\"256\" height=\"256\" rotation=\"329.898\"/>\n  <object id=\"111\" gid=\"4\" x=\"1395.69\" y=\"745.75\" width=\"512\" height=\"256\" rotation=\"223.231\"/>\n  <object id=\"113\" gid=\"2\" x=\"1523.77\" y=\"1661.46\" width=\"256\" height=\"256\" rotation=\"266.33\"/>\n  <object id=\"115\" gid=\"3\" x=\"1488.56\" y=\"1150.91\" width=\"256\" height=\"256\" rotation=\"240.984\"/>\n  <object id=\"136\" type=\"static_wall\" x=\"432.667\" y=\"724\">\n   <polygon points=\"0,0 105.333,-182.667 209.333,-3.33333\"/>\n  </object>\n  <object id=\"138\" type=\"static_wall\" x=\"432.667\" y=\"723.333\">\n   <polygon points=\"0,0 105.333,-182.667 209.333,-3.33333\"/>\n  </object>\n  <object id=\"139\" type=\"static_wall\" x=\"1175.06\" y=\"1085.31\" rotation=\"31.4492\">\n   <polygon points=\"0,0 105.333,-182.667 209.333,-3.33333\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"260.215\" y=\"1800.94\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"1783.36\" y=\"271.178\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"286.454\" y=\"1532.7\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1767.21\" y=\"560.121\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-135\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"143\" type=\"static_wall\" x=\"747.65\" y=\"898.626\" rotation=\"0.202958\">\n   <polygon points=\"0,0 174,-39.5 211.5,124\"/>\n  </object>\n  <object id=\"144\" type=\"static_wall\" x=\"1376.74\" y=\"1616.84\" rotation=\"278.953\">\n   <polygon points=\"0,0 174,-39.5 211.5,124\"/>\n  </object>\n  <object id=\"128\" type=\"static_wall\" x=\"-12.5795\" y=\"1126.33\" width=\"211.277\" height=\"170.546\" rotation=\"270\"/>\n  <object id=\"132\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1572.85\" y=\"480.121\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-135\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"133\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1464\" y=\"336\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-135\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"134\" name=\"spawn_red\" type=\"entity_spawn\" x=\"469.697\" y=\"1587.88\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"135\" name=\"spawn_red\" type=\"entity_spawn\" x=\"563.636\" y=\"1769.7\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"147\" type=\"static_wall\" x=\"-31.5\" y=\"791\">\n   <polygon points=\"0,0 182,146.5 215,100.5 215.5,35.5\"/>\n  </object>\n  <object id=\"148\" type=\"static_wall\" x=\"183.5\" y=\"641\">\n   <polygon points=\"0,0 82.5,102.5 -2.5,211.5 -215.5,113.5\"/>\n  </object>\n  <object id=\"149\" type=\"static_wall\" x=\"-37.3333\" y=\"589.333\">\n   <polygon points=\"0,0 228,80.6667 168,-191.333\"/>\n  </object>\n  <object id=\"150\" type=\"static_wall\" x=\"-69.3333\" y=\"319.333\">\n   <polygon points=\"0,0 184,-81.3333 236,19.3333 191.333,139.333\"/>\n  </object>\n  <object id=\"151\" type=\"static_wall\" x=\"-47.0794\" y=\"290.755\" width=\"211.277\" height=\"170.546\" rotation=\"279.188\"/>\n  <object id=\"152\" type=\"static_wall\" x=\"128.141\" y=\"-31.3644\" width=\"240.3\" height=\"193.017\" rotation=\"358.397\"/>\n  <object id=\"153\" type=\"static_wall\" x=\"326.748\" y=\"-27.4445\" width=\"345.685\" height=\"182.618\" rotation=\"5.19761\"/>\n  <object id=\"154\" type=\"static_wall\" x=\"640.545\" y=\"181.864\">\n   <polygon points=\"0,0 103,84 214.5,-2 120,-232\"/>\n  </object>\n  <object id=\"155\" type=\"static_wall\" x=\"822.667\" y=\"-76.6667\">\n   <polygon points=\"0,0 0,258.667 68,261.333 142,209.333\"/>\n  </object>\n  <object id=\"156\" type=\"static_wall\" x=\"921.575\" y=\"-12.6023\" width=\"211.277\" height=\"170.546\"/>\n  <object id=\"157\" type=\"static_wall\" x=\"1256.91\" y=\"-31.5228\" rotation=\"90\">\n   <polygon points=\"0,0 182,146.5 215,100.5 215.5,35.5\"/>\n  </object>\n  <object id=\"158\" type=\"static_wall\" x=\"1406.91\" y=\"183.477\" rotation=\"90\">\n   <polygon points=\"0,0 82.5,102.5 -2.5,211.5 -215.5,113.5\"/>\n  </object>\n  <object id=\"159\" type=\"static_wall\" x=\"1458.57\" y=\"-37.3561\" rotation=\"90\">\n   <polygon points=\"0,0 228,80.6667 168,-191.333\"/>\n  </object>\n  <object id=\"160\" type=\"static_wall\" x=\"1730.32\" y=\"-67.6061\" rotation=\"90\">\n   <polygon points=\"0,0 184,-81.3333 236,19.3333 191.333,139.333\"/>\n  </object>\n  <object id=\"161\" type=\"static_wall\" x=\"1757.15\" y=\"-47.1022\" width=\"211.277\" height=\"170.546\" rotation=\"9.188\"/>\n  <object id=\"162\" type=\"static_wall\" x=\"2079.27\" y=\"128.118\" width=\"240.3\" height=\"193.017\" rotation=\"88.397\"/>\n  <object id=\"163\" type=\"static_wall\" x=\"2075.35\" y=\"326.725\" width=\"345.685\" height=\"182.618\" rotation=\"95.1976\"/>\n  <object id=\"164\" type=\"static_wall\" x=\"1866.41\" y=\"639.977\" rotation=\"90\">\n   <polygon points=\"0,0 103,84 214.5,-2 120,-232\"/>\n  </object>\n  <object id=\"165\" type=\"static_wall\" x=\"2124.57\" y=\"822.644\" rotation=\"90\">\n   <polygon points=\"0,0 0,258.667 68,261.333 142,209.333\"/>\n  </object>\n  <object id=\"166\" type=\"static_wall\" x=\"2060.61\" y=\"922.81\" width=\"211.277\" height=\"170.546\" rotation=\"90\"/>\n  <object id=\"167\" type=\"static_wall\" x=\"2079.53\" y=\"1258.14\" rotation=\"180\">\n   <polygon points=\"0,0 182,146.5 215,100.5 215.5,35.5\"/>\n  </object>\n  <object id=\"168\" type=\"static_wall\" x=\"1864.53\" y=\"1408.14\" rotation=\"180\">\n   <polygon points=\"0,0 82.5,102.5 -2.5,211.5 -215.5,113.5\"/>\n  </object>\n  <object id=\"169\" type=\"static_wall\" x=\"2085.36\" y=\"1459.81\" rotation=\"180\">\n   <polygon points=\"0,0 228,80.6667 168,-191.333\"/>\n  </object>\n  <object id=\"170\" type=\"static_wall\" x=\"2117.36\" y=\"1729.81\" rotation=\"180\">\n   <polygon points=\"0,0 184,-81.3333 236,19.3333 191.333,139.333\"/>\n  </object>\n  <object id=\"171\" type=\"static_wall\" x=\"2095.11\" y=\"1758.39\" width=\"211.277\" height=\"170.546\" rotation=\"99.188\"/>\n  <object id=\"172\" type=\"static_wall\" x=\"1919.89\" y=\"2080.5\" width=\"240.3\" height=\"193.017\" rotation=\"178.397\"/>\n  <object id=\"173\" type=\"static_wall\" x=\"1721.28\" y=\"2076.58\" width=\"345.685\" height=\"182.618\" rotation=\"185.198\"/>\n  <object id=\"174\" type=\"static_wall\" x=\"1407.49\" y=\"1867.28\" rotation=\"180\">\n   <polygon points=\"0,0 103,84 214.5,-2 120,-232\"/>\n  </object>\n  <object id=\"175\" type=\"static_wall\" x=\"1225.36\" y=\"2125.81\" rotation=\"180\">\n   <polygon points=\"0,0 0,258.667 68,261.333 142,209.333\"/>\n  </object>\n  <object id=\"176\" type=\"static_wall\" x=\"1126.46\" y=\"2061.74\" width=\"211.277\" height=\"170.546\" rotation=\"180\"/>\n  <object id=\"177\" type=\"static_wall\" x=\"791.122\" y=\"2080.66\" rotation=\"270\">\n   <polygon points=\"0,0 182,146.5 215,100.5 215.5,35.5\"/>\n  </object>\n  <object id=\"178\" type=\"static_wall\" x=\"641.122\" y=\"1865.66\" rotation=\"270\">\n   <polygon points=\"0,0 82.5,102.5 -2.5,211.5 -215.5,113.5\"/>\n  </object>\n  <object id=\"179\" type=\"static_wall\" x=\"589.462\" y=\"2086.5\" rotation=\"270\">\n   <polygon points=\"0,0 228,80.6667 168,-191.333\"/>\n  </object>\n  <object id=\"180\" type=\"static_wall\" x=\"317.712\" y=\"2116.75\" rotation=\"270\">\n   <polygon points=\"0,0 184,-81.3333 236,19.3333 191.333,139.333\"/>\n  </object>\n  <object id=\"181\" type=\"static_wall\" x=\"290.882\" y=\"2096.24\" width=\"211.277\" height=\"170.546\" rotation=\"189.188\"/>\n  <object id=\"182\" type=\"static_wall\" x=\"-31.2384\" y=\"1921.02\" width=\"240.3\" height=\"193.017\" rotation=\"268.397\"/>\n  <object id=\"183\" type=\"static_wall\" x=\"-27.3184\" y=\"1722.42\" width=\"345.685\" height=\"182.618\" rotation=\"275.198\"/>\n  <object id=\"184\" type=\"static_wall\" x=\"181.622\" y=\"1409.16\" rotation=\"270\">\n   <polygon points=\"0,0 103,84 214.5,-2 120,-232\"/>\n  </object>\n  <object id=\"185\" type=\"static_wall\" x=\"-76.5384\" y=\"1226.5\" rotation=\"270\">\n   <polygon points=\"0,0 0,258.667 68,261.333 142,209.333\"/>\n  </object>\n  <object id=\"186\" type=\"static_wall\" x=\"1290.81\" y=\"833.292\" width=\"329.048\" height=\"123.877\" rotation=\"222.879\"/>\n  <object id=\"187\" type=\"static_wall\" x=\"959\" y=\"525.5\">\n   <polygon points=\"0,0 101.02,93.4883 174.977,-6.88672\"/>\n  </object>\n  <object id=\"188\" type=\"static_wall\" x=\"743.27\" y=\"1140.05\" width=\"329.048\" height=\"123.877\" rotation=\"38.4271\"/>\n  <object id=\"189\" type=\"static_wall\" x=\"1097.7\" y=\"1421.25\" rotation=\"175.548\">\n   <polygon points=\"0,0 101.02,93.4883 174.977,-6.88672\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['tractorfactory'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"9\" nextobjectid=\"56\">\n <tileset firstgid=\"1\" name=\"factory_tileset\" tilewidth=\"4096\" tileheight=\"2048\" tilecount=\"6\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"256\" height=\"256\" source=\"factory_1x1.jpg\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"512\" height=\"256\" source=\"factory_2x1A.jpg\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"512\" height=\"256\" source=\"factory_2x1B.jpg\"/>\n  </tile>\n  <tile id=\"3\">\n   <image width=\"512\" height=\"256\" source=\"factory_2x1C.jpg\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"512\" height=\"512\" source=\"factory_2x2.jpg\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"4096\" height=\"2048\" source=\"tractorfactory_bg.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"8\" name=\"Background\">\n  <object id=\"55\" gid=\"6\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Object Layer 1\">\n  <object id=\"2\" type=\"static_wall\" gid=\"5\" x=\"369.898\" y=\"1041.1\" width=\"512\" height=\"512\" rotation=\"346.135\"/>\n  <object id=\"3\" type=\"static_wall\" gid=\"5\" x=\"3069.82\" y=\"863.221\" width=\"512\" height=\"512\" rotation=\"341.281\"/>\n  <object id=\"4\" type=\"static_wall\" gid=\"5\" x=\"3448.12\" y=\"1505.94\" width=\"512\" height=\"512\"/>\n  <object id=\"5\" type=\"static_wall\" gid=\"3\" x=\"1134.4\" y=\"1318.81\" width=\"512\" height=\"256\" rotation=\"345\"/>\n  <object id=\"6\" type=\"static_wall\" gid=\"4\" x=\"2539.7\" y=\"1527.04\" width=\"512\" height=\"256\" rotation=\"300\"/>\n  <object id=\"9\" type=\"static_wall\" gid=\"1\" x=\"1552\" y=\"588\" width=\"256\" height=\"256\"/>\n  <object id=\"11\" type=\"static_wall\" gid=\"1\" x=\"302.255\" y=\"1318.01\" width=\"256\" height=\"256\" rotation=\"130.275\"/>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"690\" y=\"1383.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"693.333\" y=\"1232.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3326.67\" y=\"1424.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.33\" y=\"974.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3322.33\" y=\"1128.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"693.334\" y=\"1536.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"20\" type=\"static_wall\" x=\"605\" y=\"-7.33333\" width=\"3102.61\" height=\"138\"/>\n  <object id=\"22\" type=\"static_wall\" x=\"488.273\" y=\"1937.61\" width=\"3057.15\" height=\"138\"/>\n  <object id=\"23\" type=\"static_wall\" x=\"2067.1\" y=\"-221.149\" width=\"395.943\" height=\"462.164\" rotation=\"42.5838\"/>\n  <object id=\"24\" type=\"static_wall\" x=\"2637.75\" y=\"-138.012\" width=\"791.533\" height=\"484.087\" rotation=\"138.403\"/>\n  <object id=\"25\" type=\"static_wall\" x=\"2404.06\" y=\"2055.37\" width=\"703.35\" height=\"537.335\" rotation=\"138.403\"/>\n  <object id=\"26\" type=\"static_wall\" x=\"2046.5\" y=\"1653.63\" width=\"470.265\" height=\"384.579\" rotation=\"40.9785\"/>\n  <object id=\"27\" type=\"static_wall\" x=\"117\" y=\"449.695\" width=\"1178.61\" height=\"138\" rotation=\"90\"/>\n  <object id=\"31\" type=\"static_wall\" x=\"755.57\" y=\"6.26213\" width=\"918.169\" height=\"590.634\" rotation=\"139.508\"/>\n  <object id=\"32\" type=\"static_wall\" x=\"286.19\" y=\"2452.62\" width=\"834.035\" height=\"603.805\" rotation=\"220.256\"/>\n  <object id=\"33\" type=\"static_wall\" x=\"4118.65\" y=\"460.333\" width=\"1178.61\" height=\"138\" rotation=\"90\"/>\n  <object id=\"34\" type=\"static_wall\" x=\"3642.03\" y=\"-501.952\" width=\"1163.06\" height=\"578.085\" rotation=\"40.3549\"/>\n  <object id=\"35\" type=\"static_wall\" x=\"3291.63\" y=\"2109.62\" width=\"1077.21\" height=\"569.247\" rotation=\"319.41\"/>\n  <object id=\"39\" type=\"static_wall\" gid=\"2\" x=\"851.606\" y=\"402.939\" width=\"512\" height=\"256\"/>\n  <object id=\"40\" type=\"static_wall\" gid=\"1\" x=\"1474.76\" y=\"1935.15\" width=\"256\" height=\"256\"/>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1205.67\" y=\"640.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"2660.33\" y=\"1706.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"43\" type=\"static_wall\" gid=\"2\" x=\"2107.24\" y=\"952.541\" width=\"125.582\" height=\"62.7911\" rotation=\"298.291\"/>\n  <object id=\"44\" type=\"static_wall\" gid=\"2\" x=\"2172.46\" y=\"833.188\" width=\"125.582\" height=\"62.7911\" rotation=\"298.291\"/>\n  <object id=\"45\" type=\"static_wall\" gid=\"2\" x=\"2235.21\" y=\"717.188\" width=\"125.582\" height=\"62.7911\" rotation=\"298.291\"/>\n  <object id=\"46\" type=\"static_wall\" gid=\"2\" x=\"1596.25\" y=\"1564.12\" width=\"125.582\" height=\"62.7911\" rotation=\"-16.4388\"/>\n  <object id=\"47\" type=\"static_wall\" gid=\"2\" x=\"1744.64\" y=\"1515.83\" width=\"125.582\" height=\"62.7911\" rotation=\"319.405\"/>\n  <object id=\"48\" type=\"static_wall\" gid=\"2\" x=\"1852.46\" y=\"1413.86\" width=\"125.582\" height=\"62.7911\" rotation=\"300.183\"/>\n  <object id=\"49\" type=\"static_wall\" gid=\"2\" x=\"854.183\" y=\"1856.99\" width=\"125.582\" height=\"62.7911\" rotation=\"343.526\"/>\n  <object id=\"50\" type=\"static_wall\" gid=\"2\" x=\"1111.79\" y=\"1780.58\" width=\"125.582\" height=\"62.7911\" rotation=\"343.526\"/>\n  <object id=\"51\" type=\"static_wall\" gid=\"2\" x=\"1238.51\" y=\"1742.7\" width=\"125.582\" height=\"62.7911\" rotation=\"343.526\"/>\n  <object id=\"52\" type=\"static_wall\" gid=\"2\" x=\"2387.62\" y=\"423.809\" width=\"125.582\" height=\"62.7911\" rotation=\"322.043\"/>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"693.333\" y=\"1092.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3328\" y=\"1280\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['trainyard'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"13\" nextobjectid=\"106\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc4b4a8\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"MapProps\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"512\" height=\"256\" source=\"block01.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"512\" height=\"256\" source=\"block02.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"512\" height=\"256\" source=\"block03.png\"/>\n  </tile>\n  <tile id=\"3\">\n   <image width=\"2048\" height=\"2048\" source=\"bg.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\">\n  <object id=\"101\" gid=\"4\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"105\" gid=\"4\" x=\"4096\" y=\"0\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\">\n  <object id=\"63\" gid=\"1\" x=\"798.788\" y=\"677.576\" width=\"512\" height=\"256\"/>\n  <object id=\"64\" gid=\"2\" x=\"807.636\" y=\"1579.52\" width=\"512\" height=\"256\"/>\n  <object id=\"65\" gid=\"3\" x=\"1699.33\" y=\"1172.36\" width=\"512\" height=\"256\" rotation=\"270\"/>\n  <object id=\"66\" type=\"static_wall\" x=\"830.165\" y=\"552.195\" width=\"161.97\" height=\"160.946\" rotation=\"315\"/>\n  <object id=\"67\" type=\"static_wall\" x=\"943.362\" y=\"437.833\" width=\"230.277\" height=\"227.667\"/>\n  <object id=\"68\" type=\"static_wall\" x=\"1059.93\" y=\"552.11\" width=\"161.97\" height=\"161.3\" rotation=\"315\"/>\n  <object id=\"69\" gid=\"1\" x=\"3005.2\" y=\"531.18\" width=\"512\" height=\"256\" rotation=\"45\"/>\n  <object id=\"70\" type=\"static_wall\" x=\"3116.04\" y=\"464.709\" width=\"161.97\" height=\"160.946\"/>\n  <object id=\"71\" type=\"static_wall\" x=\"3276.95\" y=\"463.885\" width=\"230.277\" height=\"227.667\" rotation=\"45\"/>\n  <object id=\"72\" type=\"static_wall\" x=\"3278.57\" y=\"627.117\" width=\"161.97\" height=\"161.3\"/>\n  <object id=\"73\" gid=\"1\" x=\"2677.33\" y=\"853.514\" width=\"512\" height=\"256\" rotation=\"45\"/>\n  <object id=\"74\" type=\"static_wall\" x=\"2788.17\" y=\"787.043\" width=\"161.97\" height=\"160.946\"/>\n  <object id=\"75\" type=\"static_wall\" x=\"2949.08\" y=\"786.219\" width=\"230.277\" height=\"227.667\" rotation=\"45\"/>\n  <object id=\"76\" type=\"static_wall\" x=\"2950.7\" y=\"949.451\" width=\"161.97\" height=\"161.3\"/>\n  <object id=\"77\" gid=\"1\" x=\"3372.71\" y=\"1202.31\" width=\"512\" height=\"256\" rotation=\"135\"/>\n  <object id=\"78\" type=\"static_wall\" x=\"3439.18\" y=\"1313.15\" width=\"161.97\" height=\"160.946\" rotation=\"90\"/>\n  <object id=\"79\" type=\"static_wall\" x=\"3440\" y=\"1474.06\" width=\"230.277\" height=\"227.667\" rotation=\"135\"/>\n  <object id=\"80\" type=\"static_wall\" x=\"3276.77\" y=\"1475.68\" width=\"161.97\" height=\"161.3\" rotation=\"90\"/>\n  <object id=\"84\" type=\"static_wall\" x=\"1645.33\" y=\"664\">\n   <polygon points=\"0,0 50,0.666667 50,304 -148.667,504 -198,504 -197.333,198.667\"/>\n  </object>\n  <object id=\"90\" type=\"static_wall\" x=\"812.632\" y=\"1451.57\" width=\"170.809\" height=\"172.613\" rotation=\"315\"/>\n  <object id=\"91\" type=\"static_wall\" x=\"931.329\" y=\"1384.88\" width=\"230.277\" height=\"135.667\"/>\n  <object id=\"92\" type=\"static_wall\" x=\"1072.56\" y=\"1452.49\" width=\"172.341\" height=\"172.142\" rotation=\"315\"/>\n  <object id=\"93\" gid=\"2\" x=\"2188\" y=\"1487.32\" width=\"512\" height=\"256\"/>\n  <object id=\"94\" type=\"static_wall\" x=\"2193\" y=\"1359.37\" width=\"170.809\" height=\"172.613\" rotation=\"315\"/>\n  <object id=\"95\" type=\"static_wall\" x=\"2311.69\" y=\"1292.68\" width=\"230.277\" height=\"135.667\"/>\n  <object id=\"96\" type=\"static_wall\" x=\"2452.92\" y=\"1360.29\" width=\"172.341\" height=\"172.142\" rotation=\"315\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"471\" y=\"1120.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"474.333\" y=\"969.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3740.67\" y=\"1292.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3734.33\" y=\"842.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3736.33\" y=\"996.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"474.334\" y=\"1273.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"20\" type=\"static_wall\" x=\"594.917\" y=\"39.9167\" width=\"1193.61\" height=\"90\"/>\n  <object id=\"22\" type=\"static_wall\" x=\"622.648\" y=\"1935.69\" width=\"1106.74\" height=\"146.5\"/>\n  <object id=\"23\" type=\"static_wall\" x=\"1799.08\" y=\"68.0069\" width=\"395.943\" height=\"77.1605\" rotation=\"41\"/>\n  <object id=\"24\" type=\"static_wall\" x=\"2366.04\" y=\"105.328\" width=\"424.943\" height=\"77.1605\" rotation=\"138.403\"/>\n  <object id=\"25\" type=\"static_wall\" x=\"2097.74\" y=\"1711.37\" width=\"427.556\" height=\"77.1605\" rotation=\"138.403\"/>\n  <object id=\"26\" type=\"static_wall\" x=\"2046.5\" y=\"1653.63\" width=\"470.265\" height=\"77.1605\" rotation=\"40.9785\"/>\n  <object id=\"27\" type=\"static_wall\" x=\"116.333\" y=\"541.028\" width=\"1087.61\" height=\"138\" rotation=\"90\"/>\n  <object id=\"31\" type=\"static_wall\" x=\"636.273\" y=\"106.842\" width=\"694.045\" height=\"138\" rotation=\"139.508\"/>\n  <object id=\"32\" type=\"static_wall\" x=\"554.359\" y=\"2038.06\" width=\"668.503\" height=\"126.688\" rotation=\"219\"/>\n  <object id=\"33\" type=\"static_wall\" x=\"4120.65\" y=\"460\" width=\"1178.61\" height=\"138\" rotation=\"90\"/>\n  <object id=\"34\" type=\"static_wall\" x=\"3543.23\" y=\"-6.60023\" width=\"718.61\" height=\"138\" rotation=\"39\"/>\n  <object id=\"35\" type=\"static_wall\" x=\"3468.44\" y=\"1933.09\" width=\"718.61\" height=\"138\" rotation=\"320\"/>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1024\" y=\"1792\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"3072\" y=\"256\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"474.333\" y=\"829.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3742\" y=\"1148\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"57\" type=\"static_wall\" x=\"2351.34\" y=\"20.2953\" width=\"1128.19\" height=\"90\" rotation=\"0.05\"/>\n  <object id=\"58\" type=\"static_wall\" x=\"2343.96\" y=\"1921.42\" width=\"1148.07\" height=\"146.5\"/>\n  <object id=\"59\" type=\"static_wall\" x=\"1746.64\" y=\"1273.01\" width=\"75.4583\" height=\"252.841\" rotation=\"45\"/>\n  <object id=\"60\" type=\"static_wall\" x=\"1955.82\" y=\"1062.03\" width=\"75.4583\" height=\"252.841\" rotation=\"45\"/>\n  <object id=\"61\" type=\"static_wall\" x=\"2266.41\" y=\"753.013\" width=\"75.4583\" height=\"252.841\" rotation=\"45\"/>\n  <object id=\"62\" type=\"static_wall\" x=\"2475.59\" y=\"542.033\" width=\"75.4583\" height=\"252.841\" rotation=\"45\"/>\n </objectgroup>\n</map>\n";
maps['tutorial'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"12\" height=\"4\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"13\" nextobjectid=\"235\">\n <properties>\n  <property name=\"backgroundColor\" type=\"color\" value=\"#ff64644a\"/>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc4b4a8\"/>\n  <property name=\"unconstrainCamera\" type=\"bool\" value=\"true\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"MapProps\" tilewidth=\"2048\" tileheight=\"1024\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"1024\" height=\"1024\" source=\"bg_01.jpg\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"2048\" height=\"1024\" source=\"bg_02.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"130\" gid=\"5\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"131\" gid=\"6\" x=\"1024\" y=\"1024\" width=\"2048\" height=\"1024\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\">\n  <object id=\"127\" name=\"Move To Point\" type=\"entity_spawn\" x=\"873.67\" y=\"306\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"118\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1521.67\" y=\"160\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"108\" name=\"Move To Point\" type=\"entity_spawn\" x=\"1046\" y=\"738.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"107\" name=\"Move To Point\" type=\"entity_spawn\" x=\"1524.33\" y=\"522.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"106\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1765\" y=\"163\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"256\" y=\"818\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"132\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2003\" y=\"165\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"133\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2293\" y=\"130.5\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"134\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2832\" y=\"791\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"135\" name=\"Move To Point\" type=\"entity_spawn\" x=\"1773\" y=\"507\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"136\" name=\"Move To Point\" type=\"entity_spawn\" x=\"2010\" y=\"515\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"137\" name=\"Move To Point\" type=\"entity_spawn\" x=\"2162\" y=\"593\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"138\" name=\"Move To Point\" type=\"entity_spawn\" x=\"2245\" y=\"755\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"31\" type=\"static_wall\" x=\"144.167\" y=\"495.827\" width=\"90.372\" height=\"363.566\" rotation=\"34.7852\"/>\n  <object id=\"139\" type=\"static_wall\" x=\"2470.92\" y=\"229.577\" width=\"112.045\" height=\"163.5\"/>\n  <object id=\"140\" type=\"static_wall\" x=\"-67.186\" y=\"781.55\" width=\"90.372\" height=\"136.233\"/>\n  <object id=\"141\" type=\"static_wall\" x=\"-59.6563\" y=\"911.47\" width=\"90.372\" height=\"136.233\" rotation=\"-32.9903\"/>\n  <object id=\"142\" type=\"static_wall\" x=\"46.814\" y=\"975.217\" width=\"681.705\" height=\"49.5663\"/>\n  <object id=\"143\" type=\"static_wall\" x=\"847.923\" y=\"856.841\" width=\"90.372\" height=\"201.817\" rotation=\"45\"/>\n  <object id=\"152\" type=\"static_wall\" x=\"762.5\" y=\"446.5\">\n   <polygon points=\"0,0 26.5,-6.5 72,44 81,87.5 14.5,100\"/>\n  </object>\n  <object id=\"154\" type=\"static_wall\" x=\"775.5\" y=\"546\">\n   <polygon points=\"0,0 -40.5,160.5 28.5,250.5 123,236.5 68,-13.5\"/>\n  </object>\n  <object id=\"155\" type=\"static_wall\" x=\"802\" y=\"796.5\">\n   <polygon points=\"0,0 -10,29.5 6.5,99 109.5,46.5 95.5,-16.5\"/>\n  </object>\n  <object id=\"156\" type=\"static_wall\" x=\"837.584\" y=\"900.955\" width=\"90.372\" height=\"142.964\" rotation=\"-57.8675\"/>\n  <object id=\"157\" type=\"static_wall\" x=\"1121.46\" y=\"853.742\" width=\"90.372\" height=\"160.979\" rotation=\"-286.386\"/>\n  <object id=\"158\" type=\"static_wall\" x=\"1103\" y=\"858.5\">\n   <polygon points=\"0,0 79.5,-81.5 118.5,-78.5 280,158.5\"/>\n  </object>\n  <object id=\"159\" type=\"static_wall\" x=\"1332.31\" y=\"973.384\" width=\"948.372\" height=\"54.233\"/>\n  <object id=\"161\" type=\"static_wall\" x=\"2367.71\" y=\"820.883\" width=\"56.7844\" height=\"215.429\" rotation=\"45\"/>\n  <object id=\"162\" type=\"static_wall\" x=\"2348.31\" y=\"604.884\" width=\"59.872\" height=\"257.233\"/>\n  <object id=\"163\" type=\"static_wall\" x=\"2274.38\" y=\"589.786\" width=\"90.372\" height=\"148.254\" rotation=\"-45\"/>\n  <object id=\"165\" type=\"static_wall\" x=\"182.5\" y=\"580.5\">\n   <polygon points=\"0,0 109,56 152,32 172,-223\"/>\n  </object>\n  <object id=\"166\" type=\"static_wall\" x=\"377.048\" y=\"206.33\" width=\"73.7972\" height=\"220.423\" rotation=\"28.8958\"/>\n  <object id=\"169\" type=\"static_wall\" x=\"385.5\" y=\"282.5\">\n   <polygon points=\"0,0 221.5,-15 241.5,-32 274,-190.5\"/>\n  </object>\n  <object id=\"170\" type=\"static_wall\" x=\"609.935\" y=\"110.808\" width=\"224.648\" height=\"49.733\" rotation=\"-30\"/>\n  <object id=\"171\" type=\"static_wall\" x=\"766.032\" y=\"41.1199\" width=\"90.372\" height=\"154.95\" rotation=\"-54.6524\"/>\n  <object id=\"172\" type=\"static_wall\" x=\"904.8\" y=\"73.6962\" width=\"179.799\" height=\"58.233\" rotation=\"13.4126\"/>\n  <object id=\"173\" type=\"static_wall\" x=\"1003.93\" y=\"150.697\" width=\"76.9626\" height=\"439.481\" rotation=\"-16.6889\"/>\n  <object id=\"175\" type=\"static_wall\" x=\"1119\" y=\"532.5\">\n   <polygon points=\"0,0 24.5,81 160.5,50 181.5,-91.5\"/>\n  </object>\n  <object id=\"176\" type=\"static_wall\" x=\"461\" y=\"579.5\">\n   <polygon points=\"0,0 40,-118 133,-169.5 169.5,-94 122.5,23\"/>\n  </object>\n  <object id=\"179\" type=\"static_wall\" x=\"462\" y=\"580\">\n   <polygon points=\"0,0 72.5,166.5 90,173 141,131 147.5,122 116,-2\"/>\n  </object>\n  <object id=\"180\" type=\"static_wall\" x=\"1344.07\" y=\"332.244\" width=\"90.372\" height=\"170.673\" rotation=\"50.8889\"/>\n  <object id=\"182\" type=\"static_wall\" x=\"1352.31\" y=\"239.884\" width=\"90.372\" height=\"181.733\"/>\n  <object id=\"183\" type=\"static_wall\" x=\"1596.31\" y=\"241.384\" width=\"90.372\" height=\"182.233\"/>\n  <object id=\"185\" type=\"static_wall\" x=\"1596.5\" y=\"243\">\n   <polygon points=\"0,0 34,-35.5 53.5,-35.5 89,-1\"/>\n  </object>\n  <object id=\"186\" type=\"static_wall\" x=\"1631.81\" y=\"28.3835\" width=\"18.372\" height=\"184.233\"/>\n  <object id=\"187\" type=\"static_wall\" x=\"1598.5\" y=\"42\">\n   <polygon points=\"0,0 34.5,34.5 50.5,34.5 85,1\"/>\n  </object>\n  <object id=\"188\" type=\"static_wall\" x=\"1405.31\" y=\"-10.1165\" width=\"755.372\" height=\"57.733\"/>\n  <object id=\"193\" type=\"static_wall\" x=\"1434.5\" y=\"372\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"194\" type=\"static_wall\" x=\"1679\" y=\"373\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"196\" type=\"static_wall\" x=\"1606.5\" y=\"372.5\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"197\" type=\"static_wall\" x=\"1840.81\" y=\"240.884\" width=\"90.372\" height=\"182.233\"/>\n  <object id=\"198\" type=\"static_wall\" x=\"1841\" y=\"242.5\">\n   <polygon points=\"0,0 34,-35.5 53.5,-35.5 89,-1\"/>\n  </object>\n  <object id=\"199\" type=\"static_wall\" x=\"1876.31\" y=\"27.8833\" width=\"18.372\" height=\"184.233\"/>\n  <object id=\"200\" type=\"static_wall\" x=\"1843\" y=\"41.4998\">\n   <polygon points=\"0,0 34.5,34.5 50.5,34.5 85,1\"/>\n  </object>\n  <object id=\"201\" type=\"static_wall\" x=\"1923.5\" y=\"372.5\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"202\" type=\"static_wall\" x=\"1851\" y=\"372\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"209\" type=\"static_wall\" x=\"2084.81\" y=\"241.384\" width=\"90.372\" height=\"182.233\"/>\n  <object id=\"211\" type=\"static_wall\" x=\"2120.31\" y=\"62.8832\" width=\"18.372\" height=\"149.733\"/>\n  <object id=\"213\" type=\"static_wall\" x=\"2191.66\" y=\"435.566\" rotation=\"-315\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"214\" type=\"static_wall\" x=\"2095\" y=\"372.5\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"215\" type=\"static_wall\" x=\"2316.07\" y=\"560.937\" rotation=\"-315\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"216\" type=\"static_wall\" x=\"2092.14\" y=\"411.266\" width=\"226.092\" height=\"95.233\" rotation=\"-45\"/>\n  <object id=\"217\" type=\"static_wall\" x=\"2211.81\" y=\"244.384\" width=\"107.872\" height=\"74.733\"/>\n  <object id=\"219\" type=\"static_wall\" x=\"2085\" y=\"242.5\">\n   <polygon points=\"0,0 39.5,-41 94.5,-40 148.5,11\"/>\n  </object>\n  <object id=\"220\" type=\"static_wall\" x=\"2085.94\" y=\"41.2164\" width=\"138.631\" height=\"71.9046\" rotation=\"-45\"/>\n  <object id=\"221\" type=\"static_wall\" x=\"2188.06\" y=\"-57.8665\" width=\"107.872\" height=\"74.733\"/>\n  <object id=\"222\" type=\"static_wall\" x=\"2278.78\" y=\"-65.0606\" width=\"488.295\" height=\"74.733\" rotation=\"-315\"/>\n  <object id=\"223\" type=\"static_wall\" x=\"2385.56\" y=\"560.634\" width=\"665.872\" height=\"74.733\"/>\n  <object id=\"224\" type=\"static_wall\" x=\"2917.23\" y=\"542.472\" width=\"161.271\" height=\"74.733\" rotation=\"30\"/>\n  <object id=\"225\" type=\"static_wall\" x=\"2995.87\" y=\"638.991\" width=\"70.372\" height=\"250.01\" rotation=\"-5.96243\"/>\n  <object id=\"226\" type=\"static_wall\" x=\"2926.64\" y=\"945.084\" width=\"181.794\" height=\"74.733\" rotation=\"-48.0047\"/>\n  <object id=\"227\" type=\"static_wall\" x=\"2543.16\" y=\"952.943\" width=\"426.087\" height=\"74.733\" rotation=\"-3.62624\"/>\n  <object id=\"228\" type=\"static_wall\" x=\"2399.28\" y=\"830.439\" width=\"259.193\" height=\"74.733\" rotation=\"-315\"/>\n  <object id=\"229\" type=\"static_wall\" x=\"2472.03\" y=\"917.319\" width=\"155.312\" height=\"74.733\" rotation=\"16.2573\"/>\n  <object id=\"230\" type=\"static_wall\" x=\"1316.81\" y=\"47.8002\" width=\"90.372\" height=\"181.733\"/>\n  <object id=\"231\" type=\"static_wall\" x=\"1353.86\" y=\"240.801\" width=\"62.372\" height=\"63.3997\" rotation=\"-45.4263\"/>\n  <object id=\"232\" type=\"static_wall\" x=\"1346.75\" y=\"47.654\" width=\"90.372\" height=\"63.0663\" rotation=\"-45\"/>\n  <object id=\"233\" type=\"static_wall\" x=\"2509.21\" y=\"355.742\" width=\"66.0676\" height=\"256.457\" rotation=\"44.926\"/>\n  <object id=\"234\" type=\"static_wall\" x=\"2167.4\" y=\"27.679\" width=\"18.372\" height=\"185.551\"/>\n </objectgroup>\n</map>\n";
maps['tankpark'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"17\" nextobjectid=\"392\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc4b4a8\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"BG\" tilewidth=\"4096\" tileheight=\"2048\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"4096\" height=\"2048\" source=\"bg.jpg\"/>\n  </tile>\n </tileset>\n <tileset firstgid=\"2\" name=\"car\" tilewidth=\"64\" tileheight=\"128\" tilecount=\"8\" columns=\"4\">\n  <image source=\"car.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"175\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n  <object id=\"176\" gid=\"1\" x=\"4096\" y=\"2048\" width=\"4096\" height=\"2048\" rotation=\"180\"/>\n  <object id=\"205\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" locked=\"1\">\n  <object id=\"368\" name=\"car\" type=\"dynamic_object\" gid=\"2\" x=\"780.235\" y=\"1082.05\" width=\"64\" height=\"128\" rotation=\"135.166\">\n   <properties>\n    <property name=\"canRunOver\" type=\"bool\" value=\"true\"/>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"1\"/>\n    <property name=\"health\" type=\"int\" value=\"55\"/>\n    <property name=\"mass\" type=\"int\" value=\"15\"/>\n   </properties>\n  </object>\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3359.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3946.65\" y=\"3451.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3428.07\" y=\"3970.16\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3555.62\" y=\"3830.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3698.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3811\" y=\"3575\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"263.67\" y=\"516.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"137\" y=\"651.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"516.334\" y=\"275.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"649.303\" y=\"148.337\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"394\" y=\"402\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"381.67\" y=\"632.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"255\" y=\"767.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"634.334\" y=\"391.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"767.303\" y=\"264.337\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"512\" y=\"518\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3839.49\" y=\"3343.13\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3862.06\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3722\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3590\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3466.9\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3287\" y=\"742.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"808.938\" y=\"3359.36\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"372\" name=\"car\" type=\"dynamic_object\" gid=\"2\" x=\"3303.08\" y=\"2994.96\" width=\"64\" height=\"128\" rotation=\"317.967\">\n   <properties>\n    <property name=\"canRunOver\" type=\"bool\" value=\"true\"/>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"0\"/>\n    <property name=\"health\" type=\"int\" value=\"55\"/>\n    <property name=\"mass\" type=\"int\" value=\"15\"/>\n   </properties>\n  </object>\n  <object id=\"378\" name=\"Turret\" type=\"turret\" x=\"256\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"379\" name=\"Turret\" type=\"turret\" x=\"3840\" y=\"3840\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"380\" name=\"Turret\" type=\"turret\" x=\"1172\" y=\"110\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"381\" name=\"Turret\" type=\"turret\" x=\"244\" y=\"1119.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"385\" name=\"Turret\" type=\"turret\" x=\"2916\" y=\"4020\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"386\" name=\"Turret\" type=\"turret\" x=\"3851.33\" y=\"2978\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"167\" type=\"static_wall\" x=\"31\" y=\"980.652\" width=\"50.5409\" height=\"830.548\" rotation=\"180.018\"/>\n  <object id=\"177\" type=\"static_wall\" x=\"15.3299\" y=\"169.688\" width=\"50.5409\" height=\"158.598\" rotation=\"227.695\"/>\n  <object id=\"178\" type=\"static_wall\" x=\"132.446\" y=\"63.25\" width=\"34.5409\" height=\"42.2575\" rotation=\"180.137\"/>\n  <object id=\"179\" type=\"static_wall\" x=\"1083.09\" y=\"31.9015\" width=\"974.097\" height=\"42.2575\" rotation=\"180.025\"/>\n  <object id=\"183\" type=\"static_wall\" x=\"1278.42\" y=\"8.41235\" width=\"483.959\" height=\"42.2575\" rotation=\"356.226\"/>\n  <object id=\"187\" type=\"static_wall\" x=\"48.9637\" y=\"1627.06\" width=\"470.261\" height=\"38.1692\" rotation=\"281.437\"/>\n  <object id=\"188\" type=\"static_wall\" x=\"145.408\" y=\"1730.96\" width=\"116.946\" height=\"41.5999\" rotation=\"223.09\"/>\n  <object id=\"189\" type=\"static_wall\" x=\"131.145\" y=\"2048\" width=\"347.526\" height=\"41.8874\" rotation=\"270.177\"/>\n  <object id=\"190\" type=\"static_wall\" x=\"1769.83\" y=\"-17.2872\" width=\"373.749\" height=\"39.7232\" rotation=\"26.9842\"/>\n  <object id=\"191\" type=\"static_wall\" x=\"2197.62\" y=\"-3.92117\" width=\"221.809\" height=\"39.7232\" rotation=\"120.422\"/>\n  <object id=\"192\" type=\"static_wall\" x=\"2291.02\" y=\"61.094\" width=\"146.592\" height=\"39.7232\" rotation=\"114.262\"/>\n  <object id=\"193\" type=\"static_wall\" x=\"2260.89\" y=\"34.3981\" width=\"23.0537\" height=\"76.7928\" rotation=\"115.698\"/>\n  <object id=\"194\" type=\"static_wall\" x=\"2469.76\" y=\"314.694\" width=\"24.0541\" height=\"305.384\" rotation=\"120.774\"/>\n  <object id=\"195\" type=\"static_wall\" x=\"2834.68\" y=\"203.185\" width=\"46.8335\" height=\"396.865\" rotation=\"77.3811\"/>\n  <object id=\"196\" type=\"static_wall\" x=\"2844.9\" y=\"249.031\" width=\"46.8335\" height=\"241.237\" rotation=\"191.412\"/>\n  <object id=\"197\" type=\"static_wall\" x=\"3187.18\" y=\"71.0901\" width=\"302.836\" height=\"33.4288\" rotation=\"185.454\"/>\n  <object id=\"198\" type=\"static_wall\" x=\"3210.28\" y=\"187.173\" width=\"41.5001\" height=\"144.839\" rotation=\"187.172\"/>\n  <object id=\"199\" type=\"static_wall\" x=\"3562.21\" y=\"264.232\" width=\"401.506\" height=\"41.791\" rotation=\"191.837\"/>\n  <object id=\"200\" type=\"static_wall\" x=\"3638.36\" y=\"66.5893\" width=\"210.934\" height=\"41.791\" rotation=\"111.07\"/>\n  <object id=\"201\" type=\"static_wall\" x=\"4003.7\" y=\"368.11\" width=\"468.498\" height=\"41.791\" rotation=\"215.999\"/>\n  <object id=\"202\" type=\"static_wall\" x=\"3777.21\" y=\"526.343\" width=\"29.2346\" height=\"301.926\" rotation=\"240.768\"/>\n  <object id=\"203\" type=\"static_wall\" x=\"3762.79\" y=\"500.738\" width=\"29.2346\" height=\"354.246\" rotation=\"341.948\"/>\n  <object id=\"204\" type=\"static_wall\" x=\"4032.68\" y=\"770.243\" width=\"29.2346\" height=\"170.998\" rotation=\"76.8782\"/>\n  <object id=\"206\" type=\"static_wall\" x=\"4033.73\" y=\"795.421\" width=\"29.2346\" height=\"415.593\" rotation=\"357.893\"/>\n  <object id=\"207\" type=\"static_wall\" x=\"3808.74\" y=\"1215.16\" width=\"257.711\" height=\"49.1454\" rotation=\"357.893\"/>\n  <object id=\"208\" type=\"static_wall\" x=\"3807.27\" y=\"1214.92\" width=\"52.7525\" height=\"402.252\" rotation=\"3.04833\"/>\n  <object id=\"209\" type=\"static_wall\" x=\"3788.56\" y=\"1579.29\" width=\"296.466\" height=\"38.03\" rotation=\"3.04833\"/>\n  <object id=\"210\" type=\"static_wall\" x=\"4043\" y=\"1629.99\" width=\"57.6051\" height=\"266.389\" rotation=\"359.952\"/>\n  <object id=\"211\" type=\"static_wall\" x=\"3923.03\" y=\"1924.15\" width=\"84.9328\" height=\"133.362\" rotation=\"359.545\"/>\n  <object id=\"212\" type=\"static_wall\" x=\"3923.08\" y=\"1924.34\" width=\"139.474\" height=\"75.427\" rotation=\"346.513\"/>\n  <object id=\"249\" type=\"static_wall\" x=\"173.929\" y=\"2171.37\" width=\"139.474\" height=\"75.427\" rotation=\"166.513\"/>\n  <object id=\"250\" type=\"static_wall\" x=\"173.981\" y=\"2171.55\" width=\"84.9328\" height=\"133.362\" rotation=\"179.545\"/>\n  <object id=\"251\" type=\"static_wall\" x=\"54.0137\" y=\"2465.71\" width=\"57.6051\" height=\"266.389\" rotation=\"179.952\"/>\n  <object id=\"252\" type=\"static_wall\" x=\"308.445\" y=\"2516.41\" width=\"296.466\" height=\"38.03\" rotation=\"183.048\"/>\n  <object id=\"253\" type=\"static_wall\" x=\"289.743\" y=\"2880.78\" width=\"52.7525\" height=\"402.252\" rotation=\"183.048\"/>\n  <object id=\"254\" type=\"static_wall\" x=\"288.272\" y=\"2880.55\" width=\"257.711\" height=\"49.1454\" rotation=\"177.893\"/>\n  <object id=\"255\" type=\"static_wall\" x=\"63.2835\" y=\"3300.28\" width=\"29.2346\" height=\"415.593\" rotation=\"177.893\"/>\n  <object id=\"256\" type=\"static_wall\" x=\"64.3308\" y=\"3325.46\" width=\"29.2346\" height=\"170.998\" rotation=\"256.878\"/>\n  <object id=\"257\" type=\"static_wall\" x=\"334.215\" y=\"3594.96\" width=\"29.2346\" height=\"354.246\" rotation=\"161.948\"/>\n  <object id=\"258\" type=\"static_wall\" x=\"319.8\" y=\"3569.36\" width=\"29.2346\" height=\"301.926\" rotation=\"60.7675\"/>\n  <object id=\"259\" type=\"static_wall\" x=\"93.3094\" y=\"3727.59\" width=\"468.498\" height=\"41.791\" rotation=\"35.9991\"/>\n  <object id=\"260\" type=\"static_wall\" x=\"458.647\" y=\"4029.11\" width=\"210.934\" height=\"41.791\" rotation=\"291.07\"/>\n  <object id=\"261\" type=\"static_wall\" x=\"534.798\" y=\"3831.47\" width=\"401.506\" height=\"41.791\" rotation=\"11.8368\"/>\n  <object id=\"262\" type=\"static_wall\" x=\"886.731\" y=\"3908.53\" width=\"41.5001\" height=\"144.839\" rotation=\"7.17229\"/>\n  <object id=\"263\" type=\"static_wall\" x=\"909.829\" y=\"4024.61\" width=\"302.836\" height=\"33.4288\" rotation=\"5.45358\"/>\n  <object id=\"264\" type=\"static_wall\" x=\"1252.11\" y=\"3846.67\" width=\"46.8335\" height=\"241.237\" rotation=\"11.4117\"/>\n  <object id=\"265\" type=\"static_wall\" x=\"1262.33\" y=\"3892.52\" width=\"46.8335\" height=\"396.865\" rotation=\"257.381\"/>\n  <object id=\"266\" type=\"static_wall\" x=\"1627.24\" y=\"3781.01\" width=\"24.0541\" height=\"305.384\" rotation=\"300.774\"/>\n  <object id=\"267\" type=\"static_wall\" x=\"1836.12\" y=\"4061.3\" width=\"23.0537\" height=\"76.7928\" rotation=\"295.698\"/>\n  <object id=\"268\" type=\"static_wall\" x=\"1805.99\" y=\"4034.61\" width=\"146.592\" height=\"39.7232\" rotation=\"294.262\"/>\n  <object id=\"269\" type=\"static_wall\" x=\"1899.39\" y=\"4099.62\" width=\"221.809\" height=\"39.7232\" rotation=\"300.422\"/>\n  <object id=\"270\" type=\"static_wall\" x=\"2327.18\" y=\"4112.99\" width=\"373.749\" height=\"39.7232\" rotation=\"206.984\"/>\n  <object id=\"271\" type=\"static_wall\" x=\"3965.86\" y=\"2047.7\" width=\"347.526\" height=\"41.8874\" rotation=\"90.1768\"/>\n  <object id=\"272\" type=\"static_wall\" x=\"3951.6\" y=\"2364.75\" width=\"116.946\" height=\"41.5999\" rotation=\"43.0905\"/>\n  <object id=\"273\" type=\"static_wall\" x=\"4048.05\" y=\"2468.64\" width=\"470.261\" height=\"38.1692\" rotation=\"101.437\"/>\n  <object id=\"277\" type=\"static_wall\" x=\"2818.59\" y=\"4087.29\" width=\"483.959\" height=\"42.2575\" rotation=\"176.226\"/>\n  <object id=\"281\" type=\"static_wall\" x=\"3013.92\" y=\"4063.8\" width=\"974.097\" height=\"42.2575\" rotation=\"0.0248463\"/>\n  <object id=\"282\" type=\"static_wall\" x=\"3964.56\" y=\"4032.45\" width=\"34.5409\" height=\"42.2575\" rotation=\"0.137309\"/>\n  <object id=\"283\" type=\"static_wall\" x=\"4081.68\" y=\"3926.01\" width=\"50.5409\" height=\"158.598\" rotation=\"47.6952\"/>\n  <object id=\"284\" type=\"static_wall\" x=\"4066.01\" y=\"3115.05\" width=\"50.5409\" height=\"830.548\" rotation=\"0.0178714\"/>\n  <object id=\"291\" type=\"static_wall\" x=\"799.5\" y=\"827\">\n   <polygon points=\"0,0 -185,137.5 -141.5,234.5 -48,204.5 109,45\"/>\n  </object>\n  <object id=\"305\" type=\"static_wall\" x=\"751.667\" y=\"1030.33\">\n   <polygon points=\"0,0 156,-159.333 266,126.667 199,193\"/>\n  </object>\n  <object id=\"307\" type=\"static_wall\" x=\"974\" y=\"611.5\">\n   <polygon points=\"0,0 59.5,-194.5 207,-227.5 446.5,-182.5 416.5,98.5 143.5,85\"/>\n  </object>\n  <object id=\"308\" type=\"static_wall\" x=\"1580.5\" y=\"491\">\n   <polygon points=\"0,0 22,-29.5 147,-18 260.5,164 8,225 -12.5,186\"/>\n  </object>\n  <object id=\"309\" type=\"static_wall\" x=\"2000\" y=\"619\">\n   <polygon points=\"0,0 -95,-122 -83,-143.5 7.5,-144.5 141,-36\"/>\n  </object>\n  <object id=\"310\" type=\"static_wall\" x=\"2631\" y=\"602\">\n   <polygon points=\"0,0 216,-47.5 124.5,134.5\"/>\n  </object>\n  <object id=\"311\" type=\"static_wall\" x=\"3224.5\" y=\"1242.5\">\n   <polygon points=\"0,0 319.5,-66.5 323,51 124,304.5 98,284.5\"/>\n  </object>\n  <object id=\"312\" type=\"static_wall\" x=\"3547.5\" y=\"1313\">\n   <polygon points=\"0,0 1,172 -83.5,348.5 -189,246\"/>\n  </object>\n  <object id=\"313\" type=\"static_wall\" x=\"2883\" y=\"1378.5\">\n   <polygon points=\"0,0 130.5,-41 186,138 -6.5,185.5\"/>\n  </object>\n  <object id=\"314\" type=\"static_wall\" x=\"2834.5\" y=\"1027.5\">\n   <polygon points=\"0,0 131,40 130,74 -25,139\"/>\n  </object>\n  <object id=\"315\" type=\"static_wall\" x=\"2116.5\" y=\"819.5\">\n   <polygon points=\"0,0 323.5,91.5 262.125,384.875 -68.5,320.5\"/>\n  </object>\n  <object id=\"316\" type=\"static_wall\" x=\"1952.5\" y=\"866.5\">\n   <polygon points=\"0,0 163,-48 94.5,273 74,280.5\"/>\n  </object>\n  <object id=\"319\" type=\"static_wall\" x=\"1952.5\" y=\"867\">\n   <polygon points=\"0,0 -533.5,156.5 -489.5,378 -403.5,425.5 73,279\"/>\n  </object>\n  <object id=\"320\" type=\"static_wall\" x=\"908.5\" y=\"871.5\">\n   <polygon points=\"0,0 110,285.5 43,351.5 -156.5,159\"/>\n  </object>\n  <object id=\"321\" type=\"static_wall\" x=\"399.333\" y=\"1854.67\">\n   <polygon points=\"0,0 88,-412 323.333,-38 201.333,148\"/>\n  </object>\n  <object id=\"322\" type=\"static_wall\" x=\"866.667\" y=\"1632\">\n   <polygon points=\"0,0 45.3333,-101.333 323.333,-28 327.333,232 195.333,299.333\"/>\n  </object>\n  <object id=\"324\" type=\"static_wall\" x=\"1538\" y=\"1564\">\n   <polygon points=\"0,0 -0.666667,222.667 212,-2\"/>\n  </object>\n  <object id=\"325\" type=\"static_wall\" x=\"1750.67\" y=\"1562.67\">\n   <polygon points=\"0,0 85.3333,81.3333 -3.33333,125.333 -67.3333,70.6667\"/>\n  </object>\n  <object id=\"326\" type=\"static_wall\" x=\"1538.67\" y=\"1786.67\">\n   <polygon points=\"0,0 85.3333,84.6667 127.333,-10.6667 64.6667,-72\"/>\n  </object>\n  <object id=\"327\" type=\"static_wall\" x=\"1665.94\" y=\"1777.16\" width=\"88.2959\" height=\"122.193\" rotation=\"223.083\"/>\n  <object id=\"328\" type=\"static_wall\" x=\"2455.33\" y=\"915.333\">\n   <polygon points=\"0,0 143.333,40 88.6667,323.333 -59.7917,292.958\"/>\n  </object>\n  <object id=\"330\" type=\"static_wall\" x=\"2421.45\" y=\"1630.73\" width=\"100.369\" height=\"59.1316\" rotation=\"125.354\"/>\n  <object id=\"331\" type=\"static_wall\" x=\"2499.94\" y=\"1703.69\" width=\"109.738\" height=\"58.5329\" rotation=\"141.623\"/>\n  <object id=\"332\" type=\"static_wall\" x=\"2463.27\" y=\"1666.11\" width=\"104.625\" height=\"59.1316\" rotation=\"135.45\"/>\n  <object id=\"333\" type=\"static_wall\" x=\"2373.25\" y=\"1596.75\">\n   <polygon points=\"-5.5,6.75 32.75,-43.75 169.5,74.25 111.75,117.5\"/>\n  </object>\n  <object id=\"336\" type=\"static_wall\" x=\"3297.12\" y=\"3268.87\" rotation=\"180\">\n   <polygon points=\"0,0 -185,137.5 -141.5,234.5 -48,204.5 109,45\"/>\n  </object>\n  <object id=\"337\" type=\"static_wall\" x=\"3344.95\" y=\"3065.54\" rotation=\"180\">\n   <polygon points=\"0,0 156,-159.333 266,126.667 199,193\"/>\n  </object>\n  <object id=\"338\" type=\"static_wall\" x=\"3122.62\" y=\"3484.37\" rotation=\"180\">\n   <polygon points=\"0,0 59.5,-194.5 207,-227.5 446.5,-182.5 416.5,98.5 143.5,85\"/>\n  </object>\n  <object id=\"339\" type=\"static_wall\" x=\"2516.12\" y=\"3604.87\" rotation=\"180\">\n   <polygon points=\"0,0 22,-29.5 147,-18 260.5,164 8,225 -12.5,186\"/>\n  </object>\n  <object id=\"340\" type=\"static_wall\" x=\"2096.62\" y=\"3476.87\" rotation=\"180\">\n   <polygon points=\"0,0 -95,-122 -83,-143.5 7.5,-144.5 141,-36\"/>\n  </object>\n  <object id=\"341\" type=\"static_wall\" x=\"1465.62\" y=\"3493.87\" rotation=\"180\">\n   <polygon points=\"0,0 216,-47.5 124.5,134.5\"/>\n  </object>\n  <object id=\"342\" type=\"static_wall\" x=\"872.119\" y=\"2853.37\" rotation=\"180\">\n   <polygon points=\"0,0 319.5,-66.5 323,51 124,304.5 98,284.5\"/>\n  </object>\n  <object id=\"343\" type=\"static_wall\" x=\"549.119\" y=\"2782.87\" rotation=\"180\">\n   <polygon points=\"0,0 1,172 -83.5,348.5 -189,246\"/>\n  </object>\n  <object id=\"344\" type=\"static_wall\" x=\"1213.62\" y=\"2717.37\" rotation=\"180\">\n   <polygon points=\"0,0 130.5,-41 186,138 -6.5,185.5\"/>\n  </object>\n  <object id=\"345\" type=\"static_wall\" x=\"1262.12\" y=\"3068.37\" rotation=\"180\">\n   <polygon points=\"0,0 131,40 130,74 -25,139\"/>\n  </object>\n  <object id=\"346\" type=\"static_wall\" x=\"1980.12\" y=\"3276.37\" rotation=\"180\">\n   <polygon points=\"0,0 323.5,91.5 262.5,384 -68.5,320.5\"/>\n  </object>\n  <object id=\"347\" type=\"static_wall\" x=\"2144.12\" y=\"3229.37\" rotation=\"180\">\n   <polygon points=\"0,0 163,-48 94.5,273 74,280.5\"/>\n  </object>\n  <object id=\"348\" type=\"static_wall\" x=\"2144.12\" y=\"3228.87\" rotation=\"180\">\n   <polygon points=\"0,0 -533.5,156.5 -489.5,378 -403.5,425.5 73,279\"/>\n  </object>\n  <object id=\"349\" type=\"static_wall\" x=\"3188.12\" y=\"3224.37\" rotation=\"180\">\n   <polygon points=\"0,0 110,285.5 43,351.5 -156.5,159\"/>\n  </object>\n  <object id=\"350\" type=\"static_wall\" x=\"3697.29\" y=\"2241.2\" rotation=\"180\">\n   <polygon points=\"0,0 88,-412 323.333,-38 201.333,148\"/>\n  </object>\n  <object id=\"351\" type=\"static_wall\" x=\"3229.95\" y=\"2463.87\" rotation=\"180\">\n   <polygon points=\"0,0 45.3333,-101.333 323.333,-28 327.333,232 195.333,299.333\"/>\n  </object>\n  <object id=\"352\" type=\"static_wall\" x=\"2558.62\" y=\"2531.87\" rotation=\"180\">\n   <polygon points=\"0,0 -0.666667,222.667 212,-2\"/>\n  </object>\n  <object id=\"353\" type=\"static_wall\" x=\"2345.95\" y=\"2533.2\" rotation=\"180\">\n   <polygon points=\"0,0 85.3333,81.3333 -3.33333,125.333 -67.3333,70.6667\"/>\n  </object>\n  <object id=\"354\" type=\"static_wall\" x=\"2557.95\" y=\"2309.2\" rotation=\"180\">\n   <polygon points=\"0,0 85.3333,84.6667 127.333,-10.6667 64.6667,-72\"/>\n  </object>\n  <object id=\"355\" type=\"static_wall\" x=\"2430.68\" y=\"2318.71\" width=\"88.2959\" height=\"122.193\" rotation=\"43.083\"/>\n  <object id=\"356\" type=\"static_wall\" x=\"1641.29\" y=\"3180.54\" rotation=\"180\">\n   <polygon points=\"0,0 143.333,40 88.6667,323.333 -60.1667,293.208\"/>\n  </object>\n  <object id=\"357\" type=\"static_wall\" x=\"1675.17\" y=\"2465.14\" width=\"100.369\" height=\"59.1316\" rotation=\"305.354\"/>\n  <object id=\"358\" type=\"static_wall\" x=\"1596.68\" y=\"2392.18\" width=\"109.738\" height=\"58.5329\" rotation=\"321.623\"/>\n  <object id=\"359\" type=\"static_wall\" x=\"1633.35\" y=\"2429.76\" width=\"104.625\" height=\"59.1316\" rotation=\"315.45\"/>\n  <object id=\"360\" type=\"static_wall\" x=\"1723.37\" y=\"2499.12\" rotation=\"180\">\n   <polygon points=\"-5.5,6.75 32.75,-43.75 169.5,74.25 111.75,117.5\"/>\n  </object>\n  <object id=\"383\" type=\"static_wall\" x=\"329\" y=\"1197.5\">\n   <polygon points=\"0,0 -17,-132.5 -359,-238.5 -357,-44.5\"/>\n  </object>\n  <object id=\"384\" type=\"static_wall\" x=\"1114.5\" y=\"176\">\n   <polygon points=\"0,0 125.5,-11 211.5,-199.5 -68.5,-198.5\"/>\n  </object>\n  <object id=\"388\" type=\"static_wall\" x=\"2980.5\" y=\"3919.5\">\n   <polygon points=\"0,0 -124.5,11.5 -208.5,190.5 68,197\"/>\n  </object>\n  <object id=\"387\" type=\"static_wall\" x=\"3766.5\" y=\"2898.5\">\n   <polygon points=\"0,0 16,132 354.5,234.5 354,43.5\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"16\" name=\"Lights\">\n  <object id=\"390\" name=\"Light\" type=\"light\" x=\"1602.18\" y=\"1629.64\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"391\" name=\"Light\" type=\"light\" x=\"2492\" y=\"2466.67\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['wadi'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"18\" nextobjectid=\"551\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffd0a394\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"4096\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg2.jpg\" width=\"4096\" height=\"2048\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\">\n  <object id=\"532\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n  <object id=\"533\" gid=\"1\" x=\"4096\" y=\"2048\" width=\"4096\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"373\" type=\"static_wall\" x=\"-74\" y=\"82\" width=\"140\" height=\"902\"/>\n  <object id=\"374\" type=\"static_wall\" x=\"35.2735\" y=\"-122.763\" width=\"853.845\" height=\"192\" rotation=\"4.97607\"/>\n  <object id=\"375\" type=\"static_wall\" x=\"-38.8017\" y=\"168.859\" width=\"269.521\" height=\"65.2159\" rotation=\"309.504\"/>\n  <object id=\"376\" type=\"static_wall\" x=\"819.116\" y=\"-4.86766\" width=\"229.074\" height=\"155.663\" rotation=\"341.179\"/>\n  <object id=\"377\" type=\"static_wall\" x=\"1162.72\" y=\"-159.082\" width=\"393.782\" height=\"222.617\" rotation=\"42.6681\"/>\n  <object id=\"378\" type=\"static_wall\" x=\"1739.6\" y=\"46.9851\" width=\"492.546\" height=\"176.787\" rotation=\"152.707\"/>\n  <object id=\"379\" type=\"static_wall\" x=\"1899.17\" y=\"-19.5601\" width=\"220.895\" height=\"74.0387\" rotation=\"145.255\"/>\n  <object id=\"380\" type=\"static_wall\" x=\"1718.12\" y=\"106.646\" width=\"174.948\" height=\"74.0387\" rotation=\"203.819\"/>\n  <object id=\"381\" type=\"static_wall\" x=\"1841.01\" y=\"-29.0378\" width=\"825.363\" height=\"47.6565\" rotation=\"0.599872\"/>\n  <object id=\"382\" type=\"static_wall\" x=\"2654.16\" y=\"-55.9253\" width=\"206.036\" height=\"84.3408\" rotation=\"15.1446\"/>\n  <object id=\"383\" type=\"static_wall\" x=\"2823.6\" y=\"-4.86223\" width=\"449.046\" height=\"84.3408\" rotation=\"355.421\"/>\n  <object id=\"384\" type=\"static_wall\" x=\"3293.49\" y=\"-36.2887\" width=\"291.26\" height=\"84.3408\" rotation=\"19.4299\"/>\n  <object id=\"385\" type=\"static_wall\" x=\"3519.13\" y=\"24.1033\" width=\"339.498\" height=\"117.027\" rotation=\"349.37\"/>\n  <object id=\"386\" type=\"static_wall\" x=\"3867.33\" y=\"-44.934\" width=\"190.31\" height=\"117.027\" rotation=\"9.56694\"/>\n  <object id=\"387\" type=\"static_wall\" x=\"4092.69\" y=\"82.521\" width=\"444.295\" height=\"70.2295\" rotation=\"83.4666\"/>\n  <object id=\"388\" type=\"static_wall\" x=\"4209.34\" y=\"518.817\" width=\"440.119\" height=\"140.543\" rotation=\"104.018\"/>\n  <object id=\"389\" type=\"static_wall\" x=\"4090.9\" y=\"844.249\" width=\"235.703\" height=\"140.543\" rotation=\"62.1029\"/>\n  <object id=\"390\" type=\"static_wall\" x=\"4196.63\" y=\"1083.27\" width=\"402.971\" height=\"140.543\" rotation=\"92.6349\"/>\n  <object id=\"392\" type=\"static_wall\" x=\"4110.67\" y=\"1382.67\">\n   <polygon points=\"0,0 -174.667,194 -161.333,327.333 14,552.667\"/>\n  </object>\n  <object id=\"397\" type=\"static_wall\" x=\"3160.5\" y=\"2054.5\">\n   <polygon points=\"0,0 250,-295.5 404,27\"/>\n  </object>\n  <object id=\"398\" type=\"static_wall\" x=\"720\" y=\"2030\">\n   <polygon points=\"0,0 207.5,12 202.5,25 -26.5,57.5\"/>\n  </object>\n  <object id=\"400\" type=\"static_wall\" x=\"838.5\" y=\"1891.5\">\n   <polygon points=\"0,0 -139,69.5 -69,112 82.5,101.5\"/>\n  </object>\n  <object id=\"402\" type=\"static_wall\" x=\"568\" y=\"1969.5\">\n   <polygon points=\"0,0 105,9.5 198.5,67.5 62.5,102\"/>\n  </object>\n  <object id=\"407\" type=\"static_wall\" x=\"195.67\" y=\"1128\" width=\"430.561\" height=\"156.731\" rotation=\"107.884\"/>\n  <object id=\"408\" type=\"static_wall\" x=\"0.775475\" y=\"748.18\" width=\"426.43\" height=\"156.731\" rotation=\"62.7454\"/>\n  <object id=\"409\" type=\"static_wall\" x=\"358.667\" y=\"1376\">\n   <polygon points=\"0,0 120.667,-236.667 167.333,-272 195.333,-247.333 275.333,57.3333 126.667,228 84.6667,238\"/>\n  </object>\n  <object id=\"410\" type=\"static_wall\" x=\"1107.33\" y=\"1315.33\">\n   <polygon points=\"0,0 -105.333,107.333 15.3333,234.667 149.333,226.667 296,112.667 324,-21.3333\"/>\n  </object>\n  <object id=\"411\" type=\"static_wall\" x=\"1431.33\" y=\"1294.67\">\n   <polygon points=\"0,0 71.3333,29.3333 53.3333,97.3333 -163.333,196\"/>\n  </object>\n  <object id=\"412\" type=\"static_wall\" x=\"1298.67\" y=\"948\">\n   <polygon points=\"0,0 -201.333,194 -93.3333,291.333 14,310.667 332,225.333 551.333,135.333 528,-25.3333 498.667,-82 370.667,-124.667\"/>\n  </object>\n  <object id=\"413\" type=\"static_wall\" x=\"1278.67\" y=\"1066\">\n   <polygon points=\"0,0 -1.33333,-264 124,-312\"/>\n  </object>\n  <object id=\"414\" type=\"static_wall\" x=\"1476.67\" y=\"551.333\">\n   <polygon points=\"0,0 39.3333,6.66667 215.333,299.333 -116,295.333\"/>\n  </object>\n  <object id=\"417\" type=\"static_wall\" x=\"1939.33\" y=\"815.333\">\n   <polygon points=\"0,0 4,54.6667 64.6667,224.667 138.667,228 322,198.667 55.3333,-11.3333\"/>\n  </object>\n  <object id=\"418\" type=\"static_wall\" x=\"2067.33\" y=\"771.333\">\n   <polygon points=\"0,0 -94,43.3333 188,243.333 195.333,240 197.333,61.3333\"/>\n  </object>\n  <object id=\"420\" type=\"static_wall\" x=\"939.748\" y=\"773.759\" width=\"66.4886\" height=\"253.622\" rotation=\"29.4098\"/>\n  <object id=\"421\" type=\"static_wall\" x=\"1956.5\" y=\"1503.5\">\n   <polygon points=\"0,0 -127,74 -141.5,116 -94.5,124 28,53.5 45.5,7.5\"/>\n  </object>\n  <object id=\"422\" type=\"static_wall\" x=\"2523\" y=\"1674.5\">\n   <polygon points=\"0,0 -13.5,42.5 74,248.5 114,272 128,228.5 39.5,19\"/>\n  </object>\n  <object id=\"423\" type=\"static_wall     \" x=\"2994.18\" y=\"1508\">\n   <polygon points=\"0,0 13.8182,40.9091 58.1818,67.4545 103.273,58.7273 89.2727,16.3636 44.9091,-9.63636\"/>\n  </object>\n  <object id=\"424\" type=\"static_wall\" x=\"2570.5\" y=\"1195.5\">\n   <polygon points=\"0,0 99.5,-220.5 240,-237.5 246,-64\"/>\n  </object>\n  <object id=\"425\" type=\"static_wall\" x=\"2864.33\" y=\"309\">\n   <polygon points=\"0,0 31.3333,-31 179,-37 213,-7 181,22.6667 34.3333,28.6667\"/>\n  </object>\n  <object id=\"426\" type=\"static_wall\" x=\"3526.33\" y=\"323.333\">\n   <polygon points=\"0,0 -44,8.66667 -30.3333,49.3333 17.3333,76.6667 59,68.6667 44.6667,26\"/>\n  </object>\n  <object id=\"427\" type=\"static_wall\" x=\"3669\" y=\"624.333\">\n   <polygon points=\"0,0 -28.6667,33 -30.3333,86.6667 0,119 30.3333,85.6667 30.6667,35.6667\"/>\n  </object>\n  <object id=\"428\" type=\"static_wall\" x=\"3506\" y=\"1186.5\">\n   <polygon points=\"0,0 -1.5,96.5 -87,178 -102.5,176.5 -240,48\"/>\n  </object>\n  <object id=\"429\" type=\"static_wall\" x=\"3549.5\" y=\"1182.5\">\n   <polygon points=\"0,0 72.5,-15 132,96.5 -7,283 -28.5,129\"/>\n  </object>\n  <object id=\"431\" type=\"static_wall\" x=\"3504.5\" y=\"1324.5\">\n   <polygon points=\"0,0 -90.5,92.5 -77,189 7,184 18.5,166.5\"/>\n  </object>\n  <object id=\"435\" type=\"static_wall\" x=\"735\" y=\"1765.75\">\n   <polygon points=\"0,0 86.25,103 -68,185.75 -62.25,81\"/>\n  </object>\n  <object id=\"436\" type=\"static_wall\" x=\"593.5\" y=\"1876\">\n   <polygon points=\"0,0 73,73.25 110,-41.75\"/>\n  </object>\n  <object id=\"442\" type=\"static_wall\" x=\"4169.99\" y=\"4014.02\" width=\"140\" height=\"902\" rotation=\"180\"/>\n  <object id=\"443\" type=\"static_wall\" x=\"4060.72\" y=\"4218.78\" width=\"853.845\" height=\"192\" rotation=\"184.976\"/>\n  <object id=\"444\" type=\"static_wall\" x=\"4134.79\" y=\"3927.16\" width=\"269.521\" height=\"65.2159\" rotation=\"129.504\"/>\n  <object id=\"445\" type=\"static_wall\" x=\"3276.88\" y=\"4100.88\" width=\"229.074\" height=\"155.663\" rotation=\"161.179\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"2952.5\" y=\"4234.24\" width=\"393.782\" height=\"194.241\" rotation=\"222.668\"/>\n  <object id=\"447\" type=\"static_wall\" x=\"2356.39\" y=\"4049.03\" width=\"492.546\" height=\"175.525\" rotation=\"332.707\"/>\n  <object id=\"448\" type=\"static_wall\" x=\"2196.82\" y=\"4115.58\" width=\"220.895\" height=\"74.0387\" rotation=\"325.255\"/>\n  <object id=\"449\" type=\"static_wall\" x=\"2377.87\" y=\"3989.37\" width=\"174.948\" height=\"74.0387\" rotation=\"23.819\"/>\n  <object id=\"450\" type=\"static_wall\" x=\"2254.98\" y=\"4125.05\" width=\"825.363\" height=\"47.6565\" rotation=\"180.6\"/>\n  <object id=\"451\" type=\"static_wall\" x=\"1441.83\" y=\"4151.94\" width=\"206.036\" height=\"84.3408\" rotation=\"195.145\"/>\n  <object id=\"452\" type=\"static_wall\" x=\"1272.39\" y=\"4100.88\" width=\"449.046\" height=\"84.3408\" rotation=\"175.421\"/>\n  <object id=\"453\" type=\"static_wall\" x=\"802.503\" y=\"4132.3\" width=\"291.26\" height=\"84.3408\" rotation=\"199.43\"/>\n  <object id=\"454\" type=\"static_wall\" x=\"576.863\" y=\"4071.91\" width=\"339.498\" height=\"117.027\" rotation=\"169.37\"/>\n  <object id=\"455\" type=\"static_wall\" x=\"228.663\" y=\"4140.95\" width=\"190.31\" height=\"117.027\" rotation=\"189.567\"/>\n  <object id=\"456\" type=\"static_wall\" x=\"3.30291\" y=\"4013.49\" width=\"444.295\" height=\"70.2295\" rotation=\"263.467\"/>\n  <object id=\"457\" type=\"static_wall\" x=\"-113.347\" y=\"3577.2\" width=\"440.119\" height=\"140.543\" rotation=\"284.018\"/>\n  <object id=\"458\" type=\"static_wall\" x=\"5.09291\" y=\"3251.77\" width=\"235.703\" height=\"140.543\" rotation=\"242.103\"/>\n  <object id=\"459\" type=\"static_wall\" x=\"-100.637\" y=\"3012.75\" width=\"402.971\" height=\"140.543\" rotation=\"272.635\"/>\n  <object id=\"460\" type=\"static_wall\" x=\"-14.6771\" y=\"2713.35\" rotation=\"180\">\n   <polygon points=\"0,0 -174.667,194 -161.333,327.333 14,552.667\"/>\n  </object>\n  <object id=\"463\" type=\"static_wall\" x=\"935.493\" y=\"2041.52\" rotation=\"180\">\n   <polygon points=\"0,0 250,-295.5 404,27\"/>\n  </object>\n  <object id=\"464\" type=\"static_wall\" x=\"3375.99\" y=\"2066.02\" rotation=\"180\">\n   <polygon points=\"0,0 207.5,12 202.5,25 -26.5,57.5\"/>\n  </object>\n  <object id=\"465\" type=\"static_wall\" x=\"3257.49\" y=\"2204.52\" rotation=\"180\">\n   <polygon points=\"0,0 -139,69.5 -69,112 82.5,101.5\"/>\n  </object>\n  <object id=\"467\" type=\"static_wall\" x=\"3527.99\" y=\"2126.52\" rotation=\"180\">\n   <polygon points=\"0,0 105,9.5 198.5,67.5 62.5,102\"/>\n  </object>\n  <object id=\"471\" type=\"static_wall\" x=\"3900.32\" y=\"2968.02\" width=\"430.561\" height=\"156.731\" rotation=\"287.884\"/>\n  <object id=\"472\" type=\"static_wall\" x=\"4095.22\" y=\"3347.84\" width=\"426.43\" height=\"156.731\" rotation=\"242.745\"/>\n  <object id=\"473\" type=\"static_wall\" x=\"3737.33\" y=\"2720.02\" rotation=\"180\">\n   <polygon points=\"0,0 120.667,-236.667 167.333,-272 195.333,-247.333 275.333,57.3333 126.667,228 84.6667,238\"/>\n  </object>\n  <object id=\"474\" type=\"static_wall\" x=\"2988.66\" y=\"2780.69\" rotation=\"180\">\n   <polygon points=\"0,0 -105.333,107.333 15.3333,234.667 149.333,226.667 296,112.667 324,-21.3333\"/>\n  </object>\n  <object id=\"475\" type=\"static_wall\" x=\"2664.66\" y=\"2801.35\" rotation=\"180\">\n   <polygon points=\"0,0 71.3333,29.3333 53.3333,97.3333 -163.333,196\"/>\n  </object>\n  <object id=\"476\" type=\"static_wall\" x=\"2797.32\" y=\"3148.02\" rotation=\"180\">\n   <polygon points=\"0,0 -201.333,194 -93.3333,291.333 14,310.667 332,225.333 551.333,135.333 528,-25.3333 498.667,-82 370.667,-124.667\"/>\n  </object>\n  <object id=\"477\" type=\"static_wall\" x=\"2817.32\" y=\"3030.02\" rotation=\"180\">\n   <polygon points=\"0,0 -1.33333,-264 124,-312\"/>\n  </object>\n  <object id=\"478\" type=\"static_wall\" x=\"2619.32\" y=\"3544.68\" rotation=\"180\">\n   <polygon points=\"0,0 39.3333,6.66667 215.333,299.333 -116,295.333\"/>\n  </object>\n  <object id=\"480\" type=\"static_wall\" x=\"2156.66\" y=\"3280.68\" rotation=\"180\">\n   <polygon points=\"0,0 4,54.6667 64.6667,224.667 138.667,228 322,198.667 55.3333,-11.3333\"/>\n  </object>\n  <object id=\"481\" type=\"static_wall\" x=\"2028.66\" y=\"3324.68\" rotation=\"180\">\n   <polygon points=\"0,0 -94,43.3333 188,243.333 195.333,240 197.333,61.3333\"/>\n  </object>\n  <object id=\"482\" type=\"static_wall\" x=\"3156.24\" y=\"3322.26\" width=\"66.4886\" height=\"253.622\" rotation=\"209.41\"/>\n  <object id=\"483\" type=\"static_wall\" x=\"2139.49\" y=\"2592.52\" rotation=\"180\">\n   <polygon points=\"0,0 -127,74 -141.5,116 -94.5,124 28,53.5 45.5,7.5\"/>\n  </object>\n  <object id=\"484\" type=\"static_wall\" x=\"1572.99\" y=\"2421.52\" rotation=\"180\">\n   <polygon points=\"0,0 -13.5,42.5 74,248.5 114,272 128,228.5 39.5,19\"/>\n  </object>\n  <object id=\"485\" type=\"static_wall     \" x=\"1101.81\" y=\"2588.02\" rotation=\"180\">\n   <polygon points=\"0,0 13.8182,40.9091 58.1818,67.4545 103.273,58.7273 89.2727,16.3636 44.9091,-9.63636\"/>\n  </object>\n  <object id=\"486\" type=\"static_wall\" x=\"1525.49\" y=\"2900.52\" rotation=\"180\">\n   <polygon points=\"0,0 99.5,-220.5 240,-237.5 246,-64\"/>\n  </object>\n  <object id=\"487\" type=\"static_wall\" x=\"1231.66\" y=\"3787.02\" rotation=\"180\">\n   <polygon points=\"0,0 31.3333,-31 179,-37 213,-7 181,22.6667 34.3333,28.6667\"/>\n  </object>\n  <object id=\"488\" type=\"static_wall\" x=\"569.663\" y=\"3772.68\" rotation=\"180\">\n   <polygon points=\"0,0 -44,8.66667 -30.3333,49.3333 17.3333,76.6667 59,68.6667 44.6667,26\"/>\n  </object>\n  <object id=\"489\" type=\"static_wall\" x=\"426.993\" y=\"3471.68\" rotation=\"180\">\n   <polygon points=\"0,0 -28.6667,33 -30.3333,86.6667 0,119 30.3333,85.6667 30.6667,35.6667\"/>\n  </object>\n  <object id=\"490\" type=\"static_wall\" x=\"589.993\" y=\"2909.52\" rotation=\"180\">\n   <polygon points=\"0,0 -1.5,96.5 -87,178 -102.5,176.5 -240,48\"/>\n  </object>\n  <object id=\"491\" type=\"static_wall\" x=\"546.493\" y=\"2913.52\" rotation=\"180\">\n   <polygon points=\"0,0 72.5,-15 132,96.5 -7,283 -28.5,129\"/>\n  </object>\n  <object id=\"492\" type=\"static_wall\" x=\"591.493\" y=\"2771.52\" rotation=\"180\">\n   <polygon points=\"0,0 -90.5,92.5 -77,189 7,184 18.5,166.5\"/>\n  </object>\n  <object id=\"493\" type=\"static_wall\" x=\"3360.99\" y=\"2330.27\" rotation=\"180\">\n   <polygon points=\"0,0 86.25,103 -68,185.75 -62.25,81\"/>\n  </object>\n  <object id=\"494\" type=\"static_wall\" x=\"3502.49\" y=\"2220.02\" rotation=\"180\">\n   <polygon points=\"0,0 73,73.25 110,-41.75\"/>\n  </object>\n  <object id=\"495\" type=\"static_wall\" x=\"2678\" y=\"459.333\">\n   <polygon points=\"0,0 -352,170.667 -22,322.667 174,262\"/>\n  </object>\n  <object id=\"496\" type=\"static_wall   \" x=\"1850\" y=\"208\">\n   <polygon points=\"0,0 84,133.333 242.667,244 779.333,61.3333 676.667,-44.6667 138,-54.6667\"/>\n  </object>\n  <object id=\"497\" type=\"static_wall\" x=\"1893.33\" y=\"200.667\">\n   <polygon points=\"0,0 18,364 107.333,348 271.333,180.667\"/>\n  </object>\n  <object id=\"529\" type=\"static_wall\" x=\"1417.71\" y=\"3636.11\" rotation=\"180\">\n   <polygon points=\"0,0 -352,170.667 -22,322.667 174,262\"/>\n  </object>\n  <object id=\"530\" type=\"static_wall   \" x=\"2245.71\" y=\"3887.45\" rotation=\"180\">\n   <polygon points=\"0,0 84,133.333 242.667,244 779.333,61.3333 676.667,-44.6667 138,-54.6667\"/>\n  </object>\n  <object id=\"531\" type=\"static_wall\" x=\"2202.38\" y=\"3894.78\" rotation=\"180\">\n   <polygon points=\"0,0 18,364 107.333,348 271.333,180.667\"/>\n  </object>\n  <object id=\"541\" type=\"static_wall\" x=\"456.333\" y=\"1945\">\n   <polygon points=\"2,0.666667 48.3333,-42.3333 167,38.6667 97,116.333\"/>\n  </object>\n  <object id=\"542\" type=\"static_wall\" x=\"234.75\" y=\"2037\">\n   <polygon points=\"0,0 59.75,-5.5 100,27.75 63.75,75.75 0.25,40.5\"/>\n  </object>\n  <object id=\"543\" type=\"static_wall\" x=\"-39.5\" y=\"2262.5\">\n   <polygon points=\"0,0 90.5,-1.5 104.5,-56 88.5,-353 65.5,-436 62.6818,-497.83 24,-496\"/>\n  </object>\n  <object id=\"544\" type=\"static_wall\" x=\"64\" y=\"1465.5\">\n   <polygon points=\"0,0 33.5,99.5 -48.5,321.5 -113.5,327.5 -104,8.5\"/>\n  </object>\n  <object id=\"545\" type=\"static_wall\" x=\"3638.48\" y=\"2148.95\" rotation=\"180\">\n   <polygon points=\"2,0.666667 48.3333,-42.3333 167,38.6667 97,116.333\"/>\n  </object>\n  <object id=\"546\" type=\"static_wall\" x=\"3860.07\" y=\"2056.95\" rotation=\"180\">\n   <polygon points=\"0,0 59.75,-5.5 100,27.75 63.75,75.75 0.25,40.5\"/>\n  </object>\n  <object id=\"547\" type=\"static_wall\" x=\"4134.32\" y=\"1831.45\" rotation=\"180\">\n   <polygon points=\"0,0 89.875,1.625 104.5,-56 88.5,-353 65.5,-436 62,-494 24,-495.5\"/>\n  </object>\n  <object id=\"548\" type=\"static_wall\" x=\"4030.82\" y=\"2628.45\" rotation=\"180\">\n   <polygon points=\"0,0 33.5,99.5 -48.5,321.5 -113.5,327.5 -104,8.5\"/>\n  </object>\n  <object id=\"549\" type=\"static_wall\" x=\"1267.5\" y=\"1923\">\n   <polygon points=\"0,0 74.5,86.5 148,-14 131,-95 22.5,-76\"/>\n  </object>\n  <object id=\"550\" type=\"static_wall\" x=\"2828.15\" y=\"2172.98\" rotation=\"180\">\n   <polygon points=\"0,0 74.5,86.5 148,-14 131,-95 22.5,-76\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"MapProps\">\n  <object id=\"534\" name=\"Turret\" type=\"turret\" x=\"3840\" y=\"3840\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"536\" name=\"Turret\" type=\"turret\" x=\"256\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"537\" name=\"Turret\" type=\"turret\" x=\"1334\" y=\"150\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"538\" name=\"Turret\" type=\"turret\" x=\"501\" y=\"1381\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"539\" name=\"Turret\" type=\"turret\" x=\"2764\" y=\"3959\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"540\" name=\"Turret\" type=\"turret\" x=\"3606\" y=\"2717\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3287\" y=\"742.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"808.938\" y=\"3359.36\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3790.16\" y=\"3289.8\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3248.91\" y=\"3771.39\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3722\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3590\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3466.9\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3898.65\" y=\"3405.9\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3446.74\" y=\"3875.49\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3643.62\" y=\"3864.77\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3698.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3811\" y=\"3575\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"307.337\" y=\"637.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"425.337\" y=\"753.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"298.667\" y=\"888.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"678.001\" y=\"512.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"810.97\" y=\"385.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"555.667\" y=\"639.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"180.667\" y=\"772.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"560.001\" y=\"396.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"692.97\" y=\"269.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"437.667\" y=\"523.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3359.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['snowfall'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"25\" nextobjectid=\"578\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.3\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff5d91b2\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"controlpoint\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"controlpoint.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"snowmap_block1\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block1.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"snowmap_block2\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block2.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"snowmap_block3\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block3.png\" width=\"128\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"5\" name=\"snowmap_block4\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block4.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"snowmap_block5\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block5.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"7\" name=\"BG\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"2048\" height=\"2048\" source=\"bg.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"565\" gid=\"7\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"566\" gid=\"7\" x=\"2048\" y=\"0\" width=\"2048\" height=\"2048\" rotation=\"90\"/>\n  <object id=\"567\" gid=\"7\" x=\"4096\" y=\"2048\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n  <object id=\"568\" gid=\"7\" x=\"2048\" y=\"4096\" width=\"2048\" height=\"2048\" rotation=\"270\"/>\n </objectgroup>\n <objectgroup id=\"23\" name=\"MapObjects\" locked=\"1\">\n  <object id=\"492\" gid=\"1\" x=\"1792\" y=\"2048\" width=\"256\" height=\"256\"/>\n  <object id=\"493\" gid=\"1\" x=\"2048\" y=\"1792\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"494\" gid=\"1\" x=\"2304\" y=\"2048\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"495\" gid=\"1\" x=\"2048\" y=\"2304\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"496\" gid=\"1\" x=\"3032.28\" y=\"739.25\" width=\"256\" height=\"256\"/>\n  <object id=\"497\" gid=\"1\" x=\"3288.28\" y=\"483.25\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"498\" gid=\"1\" x=\"3544.28\" y=\"739.25\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"499\" gid=\"1\" x=\"3288.28\" y=\"995.248\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"500\" gid=\"1\" x=\"552.013\" y=\"3329.58\" width=\"256\" height=\"256\"/>\n  <object id=\"501\" gid=\"1\" x=\"808.013\" y=\"3073.58\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"502\" gid=\"1\" x=\"1064.01\" y=\"3329.58\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"503\" gid=\"1\" x=\"808.013\" y=\"3585.58\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"515\" gid=\"6\" x=\"1301.05\" y=\"2959.66\" width=\"256\" height=\"256\" rotation=\"289.963\"/>\n  <object id=\"510\" gid=\"6\" x=\"575.888\" y=\"2514.45\" width=\"256\" height=\"256\" rotation=\"17.1905\"/>\n  <object id=\"513\" type=\"static_wall\" x=\"768.406\" y=\"2322.17\" rotation=\"17.1905\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"514\" type=\"static_wall\" x=\"1717.32\" y=\"3348.14\" rotation=\"86.1451\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"511\" type=\"static_wall\" x=\"1118.73\" y=\"2755.2\" rotation=\"290.251\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"516\" gid=\"6\" x=\"1467.6\" y=\"3235.65\" width=\"256\" height=\"256\" rotation=\"86.0373\"/>\n  <object id=\"517\" gid=\"6\" x=\"2793.77\" y=\"1130.21\" width=\"256\" height=\"256\" rotation=\"109.963\"/>\n  <object id=\"518\" gid=\"6\" x=\"3518.94\" y=\"1575.42\" width=\"256\" height=\"256\" rotation=\"197.19\"/>\n  <object id=\"519\" type=\"static_wall\" x=\"3326.42\" y=\"1767.7\" rotation=\"197.19\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"520\" type=\"static_wall\" x=\"2377.5\" y=\"741.734\" rotation=\"266.145\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"521\" type=\"static_wall\" x=\"2976.09\" y=\"1334.67\" rotation=\"110.251\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"522\" gid=\"6\" x=\"2627.22\" y=\"854.224\" width=\"256\" height=\"256\" rotation=\"266.037\"/>\n  <object id=\"525\" gid=\"5\" x=\"655.485\" y=\"3719.7\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"526\" type=\"static_wall\" x=\"573.485\" y=\"3709.03\" rotation=\"270\">\n   <polygon points=\"0,0 18.6667,67.3333 43.3333,63.3333 111.333,-50.6667 100,-124.667 62.6667,-106\"/>\n  </object>\n  <object id=\"527\" type=\"static_wall\" x=\"468.155\" y=\"3648.36\" rotation=\"270\">\n   <polygon points=\"0,0 106,-60.6667 168.667,-46 170,-16 48,55.3333 -8,47.3333\"/>\n  </object>\n  <object id=\"528\" gid=\"5\" x=\"3761.51\" y=\"759.174\" width=\"256\" height=\"256\" rotation=\"320.44\"/>\n  <object id=\"529\" type=\"static_wall\" x=\"3717.51\" y=\"689.16\" rotation=\"320.44\">\n   <polygon points=\"0,0 18.6667,67.3333 43.3333,63.3333 111.333,-50.6667 100,-124.667 62.6667,-106\"/>\n  </object>\n  <object id=\"530\" type=\"static_wall\" x=\"3697.2\" y=\"569.315\" rotation=\"320.44\">\n   <polygon points=\"0,0 106,-60.6667 168.667,-46 170,-16 48,55.3333 -8,47.3333\"/>\n  </object>\n  <object id=\"531\" gid=\"5\" x=\"3701\" y=\"284.753\" width=\"256\" height=\"256\" rotation=\"225.76\"/>\n  <object id=\"532\" type=\"static_wall\" x=\"3634.81\" y=\"334.31\" rotation=\"225.76\">\n   <polygon points=\"0,0 18.6667,67.3333 43.3333,63.3333 111.333,-50.6667 100,-124.667 62.6667,-106\"/>\n  </object>\n  <object id=\"533\" type=\"static_wall\" x=\"3517.02\" y=\"364.33\" rotation=\"225.76\">\n   <polygon points=\"0,0 106,-60.6667 168.667,-46 170,-16 48,55.3333 -8,47.3333\"/>\n  </object>\n  <object id=\"538\" gid=\"3\" x=\"611.859\" y=\"960.651\" width=\"256\" height=\"512\" rotation=\"45.3917\"/>\n  <object id=\"539\" type=\"static_wall\" x=\"928.716\" y=\"675.254\" rotation=\"45.3917\">\n   <polygon points=\"0,0 163.333,-82 214,-11.3333 214.667,350 166.667,422.667 -1.33333,338\"/>\n  </object>\n  <object id=\"542\" gid=\"2\" x=\"712.778\" y=\"1680.13\" width=\"256\" height=\"512\" rotation=\"305.521\"/>\n  <object id=\"543\" type=\"static_wall\" x=\"430.569\" y=\"1416.83\" width=\"162\" height=\"276.333\" rotation=\"305.521\"/>\n  <object id=\"544\" gid=\"4\" x=\"1502.1\" y=\"515.79\" width=\"128\" height=\"256\" rotation=\"135.572\"/>\n  <object id=\"545\" type=\"static_wall\" x=\"1495\" y=\"550.667\">\n   <polygon points=\"0,0 -49.6667,47.3333 101.333,202.667 151.667,153.667\"/>\n  </object>\n  <object id=\"552\" gid=\"3\" x=\"3539.78\" y=\"3123.32\" width=\"256\" height=\"512\" rotation=\"228.311\"/>\n  <object id=\"553\" type=\"static_wall\" x=\"3208.8\" y=\"3392.21\" rotation=\"228.311\">\n   <polygon points=\"0,0 163.333,-82 214,-11.3333 214.667,350 166.667,422.667 -1.33333,338\"/>\n  </object>\n  <object id=\"554\" gid=\"2\" x=\"3303.63\" y=\"2323.64\" width=\"256\" height=\"512\" rotation=\"128.44\"/>\n  <object id=\"555\" type=\"static_wall\" x=\"3572.07\" y=\"2600.97\" width=\"162\" height=\"276.333\" rotation=\"128.44\"/>\n  <object id=\"556\" gid=\"4\" x=\"2628.04\" y=\"3522.27\" width=\"128\" height=\"256\" rotation=\"318.491\"/>\n  <object id=\"557\" type=\"static_wall\" x=\"2636.9\" y=\"3487.8\" rotation=\"182.919\">\n   <polygon points=\"0,0 -49.6667,47.3333 101.333,202.667 151.667,153.667\"/>\n  </object>\n  <object id=\"560\" name=\"Autoturret_red\" type=\"turret\" x=\"373.667\" y=\"358\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"800\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"561\" name=\"Autoturret_blue\" type=\"turret\" x=\"3837.39\" y=\"3847.73\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"800\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3287\" y=\"742.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"807.938\" y=\"3331.03\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3839.49\" y=\"3343.13\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3862.06\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3722\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3590\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3466.9\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3901.65\" y=\"3497.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3467.07\" y=\"3943.16\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3592.62\" y=\"3828.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3698.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3836\" y=\"3626\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"307.337\" y=\"637.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"425.337\" y=\"753.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"298.667\" y=\"888.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"678.001\" y=\"512.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"810.97\" y=\"385.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"555.667\" y=\"639.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"229.667\" y=\"747.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"560.001\" y=\"396.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"686.303\" y=\"256.337\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"437.667\" y=\"523.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"22\" name=\"Controlpoints\" locked=\"1\">\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3329.95\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"373\" type=\"static_wall\" x=\"-448\" y=\"-40\" width=\"532\" height=\"1628\"/>\n  <object id=\"427\" type=\"static_wall\" x=\"1697.39\" y=\"-451.515\" width=\"532\" height=\"1628\" rotation=\"90\"/>\n  <object id=\"428\" type=\"static_wall\" x=\"2767.28\" y=\"-138.718\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"429\" type=\"static_wall\" x=\"2731.46\" y=\"4205.91\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"430\" type=\"static_wall\" x=\"577.096\" y=\"2048.31\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"431\" type=\"static_wall\" x=\"4927.46\" y=\"2014.91\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"432\" type=\"static_wall\" x=\"4138.24\" y=\"-455.695\" width=\"532\" height=\"1628\" rotation=\"90\"/>\n  <object id=\"433\" type=\"static_wall\" x=\"4549.76\" y=\"1689.7\" width=\"532\" height=\"1628\" rotation=\"180\"/>\n  <object id=\"434\" type=\"static_wall\" x=\"4549.02\" y=\"4138.83\" width=\"532\" height=\"1628\" rotation=\"180\"/>\n  <object id=\"435\" type=\"static_wall\" x=\"2403.62\" y=\"4550.35\" width=\"532\" height=\"1628\" rotation=\"270\"/>\n  <object id=\"436\" type=\"static_wall\" x=\"-48.24\" y=\"4555.7\" width=\"532\" height=\"1628\" rotation=\"270\"/>\n  <object id=\"437\" type=\"static_wall\" x=\"-459.76\" y=\"2410.3\" width=\"532\" height=\"1628\"/>\n  <object id=\"440\" type=\"static_wall\" x=\"1112.37\" y=\"1853.96\" width=\"163.333\" height=\"89.9329\" rotation=\"270\"/>\n  <object id=\"441\" type=\"static_wall\" x=\"1185\" y=\"1771.7\" width=\"77.9997\" height=\"395.235\" rotation=\"270\"/>\n  <object id=\"443\" type=\"static_wall\" x=\"1639.32\" y=\"1674.05\" width=\"40.9997\" height=\"40.2205\" rotation=\"270\"/>\n  <object id=\"444\" type=\"static_wall\" x=\"1600.85\" y=\"1635.14\" width=\"56.6418\" height=\"54.6352\" rotation=\"315\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"1541.03\" y=\"1768.87\" width=\"54.4884\" height=\"89.9484\" rotation=\"225\"/>\n  <object id=\"447\" type=\"static_wall\" x=\"1605.67\" y=\"1707.33\">\n   <polygon points=\"0,0 0,41.6667 -25.6667,64.3333 -67.3333,-13.6667 -38.3333,-41.6667\"/>\n  </object>\n  <object id=\"455\" type=\"static_wall\" x=\"2422.88\" y=\"1679.73\" width=\"38.7497\" height=\"38.6745\" rotation=\"270\"/>\n  <object id=\"456\" type=\"static_wall\" x=\"2422.76\" y=\"1641\" width=\"58.056\" height=\"54.6352\" rotation=\"315\"/>\n  <object id=\"457\" type=\"static_wall\" x=\"1631.52\" y=\"2459.77\" width=\"43.3633\" height=\"43.1296\" rotation=\"270\"/>\n  <object id=\"458\" type=\"static_wall\" x=\"1592.51\" y=\"2455.95\" width=\"55.6133\" height=\"60.5492\" rotation=\"315\"/>\n  <object id=\"459\" type=\"static_wall\" x=\"2417.4\" y=\"2463.3\" width=\"40.636\" height=\"40.5841\" rotation=\"270\"/>\n  <object id=\"460\" type=\"static_wall\" x=\"2417\" y=\"2463.66\" width=\"58.056\" height=\"53.8638\" rotation=\"315\"/>\n  <object id=\"469\" type=\"static_wall\" x=\"1106.33\" y=\"2398.03\" width=\"162.333\" height=\"89.9329\" rotation=\"270\"/>\n  <object id=\"470\" type=\"static_wall\" x=\"1193.33\" y=\"2398.03\" width=\"80.8785\" height=\"383.387\" rotation=\"270\"/>\n  <object id=\"472\" type=\"static_wall\" x=\"1576.73\" y=\"2316.91\">\n   <polygon points=\"0,0 24,23.0909 24.5455,62.1818 -15.0909,104.727 -54.5455,67.4545\"/>\n  </object>\n  <object id=\"473\" type=\"static_wall\" x=\"1674.55\" y=\"1560.91\">\n   <polygon points=\"0,0 41.0909,40.3636 80.3636,40.5455 104.909,15.2727 107.091,-42.7273 23.0909,-24.3636\"/>\n  </object>\n  <object id=\"474\" type=\"static_wall\" x=\"1697.33\" y=\"1536.53\" width=\"346.666\" height=\"84.2657\" rotation=\"270\"/>\n  <object id=\"475\" type=\"static_wall\" x=\"1697.32\" y=\"1106.15\" width=\"163.333\" height=\"89.9329\"/>\n  <object id=\"476\" type=\"static_wall\" x=\"1691.88\" y=\"2894.26\" width=\"163.333\" height=\"89.9329\"/>\n  <object id=\"477\" type=\"static_wall\" x=\"1691.83\" y=\"2545.53\" width=\"82.333\" height=\"364.933\"/>\n  <object id=\"478\" type=\"static_wall\" x=\"1666.73\" y=\"2529.82\">\n   <polygon points=\"0,0 39.4545,-38.3636 82.7273,-38.5455 106,-14.1818 107.273,16.7273 25.2727,23.6364\"/>\n  </object>\n  <object id=\"479\" type=\"static_wall\" x=\"2983.5\" y=\"2241.05\" width=\"163.333\" height=\"89.9329\" rotation=\"90\"/>\n  <object id=\"480\" type=\"static_wall\" x=\"2910.87\" y=\"2323.31\" width=\"77.9997\" height=\"394.974\" rotation=\"90\"/>\n  <object id=\"481\" type=\"static_wall\" x=\"2556.53\" y=\"2324.45\" width=\"54.4884\" height=\"92.3349\" rotation=\"45\"/>\n  <object id=\"482\" type=\"static_wall\" x=\"2490.2\" y=\"2387.68\" rotation=\"180\">\n   <polygon points=\"0,0 0,41.6667 -25.6667,64.3333 -67.3333,-13.6667 -38.3333,-41.6667\"/>\n  </object>\n  <object id=\"483\" type=\"static_wall\" x=\"2989.54\" y=\"1696.98\" width=\"162.333\" height=\"89.9329\" rotation=\"90\"/>\n  <object id=\"484\" type=\"static_wall\" x=\"2902.54\" y=\"1696.98\" width=\"80.8785\" height=\"383.387\" rotation=\"90\"/>\n  <object id=\"485\" type=\"static_wall\" x=\"2519.14\" y=\"1778.1\" rotation=\"180\">\n   <polygon points=\"0,0 24,23.0909 24.5455,62.1818 -15.0909,104.727 -54.5455,67.4545\"/>\n  </object>\n  <object id=\"486\" type=\"static_wall\" x=\"2421.32\" y=\"2534.1\" rotation=\"180\">\n   <polygon points=\"0,0 41.0909,40.3636 80.3636,40.5455 104.909,15.2727 107.091,-42.7273 23.0909,-24.3636\"/>\n  </object>\n  <object id=\"487\" type=\"static_wall\" x=\"2398.54\" y=\"2558.48\" width=\"346.666\" height=\"84.2657\" rotation=\"90\"/>\n  <object id=\"488\" type=\"static_wall\" x=\"2398.55\" y=\"2988.86\" width=\"163.333\" height=\"89.9329\" rotation=\"180\"/>\n  <object id=\"489\" type=\"static_wall\" x=\"2403.99\" y=\"1200.75\" width=\"163.333\" height=\"89.9329\" rotation=\"180\"/>\n  <object id=\"490\" type=\"static_wall\" x=\"2404.04\" y=\"1549.48\" width=\"82.333\" height=\"364.933\" rotation=\"180\"/>\n  <object id=\"491\" type=\"static_wall\" x=\"2429.14\" y=\"1565.19\" rotation=\"180\">\n   <polygon points=\"0,0 39.4545,-38.3636 82.7273,-38.5455 106,-14.1818 107.273,16.7273 25.2727,23.6364\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"24\" name=\"Lights\">\n  <object id=\"569\" name=\"Light\" type=\"light\" x=\"1666\" y=\"1666\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"570\" name=\"Light\" type=\"light\" x=\"2444\" y=\"1672\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"571\" name=\"Light\" type=\"light\" x=\"1656\" y=\"2440\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"572\" name=\"Light\" type=\"light\" x=\"2436\" y=\"2446\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"577\" name=\"Light\" type=\"light\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['caverns_final'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"15\" nextobjectid=\"1028\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.15\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc29d7d\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"objects1\" tilewidth=\"512\" tileheight=\"512\" tilecount=\"2\" columns=\"2\">\n  <image source=\"cavern_1.png\" width=\"1024\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"objects2\" tilewidth=\"256\" tileheight=\"1024\" tilecount=\"1\" columns=\"1\">\n  <image source=\"cavern_2.png\" width=\"256\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"objects3\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"2\" columns=\"2\">\n  <image source=\"cavern_3.png\" width=\"512\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"cavern_4\" tilewidth=\"64\" tileheight=\"128\" tilecount=\"2\" columns=\"2\">\n  <image source=\"cavern_4.png\" width=\"128\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"8\" name=\"bg\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"922\" gid=\"8\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"923\" gid=\"8\" x=\"4096\" y=\"1.13687e-13\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" locked=\"1\">\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"683.672\" y=\"328.999\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1939.67\" y=\"468.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"2440.33\" y=\"1602.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"405.662\" y=\"654.998\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3577.76\" y=\"1283.91\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"458.335\" y=\"432.998\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"206.672\" y=\"492.998\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3355.76\" y=\"1461.24\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3559.91\" y=\"1705.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3764.1\" y=\"1482.24\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"13\" name=\"Props\" locked=\"1\">\n  <object id=\"391\" gid=\"2\" x=\"3656\" y=\"468\" width=\"512\" height=\"512\" rotation=\"180\">\n   <properties>\n    <property name=\"zIndex\" type=\"float\" value=\"-2000\"/>\n   </properties>\n  </object>\n  <object id=\"393\" gid=\"1\" x=\"1412\" y=\"748\" width=\"344\" height=\"344\"/>\n  <object id=\"395\" gid=\"1\" x=\"1046.47\" y=\"1363.67\" width=\"398.299\" height=\"398.299\" rotation=\"56.9524\"/>\n  <object id=\"397\" gid=\"1\" x=\"2486\" y=\"1150.67\" width=\"344\" height=\"344\"/>\n  <object id=\"399\" gid=\"4\" x=\"3020.7\" y=\"373.474\" width=\"180.506\" height=\"361.012\" rotation=\"189.46\"/>\n  <object id=\"401\" gid=\"4\" x=\"1718.17\" y=\"1643.87\" width=\"112.383\" height=\"224.767\" rotation=\"347.521\"/>\n  <object id=\"403\" gid=\"4\" x=\"2830.65\" y=\"1673.85\" width=\"151.286\" height=\"302.573\" rotation=\"353.957\"/>\n  <object id=\"405\" gid=\"5\" x=\"409.887\" y=\"1356.3\" width=\"256\" height=\"512\" rotation=\"64.9775\"/>\n  <object id=\"378\" gid=\"3\" x=\"1788.88\" y=\"1434.59\" width=\"256\" height=\"1024\" rotation=\"15.4154\">\n   <properties>\n    <property name=\"zIndex\" type=\"float\" value=\"-2000\"/>\n   </properties>\n  </object>\n  <object id=\"389\" gid=\"2\" x=\"685.333\" y=\"964\" width=\"380\" height=\"380\">\n   <properties>\n    <property name=\"zIndex\" type=\"float\" value=\"-2000\"/>\n   </properties>\n  </object>\n  <object id=\"552\" gid=\"6\" x=\"1587.35\" y=\"261.389\" width=\"64\" height=\"128\" rotation=\"90.1738\"/>\n  <object id=\"553\" gid=\"7\" x=\"1222.98\" y=\"863.217\" width=\"64\" height=\"128\" rotation=\"355.737\"/>\n  <object id=\"925\" gid=\"7\" x=\"1199.19\" y=\"935.385\" width=\"64\" height=\"128\" rotation=\"14.2248\"/>\n  <object id=\"927\" gid=\"7\" x=\"1016.15\" y=\"1123.57\" width=\"64\" height=\"128\" rotation=\"45.6795\"/>\n  <object id=\"929\" gid=\"6\" x=\"2874.01\" y=\"1277.32\" width=\"64\" height=\"128\" rotation=\"154.606\"/>\n  <object id=\"931\" gid=\"7\" x=\"1499.8\" y=\"298.623\" width=\"64\" height=\"128\" rotation=\"70.1668\"/>\n  <object id=\"933\" gid=\"6\" x=\"2302.32\" y=\"1748.86\" width=\"64\" height=\"128\" rotation=\"311.865\"/>\n  <object id=\"935\" gid=\"7\" x=\"2384.92\" y=\"1785.36\" width=\"64\" height=\"128\" rotation=\"297.054\"/>\n  <object id=\"937\" gid=\"6\" x=\"2449.37\" y=\"316.385\" width=\"64\" height=\"128\" rotation=\"133.403\"/>\n  <object id=\"939\" gid=\"6\" x=\"2566.29\" y=\"490.992\" width=\"64\" height=\"128\" rotation=\"176.705\"/>\n  <object id=\"941\" gid=\"7\" x=\"1485.8\" y=\"1725.54\" width=\"64\" height=\"128\" rotation=\"28.6302\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"394\" type=\"static_wall\" x=\"1427.08\" y=\"567.214\" rotation=\"359.723\">\n   <polygon points=\"0,0 151.182,-144.195 303,-47.0064 287.755,104.177 100.365,158.17\"/>\n  </object>\n  <object id=\"396\" type=\"static_wall\" x=\"1232.18\" y=\"1265.32\" rotation=\"56.9524\">\n   <polygon points=\"0,0 175.717,-167.596 352.172,-54.6347 334.452,121.083 116.652,183.838\"/>\n  </object>\n  <object id=\"398\" type=\"static_wall\" x=\"2502.56\" y=\"968.539\" rotation=\"359.815\">\n   <polygon points=\"0,0 151.161,-145.608 302.957,-47.467 287.714,105.198 100.35,159.72\"/>\n  </object>\n  <object id=\"400\" type=\"static_wall\" x=\"2993.68\" y=\"468.787\" rotation=\"189.46\">\n   <polygon points=\"0,0 67.3784,-210.83 142.583,12.1716 83.4626,73.8989\"/>\n  </object>\n  <object id=\"402\" type=\"static_wall\" x=\"1711.59\" y=\"1581.94\" rotation=\"347.521\">\n   <polygon points=\"0,0 41.7373,-132.139 88.322,7.62871 51.7006,46.3169\"/>\n  </object>\n  <object id=\"404\" type=\"static_wall\" x=\"2828.7\" y=\"1592.19\" rotation=\"353.681\">\n   <polygon points=\"0,0 58.2176,-182.165 123.197,10.5168 72.1149,63.8516\"/>\n  </object>\n  <object id=\"538\" type=\"static_wall\" x=\"976.333\" y=\"591.667\">\n   <polygon points=\"0,0 -148.667,16 -165.333,54.6667 -121,104.667 19,174.333 51,161 69.3333,37.6667\"/>\n  </object>\n  <object id=\"539\" type=\"static_wall\" x=\"726.75\" y=\"780.75\">\n   <polygon points=\"0,0 136.75,37.25 163.75,126.25 99.75,171.25 -19.5,147 -36.5,71.25\"/>\n  </object>\n  <object id=\"540\" type=\"static_wall\" x=\"3263.21\" y=\"971.189\" rotation=\"180\">\n   <polygon points=\"0,0 -201.853,21.724 -224.481,74.2237 -164.288,142.112 25.7972,236.701 69.2452,218.598 94.1373,51.142\"/>\n  </object>\n  <object id=\"541\" type=\"static_wall\" x=\"3602.08\" y=\"714.462\" rotation=\"180\">\n   <polygon points=\"0,0 185.672,50.5762 222.332,171.416 135.436,232.515 -26.4761,199.589 -49.5579,96.7397\"/>\n  </object>\n  <object id=\"542\" type=\"static_wall\" x=\"2115.9\" y=\"599.592\" rotation=\"5.84317\">\n   <polygon points=\"0,0 127.667,-49.6667 146.333,-26.3333 95,253 14.3333,295.667 -12.3333,219.333 -17,63.6667\"/>\n  </object>\n  <object id=\"543\" type=\"static_wall\" x=\"1942.91\" y=\"1049.15\" rotation=\"5.84317\">\n   <polygon points=\"0,0 -63,120.5 -69,236.5 64.5,353.5 147,242 148.5,58 74,-17.5\"/>\n  </object>\n  <object id=\"544\" type=\"static_wall\" x=\"2036.1\" y=\"990.582\" rotation=\"5.84317\">\n   <polygon points=\"0,0 37.5,13.5 16.75,88.5 -48,59.25\"/>\n  </object>\n  <object id=\"545\" type=\"static_wall\" x=\"2063.89\" y=\"925.322\" rotation=\"5.84317\">\n   <polygon points=\"0,0 40.75,14 19.25,69.75 -17.25,53.5\"/>\n  </object>\n  <object id=\"546\" type=\"static_wall\" x=\"2074.75\" y=\"910.098\" rotation=\"5.84317\">\n   <polygon points=\"0,0 29.25,-111 59.25,-42.5 37,13.25\"/>\n  </object>\n  <object id=\"557\" type=\"static_wall\" x=\"1222.89\" y=\"767.458\" width=\"40.9427\" height=\"63.333\" rotation=\"355.737\"/>\n  <object id=\"559\" type=\"static_wall\" x=\"1621.28\" y=\"268.25\" width=\"61.9427\" height=\"40.9997\"/>\n  <object id=\"942\" type=\"static_wall\" x=\"-4.61927\" y=\"-32.0678\" width=\"163\" height=\"150.077\" rotation=\"329.555\"/>\n  <object id=\"944\" type=\"static_wall\" x=\"-98.4562\" y=\"114.009\" width=\"163\" height=\"150.077\" rotation=\"301.838\"/>\n  <object id=\"945\" type=\"static_wall\" x=\"-104.591\" y=\"330.571\" width=\"218.887\" height=\"150.077\" rotation=\"267.446\"/>\n  <object id=\"947\" type=\"static_wall\" x=\"34.5\" y=\"222\">\n   <polygon points=\"0,0 34,163 -5.5,276.5 -95.5,228 -98.5,17\"/>\n  </object>\n  <object id=\"948\" type=\"static_wall\" x=\"-39\" y=\"434.5\">\n   <polygon points=\"0,0 69.5,-5 139.5,90.5 148.5,126.5 87.5,230 -25.5,178.5\"/>\n  </object>\n  <object id=\"949\" type=\"static_wall\" x=\"70.5\" y=\"616\">\n   <polygon points=\"0,0 23,108.5 -55,244.5 -150.5,160.5 -141.5,-13\"/>\n  </object>\n  <object id=\"951\" type=\"static_wall\" x=\"-4.5\" y=\"777.5\">\n   <polygon points=\"0,0 71.5,83.5 114.5,233.5 -36,255.5 -86.5,56\"/>\n  </object>\n  <object id=\"953\" type=\"static_wall\" x=\"101\" y=\"995\">\n   <polygon points=\"0,0 132.5,134 -63,274\"/>\n  </object>\n  <object id=\"956\" type=\"static_wall\" x=\"42.5\" y=\"1121.5\">\n   <polygon points=\"0,0 96,232 -110,340.5\"/>\n  </object>\n  <object id=\"957\" type=\"static_wall\" x=\"-124.072\" y=\"1615.68\" width=\"306.903\" height=\"150.077\" rotation=\"281.954\"/>\n  <object id=\"959\" type=\"static_wall\" x=\"32.5\" y=\"1592\">\n   <polygon points=\"0,0 36.5,52 45,110 -53.5,173 -83.5,56.5\"/>\n  </object>\n  <object id=\"960\" type=\"static_wall\" x=\"-131.85\" y=\"1818.28\" width=\"242.654\" height=\"150.077\" rotation=\"304.879\"/>\n  <object id=\"961\" type=\"static_wall\" x=\"-13.1846\" y=\"2097.24\" width=\"242.654\" height=\"150.077\" rotation=\"247.256\"/>\n  <object id=\"962\" type=\"static_wall\" x=\"176.95\" y=\"2157.34\" width=\"180.172\" height=\"150.077\" rotation=\"200.416\"/>\n  <object id=\"963\" type=\"static_wall\" x=\"175\" y=\"2006\">\n   <polygon points=\"0,0 135.5,-35 332,32 318.5,129 -12,128.5\"/>\n  </object>\n  <object id=\"964\" type=\"static_wall\" x=\"639.25\" y=\"2138.44\" width=\"217.413\" height=\"150.077\" rotation=\"174.814\"/>\n  <object id=\"967\" type=\"static_wall\" x=\"688\" y=\"1918.5\">\n   <polygon points=\"0,0 74,84.5 14.5,196.5 -129.5,99\"/>\n  </object>\n  <object id=\"968\" type=\"static_wall\" x=\"702\" y=\"1939\">\n   <polygon points=\"0,0 103,63.6667 48,172.333 -38.3333,131.667\"/>\n  </object>\n  <object id=\"969\" type=\"static_wall\" x=\"766.667\" y=\"1981.67\">\n   <polygon points=\"0,0 129.333,48 102.333,139 -34,103.667\"/>\n  </object>\n  <object id=\"970\" type=\"static_wall\" x=\"1377.45\" y=\"2159.15\" width=\"526.502\" height=\"150.077\" rotation=\"179.309\"/>\n  <object id=\"971\" type=\"static_wall\" x=\"1494.78\" y=\"1947.21\" width=\"251.312\" height=\"150.077\" rotation=\"129.514\"/>\n  <object id=\"972\" type=\"static_wall\" x=\"1379.09\" y=\"1851.82\">\n   <polygon points=\"0,0 52.7273,-23.6364 88,-1.27273 121.273,92.9091 66.1818,119.818 -7.27273,88.3636\"/>\n  </object>\n  <object id=\"973\" type=\"static_wall\" x=\"1551\" y=\"1828.5\">\n   <polygon points=\"0,0 38,5.25 61.5,40.75 38.25,225.5 -108.75,80.5\"/>\n  </object>\n  <object id=\"974\" type=\"static_wall\" x=\"1859.37\" y=\"2120.53\" width=\"280.646\" height=\"150.077\" rotation=\"172.868\"/>\n  <object id=\"976\" type=\"static_wall\" x=\"1836.5\" y=\"1920\">\n   <polygon points=\"0,0 52.5,-5.25 219.25,136 148.5,180 -70.75,153.5 -39.25,56.5\"/>\n  </object>\n  <object id=\"977\" type=\"static_wall\" x=\"2274.67\" y=\"2033.67\">\n   <polygon points=\"0,0 -168,-94.3333 -298.667,-22.6667 -175.333,101.667\"/>\n  </object>\n  <object id=\"978\" type=\"static_wall\" x=\"2281.75\" y=\"1986.25\">\n   <polygon points=\"0,0 -74.25,53.5 -1.5,120.5 108.75,107.75 94.5,35.75 15.5,-2.25\"/>\n  </object>\n  <object id=\"979\" type=\"static_wall\" x=\"2362\" y=\"2024\">\n   <polygon points=\"0,0 80.3333,-17.6667 299.667,-8.66667 304.667,112.667 -15,113.333\"/>\n  </object>\n  <object id=\"980\" type=\"static_wall\" x=\"2657.33\" y=\"1974\">\n   <polygon points=\"0,0 -121.333,54.6667 9,170.333 93.6667,58.3333\"/>\n  </object>\n  <object id=\"981\" type=\"static_wall\" x=\"2895.5\" y=\"2134.95\" width=\"149.17\" height=\"150.077\" rotation=\"162.025\"/>\n  <object id=\"982\" type=\"static_wall\" x=\"3088.95\" y=\"1925.84\" width=\"318.16\" height=\"150.077\" rotation=\"135.737\"/>\n  <object id=\"983\" type=\"static_wall\" x=\"3290.76\" y=\"1950.21\" width=\"298.056\" height=\"150.077\" rotation=\"176.547\"/>\n  <object id=\"984\" type=\"static_wall\" x=\"3348.62\" y=\"2127.36\" width=\"298.056\" height=\"150.077\" rotation=\"231.709\"/>\n  <object id=\"985\" type=\"static_wall\" x=\"3494.46\" y=\"2160.5\" width=\"178.542\" height=\"150.077\" rotation=\"201.26\"/>\n  <object id=\"986\" type=\"static_wall\" x=\"3622\" y=\"1933.5\">\n   <polygon points=\"0,0 -152.5,90 22,226 150.5,71.5\"/>\n  </object>\n  <object id=\"987\" type=\"static_wall\" x=\"3743\" y=\"2018.33\">\n   <polygon points=\"0,0 78.3333,-46 203.667,23 210.333,110 62,119 -45,98.3333\"/>\n  </object>\n  <object id=\"988\" type=\"static_wall\" x=\"4101.56\" y=\"2079.41\" width=\"163\" height=\"150.077\" rotation=\"149.555\"/>\n  <object id=\"989\" type=\"static_wall\" x=\"4195.39\" y=\"1933.34\" width=\"163\" height=\"150.077\" rotation=\"121.838\"/>\n  <object id=\"990\" type=\"static_wall\" x=\"4201.53\" y=\"1716.77\" width=\"218.887\" height=\"150.077\" rotation=\"87.446\"/>\n  <object id=\"991\" type=\"static_wall\" x=\"4062.44\" y=\"1825.34\" rotation=\"180\">\n   <polygon points=\"0,0 34,163 -5.5,276.5 -95.5,228 -98.5,17\"/>\n  </object>\n  <object id=\"992\" type=\"static_wall\" x=\"4135.94\" y=\"1612.84\" rotation=\"180\">\n   <polygon points=\"0,0 69.5,-5 139.5,90.5 148.5,126.5 87.5,230 -25.5,178.5\"/>\n  </object>\n  <object id=\"993\" type=\"static_wall\" x=\"4026.44\" y=\"1431.34\" rotation=\"180\">\n   <polygon points=\"0,0 23,108.5 -55,244.5 -150.5,160.5 -141.5,-13\"/>\n  </object>\n  <object id=\"994\" type=\"static_wall\" x=\"4101.44\" y=\"1269.84\" rotation=\"180\">\n   <polygon points=\"0,0 71.5,83.5 114.5,233.5 -36,255.5 -86.5,56\"/>\n  </object>\n  <object id=\"995\" type=\"static_wall\" x=\"3995.94\" y=\"1052.34\" rotation=\"180\">\n   <polygon points=\"0,0 132.5,134 -63,274\"/>\n  </object>\n  <object id=\"996\" type=\"static_wall\" x=\"4054.44\" y=\"925.844\" rotation=\"180\">\n   <polygon points=\"0,0 96,232 -110,340.5\"/>\n  </object>\n  <object id=\"997\" type=\"static_wall\" x=\"4221.01\" y=\"431.664\" width=\"306.903\" height=\"150.077\" rotation=\"101.954\"/>\n  <object id=\"998\" type=\"static_wall\" x=\"4064.44\" y=\"455.344\" rotation=\"180\">\n   <polygon points=\"0,0 36.5,52 45,110 -53.5,173 -83.5,56.5\"/>\n  </object>\n  <object id=\"999\" type=\"static_wall\" x=\"4228.79\" y=\"229.064\" width=\"242.654\" height=\"150.077\" rotation=\"124.879\"/>\n  <object id=\"1000\" type=\"static_wall\" x=\"4110.12\" y=\"-49.8956\" width=\"242.654\" height=\"150.077\" rotation=\"67.256\"/>\n  <object id=\"1001\" type=\"static_wall\" x=\"3919.99\" y=\"-109.996\" width=\"180.172\" height=\"150.077\" rotation=\"20.416\"/>\n  <object id=\"1002\" type=\"static_wall\" x=\"3921.94\" y=\"41.3444\" rotation=\"180\">\n   <polygon points=\"0,0 135.5,-35 332,32 318.5,129 -12,128.5\"/>\n  </object>\n  <object id=\"1003\" type=\"static_wall\" x=\"3457.69\" y=\"-91.0956\" width=\"217.413\" height=\"150.077\" rotation=\"354.814\"/>\n  <object id=\"1004\" type=\"static_wall\" x=\"3408.94\" y=\"128.844\" rotation=\"180\">\n   <polygon points=\"0,0 74,84.5 14.5,196.5 -129.5,99\"/>\n  </object>\n  <object id=\"1005\" type=\"static_wall\" x=\"3394.94\" y=\"108.344\" rotation=\"180\">\n   <polygon points=\"0,0 103,63.6667 48,172.333 -38.3333,131.667\"/>\n  </object>\n  <object id=\"1006\" type=\"static_wall\" x=\"3330.27\" y=\"65.6744\" rotation=\"180\">\n   <polygon points=\"0,0 129.333,48 102.333,139 -34,103.667\"/>\n  </object>\n  <object id=\"1007\" type=\"static_wall\" x=\"2719.49\" y=\"-111.806\" width=\"526.502\" height=\"150.077\" rotation=\"359.309\"/>\n  <object id=\"1008\" type=\"static_wall\" x=\"2602.16\" y=\"100.134\" width=\"251.312\" height=\"150.077\" rotation=\"309.514\"/>\n  <object id=\"1009\" type=\"static_wall\" x=\"2717.85\" y=\"195.524\" rotation=\"180\">\n   <polygon points=\"0,0 52.7273,-23.6364 88,-1.27273 121.273,92.9091 66.1818,119.818 -7.27273,88.3636\"/>\n  </object>\n  <object id=\"1010\" type=\"static_wall\" x=\"2545.94\" y=\"218.844\" rotation=\"180\">\n   <polygon points=\"0,0 38,5.25 61.5,40.75 38.25,225.5 -108.75,80.5\"/>\n  </object>\n  <object id=\"1011\" type=\"static_wall\" x=\"2237.57\" y=\"-73.1856\" width=\"280.646\" height=\"150.077\" rotation=\"352.868\"/>\n  <object id=\"1012\" type=\"static_wall\" x=\"2260.44\" y=\"127.344\" rotation=\"180\">\n   <polygon points=\"0,0 52.5,-5.25 219.25,136 148.5,180 -70.75,153.5 -39.25,56.5\"/>\n  </object>\n  <object id=\"1013\" type=\"static_wall\" x=\"1822.27\" y=\"13.6744\" rotation=\"180\">\n   <polygon points=\"0,0 -168,-94.3333 -298.667,-22.6667 -175.333,101.667\"/>\n  </object>\n  <object id=\"1014\" type=\"static_wall\" x=\"1815.19\" y=\"61.0944\" rotation=\"180\">\n   <polygon points=\"0,0 -74.25,53.5 -1.5,120.5 108.75,107.75 94.5,35.75 15.5,-2.25\"/>\n  </object>\n  <object id=\"1015\" type=\"static_wall\" x=\"1734.94\" y=\"23.3444\" rotation=\"180\">\n   <polygon points=\"0,0 80.3333,-17.6667 299.667,-8.66667 304.667,112.667 -15,113.333\"/>\n  </object>\n  <object id=\"1016\" type=\"static_wall\" x=\"1439.61\" y=\"73.3444\" rotation=\"180\">\n   <polygon points=\"0,0 -121.333,54.6667 9,170.333 93.6667,58.3333\"/>\n  </object>\n  <object id=\"1017\" type=\"static_wall\" x=\"1201.44\" y=\"-87.6056\" width=\"149.17\" height=\"150.077\" rotation=\"342.025\"/>\n  <object id=\"1018\" type=\"static_wall\" x=\"1007.99\" y=\"121.504\" width=\"318.16\" height=\"150.077\" rotation=\"315.737\"/>\n  <object id=\"1019\" type=\"static_wall\" x=\"806.177\" y=\"97.1344\" width=\"298.056\" height=\"150.077\" rotation=\"356.547\"/>\n  <object id=\"1020\" type=\"static_wall\" x=\"748.317\" y=\"-80.0156\" width=\"298.056\" height=\"150.077\" rotation=\"51.709\"/>\n  <object id=\"1021\" type=\"static_wall\" x=\"602.477\" y=\"-113.156\" width=\"178.542\" height=\"150.077\" rotation=\"21.26\"/>\n  <object id=\"1022\" type=\"static_wall\" x=\"474.937\" y=\"113.844\" rotation=\"180\">\n   <polygon points=\"0,0 -152.5,90 22,226 150.5,71.5\"/>\n  </object>\n  <object id=\"1023\" type=\"static_wall\" x=\"353.937\" y=\"29.0144\" rotation=\"180\">\n   <polygon points=\"0,0 78.3333,-46 203.667,23 210.333,110 62,119 -45,98.3333\"/>\n  </object>\n  <object id=\"924\" type=\"static_wall\" x=\"1229.47\" y=\"844.541\" width=\"40.9427\" height=\"63.333\" rotation=\"14.2248\"/>\n  <object id=\"926\" type=\"static_wall\" x=\"1089.39\" y=\"1061.87\" width=\"40.9427\" height=\"63.333\" rotation=\"45.6795\"/>\n  <object id=\"928\" type=\"static_wall\" x=\"2882.47\" y=\"1310.89\" width=\"61.9427\" height=\"40.9997\" rotation=\"64.432\"/>\n  <object id=\"930\" type=\"static_wall\" x=\"1592.03\" y=\"272.833\" width=\"40.9427\" height=\"63.333\" rotation=\"70.1668\"/>\n  <object id=\"932\" type=\"static_wall\" x=\"2281.55\" y=\"1721.17\" width=\"61.9427\" height=\"40.9997\" rotation=\"221.691\"/>\n  <object id=\"934\" type=\"static_wall\" x=\"2303.06\" y=\"1735.66\" width=\"40.9427\" height=\"63.333\" rotation=\"297.054\"/>\n  <object id=\"936\" type=\"static_wall\" x=\"2469.4\" y=\"344.624\" width=\"61.9427\" height=\"40.9997\" rotation=\"43.2293\"/>\n  <object id=\"938\" type=\"static_wall\" x=\"2561.5\" y=\"525.28\" width=\"61.9427\" height=\"40.9997\" rotation=\"86.5311\"/>\n  <object id=\"940\" type=\"static_wall\" x=\"1537.73\" y=\"1645.08\" width=\"40.9427\" height=\"63.333\" rotation=\"28.6302\"/>\n  <object id=\"1024\" type=\"static_wall\" x=\"494.667\" y=\"1354.67\">\n   <polygon points=\"0,0 -6,15.3333 18,154 84,176 155.394,95.5152 127.333,-80.6667\"/>\n  </object>\n  <object id=\"1026\" type=\"static_wall\" x=\"622\" y=\"1459.33\">\n   <polygon points=\"0,0 168.333,-20.3333 110.667,-222.667 63.3333,-230.333 -65.3333,-139.333\"/>\n  </object>\n  <object id=\"1027\" type=\"static_wall\" x=\"723\" y=\"1238\">\n   <polygon points=\"0,0 157,-21 158,145.5 67,201.5\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['battlements'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" backgroundcolor=\"#4b2f24\" nextlayerid=\"14\" nextobjectid=\"281\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffb3a197\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg2.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"battlement_gun_z\" tilewidth=\"256\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_gun_z.png\" width=\"256\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"battlement_net_z\" tilewidth=\"512\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_net_z.png\" width=\"512\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"battlement_rangefinder_z\" tilewidth=\"64\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_rangefinder_z.png\" width=\"64\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"186\" gid=\"1\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"187\" gid=\"1\" x=\"4096\" y=\"1.13687e-13\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" locked=\"1\">\n  <object id=\"188\" gid=\"2\" x=\"726.841\" y=\"353.845\" width=\"256\" height=\"128\" rotation=\"30.5915\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"189\" gid=\"2\" x=\"1019.72\" y=\"1774.15\" width=\"256\" height=\"128\" rotation=\"4.36914\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"190\" gid=\"2\" x=\"3097.86\" y=\"330.19\" width=\"256\" height=\"128\" rotation=\"215.528\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"191\" gid=\"2\" x=\"3367.41\" y=\"1696.02\" width=\"256\" height=\"128\" rotation=\"211.139\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"192\" gid=\"3\" x=\"1375.2\" y=\"905.338\" width=\"512\" height=\"256\" rotation=\"319.63\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"193\" gid=\"3\" x=\"2734.57\" y=\"1131.87\" width=\"512\" height=\"256\" rotation=\"139.63\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"194\" gid=\"4\" x=\"961.085\" y=\"1176.3\" width=\"64\" height=\"256\" rotation=\"5.55868\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"195\" gid=\"4\" x=\"3180.38\" y=\"899.939\" width=\"64\" height=\"256\" rotation=\"206.48\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Entities\">\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"300.335\" y=\"391.998\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"100\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"428.672\" y=\"277.998\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3558.57\" y=\"1526.25\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3807.58\" y=\"1886.24\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3798.25\" y=\"1594.24\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-20\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"243.672\" y=\"197.665\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1466.34\" y=\"671\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"2639\" y=\"1405\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"481.329\" y=\"500.331\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"100\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3580.91\" y=\"1783.91\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"13\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"196\" type=\"static_wall\" x=\"-79.3333\" y=\"-32\" width=\"144.667\" height=\"321.333\"/>\n  <object id=\"197\" type=\"static_wall\" x=\"-25.0002\" y=\"402\" width=\"144.667\" height=\"234.666\"/>\n  <object id=\"198\" type=\"static_wall\" x=\"-26.3346\" y=\"983.031\" width=\"144.667\" height=\"234.666\" rotation=\"351.253\"/>\n  <object id=\"199\" type=\"static_wall\" x=\"148.919\" y=\"1940.71\" width=\"144.667\" height=\"234.666\" rotation=\"310.806\"/>\n  <object id=\"200\" type=\"static_wall\" x=\"300.364\" y=\"2070.58\" width=\"144.667\" height=\"234.666\" rotation=\"269.517\"/>\n  <object id=\"201\" type=\"static_wall\" x=\"1167.73\" y=\"2077.52\" width=\"190.623\" height=\"131.695\" rotation=\"269.517\"/>\n  <object id=\"203\" type=\"static_wall\" x=\"55.3332\" y=\"-38.8332\" width=\"399.167\" height=\"92.833\"/>\n  <object id=\"204\" type=\"static_wall\" x=\"922.416\" y=\"-57.7498\" width=\"197.834\" height=\"178.166\"/>\n  <object id=\"205\" type=\"static_wall\" x=\"1443.08\" y=\"38.2501\" width=\"197.834\" height=\"87.4997\"/>\n  <object id=\"206\" type=\"static_wall\" x=\"1791.08\" y=\"-29.7499\" width=\"238.501\" height=\"87.4997\"/>\n  <object id=\"207\" type=\"static_wall\" x=\"1548.5\" y=\"-8.5\">\n   <polygon points=\"0,0 1,55.5 91,191.5 170,171 328.5,15.5\"/>\n  </object>\n  <object id=\"208\" type=\"static_wall\" x=\"1066\" y=\"115.333\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"209\" type=\"static_wall\" x=\"545.333\" y=\"114\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"210\" type=\"static_wall\" x=\"113\" y=\"994.333\" rotation=\"270\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"211\" type=\"static_wall\" x=\"881.667\" y=\"1930.33\" rotation=\"180\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"212\" type=\"static_wall\" x=\"1317.5\" y=\"1930\" rotation=\"180\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"213\" type=\"static_wall\" x=\"1594\" y=\"1762.67\">\n   <polygon points=\"0,0 -356,141.333 -342.667,339.333 326,345.333 256,12.6667\"/>\n  </object>\n  <object id=\"215\" type=\"static_wall\" x=\"37.3333\" y=\"206.667\">\n   <polygon points=\"0,0 125.333,134 148.667,218.667 -95.3333,356.667 -119.333,3.33333\"/>\n  </object>\n  <object id=\"216\" type=\"static_wall\" x=\"269.2\" y=\"1270.49\" rotation=\"60\">\n   <polygon points=\"0,0 -356,141.333 -342.667,339.333 326,345.333 256,12.6667\"/>\n  </object>\n  <object id=\"217\" type=\"static_wall\" x=\"321.333\" y=\"1534\">\n   <polygon points=\"0,0 34,160.667 -4.66667,466 -188.667,411.333 -224.667,48.6667\"/>\n  </object>\n  <object id=\"218\" type=\"static_wall\" x=\"782\" y=\"289\">\n   <polygon points=\"0,0 115.5,-68.5 195.5,-7.5 166,89.5 -9,94.5\"/>\n  </object>\n  <object id=\"219\" type=\"static_wall\" x=\"632.5\" y=\"362\">\n   <polygon points=\"0,0 71,-141.5 320,-63 290,9 207.5,94\"/>\n  </object>\n  <object id=\"222\" type=\"static_wall\" x=\"903.5\" y=\"1712.5\">\n   <polygon points=\"0,0 197.5,-109 295,-23.5 240,74.5 84.5,136\"/>\n  </object>\n  <object id=\"223\" type=\"static_wall\" x=\"1134.5\" y=\"1671.5\">\n   <polygon points=\"0,0 87,1 119,99.5 46,164.5 -56,112.5\"/>\n  </object>\n  <object id=\"224\" type=\"static_wall\" x=\"405.5\" y=\"20.5\">\n   <polygon points=\"0,0 66,99 251.5,98 254,-98.5 43,-108.5\"/>\n  </object>\n  <object id=\"225\" type=\"static_wall\" x=\"758\" y=\"793.333\">\n   <polygon points=\"0,0 90,-20.6667 208.667,160 206,250 105.333,216.667 -10,38\"/>\n  </object>\n  <object id=\"226\" type=\"static_wall\" x=\"864\" y=\"1004\">\n   <polygon points=\"0,0 -1.33333,87.3333 84.6667,133.333 196.667,86 197.333,6 77.3333,-38\"/>\n  </object>\n  <object id=\"227\" type=\"static_wall\" x=\"868\" y=\"1076\">\n   <polygon points=\"0,0 -119.333,182.667 -108,231.333 -12.6667,249.333 100,68 96.6667,-13.3333\"/>\n  </object>\n  <object id=\"228\" type=\"static_wall\" x=\"1549\" y=\"383\">\n   <polygon points=\"0,0 -91.5,58 -86,87 -7.5,104 31,29.5\"/>\n  </object>\n  <object id=\"229\" type=\"static_wall\" x=\"1646\" y=\"575\">\n   <polygon points=\"0,0 -3.5,58.5 11.5,123.5 98,49.5 71.5,-13.5\"/>\n  </object>\n  <object id=\"230\" type=\"static_wall\" x=\"1657.63\" y=\"697.75\">\n   <polygon points=\"0,0 -39.75,-64.5 5.75,-95.75 67.75,-70\"/>\n  </object>\n  <object id=\"231\" type=\"static_wall\" x=\"1307.67\" y=\"648.667\">\n   <polygon points=\"0,0 -60.6667,82 -112.333,53 -50,-40 -21,-30.6667\"/>\n  </object>\n  <object id=\"232\" type=\"static_wall\" x=\"1195.63\" y=\"701.625\">\n   <polygon points=\"0,0 56,136.875 188.042,228.375 210.708,197.375 187.708,146.042 54.0417,-16.2917\"/>\n  </object>\n  <object id=\"233\" type=\"static_wall\" x=\"1383.63\" y=\"930\">\n   <polygon points=\"0,0 83.75,-40.75 87,-85.25 28,-97.375 -28.125,-71\"/>\n  </object>\n  <object id=\"234\" type=\"static_wall\" x=\"1494.5\" y=\"1191\">\n   <polygon points=\"0,0 -49.5,49 -29.5,98.75 101,113.25 115,58.5 60.5,-1.75\"/>\n  </object>\n  <object id=\"235\" type=\"static_wall\" x=\"1623.33\" y=\"1328\">\n   <polygon points=\"0,0 8,124.333 58.3333,151.667 109.333,100.333 107.667,44.3333 46.3333,-14.3333\"/>\n  </object>\n  <object id=\"236\" type=\"static_wall\" x=\"4172.79\" y=\"2079.67\" width=\"144.667\" height=\"321.333\" rotation=\"180\"/>\n  <object id=\"237\" type=\"static_wall\" x=\"4118.45\" y=\"1645.67\" width=\"144.667\" height=\"234.666\" rotation=\"180\"/>\n  <object id=\"238\" type=\"static_wall\" x=\"4119.79\" y=\"1064.64\" width=\"144.667\" height=\"234.666\" rotation=\"171.253\"/>\n  <object id=\"239\" type=\"static_wall\" x=\"3944.53\" y=\"106.962\" width=\"144.667\" height=\"234.666\" rotation=\"130.806\"/>\n  <object id=\"240\" type=\"static_wall\" x=\"3793.09\" y=\"-22.9084\" width=\"144.667\" height=\"234.666\" rotation=\"89.517\"/>\n  <object id=\"241\" type=\"static_wall\" x=\"2925.72\" y=\"-29.8484\" width=\"190.623\" height=\"131.695\" rotation=\"89.517\"/>\n  <object id=\"242\" type=\"static_wall\" x=\"4038.12\" y=\"2086.5\" width=\"399.167\" height=\"92.833\" rotation=\"180\"/>\n  <object id=\"243\" type=\"static_wall\" x=\"3171.04\" y=\"2105.42\" width=\"197.834\" height=\"178.166\" rotation=\"180\"/>\n  <object id=\"244\" type=\"static_wall\" x=\"2650.37\" y=\"2009.42\" width=\"197.834\" height=\"87.4997\" rotation=\"180\"/>\n  <object id=\"245\" type=\"static_wall\" x=\"2302.37\" y=\"2077.42\" width=\"238.501\" height=\"87.4997\" rotation=\"180\"/>\n  <object id=\"246\" type=\"static_wall\" x=\"2544.95\" y=\"2056.17\" rotation=\"180\">\n   <polygon points=\"0,0 1,55.5 91,191.5 170,171 328.5,15.5\"/>\n  </object>\n  <object id=\"247\" type=\"static_wall\" x=\"3027.45\" y=\"1932.34\" rotation=\"180\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"248\" type=\"static_wall\" x=\"3548.12\" y=\"1933.67\" rotation=\"180\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"249\" type=\"static_wall\" x=\"3980.45\" y=\"1053.34\" rotation=\"90\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"250\" type=\"static_wall\" x=\"3211.79\" y=\"117.342\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"251\" type=\"static_wall\" x=\"2775.95\" y=\"117.672\">\n   <polygon points=\"0,0 222.667,64.6667 501.333,-12 508,-174 -4.66667,-174\"/>\n  </object>\n  <object id=\"252\" type=\"static_wall\" x=\"2499.45\" y=\"285.002\" rotation=\"180\">\n   <polygon points=\"0,0 -356,141.333 -342.667,339.333 326,345.333 256,12.6667\"/>\n  </object>\n  <object id=\"253\" type=\"static_wall\" x=\"4056.12\" y=\"1841\" rotation=\"180\">\n   <polygon points=\"0,0 125.333,134 148.667,218.667 -95.3333,356.667 -119.333,3.33333\"/>\n  </object>\n  <object id=\"254\" type=\"static_wall\" x=\"3824.25\" y=\"777.182\" rotation=\"240\">\n   <polygon points=\"0,0 -356,141.333 -342.667,339.333 326,345.333 256,12.6667\"/>\n  </object>\n  <object id=\"255\" type=\"static_wall\" x=\"3772.12\" y=\"513.672\" rotation=\"180\">\n   <polygon points=\"0,0 34,160.667 -4.66667,466 -188.667,411.333 -224.667,48.6667\"/>\n  </object>\n  <object id=\"256\" type=\"static_wall\" x=\"3311.45\" y=\"1758.67\" rotation=\"180\">\n   <polygon points=\"0,0 115.5,-68.5 195.5,-7.5 166,89.5 -9,94.5\"/>\n  </object>\n  <object id=\"257\" type=\"static_wall\" x=\"3460.95\" y=\"1685.67\" rotation=\"180\">\n   <polygon points=\"0,0 71,-141.5 320,-63 290,9 207.5,94\"/>\n  </object>\n  <object id=\"258\" type=\"static_wall\" x=\"3189.95\" y=\"335.172\" rotation=\"180\">\n   <polygon points=\"0,0 197.5,-109 295,-23.5 240,74.5 84.5,136\"/>\n  </object>\n  <object id=\"259\" type=\"static_wall\" x=\"2958.95\" y=\"376.172\" rotation=\"180\">\n   <polygon points=\"0,0 87,1 119,99.5 46,164.5 -56,112.5\"/>\n  </object>\n  <object id=\"260\" type=\"static_wall\" x=\"3687.95\" y=\"2027.17\" rotation=\"180\">\n   <polygon points=\"0,0 66,99 251.5,98 254,-98.5 43,-108.5\"/>\n  </object>\n  <object id=\"261\" type=\"static_wall\" x=\"3335.45\" y=\"1254.34\" rotation=\"180\">\n   <polygon points=\"0,0 90,-20.6667 208.667,160 206,250 105.333,216.667 -10,38\"/>\n  </object>\n  <object id=\"262\" type=\"static_wall\" x=\"3229.45\" y=\"1043.67\" rotation=\"180\">\n   <polygon points=\"0,0 -1.33333,87.3333 84.6667,133.333 196.667,86 197.333,6 77.3333,-38\"/>\n  </object>\n  <object id=\"263\" type=\"static_wall\" x=\"3225.45\" y=\"971.672\" rotation=\"180\">\n   <polygon points=\"0,0 -119.333,182.667 -108,231.333 -12.6667,249.333 100,68 96.6667,-13.3333\"/>\n  </object>\n  <object id=\"264\" type=\"static_wall\" x=\"2544.45\" y=\"1664.67\" rotation=\"180\">\n   <polygon points=\"0,0 -91.5,58 -86,87 -7.5,104 31,29.5\"/>\n  </object>\n  <object id=\"265\" type=\"static_wall\" x=\"2447.45\" y=\"1472.67\" rotation=\"180\">\n   <polygon points=\"0,0 -3.5,58.5 11.5,123.5 98,49.5 71.5,-13.5\"/>\n  </object>\n  <object id=\"266\" type=\"static_wall\" x=\"2435.82\" y=\"1349.92\" rotation=\"180\">\n   <polygon points=\"0,0 -39.75,-64.5 5.75,-95.75 67.75,-70\"/>\n  </object>\n  <object id=\"267\" type=\"static_wall\" x=\"2785.78\" y=\"1399\" rotation=\"180\">\n   <polygon points=\"0,0 -60.6667,82 -112.333,53 -50,-40 -21,-30.6667\"/>\n  </object>\n  <object id=\"268\" type=\"static_wall\" x=\"2897.82\" y=\"1346.05\" rotation=\"180\">\n   <polygon points=\"0,0 56,136.875 188.042,228.375 210.708,197.375 187.708,146.042 54.0417,-16.2917\"/>\n  </object>\n  <object id=\"269\" type=\"static_wall\" x=\"2709.82\" y=\"1117.67\" rotation=\"180\">\n   <polygon points=\"0,0 83.75,-40.75 87,-85.25 28,-97.375 -28.125,-71\"/>\n  </object>\n  <object id=\"270\" type=\"static_wall\" x=\"2598.95\" y=\"856.672\" rotation=\"180\">\n   <polygon points=\"0,0 -49.5,49 -29.5,98.75 101,113.25 115,58.5 60.5,-1.75\"/>\n  </object>\n  <object id=\"271\" type=\"static_wall\" x=\"2470.12\" y=\"719.672\" rotation=\"180\">\n   <polygon points=\"0,0 8,124.333 58.3333,151.667 109.333,100.333 107.667,44.3333 46.3333,-14.3333\"/>\n  </object>\n  <object id=\"274\" type=\"static_wall\" x=\"2056\" y=\"144.5\">\n   <polygon points=\"0,0 212,60.5 249.5,-171.5 43.5,-210.5\"/>\n  </object>\n  <object id=\"277\" type=\"static_wall\" x=\"1857.5\" y=\"1853\">\n   <polygon points=\"0,0 204.5,57 192.5,254 -47.5,246\"/>\n  </object>\n  <object id=\"279\" type=\"static_wall\" x=\"2077.91\" y=\"1893.43\" rotation=\"1.96889\">\n   <polygon points=\"0,0 20,27.5 20,162.5 -75,177 -155.5,104.5 -130.5,7\"/>\n  </object>\n  <object id=\"280\" type=\"static_wall\" x=\"2018.24\" y=\"153.361\" rotation=\"181.969\">\n   <polygon points=\"0,0 20,27.5 20,162.5 -75,177 -155.5,104.5 -130.5,7\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['battlements_conquest'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" backgroundcolor=\"#574215\" nextlayerid=\"20\" nextobjectid=\"755\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffb3a197\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"4096\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"4096\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"battlement_gun_z\" tilewidth=\"256\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_gun_z.png\" width=\"256\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"battlement_net_z\" tilewidth=\"512\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_net_z.png\" width=\"512\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"battlement_rangefinder_z\" tilewidth=\"64\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_rangefinder_z.png\" width=\"64\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"419\" gid=\"1\" x=\"0\" y=\"4096\" width=\"2048\" height=\"4096\"/>\n  <object id=\"420\" gid=\"1\" x=\"4096\" y=\"2.27374e-13\" width=\"2048\" height=\"4096\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"MapObjects\">\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3383.67\" y=\"640.666\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"697.605\" y=\"3469.36\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.49\" y=\"3954.46\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3827.39\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3687.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3555.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3432.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3804.65\" y=\"3804.56\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3904.07\" y=\"3963.49\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3555.62\" y=\"3795.43\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3663.43\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3815\" y=\"3564.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"271.337\" y=\"551.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"381.337\" y=\"639.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"302.667\" y=\"792.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"644.001\" y=\"428.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"370.97\" y=\"209.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"519.667\" y=\"559.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"254.667\" y=\"312.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"536.001\" y=\"312.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"696.97\" y=\"247.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"407.667\" y=\"441.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3359.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"704\" name=\"Turret\" type=\"turret\" x=\"4068\" y=\"3724\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"705\" name=\"Turret\" type=\"turret\" x=\"31.9091\" y=\"393.879\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"18\" name=\"Z_Objects\" locked=\"1\">\n  <object id=\"690\" gid=\"2\" x=\"3067.03\" y=\"264.253\" width=\"256\" height=\"128\" rotation=\"178.007\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"691\" gid=\"2\" x=\"1039.26\" y=\"3839.39\" width=\"256\" height=\"128\" rotation=\"353.113\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"692\" gid=\"3\" x=\"2534.01\" y=\"3698.89\" width=\"512\" height=\"256\" rotation=\"319.752\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"693\" gid=\"3\" x=\"1567.44\" y=\"2433.38\" width=\"512\" height=\"256\" rotation=\"137.389\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"694\" gid=\"3\" x=\"2542.28\" y=\"1647.63\" width=\"512\" height=\"256\" rotation=\"317.836\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"695\" gid=\"3\" x=\"1573.02\" y=\"397.659\" width=\"512\" height=\"256\" rotation=\"139.701\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"696\" gid=\"4\" x=\"827\" y=\"2810.71\" width=\"64\" height=\"256\" rotation=\"314.092\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"697\" gid=\"4\" x=\"969.249\" y=\"1179.19\" width=\"64\" height=\"256\" rotation=\"1.00297\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"698\" gid=\"4\" x=\"3270.64\" y=\"1285.82\" width=\"64\" height=\"256\" rotation=\"134.092\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"699\" gid=\"4\" x=\"3126.39\" y=\"2919.34\" width=\"64\" height=\"256\" rotation=\"181.003\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"435\" type=\"static_wall\" x=\"-13.4318\" y=\"11.397\" width=\"80\" height=\"263.412\" rotation=\"1.19819\"/>\n  <object id=\"436\" type=\"static_wall\" x=\"-11.9357\" y=\"976.275\" width=\"134.479\" height=\"260.293\" rotation=\"352.112\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"486.184\" y=\"3978.51\" width=\"105.054\" height=\"150.889\" rotation=\"90.2996\"/>\n  <object id=\"447\" type=\"static_wall\" x=\"935.099\" y=\"3972.24\" width=\"99.9551\" height=\"107.485\" rotation=\"89.321\"/>\n  <object id=\"550\" type=\"static_wall\" x=\"431.038\" y=\"-28.9889\" width=\"80\" height=\"370.175\" rotation=\"89.0866\"/>\n  <object id=\"551\" type=\"static_wall\" x=\"400\" y=\"10\">\n   <polygon points=\"0,0 74,114 176,113.333 458,66 402.667,-70.6667 45.3333,-76.6667\"/>\n  </object>\n  <object id=\"552\" type=\"static_wall\" x=\"952.024\" y=\"-26.0898\" width=\"116.601\" height=\"198.289\" rotation=\"91.5217\"/>\n  <object id=\"553\" type=\"static_wall\" x=\"916.667\" y=\"-44\">\n   <polygon points=\"0,0 2.66667,81.3333 43.3333,167.333 198,169.333 220.667,0.666667\"/>\n  </object>\n  <object id=\"554\" type=\"static_wall\" x=\"1065\" y=\"109\">\n   <polygon points=\"0,0 224,77 532,-21 527,-142 242,-209 3,-150\"/>\n  </object>\n  <object id=\"555\" type=\"static_wall\" x=\"1850.67\" y=\"26.6667\">\n   <polygon points=\"0,0 -129.333,138.667 -218.667,162 -302.667,11.3333 -302.667,-134 2,-134.667\"/>\n  </object>\n  <object id=\"556\" type=\"static_wall\" x=\"2011.69\" y=\"-77.3297\" width=\"135.559\" height=\"204.397\" rotation=\"89.0866\"/>\n  <object id=\"557\" type=\"static_wall\" x=\"1995.5\" y=\"2.5\">\n   <polygon points=\"0,0 4,124.5 23.5,153 104,147.5 87.5,-72 2,-65.5\"/>\n  </object>\n  <object id=\"558\" type=\"static_wall\" x=\"897.667\" y=\"216\">\n   <polygon points=\"0,0 -25,15.3333 -11.6667,40.6667 47.6667,82 84.6667,64\"/>\n  </object>\n  <object id=\"559\" type=\"static_wall\" x=\"915.993\" y=\"273.673\">\n   <polygon points=\"0,0 -1.66667,79.6667 42.6667,97.3333 66.3333,6.33333\"/>\n  </object>\n  <object id=\"560\" type=\"static_wall\" x=\"1604.35\" y=\"-82.9654\" width=\"205.069\" height=\"139.419\" rotation=\"89.9176\"/>\n  <object id=\"561\" type=\"static_wall\" x=\"52.6667\" y=\"226.667\">\n   <polygon points=\"0,0 110.667,115.333 132.667,201.333 74,238 -131.333,238.667 -128.667,60\"/>\n  </object>\n  <object id=\"562\" type=\"static_wall\" x=\"6.39841\" y=\"448.869\" width=\"121.257\" height=\"138.039\" rotation=\"1.19819\"/>\n  <object id=\"563\" type=\"static_wall\" x=\"118\" y=\"568.667\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"564\" type=\"static_wall\" x=\"108.909\" y=\"2622.89\" rotation=\"359.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"565\" type=\"static_wall\" x=\"455.984\" y=\"3981.53\" rotation=\"269.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"566\" type=\"static_wall\" x=\"886.167\" y=\"3979.5\" rotation=\"269.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"567\" type=\"static_wall\" x=\"1298.27\" y=\"3936.49\" width=\"102.244\" height=\"137.9\" rotation=\"87.0027\"/>\n  <object id=\"568\" type=\"static_wall\" x=\"1269\" y=\"3943\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"569\" type=\"static_wall\" x=\"1102.67\" y=\"3650.67\">\n   <polygon points=\"0,0 -200.667,107.333 -116,243.333 126,138.667 94,71.3333\"/>\n  </object>\n  <object id=\"570\" type=\"static_wall\" x=\"1128.67\" y=\"3722.67\">\n   <polygon points=\"0,0 89.3333,0 127.333,97.3333 54,164 -66.6667,103.333\"/>\n  </object>\n  <object id=\"571\" type=\"static_wall\" x=\"-10.8201\" y=\"3116.93\" rotation=\"58.3653\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"573\" type=\"static_wall\" x=\"141.333\" y=\"1172\">\n   <polygon points=\"0,0 128,91.3333 244,325.333 166.667,402.667 -45.3333,410 -112.667,46\"/>\n  </object>\n  <object id=\"574\" type=\"static_wall\" x=\"323.333\" y=\"1538\">\n   <polygon points=\"0,0 37.3333,159.333 -10.6667,455.333 -278,314.667 -204.667,76.6667\"/>\n  </object>\n  <object id=\"575\" type=\"static_wall\" x=\"311.333\" y=\"1928\">\n   <polygon points=\"0,0 12,75.3333 -58,142.667 -298,200.667 -305.333,-34.6667 -140.667,-79.3333\"/>\n  </object>\n  <object id=\"576\" type=\"static_wall\" x=\"-71.4592\" y=\"2089.25\" width=\"134.479\" height=\"232.985\" rotation=\"0.678364\"/>\n  <object id=\"577\" type=\"static_wall\" x=\"52\" y=\"2275\">\n   <polygon points=\"0,0 113,118 134.5,201.5 43.5,256 -90,159.5\"/>\n  </object>\n  <object id=\"578\" type=\"static_wall\" x=\"8.85853\" y=\"2502.69\" width=\"111.788\" height=\"156.801\" rotation=\"0.678364\"/>\n  <object id=\"579\" type=\"static_wall\" x=\"2.106\" y=\"2946.6\" width=\"111.788\" height=\"156.801\" rotation=\"0.678364\"/>\n  <object id=\"580\" type=\"static_wall\" x=\"1.67542\" y=\"3072.89\" width=\"111.788\" height=\"202.243\" rotation=\"351.065\"/>\n  <object id=\"581\" type=\"static_wall\" x=\"322\" y=\"3585\">\n   <polygon points=\"0,0 39,160 -3,399 -166,400 -249,158 -212,-8\"/>\n  </object>\n  <object id=\"582\" type=\"static_wall\" x=\"404.051\" y=\"4015.46\" width=\"105.054\" height=\"150.889\" rotation=\"131.576\"/>\n  <object id=\"583\" type=\"static_wall\" x=\"1549.5\" y=\"380.5\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"584\" type=\"static_wall\" x=\"1621\" y=\"637.5\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"585\" type=\"static_wall\" x=\"1645\" y=\"636.5\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"586\" type=\"static_wall\" x=\"1257\" y=\"607\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"587\" type=\"static_wall\" x=\"1263.52\" y=\"702.511\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"588\" type=\"static_wall\" x=\"1384.03\" y=\"933.015\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n  <object id=\"589\" type=\"static_wall\" x=\"2547.08\" y=\"1667.35\" rotation=\"180\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"590\" type=\"static_wall\" x=\"2475.58\" y=\"1410.35\" rotation=\"180\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"591\" type=\"static_wall\" x=\"2451.58\" y=\"1411.35\" rotation=\"180\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"592\" type=\"static_wall\" x=\"2839.58\" y=\"1440.85\" rotation=\"180\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"593\" type=\"static_wall\" x=\"2833.06\" y=\"1345.34\" rotation=\"180\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"594\" type=\"static_wall\" x=\"2712.55\" y=\"1114.83\" rotation=\"180\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n  <object id=\"595\" type=\"static_wall\" x=\"1549.62\" y=\"2428.45\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"596\" type=\"static_wall\" x=\"1621.12\" y=\"2685.45\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"597\" type=\"static_wall\" x=\"1645.12\" y=\"2684.45\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"598\" type=\"static_wall\" x=\"1257.12\" y=\"2654.95\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"599\" type=\"static_wall\" x=\"1263.64\" y=\"2750.46\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"600\" type=\"static_wall\" x=\"1384.15\" y=\"2980.97\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n  <object id=\"601\" type=\"static_wall\" x=\"845.333\" y=\"936.667\">\n   <polygon points=\"0,0 96.3333,-20.3333 144.667,58 140,142.667 33.3333,112.333 -11.3333,39.6667\"/>\n  </object>\n  <object id=\"602\" type=\"static_wall\" x=\"978\" y=\"979.667\">\n   <polygon points=\"0,0 85.6667,28 84.6667,112 -21.3333,153.667 -102.333,98.6667 -100.667,18\"/>\n  </object>\n  <object id=\"603\" type=\"static_wall\" x=\"879\" y=\"1061\">\n   <polygon points=\"0,0 -132,204 -119,247.5 -24.5,263.5 84,92.5 90,50.5\"/>\n  </object>\n  <object id=\"604\" type=\"static_wall\" x=\"1493.67\" y=\"1189.33\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"605\" type=\"static_wall\" x=\"1624\" y=\"1327.67\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"606\" type=\"static_wall\" x=\"2602.33\" y=\"857.917\" rotation=\"180\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"607\" type=\"static_wall\" x=\"2472\" y=\"719.577\" rotation=\"180\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"608\" type=\"static_wall\" x=\"2601.53\" y=\"2905.01\" rotation=\"180\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"609\" type=\"static_wall\" x=\"2471.2\" y=\"2766.67\" rotation=\"180\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"610\" type=\"static_wall\" x=\"676.75\" y=\"1768\">\n   <polygon points=\"0,0 25.75,49.25 170.25,-11.25 148,-62.25\"/>\n  </object>\n  <object id=\"612\" type=\"static_wall\" x=\"1450.67\" y=\"1968\">\n   <polygon points=\"0,0 -160,64.6667 -177,106.333 -137.333,121 24,57.3333\"/>\n  </object>\n  <object id=\"613\" type=\"static_wall\" x=\"1036.33\" y=\"2140.33\">\n   <polygon points=\"0,0 23.3333,54.6667 183.667,-8 201.333,-51 154,-68.3333\"/>\n  </object>\n  <object id=\"614\" type=\"static_wall\" x=\"1566\" y=\"1715.67\">\n   <polygon points=\"0,0 -21.6667,40 48.6667,223 140.667,189.333 170.333,44.3333\"/>\n  </object>\n  <object id=\"615\" type=\"static_wall\" x=\"1569\" y=\"1717.67\">\n   <polygon points=\"0,0 214.333,18.6667 204.333,67.3333 100.667,144.333\"/>\n  </object>\n  <object id=\"616\" type=\"static_wall\" x=\"1731.84\" y=\"1755.32\" width=\"43.2232\" height=\"101.985\" rotation=\"37.1057\"/>\n  <object id=\"621\" type=\"static_wall\" x=\"1955.09\" y=\"1624.36\">\n   <polygon points=\"0,0 50.3636,-17.2727 95.8182,-20.7273 148.545,-15.6364 181.818,-3.63636 190.727,11.6364 182.545,44.1818 166.182,50.7273\"/>\n  </object>\n  <object id=\"622\" type=\"static_wall\" x=\"2053.38\" y=\"1604.75\">\n   <polygon points=\"0,0 -49.375,-0.875 -98.5,15.375 -103.625,26.875 -92.5,65.875 -77,72.5 18.375,41.125\"/>\n  </object>\n  <object id=\"623\" type=\"static_wall\" x=\"2084.54\" y=\"1634.71\" width=\"27.6954\" height=\"68.7602\" rotation=\"89.1829\"/>\n  <object id=\"624\" type=\"static_wall\" x=\"3419.11\" y=\"2327.62\" rotation=\"180\">\n   <polygon points=\"0,0 25.75,49.25 170.25,-11.25 148,-62.25\"/>\n  </object>\n  <object id=\"625\" type=\"static_wall\" x=\"2645.19\" y=\"2127.62\" rotation=\"180\">\n   <polygon points=\"0,0 -160,64.6667 -177,106.333 -137.333,121 24,57.3333\"/>\n  </object>\n  <object id=\"626\" type=\"static_wall\" x=\"3059.53\" y=\"1955.29\" rotation=\"180\">\n   <polygon points=\"0,0 23.3333,54.6667 183.667,-8 201.333,-51 154,-68.3333\"/>\n  </object>\n  <object id=\"627\" type=\"static_wall\" x=\"2529.86\" y=\"2379.95\" rotation=\"180\">\n   <polygon points=\"0,0 -21.6667,40 48.6667,223 140.667,189.333 170.333,44.3333\"/>\n  </object>\n  <object id=\"628\" type=\"static_wall\" x=\"2526.86\" y=\"2377.95\" rotation=\"180\">\n   <polygon points=\"0,0 214.333,18.6667 204.333,67.3333 100.667,144.333\"/>\n  </object>\n  <object id=\"629\" type=\"static_wall\" x=\"2364.02\" y=\"2340.3\" width=\"43.2232\" height=\"101.985\" rotation=\"217.106\"/>\n  <object id=\"630\" type=\"static_wall\" x=\"2140.77\" y=\"2471.26\" rotation=\"180\">\n   <polygon points=\"0,0 50.3636,-17.2727 95.8182,-20.7273 148.545,-15.6364 181.818,-3.63636 190.727,11.6364 182.545,44.1818 166.182,50.7273\"/>\n  </object>\n  <object id=\"631\" type=\"static_wall\" x=\"2042.48\" y=\"2490.87\" rotation=\"180\">\n   <polygon points=\"0,0 -49.375,-0.875 -98.5,15.375 -103.625,26.875 -92.5,65.875 -77,72.5 18.375,41.125\"/>\n  </object>\n  <object id=\"632\" type=\"static_wall\" x=\"2011.32\" y=\"2460.91\" width=\"27.6954\" height=\"68.7602\" rotation=\"269.183\"/>\n  <object id=\"633\" type=\"static_wall\" x=\"599\" y=\"2651.33\">\n   <polygon points=\"0,0 163.333,44.6667 128.667,153 -32,119.667 -54,82\"/>\n  </object>\n  <object id=\"634\" type=\"static_wall\" x=\"664.667\" y=\"2785.33\">\n   <polygon points=\"0,0 23.6667,104.667 59.6667,126.333 138.333,71.6667 109.333,-31\"/>\n  </object>\n  <object id=\"635\" type=\"static_wall\" x=\"668.333\" y=\"2678.33\">\n   <polygon points=\"0,0 100.333,-48.3333 158,6.66667 100.667,125.333\"/>\n  </object>\n  <object id=\"636\" type=\"static_wall\" x=\"3494.02\" y=\"1447.44\" rotation=\"180.811\">\n   <polygon points=\"0,0 163.333,44.6667 128.667,153 -32,119.667 -54,82\"/>\n  </object>\n  <object id=\"637\" type=\"static_wall\" x=\"3430.25\" y=\"1312.52\" rotation=\"180.811\">\n   <polygon points=\"0,0 23.6667,104.667 59.6667,126.333 138.333,71.6667 109.333,-31\"/>\n  </object>\n  <object id=\"638\" type=\"static_wall\" x=\"3425.07\" y=\"1419.46\" rotation=\"180.811\">\n   <polygon points=\"0,0 100.333,-48.3333 158,6.66667 100.667,125.333\"/>\n  </object>\n  <object id=\"639\" type=\"static_wall\" x=\"1496.9\" y=\"3237.95\" rotation=\"0.665703\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"640\" type=\"static_wall\" x=\"1625.61\" y=\"3377.8\" rotation=\"0.665703\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"641\" type=\"static_wall\" x=\"3251.33\" y=\"3161.67\" rotation=\"180\">\n   <polygon points=\"0,0 96.3333,-20.3333 144.667,58 140,142.667 33.3333,112.333 -11.3333,39.6667\"/>\n  </object>\n  <object id=\"642\" type=\"static_wall\" x=\"3118.67\" y=\"3118.67\" rotation=\"180\">\n   <polygon points=\"0,0 85.6667,28 84.6667,112 -21.3333,153.667 -102.333,98.6667 -100.667,18\"/>\n  </object>\n  <object id=\"643\" type=\"static_wall\" x=\"3217.67\" y=\"3037.33\" rotation=\"180\">\n   <polygon points=\"0,0 -132,204 -119,247.5 -24.5,263.5 84,92.5 90,50.5\"/>\n  </object>\n  <object id=\"644\" type=\"static_wall\" x=\"3199.84\" y=\"3881.88\" rotation=\"180\">\n   <polygon points=\"0,0 -25,15.3333 -11.6667,40.6667 47.6667,82 84.6667,64\"/>\n  </object>\n  <object id=\"645\" type=\"static_wall\" x=\"3181.51\" y=\"3824.21\" rotation=\"180\">\n   <polygon points=\"0,0 -1.66667,79.6667 42.6667,97.3333 66.3333,6.33333\"/>\n  </object>\n  <object id=\"646\" type=\"static_wall\" x=\"2083.73\" y=\"3952.99\" width=\"105.054\" height=\"150.889\" rotation=\"94.6805\"/>\n  <object id=\"647\" type=\"static_wall\" x=\"2018.45\" y=\"3951.94\" width=\"105.054\" height=\"184.114\" rotation=\"105.131\"/>\n  <object id=\"648\" type=\"static_wall\" x=\"4109.65\" y=\"4083.62\" width=\"80\" height=\"263.412\" rotation=\"181.198\"/>\n  <object id=\"649\" type=\"static_wall\" x=\"4108.16\" y=\"3118.74\" width=\"134.479\" height=\"260.293\" rotation=\"172.112\"/>\n  <object id=\"650\" type=\"static_wall\" x=\"3610.04\" y=\"116.504\" width=\"105.054\" height=\"150.889\" rotation=\"270.3\"/>\n  <object id=\"651\" type=\"static_wall\" x=\"3161.12\" y=\"122.774\" width=\"99.9551\" height=\"107.485\" rotation=\"269.321\"/>\n  <object id=\"652\" type=\"static_wall\" x=\"3665.18\" y=\"4124\" width=\"80\" height=\"370.175\" rotation=\"269.087\"/>\n  <object id=\"653\" type=\"static_wall\" x=\"3696.22\" y=\"4085.01\" rotation=\"180\">\n   <polygon points=\"0,0 74,114 176,113.333 458,66 402.667,-70.6667 45.3333,-76.6667\"/>\n  </object>\n  <object id=\"654\" type=\"static_wall\" x=\"3144.2\" y=\"4121.1\" width=\"116.601\" height=\"198.289\" rotation=\"271.522\"/>\n  <object id=\"655\" type=\"static_wall\" x=\"3179.55\" y=\"4139.01\" rotation=\"180\">\n   <polygon points=\"0,0 2.66667,81.3333 43.3333,167.333 198,169.333 220.667,0.666667\"/>\n  </object>\n  <object id=\"656\" type=\"static_wall\" x=\"3031.22\" y=\"3986.01\" rotation=\"180\">\n   <polygon points=\"0,0 224,77 532,-21 527,-142 242,-209 3,-150\"/>\n  </object>\n  <object id=\"657\" type=\"static_wall\" x=\"2245.55\" y=\"4068.35\" rotation=\"180\">\n   <polygon points=\"0,0 -129.333,138.667 -218.667,162 -302.667,11.3333 -302.667,-134 2,-134.667\"/>\n  </object>\n  <object id=\"658\" type=\"static_wall\" x=\"2084.53\" y=\"4172.34\" width=\"135.559\" height=\"204.397\" rotation=\"269.087\"/>\n  <object id=\"659\" type=\"static_wall\" x=\"2100.72\" y=\"4092.51\" rotation=\"180\">\n   <polygon points=\"0,0 4,124.5 23.5,153 104,147.5 87.5,-72 2,-65.5\"/>\n  </object>\n  <object id=\"660\" type=\"static_wall\" x=\"2491.87\" y=\"4177.98\" width=\"205.069\" height=\"139.419\" rotation=\"269.918\"/>\n  <object id=\"661\" type=\"static_wall\" x=\"4043.55\" y=\"3868.35\" rotation=\"180\">\n   <polygon points=\"0,0 110.667,115.333 132.667,201.333 74,238 -131.333,238.667 -128.667,60\"/>\n  </object>\n  <object id=\"662\" type=\"static_wall\" x=\"4089.82\" y=\"3646.14\" width=\"121.257\" height=\"138.039\" rotation=\"181.198\"/>\n  <object id=\"663\" type=\"static_wall\" x=\"3978.22\" y=\"3526.35\" rotation=\"180\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"664\" type=\"static_wall\" x=\"3987.31\" y=\"1472.12\" rotation=\"179.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"665\" type=\"static_wall\" x=\"3640.24\" y=\"113.484\" rotation=\"89.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"666\" type=\"static_wall\" x=\"3210.05\" y=\"115.514\" rotation=\"89.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"667\" type=\"static_wall\" x=\"2797.95\" y=\"158.524\" width=\"102.244\" height=\"137.9\" rotation=\"267.003\"/>\n  <object id=\"668\" type=\"static_wall\" x=\"2827.22\" y=\"152.014\" rotation=\"180\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"669\" type=\"static_wall\" x=\"2993.55\" y=\"444.344\" rotation=\"180\">\n   <polygon points=\"0,0 -200.667,107.333 -116,243.333 126,138.667 94,71.3333\"/>\n  </object>\n  <object id=\"670\" type=\"static_wall\" x=\"2967.55\" y=\"372.344\" rotation=\"180\">\n   <polygon points=\"0,0 89.3333,0 127.333,97.3333 54,164 -66.6667,103.333\"/>\n  </object>\n  <object id=\"671\" type=\"static_wall\" x=\"4107.04\" y=\"978.084\" rotation=\"238.365\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"672\" type=\"static_wall\" x=\"3954.89\" y=\"2923.01\" rotation=\"180\">\n   <polygon points=\"0,0 128,91.3333 244,325.333 166.667,402.667 -45.3333,410 -112.667,46\"/>\n  </object>\n  <object id=\"673\" type=\"static_wall\" x=\"3772.89\" y=\"2557.01\" rotation=\"180\">\n   <polygon points=\"0,0 37.3333,159.333 -10.6667,455.333 -278,314.667 -204.667,76.6667\"/>\n  </object>\n  <object id=\"674\" type=\"static_wall\" x=\"3784.89\" y=\"2167.01\" rotation=\"180\">\n   <polygon points=\"0,0 12,75.3333 -58,142.667 -298,200.667 -305.333,-34.6667 -140.667,-79.3333\"/>\n  </object>\n  <object id=\"675\" type=\"static_wall\" x=\"4167.68\" y=\"2005.76\" width=\"134.479\" height=\"232.985\" rotation=\"180.678\"/>\n  <object id=\"676\" type=\"static_wall\" x=\"4044.22\" y=\"1820.01\" rotation=\"180\">\n   <polygon points=\"0,0 113,118 134.5,201.5 43.5,256 -90,159.5\"/>\n  </object>\n  <object id=\"677\" type=\"static_wall\" x=\"4087.36\" y=\"1592.32\" width=\"111.788\" height=\"156.801\" rotation=\"180.678\"/>\n  <object id=\"678\" type=\"static_wall\" x=\"4094.12\" y=\"1148.41\" width=\"111.788\" height=\"156.801\" rotation=\"180.678\"/>\n  <object id=\"679\" type=\"static_wall\" x=\"4094.55\" y=\"1022.12\" width=\"111.788\" height=\"202.243\" rotation=\"171.065\"/>\n  <object id=\"680\" type=\"static_wall\" x=\"3774.22\" y=\"510.014\" rotation=\"180\">\n   <polygon points=\"0,0 39,160 -3,399 -166,400 -249,158 -212,-8\"/>\n  </object>\n  <object id=\"681\" type=\"static_wall\" x=\"3692.17\" y=\"79.5537\" width=\"105.054\" height=\"150.889\" rotation=\"311.576\"/>\n  <object id=\"682\" type=\"static_wall\" x=\"2012.49\" y=\"142.024\" width=\"105.054\" height=\"150.889\" rotation=\"274.68\"/>\n  <object id=\"683\" type=\"static_wall\" x=\"2077.77\" y=\"143.074\" width=\"105.054\" height=\"184.114\" rotation=\"285.131\"/>\n  <object id=\"684\" type=\"static_wall\" x=\"2547.29\" y=\"3715.82\" rotation=\"180\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"685\" type=\"static_wall\" x=\"2475.79\" y=\"3458.82\" rotation=\"180\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"686\" type=\"static_wall\" x=\"2451.79\" y=\"3459.82\" rotation=\"180\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"687\" type=\"static_wall\" x=\"2839.79\" y=\"3489.32\" rotation=\"180\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"688\" type=\"static_wall\" x=\"2833.27\" y=\"3393.81\" rotation=\"180\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"689\" type=\"static_wall\" x=\"2712.76\" y=\"3163.3\" rotation=\"180\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['jungle'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"18\" nextobjectid=\"558\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff7aae9a\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"4096\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"4096\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"419\" gid=\"1\" x=\"0\" y=\"4096\" width=\"2048\" height=\"4096\"/>\n  <object id=\"420\" gid=\"1\" x=\"4096\" y=\"2.27374e-13\" width=\"2048\" height=\"4096\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"MapObjects\">\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3383.67\" y=\"640.666\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"697.605\" y=\"3469.36\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3839.49\" y=\"3308.46\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3827.39\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3687.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3555.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3432.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3946.65\" y=\"3416.56\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3428.07\" y=\"3935.49\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3555.62\" y=\"3795.43\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3663.43\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3811\" y=\"3540.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"311.337\" y=\"615.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"429.337\" y=\"731.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"302.667\" y=\"866.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"682.001\" y=\"490.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"814.97\" y=\"363.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"559.667\" y=\"617.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"184.667\" y=\"750.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"564.001\" y=\"374.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"696.97\" y=\"247.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"441.667\" y=\"501.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3359.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"550\" name=\"Turret\" type=\"turret\" x=\"256\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"551\" name=\"Turret\" type=\"turret\" x=\"3840\" y=\"3840\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\">\n  <object id=\"422\" type=\"static_wall\" x=\"-25\" y=\"62\">\n   <polygon points=\"0,0 507,-31.5 41.5,-160\"/>\n  </object>\n  <object id=\"423\" type=\"static_wall\" x=\"589\" y=\"43.5\">\n   <polygon points=\"0,0 -242.5,-13 -117.5,-110.5\"/>\n  </object>\n  <object id=\"424\" type=\"static_wall\" x=\"566\" y=\"37\">\n   <polygon points=\"0,0 73.5,65 466,19.5 241.5,-92.5\"/>\n  </object>\n  <object id=\"426\" type=\"static_wall\" x=\"1005.5\" y=\"55\">\n   <polygon points=\"0,0 54.5,4 157.5,-74\"/>\n  </object>\n  <object id=\"427\" type=\"static_wall\" x=\"1102.5\" y=\"19\">\n   <polygon points=\"0,0 186,1.5 98.5,-99.5\"/>\n  </object>\n  <object id=\"428\" type=\"static_wall\" x=\"1214\" y=\"17\">\n   <polygon points=\"0,0 297,31 178,-47\"/>\n  </object>\n  <object id=\"429\" type=\"static_wall\" x=\"1458\" y=\"255\">\n   <polygon points=\"0,0 140.5,-281 385,-201.5 100.5,46\"/>\n  </object>\n  <object id=\"430\" type=\"static_wall\" x=\"1502\" y=\"43.5\">\n   <polygon points=\"0,0 33.5,70 137.5,-85.5\"/>\n  </object>\n  <object id=\"431\" type=\"static_wall\" x=\"1878\" y=\"-42.5\">\n   <polygon points=\"0,0 -68,113 180.5,76\"/>\n  </object>\n  <object id=\"435\" type=\"static_wall\" x=\"-49.657\" y=\"44.5387\" width=\"80\" height=\"473.241\" rotation=\"1.19819\"/>\n  <object id=\"436\" type=\"static_wall\" x=\"-62.875\" y=\"447.443\" width=\"80\" height=\"473.241\" rotation=\"356.611\"/>\n  <object id=\"437\" type=\"static_wall\" x=\"31.5\" y=\"860\">\n   <polygon points=\"0,0 100,96.5 -2,512 -82,233\"/>\n  </object>\n  <object id=\"438\" type=\"static_wall\" x=\"-16\" y=\"1256.5\">\n   <polygon points=\"0,0 232.5,151 233.5,207 -7.5,388.5\"/>\n  </object>\n  <object id=\"439\" type=\"static_wall\" x=\"-81.4764\" y=\"1573.81\" width=\"129.02\" height=\"514.249\" rotation=\"359.894\"/>\n  <object id=\"440\" type=\"static_wall\" x=\"17.3333\" y=\"2041.33\">\n   <polygon points=\"0,0 20,14 140.667,270 102,502 -69.3333,267.333\"/>\n  </object>\n  <object id=\"443\" type=\"static_wall\" x=\"128.667\" y=\"2423.33\">\n   <polygon points=\"0,0 57.3333,94.6667 56.6667,269.333 -166,496\"/>\n  </object>\n  <object id=\"444\" type=\"static_wall\" x=\"-47.0296\" y=\"2765.55\" width=\"129.02\" height=\"268.158\" rotation=\"8.80126\"/>\n  <object id=\"445\" type=\"static_wall\" x=\"-82.1333\" y=\"2969.79\" width=\"129.02\" height=\"1124\" rotation=\"359.21\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"1020.85\" y=\"4036.66\" width=\"129.02\" height=\"966.773\" rotation=\"90.2996\"/>\n  <object id=\"447\" type=\"static_wall\" x=\"1376.48\" y=\"4013.39\" width=\"129.02\" height=\"617.451\" rotation=\"87.8045\"/>\n  <object id=\"448\" type=\"static_wall\" x=\"1532.35\" y=\"3923.15\" rotation=\"358.783\">\n   <polygon points=\"0,0 -335.333,146.667 57.3333,343.333 314,101.333\"/>\n  </object>\n  <object id=\"449\" type=\"static_wall\" x=\"1891.33\" y=\"3898.67\">\n   <polygon points=\"0,0 -264,141.333 50.6667,305.333 182.667,187.333\"/>\n  </object>\n  <object id=\"450\" type=\"static_wall\" x=\"342.667\" y=\"979.333\">\n   <polygon points=\"0,0 -64.6667,40 -87.3333,186.667 68.6667,203.333 94.6667,162\"/>\n  </object>\n  <object id=\"451\" type=\"static_wall\" x=\"788.667\" y=\"940.667\">\n   <polygon points=\"0,0 179.333,-196.667 214.667,-184.667 142.667,36.6667\"/>\n  </object>\n  <object id=\"453\" type=\"static_wall\" x=\"1073.33\" y=\"666.667\">\n   <polygon points=\"0,0 35.3333,14.6667 50,78 -125.333,212 -131.333,88\"/>\n  </object>\n  <object id=\"454\" type=\"static_wall\" x=\"903.333\" y=\"713.333\">\n   <polygon points=\"0,0 -0.666667,138.667 148,24 98,5.33333\"/>\n  </object>\n  <object id=\"455\" type=\"static_wall\" x=\"1144\" y=\"206\">\n   <polygon points=\"0,0 29.5,-0.5 125,267 86,273 -16,77\"/>\n  </object>\n  <object id=\"456\" type=\"static_wall\" x=\"1610.5\" y=\"500.5\" width=\"61\" height=\"150.5\"/>\n  <object id=\"457\" type=\"static_wall\" x=\"1615.01\" y=\"606.5\">\n   <polygon points=\"0,0 -199.5,199.5 -156,245.5 56.5,44.5\"/>\n  </object>\n  <object id=\"458\" type=\"static_wall\" x=\"1929\" y=\"367.25\">\n   <polygon points=\"0,0 55.5,-0.75 57.75,69 36.75,96.5 -64,83.75\"/>\n  </object>\n  <object id=\"459\" type=\"static_wall\" x=\"1905.33\" y=\"970.667\">\n   <polygon points=\"0,0 46.6667,142 -16.6667,283.333 -194,239.333\"/>\n  </object>\n  <object id=\"460\" type=\"static_wall\" x=\"1315.5\" y=\"1226\">\n   <polygon points=\"0,0 -22,10.5 -78.5,159.5 47.5,149 47,120.5\"/>\n  </object>\n  <object id=\"463\" type=\"static_wall\" x=\"632.5\" y=\"1443.5\">\n   <polygon points=\"0,0 1,18 367.5,-16 415,-107 345.5,-202.5\"/>\n  </object>\n  <object id=\"464\" type=\"static_wall\" x=\"326.667\" y=\"1757.33\">\n   <polygon points=\"2.66667,4 1.33333,137.334 227.333,207.333 342,113.334 274.667,-18\"/>\n  </object>\n  <object id=\"466\" type=\"static_wall\" x=\"368\" y=\"2888.5\">\n   <polygon points=\"0,0 -2.5,161 120.5,146.5 93,-11.5\"/>\n  </object>\n  <object id=\"467\" type=\"static_wall\" x=\"741.667\" y=\"3289.33\">\n   <polygon points=\"0,0 -7.66667,55.3333 77.6667,143 141.667,141 140.667,73 58.6667,-3.66667\"/>\n  </object>\n  <object id=\"468\" type=\"static_wall\" x=\"297.667\" y=\"3673\">\n   <polygon points=\"0,0 -7.66667,55.3333 77.6667,143 141.667,141 140.667,73 58.6667,-3.66667\"/>\n  </object>\n  <object id=\"469\" type=\"static_wall\" x=\"1305\" y=\"3626.33\">\n   <polygon points=\"0,0 -154.333,31 -187.333,103.667 52.3333,182.333 86.6667,124.667\"/>\n  </object>\n  <object id=\"470\" type=\"static_wall\" x=\"1487.5\" y=\"3378\">\n   <polygon points=\"0,0 338.5,-291.5 350,-55 -1,13.5\"/>\n  </object>\n  <object id=\"471\" type=\"static_wall\" x=\"1597.5\" y=\"3365.5\">\n   <polygon points=\"0,0 46.5,38.5 142.5,34 211,-115.5\"/>\n  </object>\n  <object id=\"472\" type=\"static_wall\" x=\"1633\" y=\"3263\">\n   <polygon points=\"0,0 166.5,-317 234.5,-322 280,-250.5 31,19\"/>\n  </object>\n  <object id=\"473\" type=\"static_wall\" x=\"1325.5\" y=\"2741.5\">\n   <polygon points=\"0,0 65.5,63 84.75,-24\"/>\n  </object>\n  <object id=\"474\" type=\"static_wall\" x=\"1436.17\" y=\"2693.03\" rotation=\"301.368\">\n   <polygon points=\"0,0 65.5,63 84.75,-24\"/>\n  </object>\n  <object id=\"476\" type=\"static_wall\" x=\"1340\" y=\"1611.33\">\n   <polygon points=\"0,0 -61.3333,26 42,278.667 114.667,260\"/>\n  </object>\n  <object id=\"505\" type=\"static_wall\" x=\"4122.07\" y=\"4033.99\" rotation=\"180\">\n   <polygon points=\"0,0 507,-31.5 41.5,-160\"/>\n  </object>\n  <object id=\"506\" type=\"static_wall\" x=\"3508.07\" y=\"4052.49\" rotation=\"180\">\n   <polygon points=\"0,0 -242.5,-13 -117.5,-110.5\"/>\n  </object>\n  <object id=\"507\" type=\"static_wall\" x=\"3531.07\" y=\"4058.99\" rotation=\"180\">\n   <polygon points=\"0,0 73.5,65 466,19.5 241.5,-92.5\"/>\n  </object>\n  <object id=\"508\" type=\"static_wall\" x=\"3091.57\" y=\"4040.99\" rotation=\"180\">\n   <polygon points=\"0,0 54.5,4 157.5,-74\"/>\n  </object>\n  <object id=\"509\" type=\"static_wall\" x=\"2994.57\" y=\"4076.99\" rotation=\"180\">\n   <polygon points=\"0,0 186,1.5 98.5,-99.5\"/>\n  </object>\n  <object id=\"510\" type=\"static_wall\" x=\"2883.07\" y=\"4078.99\" rotation=\"180\">\n   <polygon points=\"0,0 297,31 178,-47\"/>\n  </object>\n  <object id=\"511\" type=\"static_wall\" x=\"2639.07\" y=\"3840.99\" rotation=\"180\">\n   <polygon points=\"0,0 140.5,-281 385,-201.5 100.5,46\"/>\n  </object>\n  <object id=\"512\" type=\"static_wall\" x=\"2595.07\" y=\"4052.49\" rotation=\"180\">\n   <polygon points=\"0,0 33.5,70 137.5,-85.5\"/>\n  </object>\n  <object id=\"513\" type=\"static_wall\" x=\"2219.07\" y=\"4138.49\" rotation=\"180\">\n   <polygon points=\"0,0 -68,113 180.5,76\"/>\n  </object>\n  <object id=\"514\" type=\"static_wall\" x=\"4146.73\" y=\"4051.45\" width=\"80\" height=\"473.241\" rotation=\"181.198\"/>\n  <object id=\"515\" type=\"static_wall\" x=\"4159.95\" y=\"3648.55\" width=\"80\" height=\"473.241\" rotation=\"176.611\"/>\n  <object id=\"516\" type=\"static_wall\" x=\"4065.57\" y=\"3235.99\" rotation=\"180\">\n   <polygon points=\"0,0 100,96.5 -2,512 -82,233\"/>\n  </object>\n  <object id=\"517\" type=\"static_wall\" x=\"4113.07\" y=\"2839.49\" rotation=\"180\">\n   <polygon points=\"0,0 232.5,151 233.5,207 -7.5,388.5\"/>\n  </object>\n  <object id=\"518\" type=\"static_wall\" x=\"4178.55\" y=\"2522.18\" width=\"129.02\" height=\"514.249\" rotation=\"179.894\"/>\n  <object id=\"519\" type=\"static_wall\" x=\"4079.74\" y=\"2054.66\" rotation=\"180\">\n   <polygon points=\"0,0 20,14 140.667,270 102,502 -69.3333,267.333\"/>\n  </object>\n  <object id=\"520\" type=\"static_wall\" x=\"3968.41\" y=\"1672.66\" rotation=\"180\">\n   <polygon points=\"0,0 57.3333,94.6667 56.6667,269.333 -166,496\"/>\n  </object>\n  <object id=\"521\" type=\"static_wall\" x=\"4144.1\" y=\"1330.44\" width=\"129.02\" height=\"268.158\" rotation=\"188.801\"/>\n  <object id=\"522\" type=\"static_wall\" x=\"4179.21\" y=\"1126.2\" width=\"129.02\" height=\"1124\" rotation=\"179.21\"/>\n  <object id=\"523\" type=\"static_wall\" x=\"3076.22\" y=\"59.3299\" width=\"129.02\" height=\"966.773\" rotation=\"270.3\"/>\n  <object id=\"524\" type=\"static_wall\" x=\"2720.59\" y=\"82.5999\" width=\"129.02\" height=\"617.451\" rotation=\"267.805\"/>\n  <object id=\"525\" type=\"static_wall\" x=\"2564.72\" y=\"172.84\" rotation=\"178.783\">\n   <polygon points=\"0,0 -335.333,146.667 57.3333,343.333 314,101.333\"/>\n  </object>\n  <object id=\"526\" type=\"static_wall\" x=\"2205.74\" y=\"197.32\" rotation=\"180\">\n   <polygon points=\"0,0 -264,141.333 50.6667,305.333 182.667,187.333\"/>\n  </object>\n  <object id=\"527\" type=\"static_wall\" x=\"3754.41\" y=\"3116.66\" rotation=\"180\">\n   <polygon points=\"0,0 -64.6667,40 -87.3333,186.667 68.6667,203.333 94.6667,162\"/>\n  </object>\n  <object id=\"528\" type=\"static_wall\" x=\"3308.41\" y=\"3155.32\" rotation=\"180\">\n   <polygon points=\"0,0 179.333,-196.667 214.667,-184.667 142.667,36.6667\"/>\n  </object>\n  <object id=\"529\" type=\"static_wall\" x=\"3023.74\" y=\"3429.32\" rotation=\"180\">\n   <polygon points=\"0,0 35.3333,14.6667 50,78 -125.333,212 -131.333,88\"/>\n  </object>\n  <object id=\"530\" type=\"static_wall\" x=\"3193.74\" y=\"3382.66\" rotation=\"180\">\n   <polygon points=\"0,0 -0.666667,138.667 148,24 98,5.33333\"/>\n  </object>\n  <object id=\"531\" type=\"static_wall\" x=\"2953.07\" y=\"3889.99\" rotation=\"180\">\n   <polygon points=\"0,0 29.5,-0.5 125,267 86,273 -16,77\"/>\n  </object>\n  <object id=\"532\" type=\"static_wall\" x=\"2486.57\" y=\"3595.49\" width=\"61\" height=\"150.5\" rotation=\"180\"/>\n  <object id=\"533\" type=\"static_wall\" x=\"2482.06\" y=\"3489.49\" rotation=\"180\">\n   <polygon points=\"0,0 -199.5,199.5 -156,245.5 56.5,44.5\"/>\n  </object>\n  <object id=\"534\" type=\"static_wall\" x=\"2168.07\" y=\"3728.74\" rotation=\"180\">\n   <polygon points=\"0,0 55.5,-0.75 57.75,69 36.75,96.5 -64,83.75\"/>\n  </object>\n  <object id=\"535\" type=\"static_wall\" x=\"2191.74\" y=\"3125.32\" rotation=\"180\">\n   <polygon points=\"0,0 46.6667,142 -16.6667,283.333 -194,239.333\"/>\n  </object>\n  <object id=\"536\" type=\"static_wall\" x=\"2781.57\" y=\"2869.99\" rotation=\"180\">\n   <polygon points=\"0,0 -22,10.5 -78.5,159.5 47.5,149 47,120.5\"/>\n  </object>\n  <object id=\"537\" type=\"static_wall\" x=\"3464.57\" y=\"2652.49\" rotation=\"180\">\n   <polygon points=\"0,0 1,18 367.5,-16 415,-107 345.5,-202.5\"/>\n  </object>\n  <object id=\"538\" type=\"static_wall\" x=\"3770.41\" y=\"2338.66\" rotation=\"180\">\n   <polygon points=\"6,1.33333 4.66667,138.667 228.666,205.333 344,114.667 276,-19.3333\"/>\n  </object>\n  <object id=\"540\" type=\"static_wall\" x=\"3729.07\" y=\"1207.49\" rotation=\"180\">\n   <polygon points=\"0,0 -2.5,161 120.5,146.5 93,-11.5\"/>\n  </object>\n  <object id=\"541\" type=\"static_wall\" x=\"3355.41\" y=\"806.66\" rotation=\"180\">\n   <polygon points=\"0,0 -7.66667,55.3333 77.6667,143 141.667,141 140.667,73 58.6667,-3.66667\"/>\n  </object>\n  <object id=\"542\" type=\"static_wall\" x=\"3799.41\" y=\"422.99\" rotation=\"180\">\n   <polygon points=\"0,0 -7.66667,55.3333 77.6667,143 141.667,141 140.667,73 58.6667,-3.66667\"/>\n  </object>\n  <object id=\"543\" type=\"static_wall\" x=\"2792.07\" y=\"469.66\" rotation=\"180\">\n   <polygon points=\"0,0 -154.333,31 -187.333,103.667 52.3333,182.333 86.6667,124.667\"/>\n  </object>\n  <object id=\"544\" type=\"static_wall\" x=\"2609.57\" y=\"717.99\" rotation=\"180\">\n   <polygon points=\"0,0 338.5,-291.5 350,-55 -1,13.5\"/>\n  </object>\n  <object id=\"545\" type=\"static_wall\" x=\"2499.57\" y=\"730.49\" rotation=\"180\">\n   <polygon points=\"0,0 46.5,38.5 142.5,34 211,-115.5\"/>\n  </object>\n  <object id=\"546\" type=\"static_wall\" x=\"2464.07\" y=\"832.99\" rotation=\"180\">\n   <polygon points=\"0,0 166.5,-317 234.5,-322 280,-250.5 31,19\"/>\n  </object>\n  <object id=\"547\" type=\"static_wall\" x=\"2771.57\" y=\"1354.49\" rotation=\"180\">\n   <polygon points=\"0,0 65.5,63 84.75,-24\"/>\n  </object>\n  <object id=\"548\" type=\"static_wall\" x=\"2660.9\" y=\"1402.96\" rotation=\"121.368\">\n   <polygon points=\"0,0 65.5,63 84.75,-24\"/>\n  </object>\n  <object id=\"549\" type=\"static_wall\" x=\"2757.07\" y=\"2484.66\" rotation=\"180\">\n   <polygon points=\"0,0 -61.3333,26 42,278.667 114.667,260\"/>\n  </object>\n  <object id=\"552\" type=\"static_wall\" x=\"778\" y=\"2310.67\">\n   <polygon points=\"0,0 -102.667,380 74.6667,321.333 127.879,10.3636\"/>\n  </object>\n  <object id=\"553\" type=\"static_wall\" x=\"867.333\" y=\"2318.67\">\n   <polygon points=\"-11,-1.18182 143.333,8 158,104.667 -28.6667,205.333\"/>\n  </object>\n  <object id=\"556\" type=\"static_wall\" x=\"3316.33\" y=\"1785.17\" rotation=\"180\">\n   <polygon points=\"0,0 -102.667,380 74.6667,321.333 127.879,10.3636\"/>\n  </object>\n  <object id=\"557\" type=\"static_wall\" x=\"3227\" y=\"1777.17\" rotation=\"180\">\n   <polygon points=\"-11,-1.18182 143.333,8 158,104.667 -28.6667,205.333\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['strangefields'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"20\" nextobjectid=\"931\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.5\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff939b7c\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"strangefields_bg\" tilewidth=\"1024\" tileheight=\"1024\" tilecount=\"1\" columns=\"1\">\n  <image source=\"strangefields_bg.jpg\" width=\"1024\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"strangefields_edges\" tilewidth=\"256\" tileheight=\"1024\" tilecount=\"2\" columns=\"2\">\n  <image source=\"strangefields_edges.png\" width=\"512\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"strangefields_walls_corner\" tilewidth=\"128\" tileheight=\"512\" tilecount=\"2\" columns=\"2\">\n  <image source=\"strangefields_walls_corner.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"strangefields_walls_large\" tilewidth=\"512\" tileheight=\"1024\" tilecount=\"2\" columns=\"2\">\n  <image source=\"strangefields_walls_large.png\" width=\"1024\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"8\" name=\"strangefields_walls_small\" tilewidth=\"256\" tileheight=\"128\" tilecount=\"4\" columns=\"2\">\n  <image source=\"strangefields_walls_small.png\" width=\"512\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"550\" gid=\"1\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"551\" gid=\"1\" x=\"1024\" y=\"-1.13687e-13\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"552\" gid=\"1\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"553\" gid=\"1\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"554\" gid=\"1\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"555\" gid=\"1\" x=\"3072\" y=\"0\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"556\" gid=\"1\" x=\"3072\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"557\" gid=\"1\" x=\"4096\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"558\" gid=\"1\" x=\"0\" y=\"3072\" width=\"1024\" height=\"1024\"/>\n  <object id=\"559\" gid=\"1\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"560\" gid=\"1\" x=\"1024\" y=\"4096\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"561\" gid=\"1\" x=\"2048\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"562\" gid=\"1\" x=\"2048\" y=\"3072\" width=\"1024\" height=\"1024\"/>\n  <object id=\"563\" gid=\"1\" x=\"3072\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"564\" gid=\"1\" x=\"3072\" y=\"4096\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"565\" gid=\"1\" x=\"4096\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"18\" name=\"Edges\">\n  <object id=\"566\" gid=\"4\" x=\"-10.625\" y=\"512.958\" width=\"128.933\" height=\"512.939\"/>\n  <object id=\"567\" gid=\"5\" x=\"642.999\" y=\"123.678\" width=\"123.667\" height=\"524.667\" rotation=\"270\"/>\n  <object id=\"568\" gid=\"2\" x=\"0\" y=\"1536\" width=\"256\" height=\"1024\"/>\n  <object id=\"569\" gid=\"3\" x=\"256\" y=\"1536\" width=\"256\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"630\" gid=\"2\" x=\"0\" y=\"3584\" width=\"256\" height=\"1024\"/>\n  <object id=\"631\" gid=\"3\" x=\"1536\" y=\"256\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"632\" gid=\"3\" x=\"2560\" y=\"256\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"633\" gid=\"2\" x=\"2560\" y=\"0\" width=\"256\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"634\" gid=\"4\" x=\"3585.66\" y=\"-10.7652\" width=\"128.933\" height=\"515.438\" rotation=\"91.4041\"/>\n  <object id=\"635\" gid=\"5\" x=\"3973.28\" y=\"653.624\" width=\"123.667\" height=\"524.667\"/>\n  <object id=\"636\" gid=\"4\" x=\"4095.98\" y=\"3582.96\" width=\"128.933\" height=\"512.939\" rotation=\"180\"/>\n  <object id=\"637\" gid=\"5\" x=\"3442.35\" y=\"3972.24\" width=\"123.667\" height=\"524.667\" rotation=\"90\"/>\n  <object id=\"638\" gid=\"4\" x=\"516.418\" y=\"4107.24\" width=\"128.933\" height=\"530.26\" rotation=\"272.485\"/>\n  <object id=\"639\" gid=\"5\" x=\"123.708\" y=\"3442.27\" width=\"123.667\" height=\"524.667\" rotation=\"180\"/>\n  <object id=\"640\" gid=\"3\" x=\"3840\" y=\"1544\" width=\"256\" height=\"1032\"/>\n  <object id=\"641\" gid=\"2\" x=\"4096\" y=\"1536\" width=\"256\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"642\" gid=\"3\" x=\"2553.33\" y=\"3840\" width=\"256\" height=\"1030.67\" rotation=\"90\"/>\n  <object id=\"643\" gid=\"2\" x=\"2560\" y=\"4096\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"776\" gid=\"3\" x=\"3839.44\" y=\"3582.93\" width=\"256\" height=\"1025.02\" rotation=\"0.56263\"/>\n  <object id=\"777\" gid=\"2\" x=\"1536\" y=\"4096\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"800\" gid=\"6\" x=\"632.001\" y=\"2243.51\" width=\"512\" height=\"1024\" rotation=\"6.65068\"/>\n  <object id=\"807\" gid=\"6\" x=\"2273.38\" y=\"3723.43\" width=\"512\" height=\"1024\" rotation=\"278.859\"/>\n  <object id=\"814\" gid=\"6\" x=\"3503.89\" y=\"1346.91\" width=\"512\" height=\"1024\" rotation=\"300.921\"/>\n  <object id=\"821\" gid=\"7\" x=\"3164\" y=\"2348\" width=\"512\" height=\"1024\"/>\n  <object id=\"828\" gid=\"7\" x=\"1720.11\" y=\"1075.33\" width=\"512\" height=\"1024\" rotation=\"295.475\"/>\n  <object id=\"835\" gid=\"7\" x=\"2672.15\" y=\"2105.43\" width=\"512\" height=\"1024\" rotation=\"255\"/>\n  <object id=\"842\" gid=\"6\" x=\"3069.94\" y=\"2246.85\" width=\"512\" height=\"1024\" rotation=\"231.651\"/>\n  <object id=\"849\" gid=\"7\" x=\"2829.97\" y=\"3422.69\" width=\"512\" height=\"1024\" rotation=\"60\"/>\n  <object id=\"862\" gid=\"8\" x=\"362.303\" y=\"457.03\" width=\"256\" height=\"128\"/>\n  <object id=\"864\" gid=\"8\" x=\"989.334\" y=\"2787.81\" width=\"256\" height=\"128\" rotation=\"253.743\"/>\n  <object id=\"866\" gid=\"8\" x=\"443.545\" y=\"2930.54\" width=\"256\" height=\"128\" rotation=\"45\"/>\n  <object id=\"868\" gid=\"8\" x=\"431.824\" y=\"2339.03\" width=\"256\" height=\"128\" rotation=\"115.327\"/>\n  <object id=\"870\" gid=\"8\" x=\"2656.34\" y=\"3112.4\" width=\"256\" height=\"128\" rotation=\"120\"/>\n  <object id=\"872\" gid=\"11\" x=\"1661.41\" y=\"2836.73\" width=\"256\" height=\"128\" rotation=\"315\"/>\n  <object id=\"874\" gid=\"11\" x=\"2784.62\" y=\"1168.92\" width=\"256\" height=\"128\" rotation=\"71.8433\"/>\n  <object id=\"876\" gid=\"11\" x=\"2403.59\" y=\"779.356\" width=\"256\" height=\"128\" rotation=\"178.816\"/>\n  <object id=\"878\" gid=\"10\" x=\"3566.9\" y=\"394.326\" width=\"256\" height=\"128\" rotation=\"60.7176\"/>\n  <object id=\"881\" gid=\"10\" x=\"633.306\" y=\"3716.48\" width=\"256\" height=\"128\" rotation=\"209.824\"/>\n  <object id=\"884\" gid=\"10\" x=\"2993.82\" y=\"2821.51\" width=\"256\" height=\"128\" rotation=\"189.349\"/>\n  <object id=\"887\" gid=\"9\" x=\"1687.15\" y=\"1381.43\" width=\"256\" height=\"128\" rotation=\"30\"/>\n  <object id=\"889\" gid=\"9\" x=\"3541.32\" y=\"2477.16\" width=\"256\" height=\"128\" rotation=\"59.66\"/>\n  <object id=\"891\" gid=\"9\" x=\"870\" y=\"3204\" width=\"256\" height=\"128\" rotation=\"120\"/>\n  <object id=\"924\" gid=\"9\" x=\"2689.26\" y=\"3890.82\" width=\"256\" height=\"128\" rotation=\"266.688\"/>\n  <object id=\"926\" gid=\"10\" x=\"2061.55\" y=\"497.86\" width=\"256\" height=\"128\" rotation=\"270.718\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"MapObjects\">\n  <object id=\"303\" name=\"spawn\" type=\"entity_spawn\" x=\"183\" y=\"162\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"120\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"893\" name=\"spawn\" type=\"entity_spawn\" x=\"673\" y=\"197\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"100\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"894\" name=\"spawn\" type=\"entity_spawn\" x=\"1117\" y=\"265\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"895\" name=\"spawn\" type=\"entity_spawn\" x=\"1677\" y=\"250\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"200\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"896\" name=\"spawn\" type=\"entity_spawn\" x=\"2169.33\" y=\"358.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"897\" name=\"spawn\" type=\"entity_spawn\" x=\"2488\" y=\"304\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"150\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"898\" name=\"spawn\" type=\"entity_spawn\" x=\"2949.33\" y=\"293.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"899\" name=\"spawn\" type=\"entity_spawn\" x=\"3653.33\" y=\"244\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"250\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"900\" name=\"spawn\" type=\"entity_spawn\" x=\"3882.67\" y=\"278.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"901\" name=\"spawn\" type=\"entity_spawn\" x=\"3446.67\" y=\"856\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"320\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"902\" name=\"spawn\" type=\"entity_spawn\" x=\"3851.76\" y=\"2487.88\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"350\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"903\" name=\"spawn\" type=\"entity_spawn\" x=\"3844\" y=\"2750\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"200\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"904\" name=\"spawn\" type=\"entity_spawn\" x=\"3866.67\" y=\"3166.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"905\" name=\"spawn\" type=\"entity_spawn\" x=\"3808\" y=\"3657.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"340\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"906\" name=\"spawn\" type=\"entity_spawn\" x=\"3804\" y=\"3917.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"290\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"907\" name=\"spawn\" type=\"entity_spawn\" x=\"3769.45\" y=\"1727.27\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"330\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"908\" name=\"spawn\" type=\"entity_spawn\" x=\"3853.33\" y=\"1968\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"215\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"909\" name=\"spawn\" type=\"entity_spawn\" x=\"2964.67\" y=\"3888\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"910\" name=\"spawn\" type=\"entity_spawn\" x=\"2206\" y=\"3836\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"911\" name=\"spawn\" type=\"entity_spawn\" x=\"1680\" y=\"3826\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"912\" name=\"spawn\" type=\"entity_spawn\" x=\"1126\" y=\"3844\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"913\" name=\"spawn\" type=\"entity_spawn\" x=\"344\" y=\"3248\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"914\" name=\"spawn\" type=\"entity_spawn\" x=\"212\" y=\"3856\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"915\" name=\"spawn\" type=\"entity_spawn\" x=\"318\" y=\"1984\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"916\" name=\"spawn\" type=\"entity_spawn\" x=\"392\" y=\"1198\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"917\" name=\"spawn\" type=\"entity_spawn\" x=\"840\" y=\"1456\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"345\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"918\" name=\"spawn\" type=\"entity_spawn\" x=\"1261.7\" y=\"753.576\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"190\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"919\" name=\"spawn\" type=\"entity_spawn\" x=\"3363.67\" y=\"3239\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"310\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"922\" name=\"spawn\" type=\"entity_spawn\" x=\"2096.12\" y=\"2320.61\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"220\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"923\" name=\"spawn\" type=\"entity_spawn\" x=\"2376\" y=\"2212\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"80\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\">\n  <object id=\"608\" type=\"static_wall\" x=\"-108.5\" y=\"480\">\n   <polygon points=\"0,0 197.5,56.5 200.5,9 90.5,-245.5\"/>\n  </object>\n  <object id=\"609\" type=\"static_wall\" x=\"-24\" y=\"60.5\">\n   <polygon points=\"0,0 75.5,177 8,263.5 -69.5,100\"/>\n  </object>\n  <object id=\"610\" type=\"static_wall\" x=\"-66\" y=\"-11.5\">\n   <polygon points=\"0,0 75.5,161 235,-1.5\"/>\n  </object>\n  <object id=\"611\" type=\"static_wall\" x=\"76\" y=\"-8.5\">\n   <polygon points=\"0,0 162.5,66.5 277,-15\"/>\n  </object>\n  <object id=\"612\" type=\"static_wall\" x=\"228.293\" y=\"-5.69218\" rotation=\"358.644\">\n   <polygon points=\"0,0 282.5,115.5 321,-52\"/>\n  </object>\n  <object id=\"613\" type=\"static_wall\" x=\"64.6667\" y=\"484\">\n   <polygon points=\"0,0 134,348 -134,419.333\"/>\n  </object>\n  <object id=\"614\" type=\"static_wall\" x=\"176\" y=\"814.667\">\n   <polygon points=\"0,0 68.6667,66.6667 56.6667,148.667 -253.333,160\"/>\n  </object>\n  <object id=\"615\" type=\"static_wall\" x=\"176\" y=\"961.333\">\n   <polygon points=\"0,0 -224,170.667 -200.667,-108\"/>\n  </object>\n  <object id=\"616\" type=\"static_wall\" x=\"86\" y=\"1016.67\">\n   <polygon points=\"0,0 56.6667,391.333 -202,292.667\"/>\n  </object>\n  <object id=\"617\" type=\"static_wall\" x=\"-13.3333\" y=\"1299.33\">\n   <polygon points=\"0,0 134,39.3333 202,70 250,140.667 194.667,216.667 -97.3333,260\"/>\n  </object>\n  <object id=\"619\" type=\"static_wall\" x=\"51.3333\" y=\"1476\">\n   <polygon points=\"0,0 164,312 127.333,357.333 -120.667,358 -69.3333,0.666667\"/>\n  </object>\n  <object id=\"622\" type=\"static_wall\" x=\"29.4075\" y=\"1578.95\" width=\"277.108\" height=\"120\" rotation=\"60\"/>\n  <object id=\"623\" type=\"static_wall\" x=\"34.3137\" y=\"1791.43\" width=\"87.278\" height=\"120\" rotation=\"11.512\"/>\n  <object id=\"624\" type=\"static_wall\" x=\"-36.0995\" y=\"1865.61\" width=\"140.479\" height=\"162.637\" rotation=\"0.309295\"/>\n  <object id=\"625\" type=\"static_wall\" x=\"14.9926\" y=\"2021.17\" width=\"87.278\" height=\"120\" rotation=\"342.724\"/>\n  <object id=\"626\" type=\"static_wall\" x=\"49.2662\" y=\"2150.31\" width=\"87.278\" height=\"120\" rotation=\"277.609\"/>\n  <object id=\"627\" type=\"static_wall\" x=\"179.667\" y=\"2079.67\">\n   <polygon points=\"0,0 69,80.3333 35.3333,143.333 -165.667,185.667\"/>\n  </object>\n  <object id=\"628\" type=\"static_wall\" x=\"166\" y=\"2227.5\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"647\" type=\"static_wall\" x=\"3611.66\" y=\"65.7576\" rotation=\"90\">\n   <polygon points=\"0,0 134,348 -134,419.333\"/>\n  </object>\n  <object id=\"648\" type=\"static_wall\" x=\"3280.99\" y=\"177.091\" rotation=\"90\">\n   <polygon points=\"0,0 68.6667,66.6667 56.6667,148.667 -253.333,160\"/>\n  </object>\n  <object id=\"649\" type=\"static_wall\" x=\"3134.32\" y=\"177.091\" rotation=\"90\">\n   <polygon points=\"0,0 -224,170.667 -200.667,-108\"/>\n  </object>\n  <object id=\"650\" type=\"static_wall\" x=\"3078.99\" y=\"87.0909\" rotation=\"90\">\n   <polygon points=\"0,0 56.6667,391.333 -202,292.667\"/>\n  </object>\n  <object id=\"651\" type=\"static_wall\" x=\"2796.33\" y=\"-12.2424\" rotation=\"90\">\n   <polygon points=\"0,0 134,39.3333 202,70 250,140.667 194.667,216.667 -97.3333,260\"/>\n  </object>\n  <object id=\"652\" type=\"static_wall\" x=\"2619.66\" y=\"52.4242\" rotation=\"90\">\n   <polygon points=\"0,0 164,312 127.333,357.333 -120.667,358 -69.3333,0.666667\"/>\n  </object>\n  <object id=\"653\" type=\"static_wall\" x=\"2516.71\" y=\"30.4984\" width=\"277.108\" height=\"120\" rotation=\"150\"/>\n  <object id=\"654\" type=\"static_wall\" x=\"2304.23\" y=\"35.4046\" width=\"87.278\" height=\"120\" rotation=\"101.512\"/>\n  <object id=\"655\" type=\"static_wall\" x=\"2230.05\" y=\"-35.0086\" width=\"140.479\" height=\"162.637\" rotation=\"90.3093\"/>\n  <object id=\"656\" type=\"static_wall\" x=\"2074.49\" y=\"16.0835\" width=\"87.278\" height=\"120\" rotation=\"72.724\"/>\n  <object id=\"657\" type=\"static_wall\" x=\"1945.35\" y=\"50.3571\" width=\"87.278\" height=\"120\" rotation=\"7.609\"/>\n  <object id=\"658\" type=\"static_wall\" x=\"2015.99\" y=\"180.758\" rotation=\"90\">\n   <polygon points=\"0,0 69,80.3333 35.3333,143.333 -165.667,185.667\"/>\n  </object>\n  <object id=\"659\" type=\"static_wall\" x=\"1868.16\" y=\"167.091\" rotation=\"90\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"703\" type=\"static_wall\" x=\"4031.02\" y=\"2587.42\" rotation=\"180\">\n   <polygon points=\"0,0 134,348 -134,419.333\"/>\n  </object>\n  <object id=\"704\" type=\"static_wall\" x=\"3919.69\" y=\"2256.75\" rotation=\"180\">\n   <polygon points=\"0,0 68.6667,66.6667 56.6667,148.667 -253.333,160\"/>\n  </object>\n  <object id=\"705\" type=\"static_wall\" x=\"3919.69\" y=\"2110.08\" rotation=\"180\">\n   <polygon points=\"0,0 -224,170.667 -200.667,-108\"/>\n  </object>\n  <object id=\"706\" type=\"static_wall\" x=\"4009.69\" y=\"2054.75\" rotation=\"180\">\n   <polygon points=\"0,0 56.6667,391.333 -202,292.667\"/>\n  </object>\n  <object id=\"707\" type=\"static_wall\" x=\"4109.02\" y=\"1772.09\" rotation=\"180\">\n   <polygon points=\"0,0 134,39.3333 202,70 250,140.667 194.667,216.667 -97.3333,260\"/>\n  </object>\n  <object id=\"708\" type=\"static_wall\" x=\"4044.36\" y=\"1595.42\" rotation=\"180\">\n   <polygon points=\"0,0 164,312 127.333,357.333 -120.667,358 -69.3333,0.666667\"/>\n  </object>\n  <object id=\"709\" type=\"static_wall\" x=\"4066.28\" y=\"1492.47\" width=\"277.108\" height=\"120\" rotation=\"240\"/>\n  <object id=\"710\" type=\"static_wall\" x=\"4061.38\" y=\"1279.99\" width=\"87.278\" height=\"120\" rotation=\"191.512\"/>\n  <object id=\"711\" type=\"static_wall\" x=\"4131.79\" y=\"1205.81\" width=\"140.479\" height=\"162.637\" rotation=\"180.309\"/>\n  <object id=\"712\" type=\"static_wall\" x=\"4080.7\" y=\"1050.25\" width=\"87.278\" height=\"120\" rotation=\"162.724\"/>\n  <object id=\"713\" type=\"static_wall\" x=\"4046.42\" y=\"921.114\" width=\"87.278\" height=\"120\" rotation=\"97.609\"/>\n  <object id=\"714\" type=\"static_wall\" x=\"3916.02\" y=\"991.754\" rotation=\"180\">\n   <polygon points=\"0,0 69,80.3333 35.3333,143.333 -165.667,185.667\"/>\n  </object>\n  <object id=\"715\" type=\"static_wall\" x=\"3929.69\" y=\"843.924\" rotation=\"180\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"717\" type=\"static_wall\" x=\"1508.2\" y=\"4032.05\" rotation=\"270\">\n   <polygon points=\"0,0 134,348 -134,419.333\"/>\n  </object>\n  <object id=\"718\" type=\"static_wall\" x=\"1838.87\" y=\"3920.71\" rotation=\"270\">\n   <polygon points=\"0,0 68.6667,66.6667 56.6667,148.667 -253.333,160\"/>\n  </object>\n  <object id=\"719\" type=\"static_wall\" x=\"1985.54\" y=\"3920.71\" rotation=\"270\">\n   <polygon points=\"0,0 -224,170.667 -200.667,-108\"/>\n  </object>\n  <object id=\"720\" type=\"static_wall\" x=\"2040.87\" y=\"4010.71\" rotation=\"270\">\n   <polygon points=\"0,0 56.6667,391.333 -202,292.667\"/>\n  </object>\n  <object id=\"721\" type=\"static_wall\" x=\"2323.53\" y=\"4110.05\" rotation=\"270\">\n   <polygon points=\"0,0 134,39.3333 202,70 250,140.667 194.667,216.667 -97.3333,260\"/>\n  </object>\n  <object id=\"722\" type=\"static_wall\" x=\"2500.2\" y=\"4045.39\" rotation=\"270\">\n   <polygon points=\"0,0 164,312 127.333,357.333 -120.667,358 -69.3333,0.666667\"/>\n  </object>\n  <object id=\"723\" type=\"static_wall\" x=\"2603.15\" y=\"4067.31\" width=\"277.108\" height=\"120\" rotation=\"330\"/>\n  <object id=\"724\" type=\"static_wall\" x=\"2815.63\" y=\"4062.4\" width=\"87.278\" height=\"120\" rotation=\"281.512\"/>\n  <object id=\"725\" type=\"static_wall\" x=\"2889.81\" y=\"4132.81\" width=\"140.479\" height=\"162.637\" rotation=\"270.309\"/>\n  <object id=\"726\" type=\"static_wall\" x=\"3045.37\" y=\"4081.72\" width=\"87.278\" height=\"120\" rotation=\"252.724\"/>\n  <object id=\"727\" type=\"static_wall\" x=\"3174.51\" y=\"4047.44\" width=\"87.278\" height=\"120\" rotation=\"187.609\"/>\n  <object id=\"728\" type=\"static_wall\" x=\"3103.87\" y=\"3917.04\" rotation=\"270\">\n   <polygon points=\"0,0 69,80.3333 35.3333,143.333 -165.667,185.667\"/>\n  </object>\n  <object id=\"729\" type=\"static_wall\" x=\"3251.7\" y=\"3930.71\" rotation=\"270\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"731\" type=\"static_wall\" x=\"62.306\" y=\"2531.35\">\n   <polygon points=\"0,0 134,348 -134,419.333\"/>\n  </object>\n  <object id=\"732\" type=\"static_wall\" x=\"173.646\" y=\"2862.02\">\n   <polygon points=\"0,0 68.6667,66.6667 56.6667,148.667 -253.333,160\"/>\n  </object>\n  <object id=\"733\" type=\"static_wall\" x=\"173.646\" y=\"3008.69\">\n   <polygon points=\"0,0 -224,170.667 -200.667,-108\"/>\n  </object>\n  <object id=\"734\" type=\"static_wall\" x=\"83.646\" y=\"3064.02\">\n   <polygon points=\"0,0 56.6667,391.333 -202,292.667\"/>\n  </object>\n  <object id=\"735\" type=\"static_wall\" x=\"-15.694\" y=\"3346.68\">\n   <polygon points=\"0,0 134,39.3333 202,70 250,140.667 194.667,216.667 -97.3333,260\"/>\n  </object>\n  <object id=\"739\" type=\"static_wall\" x=\"25.061\" y=\"3542.81\" width=\"81.1501\" height=\"263.65\" rotation=\"20.2325\"/>\n  <object id=\"743\" type=\"static_wall\" x=\"-18.88\" y=\"3904.88\" rotation=\"287.165\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"745\" type=\"static_wall\" x=\"-8.5\" y=\"3749.5\">\n   <polygon points=\"0,0 65,98 10.5,240.5 -54.5,83\"/>\n  </object>\n  <object id=\"746\" type=\"static_wall\" x=\"128.427\" y=\"4070.54\" rotation=\"2.67091\">\n   <polygon points=\"0,0 105,-42.3333 236.667,60 -30.3333,63\"/>\n  </object>\n  <object id=\"755\" type=\"static_wall\" x=\"1595.08\" y=\"49.75\" rotation=\"90\">\n   <polygon points=\"0,0 164,312 127.333,357.333 -120.667,358 -69.3333,0.666667\"/>\n  </object>\n  <object id=\"756\" type=\"static_wall\" x=\"1492.13\" y=\"27.82\" width=\"277.108\" height=\"120\" rotation=\"150\"/>\n  <object id=\"757\" type=\"static_wall\" x=\"1279.65\" y=\"32.73\" width=\"87.278\" height=\"120\" rotation=\"101.512\"/>\n  <object id=\"758\" type=\"static_wall\" x=\"1205.47\" y=\"-37.68\" width=\"140.479\" height=\"162.637\" rotation=\"90.3093\"/>\n  <object id=\"759\" type=\"static_wall\" x=\"1049.91\" y=\"13.41\" width=\"87.278\" height=\"120\" rotation=\"72.724\"/>\n  <object id=\"760\" type=\"static_wall\" x=\"920.766\" y=\"47.68\" width=\"87.278\" height=\"120\" rotation=\"7.609\"/>\n  <object id=\"761\" type=\"static_wall\" x=\"991.406\" y=\"178.08\" rotation=\"90\">\n   <polygon points=\"0,0 69,80.3333 35.3333,143.333 -165.667,185.667\"/>\n  </object>\n  <object id=\"762\" type=\"static_wall\" x=\"843.576\" y=\"164.42\" rotation=\"90\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"763\" type=\"static_wall\" x=\"513\" y=\"102.75\">\n   <polygon points=\"0,0 25.5,-1 107,-90.25 -10.25,-137.75\"/>\n  </object>\n  <object id=\"764\" type=\"static_wall\" x=\"3440.67\" y=\"-136\">\n   <polygon points=\"0,0 -60,162 100,222.667 168.667,227.333 468,105.333\"/>\n  </object>\n  <object id=\"765\" type=\"static_wall\" x=\"3790.67\" y=\"0.666667\">\n   <polygon points=\"0,0 66.6667,55.3333 316,-34 36.6667,-98\"/>\n  </object>\n  <object id=\"766\" type=\"static_wall\" x=\"3948\" y=\"18\">\n   <polygon points=\"0,0 163.333,170.667 188,-98.6667\"/>\n  </object>\n  <object id=\"767\" type=\"static_wall\" x=\"4081.33\" y=\"138\">\n   <polygon points=\"0,0 -42,110 49.3333,248.667 144.667,80.6667\"/>\n  </object>\n  <object id=\"768\" type=\"static_wall\" x=\"4080\" y=\"297.333\">\n   <polygon points=\"0,0 -83.3333,216 189.333,154\"/>\n  </object>\n  <object id=\"769\" type=\"static_wall\" x=\"3996.69\" y=\"513.311\">\n   <polygon points=\"0,0 -2.33333,25.6667 108,120.333 113.667,-117\"/>\n  </object>\n  <object id=\"770\" type=\"static_wall\" x=\"4223.8\" y=\"3438.68\" rotation=\"90\">\n   <polygon points=\"0,0 -60,162 100,222.667 168.667,227.333 468,105.333\"/>\n  </object>\n  <object id=\"771\" type=\"static_wall\" x=\"4087.95\" y=\"3788.02\" rotation=\"88.3574\">\n   <polygon points=\"0,0 66.6667,55.3333 316,-34 36.6667,-98\"/>\n  </object>\n  <object id=\"772\" type=\"static_wall\" x=\"4078.47\" y=\"3948.68\" rotation=\"90\">\n   <polygon points=\"0,0 163.333,170.667 188,-98.6667\"/>\n  </object>\n  <object id=\"773\" type=\"static_wall\" x=\"3958.47\" y=\"4082.01\" rotation=\"90\">\n   <polygon points=\"0,0 -42,110 49.3333,248.667 144.667,80.6667\"/>\n  </object>\n  <object id=\"774\" type=\"static_wall\" x=\"3799.13\" y=\"4080.68\" rotation=\"90\">\n   <polygon points=\"0,0 -83.3333,216 189.333,154\"/>\n  </object>\n  <object id=\"775\" type=\"static_wall\" x=\"3583.16\" y=\"3997.37\" rotation=\"90\">\n   <polygon points=\"0,0 -2.33333,25.6667 108,120.333 113.667,-117\"/>\n  </object>\n  <object id=\"778\" type=\"static_wall\" x=\"484\" y=\"4033.35\" rotation=\"270\">\n   <polygon points=\"0,0 134,348 -134,419.333\"/>\n  </object>\n  <object id=\"779\" type=\"static_wall\" x=\"814.67\" y=\"3922.01\" rotation=\"270\">\n   <polygon points=\"0,0 68.6667,66.6667 56.6667,148.667 -253.333,160\"/>\n  </object>\n  <object id=\"780\" type=\"static_wall\" x=\"961.33\" y=\"3922.01\" rotation=\"270\">\n   <polygon points=\"0,0 -224,170.667 -200.667,-108\"/>\n  </object>\n  <object id=\"781\" type=\"static_wall\" x=\"1016.67\" y=\"4012.01\" rotation=\"270\">\n   <polygon points=\"0,0 56.6667,391.333 -202,292.667\"/>\n  </object>\n  <object id=\"782\" type=\"static_wall\" x=\"1299.33\" y=\"4111.35\" rotation=\"270\">\n   <polygon points=\"0,0 134,39.3333 202,70 250,140.667 194.667,216.667 -97.3333,260\"/>\n  </object>\n  <object id=\"783\" type=\"static_wall\" x=\"286.5\" y=\"4082\">\n   <polygon points=\"0,0 200,-78.5 294.5,-69.5 204,98\"/>\n  </object>\n  <object id=\"784\" type=\"static_wall\" x=\"4009\" y=\"2514.5\">\n   <polygon points=\"0,0 -13.5,75 99,175 174,38\"/>\n  </object>\n  <object id=\"785\" type=\"static_wall\" x=\"4044.17\" y=\"3644.8\" rotation=\"180\">\n   <polygon points=\"0,0 164,312 127.333,357.333 -120.667,358 -69.3333,0.666667\"/>\n  </object>\n  <object id=\"786\" type=\"static_wall\" x=\"4066.1\" y=\"3541.85\" width=\"277.108\" height=\"120\" rotation=\"240\"/>\n  <object id=\"787\" type=\"static_wall\" x=\"4061.19\" y=\"3329.37\" width=\"87.278\" height=\"120\" rotation=\"191.512\"/>\n  <object id=\"788\" type=\"static_wall\" x=\"4131.61\" y=\"3255.19\" width=\"140.479\" height=\"162.637\" rotation=\"180.309\"/>\n  <object id=\"789\" type=\"static_wall\" x=\"4080.52\" y=\"3099.63\" width=\"87.278\" height=\"120\" rotation=\"162.724\"/>\n  <object id=\"790\" type=\"static_wall\" x=\"4046.24\" y=\"2970.49\" width=\"87.278\" height=\"120\" rotation=\"97.609\"/>\n  <object id=\"791\" type=\"static_wall\" x=\"3915.84\" y=\"3041.13\" rotation=\"180\">\n   <polygon points=\"0,0 69,80.3333 35.3333,143.333 -165.667,185.667\"/>\n  </object>\n  <object id=\"792\" type=\"static_wall\" x=\"3929.51\" y=\"2893.3\" rotation=\"180\">\n   <polygon points=\"0,0 -160.5,291 -201,16\"/>\n  </object>\n  <object id=\"801\" type=\"static_wall\" x=\"1007.02\" y=\"1503.59\" rotation=\"6.65068\">\n   <polygon points=\"0,0 -85.5,-205 -61.5,-236.5 19,-206 139.5,-41\"/>\n  </object>\n  <object id=\"802\" type=\"static_wall\" x=\"993.422\" y=\"1647.57\" rotation=\"6.65068\">\n   <polygon points=\"0,0 -91.3333,31.3333 -187.333,209.333 -97,470 34.6667,90\"/>\n  </object>\n  <object id=\"803\" type=\"static_wall\" x=\"892.536\" y=\"1682.46\" rotation=\"6.65068\">\n   <polygon points=\"0,0 -156,182.5 -27,265\"/>\n  </object>\n  <object id=\"804\" type=\"static_wall\" x=\"744.891\" y=\"1865.08\" rotation=\"6.65068\">\n   <polygon points=\"0,0 69,160 145,124.5 82.5,-41.5\"/>\n  </object>\n  <object id=\"805\" type=\"static_wall\" x=\"787.726\" y=\"1989.89\" rotation=\"6.65068\">\n   <polygon points=\"0,0 -33.5,106 93.5,253.5 165.5,260.5 58,-2\"/>\n  </object>\n  <object id=\"806\" type=\"static_wall\" x=\"1150.23\" y=\"1478.82\" rotation=\"6.65068\">\n   <polygon points=\"0,0 -18.3333,103 -37.3333,137.333 -130.333,167.333 -164,79.6667 -127.667,-22\"/>\n  </object>\n  <object id=\"808\" type=\"static_wall\" x=\"1548.46\" y=\"3320.18\" rotation=\"278.859\">\n   <polygon points=\"0,0 -85.5,-205 -61.5,-236.5 19,-206 139.5,-41\"/>\n  </object>\n  <object id=\"809\" type=\"static_wall\" x=\"1691.8\" y=\"3339.32\" rotation=\"278.859\">\n   <polygon points=\"0,0 -91.3333,31.3333 -187.333,209.333 -97,470 34.6667,90\"/>\n  </object>\n  <object id=\"810\" type=\"static_wall\" x=\"1722.78\" y=\"3441.48\" rotation=\"278.859\">\n   <polygon points=\"0,0 -156,182.5 -27,265\"/>\n  </object>\n  <object id=\"811\" type=\"static_wall\" x=\"1899.58\" y=\"3596.05\" rotation=\"278.859\">\n   <polygon points=\"0,0 69,160 145,124.5 82.5,-41.5\"/>\n  </object>\n  <object id=\"812\" type=\"static_wall\" x=\"2025.94\" y=\"3558.05\" rotation=\"278.859\">\n   <polygon points=\"0,0 -33.5,106 93.5,253.5 165.5,260.5 58,-2\"/>\n  </object>\n  <object id=\"813\" type=\"static_wall\" x=\"1529.22\" y=\"3176.13\" rotation=\"278.859\">\n   <polygon points=\"0,0 -18.3333,103 -37.3333,137.333 -130.333,167.333 -164,79.6667 -127.667,-22\"/>\n  </object>\n  <object id=\"815\" type=\"static_wall\" x=\"2983.51\" y=\"700.906\" rotation=\"300.921\">\n   <polygon points=\"0,0 -85.5,-205 -61.5,-236.5 19,-206 139.5,-41\"/>\n  </object>\n  <object id=\"816\" type=\"static_wall\" x=\"3109.18\" y=\"772.478\" rotation=\"300.921\">\n   <polygon points=\"0,0 -91.3333,31.3333 -187.333,209.333 -97,470 34.6667,90\"/>\n  </object>\n  <object id=\"817\" type=\"static_wall\" x=\"3099.52\" y=\"878.794\" rotation=\"300.921\">\n   <polygon points=\"0,0 -156,182.5 -27,265\"/>\n  </object>\n  <object id=\"818\" type=\"static_wall\" x=\"3205.31\" y=\"1088.45\" rotation=\"300.921\">\n   <polygon points=\"0,0 69,160 145,124.5 82.5,-41.5\"/>\n  </object>\n  <object id=\"819\" type=\"static_wall\" x=\"3336.69\" y=\"1100.71\" rotation=\"300.921\">\n   <polygon points=\"0,0 -33.5,106 93.5,253.5 165.5,260.5 58,-2\"/>\n  </object>\n  <object id=\"820\" type=\"static_wall\" x=\"3019.8\" y=\"560.171\" rotation=\"300.921\">\n   <polygon points=\"0,0 -18.3333,103 -37.3333,137.333 -130.333,167.333 -164,79.6667 -127.667,-22\"/>\n  </object>\n  <object id=\"822\" type=\"static_wall\" x=\"3331.73\" y=\"2143.99\">\n   <polygon points=\"0,0 -53,130 123,103 70,20.5\"/>\n  </object>\n  <object id=\"823\" type=\"static_wall\" x=\"3387.14\" y=\"2162.85\">\n   <polygon points=\"0,0 240.5,-394.5 260.5,-237 68,84\"/>\n  </object>\n  <object id=\"824\" type=\"static_wall\" x=\"3363.6\" y=\"1987.84\" rotation=\"0.384798\">\n   <polygon points=\"0,0 151.667,36.3333 142.667,-223 -10,-85\"/>\n  </object>\n  <object id=\"825\" type=\"static_wall\" x=\"3325.06\" y=\"1927.49\">\n   <polygon points=\"0,0 44.3333,44.6667 140.667,-118.333\"/>\n  </object>\n  <object id=\"826\" type=\"static_wall\" x=\"3184.73\" y=\"1494.49\">\n   <polygon points=\"0,0 66,142 234,169 271.5,45.5\"/>\n  </object>\n  <object id=\"827\" type=\"static_wall\" x=\"3386.23\" y=\"1655.99\">\n   <polygon points=\"0,0 95,135 238.5,169 241.5,112 69.5,-117\"/>\n  </object>\n  <object id=\"829\" type=\"static_wall\" x=\"1608.08\" y=\"836.161\" rotation=\"295.475\">\n   <polygon points=\"0,0 -53,130 123,103 70,20.5\"/>\n  </object>\n  <object id=\"830\" type=\"static_wall\" x=\"1648.94\" y=\"794.251\" rotation=\"295.475\">\n   <polygon points=\"0,0 240.5,-394.5 260.5,-237 68,84\"/>\n  </object>\n  <object id=\"831\" type=\"static_wall\" x=\"1480.82\" y=\"740.226\" rotation=\"295.86\">\n   <polygon points=\"0,0 151.667,36.3333 142.667,-223 -10,-85\"/>\n  </object>\n  <object id=\"832\" type=\"static_wall\" x=\"1409.76\" y=\"749.061\" rotation=\"295.475\">\n   <polygon points=\"0,0 44.3333,44.6667 140.667,-118.333\"/>\n  </object>\n  <object id=\"833\" type=\"static_wall\" x=\"958.5\" y=\"689.503\" rotation=\"295.475\">\n   <polygon points=\"0,0 66,142 234,169 271.5,45.5\"/>\n  </object>\n  <object id=\"834\" type=\"static_wall\" x=\"1190.97\" y=\"577.06\" rotation=\"295.475\">\n   <polygon points=\"0,0 95,135 238.5,169 241.5,112 69.5,-117\"/>\n  </object>\n  <object id=\"836\" type=\"static_wall\" x=\"2431.67\" y=\"1996.22\" rotation=\"255\">\n   <polygon points=\"0,0 -53,130 123,103 70,20.5\"/>\n  </object>\n  <object id=\"837\" type=\"static_wall\" x=\"2435.55\" y=\"1937.82\" rotation=\"255\">\n   <polygon points=\"0,0 240.5,-394.5 260.5,-237 68,84\"/>\n  </object>\n  <object id=\"838\" type=\"static_wall\" x=\"2272.6\" y=\"2005.84\" rotation=\"255.385\">\n   <polygon points=\"0,0 151.667,36.3333 142.667,-223 -10,-85\"/>\n  </object>\n  <object id=\"839\" type=\"static_wall\" x=\"2224.27\" y=\"2058.69\" rotation=\"255\">\n   <polygon points=\"0,0 44.3333,44.6667 140.667,-118.333\"/>\n  </object>\n  <object id=\"840\" type=\"static_wall\" x=\"1842.35\" y=\"2306.31\" rotation=\"255\">\n   <polygon points=\"0,0 66,142 234,169 271.5,45.5\"/>\n  </object>\n  <object id=\"841\" type=\"static_wall\" x=\"1946.19\" y=\"2069.88\" rotation=\"255\">\n   <polygon points=\"0,0 95,135 238.5,169 241.5,112 69.5,-117\"/>\n  </object>\n  <object id=\"858\" type=\"static_wall\" x=\"3242.57\" y=\"3417.58\" rotation=\"59.883\">\n   <polygon points=\"0,0 151.667,36.3333 142.667,-223 -10,-85\"/>\n  </object>\n  <object id=\"859\" type=\"static_wall\" x=\"3275.01\" y=\"3353.75\" rotation=\"59.4982\">\n   <polygon points=\"0,0 44.3333,44.6667 140.667,-118.333\"/>\n  </object>\n  <object id=\"860\" type=\"static_wall\" x=\"3576.86\" y=\"3013.06\" rotation=\"59.4982\">\n   <polygon points=\"0,0 66,142 234,169 271.5,45.5\"/>\n  </object>\n  <object id=\"861\" type=\"static_wall\" x=\"3539.98\" y=\"3268.65\" rotation=\"59.4982\">\n   <polygon points=\"0,0 95,135 238.5,169 241.5,112 69.5,-117\"/>\n  </object>\n  <object id=\"863\" type=\"static_wall\" x=\"520.283\" y=\"337.166\">\n   <polygon points=\"0,0 -140.5,104 77.5,97.5\"/>\n  </object>\n  <object id=\"865\" type=\"static_wall\" x=\"830.038\" y=\"2669.71\" rotation=\"253.743\">\n   <polygon points=\"0,0 -140.5,104 77.5,97.5\"/>\n  </object>\n  <object id=\"867\" type=\"static_wall\" x=\"640.01\" y=\"2957.49\" rotation=\"45\">\n   <polygon points=\"0,0 -140.5,104 77.5,97.5\"/>\n  </object>\n  <object id=\"869\" type=\"static_wall\" x=\"472.587\" y=\"2533.1\" rotation=\"115.327\">\n   <polygon points=\"0,0 -140.5,104 77.5,97.5\"/>\n  </object>\n  <object id=\"871\" type=\"static_wall\" x=\"2681.16\" y=\"3309.15\" rotation=\"120\">\n   <polygon points=\"0,0 -140.5,104 77.5,97.5\"/>\n  </object>\n  <object id=\"873\" type=\"static_wall\" x=\"1632.97\" y=\"2783\" rotation=\"315\">\n   <polygon points=\"0,0 72,-62 221,-37.5 220,4 96,49\"/>\n  </object>\n  <object id=\"875\" type=\"static_wall\" x=\"2845.4\" y=\"1167.8\" rotation=\"71.8433\">\n   <polygon points=\"0,0 72,-62 221,-37.5 220,4 96,49\"/>\n  </object>\n  <object id=\"877\" type=\"static_wall\" x=\"2386.92\" y=\"837.815\" rotation=\"178.816\">\n   <polygon points=\"0,0 72,-62 221,-37.5 220,4 96,49\"/>\n  </object>\n  <object id=\"879\" type=\"static_wall\" x=\"3734.39\" y=\"467.417\" rotation=\"60.7176\">\n   <polygon points=\"0,0 -134,30.5 -127.5,72 49.5,64\"/>\n  </object>\n  <object id=\"880\" type=\"static_wall\" x=\"3671.78\" y=\"486.191\" rotation=\"60.7176\">\n   <polygon points=\"0,0 54.5,37.5 112.5,-23.5 14,-64\"/>\n  </object>\n  <object id=\"882\" type=\"static_wall\" x=\"452.05\" y=\"3739.75\" rotation=\"209.824\">\n   <polygon points=\"0,0 -134,30.5 -127.5,72 49.5,64\"/>\n  </object>\n  <object id=\"883\" type=\"static_wall\" x=\"496.138\" y=\"3691.5\" rotation=\"209.824\">\n   <polygon points=\"0,0 54.5,37.5 112.5,-23.5 14,-64\"/>\n  </object>\n  <object id=\"885\" type=\"static_wall\" x=\"2832.15\" y=\"2906.71\" rotation=\"189.349\">\n   <polygon points=\"0,0 -134,30.5 -127.5,72 49.5,64\"/>\n  </object>\n  <object id=\"886\" type=\"static_wall\" x=\"2856.58\" y=\"2846.09\" rotation=\"189.349\">\n   <polygon points=\"0,0 54.5,37.5 112.5,-23.5 14,-64\"/>\n  </object>\n  <object id=\"888\" type=\"static_wall\" x=\"1729.48\" y=\"1345.01\" rotation=\"30\">\n   <polygon points=\"0,0 166,-68.3333 221.667,-2 206.667,38.6667 2.66667,15\"/>\n  </object>\n  <object id=\"890\" type=\"static_wall\" x=\"3597.42\" y=\"2465.02\" rotation=\"60.1694\">\n   <polygon points=\"0,0 166,-68.3333 221.667,-2 206.667,38.6667 2.66667,15\"/>\n  </object>\n  <object id=\"892\" type=\"static_wall\" x=\"906.42\" y=\"3246.33\" rotation=\"120\">\n   <polygon points=\"0,0 166,-68.3333 221.667,-2 206.667,38.6667 2.66667,15\"/>\n  </object>\n  <object id=\"850\" type=\"static_wall\" x=\"3090.52\" y=\"3465.94\" rotation=\"60\">\n   <polygon points=\"0,0 -53,130 123,103 70,20.5\"/>\n  </object>\n  <object id=\"851\" type=\"static_wall\" x=\"3101.88\" y=\"3523.35\" rotation=\"60\">\n   <polygon points=\"0,0 240.5,-394.5 260.5,-237 68,84\"/>\n  </object>\n  <object id=\"852\" type=\"static_wall\" x=\"3241.68\" y=\"3415.47\" rotation=\"60.385\">\n   <polygon points=\"0,0 151.667,36.3333 142.667,-223 -10,-85\"/>\n  </object>\n  <object id=\"853\" type=\"static_wall\" x=\"3274.68\" y=\"3351.91\" rotation=\"60\">\n   <polygon points=\"0,0 44.3333,44.6667 140.667,-118.333\"/>\n  </object>\n  <object id=\"854\" type=\"static_wall\" x=\"3579.5\" y=\"3013.88\" rotation=\"60\">\n   <polygon points=\"0,0 66,142 234,169 271.5,45.5\"/>\n  </object>\n  <object id=\"855\" type=\"static_wall\" x=\"3540.39\" y=\"3269.13\" rotation=\"60\">\n   <polygon points=\"0,0 95,135 238.5,169 241.5,112 69.5,-117\"/>\n  </object>\n  <object id=\"843\" type=\"static_wall\" x=\"2281.56\" y=\"2504.88\" rotation=\"231.651\">\n   <polygon points=\"0,0 -85.5,-205 -61.5,-236.5 19,-206 139.5,-41\"/>\n  </object>\n  <object id=\"844\" type=\"static_wall\" x=\"2392.99\" y=\"2412.68\" rotation=\"231.651\">\n   <polygon points=\"0,0 -91.3333,31.3333 -187.333,209.333 -97,470 34.6667,90\"/>\n  </object>\n  <object id=\"845\" type=\"static_wall\" x=\"2489\" y=\"2459.35\" rotation=\"231.651\">\n   <polygon points=\"0,0 -156,182.5 -27,265\"/>\n  </object>\n  <object id=\"846\" type=\"static_wall\" x=\"2722.53\" y=\"2434.62\" rotation=\"231.651\">\n   <polygon points=\"0,0 69,160 145,124.5 82.5,-41.5\"/>\n  </object>\n  <object id=\"847\" type=\"static_wall\" x=\"2780.49\" y=\"2316.08\" rotation=\"231.651\">\n   <polygon points=\"0,0 -33.5,106 93.5,253.5 165.5,260.5 58,-2\"/>\n  </object>\n  <object id=\"848\" type=\"static_wall\" x=\"2162.78\" y=\"2421.13\" rotation=\"231.651\">\n   <polygon points=\"0,0 -18.3333,103 -37.3333,137.333 -130.333,167.333 -164,79.6667 -127.667,-22\"/>\n  </object>\n  <object id=\"925\" type=\"static_wall\" x=\"2635.58\" y=\"3875.45\" rotation=\"266.688\">\n   <polygon points=\"0,0 166,-68.3333 221.667,-2 206.667,38.6667 2.66667,15\"/>\n  </object>\n  <object id=\"927\" type=\"static_wall\" x=\"1953.04\" y=\"350.816\" rotation=\"270.718\">\n   <polygon points=\"0,0 -134,30.5 -127.5,72 49.5,64\"/>\n  </object>\n  <object id=\"928\" type=\"static_wall\" x=\"2016.65\" y=\"365.862\" rotation=\"270.718\">\n   <polygon points=\"0,0 54.5,37.5 112.5,-23.5 14,-64\"/>\n  </object>\n  <object id=\"929\" type=\"static_wall\" x=\"1388.67\" y=\"-81.3333\">\n   <polygon points=\"0,0 106,179.333 175.333,180.667 298,44\"/>\n  </object>\n  <object id=\"930\" type=\"static_wall\" x=\"-92.6313\" y=\"2698.15\" rotation=\"273.916\">\n   <polygon points=\"0,0 106,179.333 175.333,180.667 298,44\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['artillery'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"20\" nextobjectid=\"1159\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffcfbda9\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"artillery_bg\" tilewidth=\"1024\" tileheight=\"1024\" tilecount=\"4\" columns=\"2\">\n  <image source=\"artillery_bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"5\" name=\"artillery_props\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"2\" columns=\"2\">\n  <image source=\"artillery_props.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"931\" gid=\"1\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"932\" gid=\"1\" x=\"3072\" y=\"-1.13687e-13\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"933\" gid=\"1\" x=\"1024\" y=\"4096\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"934\" gid=\"1\" x=\"4096\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"935\" gid=\"3\" x=\"1024\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"936\" gid=\"3\" x=\"3072\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"937\" gid=\"3\" x=\"2048\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"938\" gid=\"3\" x=\"3072\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"939\" gid=\"2\" x=\"3072\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"940\" gid=\"2\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"941\" gid=\"2\" x=\"1024\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"942\" gid=\"2\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"943\" gid=\"4\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\"/>\n  <object id=\"944\" gid=\"4\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"945\" gid=\"4\" x=\"2048\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"946\" gid=\"4\" x=\"3072\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"18\" name=\"Props\">\n  <object id=\"961\" gid=\"6\" x=\"1930.86\" y=\"2940.54\" width=\"128\" height=\"256\" rotation=\"180.902\"/>\n  <object id=\"964\" gid=\"5\" x=\"1002.96\" y=\"3292.8\" width=\"128\" height=\"256\" rotation=\"337.606\"/>\n  <object id=\"966\" gid=\"5\" x=\"1098.23\" y=\"2978.82\" width=\"128\" height=\"256\" rotation=\"193.193\"/>\n  <object id=\"968\" gid=\"5\" x=\"1102.58\" y=\"3050.37\" width=\"128\" height=\"256\" rotation=\"261.338\"/>\n  <object id=\"970\" gid=\"5\" x=\"2366.24\" y=\"2986.81\" width=\"128\" height=\"256\" rotation=\"307.45\"/>\n  <object id=\"972\" gid=\"5\" x=\"2346.04\" y=\"2655\" width=\"128\" height=\"256\" rotation=\"172.309\"/>\n  <object id=\"974\" gid=\"5\" x=\"2668.28\" y=\"3021.46\" width=\"128\" height=\"256\" rotation=\"279.071\"/>\n  <object id=\"976\" gid=\"5\" x=\"2569.42\" y=\"2395.06\" width=\"128\" height=\"256\" rotation=\"186.356\"/>\n  <object id=\"978\" gid=\"5\" x=\"1434.51\" y=\"1024.48\" width=\"128\" height=\"256\" rotation=\"186.356\"/>\n  <object id=\"1019\" gid=\"5\" x=\"3208.61\" y=\"2172.27\" width=\"128\" height=\"256\" rotation=\"321.755\"/>\n  <object id=\"1021\" gid=\"5\" x=\"3077.21\" y=\"1926.04\" width=\"128\" height=\"256\" rotation=\"71.2687\"/>\n  <object id=\"1023\" gid=\"5\" x=\"3246.74\" y=\"1999.57\" width=\"128\" height=\"256\" rotation=\"294.064\"/>\n  <object id=\"1025\" gid=\"5\" x=\"851.66\" y=\"3078.98\" width=\"128\" height=\"256\" rotation=\"104.142\"/>\n  <object id=\"1027\" gid=\"5\" x=\"1106.03\" y=\"3193.83\" width=\"128\" height=\"256\" rotation=\"213.656\"/>\n  <object id=\"1029\" gid=\"5\" x=\"774.131\" y=\"3279.35\" width=\"128\" height=\"256\" rotation=\"53.2509\"/>\n  <object id=\"1011\" gid=\"6\" x=\"2654.98\" y=\"1439.59\" width=\"128\" height=\"256\" rotation=\"92.6175\"/>\n  <object id=\"1031\" gid=\"5\" x=\"3086.77\" y=\"632.043\" width=\"128\" height=\"256\" rotation=\"254.509\"/>\n  <object id=\"1033\" gid=\"5\" x=\"2786.52\" y=\"499.725\" width=\"128\" height=\"256\" rotation=\"110.096\"/>\n  <object id=\"1035\" gid=\"5\" x=\"2858.08\" y=\"504.006\" width=\"128\" height=\"256\" rotation=\"178.241\"/>\n  <object id=\"1037\" gid=\"5\" x=\"2858.65\" y=\"772.206\" width=\"128\" height=\"256\" rotation=\"21.0453\"/>\n  <object id=\"1039\" gid=\"5\" x=\"3000.91\" y=\"517.815\" width=\"128\" height=\"256\" rotation=\"130.559\"/>\n  <object id=\"1041\" gid=\"5\" x=\"3045.93\" y=\"857.592\" width=\"128\" height=\"256\" rotation=\"330.154\"/>\n  <object id=\"1043\" gid=\"5\" x=\"1263.67\" y=\"1807.43\" width=\"128\" height=\"256\" rotation=\"231.076\"/>\n  <object id=\"1045\" gid=\"5\" x=\"1019.01\" y=\"1941.74\" width=\"128\" height=\"256\" rotation=\"340.59\"/>\n  <object id=\"1047\" gid=\"5\" x=\"1090.53\" y=\"1771.35\" width=\"128\" height=\"256\" rotation=\"203.385\"/>\n  <object id=\"1049\" gid=\"5\" x=\"1217.66\" y=\"2199.19\" width=\"128\" height=\"256\" rotation=\"91.33\"/>\n  <object id=\"1051\" gid=\"5\" x=\"1429.57\" y=\"2455.31\" width=\"128\" height=\"256\" rotation=\"316.189\"/>\n  <object id=\"1053\" gid=\"5\" x=\"530.409\" y=\"734.179\" width=\"128\" height=\"256\" rotation=\"97.5273\"/>\n  <object id=\"1055\" gid=\"5\" x=\"796.315\" y=\"818.968\" width=\"128\" height=\"256\" rotation=\"207.041\"/>\n  <object id=\"981\" gid=\"6\" x=\"1993.11\" y=\"2943.67\" width=\"128\" height=\"256\" rotation=\"181.026\"/>\n  <object id=\"983\" gid=\"6\" x=\"2050.54\" y=\"2932.55\" width=\"128\" height=\"256\" rotation=\"177.329\"/>\n  <object id=\"985\" gid=\"6\" x=\"1867.1\" y=\"2944.21\" width=\"128\" height=\"256\" rotation=\"179.303\"/>\n  <object id=\"995\" gid=\"6\" x=\"3041.37\" y=\"3070.16\" width=\"128\" height=\"256\" rotation=\"180.902\"/>\n  <object id=\"997\" gid=\"6\" x=\"3159.48\" y=\"3055.64\" width=\"128\" height=\"256\" rotation=\"188.952\"/>\n  <object id=\"999\" gid=\"6\" x=\"3189.19\" y=\"3058.85\" width=\"128\" height=\"256\" rotation=\"161.104\"/>\n  <object id=\"1001\" gid=\"6\" x=\"2976.41\" y=\"3052.64\" width=\"128\" height=\"256\" rotation=\"189.989\"/>\n  <object id=\"1003\" gid=\"6\" x=\"2201.47\" y=\"403.783\" width=\"128\" height=\"256\" rotation=\"271.935\"/>\n  <object id=\"1005\" gid=\"6\" x=\"2197.22\" y=\"465.966\" width=\"128\" height=\"256\" rotation=\"272.059\"/>\n  <object id=\"1007\" gid=\"6\" x=\"1639.19\" y=\"869.979\" width=\"128\" height=\"256\" rotation=\"19.0847\"/>\n  <object id=\"1014\" gid=\"6\" x=\"2652.91\" y=\"1507.76\" width=\"128\" height=\"256\" rotation=\"91.0185\"/>\n  <object id=\"1009\" gid=\"6\" x=\"2198.95\" y=\"339.967\" width=\"128\" height=\"256\" rotation=\"270.336\"/>\n  <object id=\"1012\" gid=\"6\" x=\"2657.31\" y=\"1394.13\" width=\"128\" height=\"256\" rotation=\"92.7415\"/>\n  <object id=\"1013\" gid=\"6\" x=\"2651.58\" y=\"1327.39\" width=\"128\" height=\"256\" rotation=\"89.0445\"/>\n  <object id=\"1147\" gid=\"5\" x=\"1804.32\" y=\"1379.12\" width=\"128\" height=\"256\" rotation=\"192.85\"/>\n  <object id=\"1148\" gid=\"5\" x=\"1545.33\" y=\"1580.57\" width=\"128\" height=\"256\" rotation=\"48.4368\"/>\n  <object id=\"1149\" gid=\"5\" x=\"1655.07\" y=\"1485.63\" width=\"128\" height=\"256\" rotation=\"116.582\"/>\n  <object id=\"1150\" gid=\"5\" x=\"1804.5\" y=\"1641.06\" width=\"128\" height=\"256\" rotation=\"319.386\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"MapObjects\">\n  <object id=\"923\" name=\"spawn\" type=\"entity_spawn\" x=\"3727.82\" y=\"1288.24\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"310\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"947\" name=\"spawn\" type=\"entity_spawn\" x=\"3807.94\" y=\"1729.03\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"200\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"948\" name=\"spawn\" type=\"entity_spawn\" x=\"3812.12\" y=\"2566.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"325\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"949\" name=\"spawn\" type=\"entity_spawn\" x=\"3742.3\" y=\"2907.15\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"200\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"950\" name=\"spawn\" type=\"entity_spawn\" x=\"3660\" y=\"3650\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"951\" name=\"spawn\" type=\"entity_spawn\" x=\"2824\" y=\"3728\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"952\" name=\"spawn\" type=\"entity_spawn\" x=\"2296\" y=\"3754\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"320\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"955\" name=\"spawn\" type=\"entity_spawn\" x=\"1778\" y=\"3744\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"956\" name=\"spawn\" type=\"entity_spawn\" x=\"1250\" y=\"3770\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"320\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"957\" name=\"spawn\" type=\"entity_spawn\" x=\"372\" y=\"2702\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"120\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"958\" name=\"spawn\" type=\"entity_spawn\" x=\"314\" y=\"2398\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"15\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"959\" name=\"spawn\" type=\"entity_spawn\" x=\"360\" y=\"1712\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"120\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"960\" name=\"spawn\" type=\"entity_spawn\" x=\"282\" y=\"1412\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"25\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1131\" name=\"spawn\" type=\"entity_spawn\" x=\"460\" y=\"502\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"100\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1132\" name=\"spawn\" type=\"entity_spawn\" x=\"1370\" y=\"328\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"200\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1133\" name=\"spawn\" type=\"entity_spawn\" x=\"1672\" y=\"304\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"130\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1134\" name=\"spawn\" type=\"entity_spawn\" x=\"2478\" y=\"386\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"200\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1135\" name=\"spawn\" type=\"entity_spawn\" x=\"2948\" y=\"408\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1136\" name=\"spawn\" type=\"entity_spawn\" x=\"3639.39\" y=\"475.758\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"220\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1137\" name=\"spawn\" type=\"entity_spawn\" x=\"2081.82\" y=\"3469.7\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1138\" name=\"spawn\" type=\"entity_spawn\" x=\"621.212\" y=\"3612.12\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1139\" name=\"spawn\" type=\"entity_spawn\" x=\"596.97\" y=\"3051.52\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1140\" name=\"spawn\" type=\"entity_spawn\" x=\"1112.12\" y=\"1548.48\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"15\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1141\" name=\"spawn\" type=\"entity_spawn\" x=\"996.182\" y=\"2329.15\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"120\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1142\" name=\"spawn\" type=\"entity_spawn\" x=\"3130.3\" y=\"1578.79\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1143\" name=\"spawn\" type=\"entity_spawn\" x=\"1084.85\" y=\"724.242\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1144\" name=\"spawn\" type=\"entity_spawn\" x=\"2651.52\" y=\"2745.45\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"30\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1145\" name=\"spawn\" type=\"entity_spawn\" x=\"2312.12\" y=\"2342.42\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1146\" name=\"spawn\" type=\"entity_spawn\" x=\"1800\" y=\"2412.12\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"300\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1156\" name=\"spawn\" type=\"entity_spawn\" x=\"3444\" y=\"3228\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"330\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1157\" name=\"spawn\" type=\"entity_spawn\" x=\"1348\" y=\"3036\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"30\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"1158\" name=\"spawn\" type=\"entity_spawn\" x=\"3156\" y=\"1056\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\">\n  <object id=\"980\" type=\"static_wall\" x=\"1826.51\" y=\"2992.39\" rotation=\"0.902289\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"982\" type=\"static_wall\" x=\"1888.65\" y=\"2995.28\" rotation=\"1.02576\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"984\" type=\"static_wall\" x=\"1949.63\" y=\"2990.8\" rotation=\"357.329\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"986\" type=\"static_wall\" x=\"1764.24\" y=\"2998.95\" rotation=\"359.303\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"996\" type=\"static_wall\" x=\"2937.02\" y=\"3122.01\" rotation=\"0.902289\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"998\" type=\"static_wall\" x=\"3048.9\" y=\"3092.35\" rotation=\"8.9521\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1000\" type=\"static_wall\" x=\"3108.57\" y=\"3142.98\" rotation=\"341.104\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1002\" type=\"static_wall\" x=\"2865.18\" y=\"3087.36\" rotation=\"9.98901\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1004\" type=\"static_wall\" x=\"2151.51\" y=\"298.515\" rotation=\"91.9348\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1006\" type=\"static_wall\" x=\"2147.5\" y=\"360.593\" rotation=\"92.0583\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1008\" type=\"static_wall\" x=\"1754.5\" y=\"853.28\" rotation=\"199.085\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1010\" type=\"static_wall\" x=\"2146.07\" y=\"236.137\" rotation=\"90.3355\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1015\" type=\"static_wall\" x=\"2703.69\" y=\"1545.44\" rotation=\"272.618\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1016\" type=\"static_wall\" x=\"2705.77\" y=\"1500.09\" rotation=\"272.741\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1017\" type=\"static_wall\" x=\"2706.78\" y=\"1430\" rotation=\"269.044\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1018\" type=\"static_wall\" x=\"2704.55\" y=\"1612.22\" rotation=\"271.018\">\n   <polygon points=\"0,0 53.5,-0.5 55,118.5 27,168.5 0,119\"/>\n  </object>\n  <object id=\"1056\" type=\"static_wall\" x=\"691.374\" y=\"953.019\" width=\"50.25\" height=\"85.5\" rotation=\"207.041\"/>\n  <object id=\"965\" type=\"static_wall\" x=\"967.096\" y=\"3125.06\" width=\"50.25\" height=\"85.5\" rotation=\"337.606\"/>\n  <object id=\"967\" type=\"static_wall\" x=\"1029.78\" y=\"3136.09\" width=\"50.25\" height=\"85.5\" rotation=\"193.193\"/>\n  <object id=\"969\" type=\"static_wall\" x=\"932.461\" y=\"3043.39\" width=\"50.25\" height=\"85.5\" rotation=\"261.338\"/>\n  <object id=\"971\" type=\"static_wall\" x=\"2253.35\" y=\"2859.37\" width=\"50.25\" height=\"85.5\" rotation=\"307.45\"/>\n  <object id=\"973\" type=\"static_wall\" x=\"2336.17\" y=\"2824.96\" width=\"50.25\" height=\"85.5\" rotation=\"172.309\"/>\n  <object id=\"975\" type=\"static_wall\" x=\"2508.38\" y=\"2962.99\" width=\"50.25\" height=\"85.5\" rotation=\"279.071\"/>\n  <object id=\"977\" type=\"static_wall\" x=\"2518.59\" y=\"2557.55\" width=\"50.25\" height=\"85.5\" rotation=\"186.356\"/>\n  <object id=\"979\" type=\"static_wall\" x=\"1383.68\" y=\"1186.97\" width=\"50.25\" height=\"85.5\" rotation=\"186.356\"/>\n  <object id=\"1020\" type=\"static_wall\" x=\"3130.71\" y=\"2020.89\" width=\"50.25\" height=\"85.5\" rotation=\"321.755\"/>\n  <object id=\"1022\" type=\"static_wall\" x=\"3245.91\" y=\"1903.18\" width=\"50.25\" height=\"85.5\" rotation=\"71.2687\"/>\n  <object id=\"1024\" type=\"static_wall\" x=\"3107.42\" y=\"1901.73\" width=\"50.25\" height=\"85.5\" rotation=\"294.064\"/>\n  <object id=\"1026\" type=\"static_wall\" x=\"1005.76\" y=\"3151.35\" width=\"50.25\" height=\"85.5\" rotation=\"104.142\"/>\n  <object id=\"1028\" type=\"static_wall\" x=\"986.346\" y=\"3314.9\" width=\"50.25\" height=\"85.5\" rotation=\"213.656\"/>\n  <object id=\"1030\" type=\"static_wall\" x=\"927.489\" y=\"3205.43\" width=\"50.25\" height=\"85.5\" rotation=\"53.2509\"/>\n  <object id=\"1032\" type=\"static_wall\" x=\"2915.95\" y=\"647.483\" width=\"50.25\" height=\"85.5\" rotation=\"254.509\"/>\n  <object id=\"1034\" type=\"static_wall\" x=\"2934.43\" y=\"586.572\" width=\"50.25\" height=\"85.5\" rotation=\"110.096\"/>\n  <object id=\"1036\" type=\"static_wall\" x=\"2830.7\" y=\"672.046\" width=\"50.25\" height=\"85.5\" rotation=\"178.241\"/>\n  <object id=\"1038\" type=\"static_wall\" x=\"2949.02\" y=\"627.918\" width=\"50.25\" height=\"85.5\" rotation=\"21.0453\"/>\n  <object id=\"1040\" type=\"static_wall\" x=\"3106.73\" y=\"651.19\" width=\"50.25\" height=\"85.5\" rotation=\"130.559\"/>\n  <object id=\"1042\" type=\"static_wall\" x=\"2990.97\" y=\"696.459\" width=\"50.25\" height=\"85.5\" rotation=\"330.154\"/>\n  <object id=\"1044\" type=\"static_wall\" x=\"1113.22\" y=\"1887.12\" width=\"50.25\" height=\"85.5\" rotation=\"231.076\"/>\n  <object id=\"1046\" type=\"static_wall\" x=\"994.154\" y=\"1773.32\" width=\"50.25\" height=\"85.5\" rotation=\"340.59\"/>\n  <object id=\"1048\" type=\"static_wall\" x=\"994.345\" y=\"1911.82\" width=\"50.25\" height=\"85.5\" rotation=\"203.385\"/>\n  <object id=\"1050\" type=\"static_wall\" x=\"1383.98\" y=\"2235.59\" width=\"50.25\" height=\"85.5\" rotation=\"91.33\"/>\n  <object id=\"1052\" type=\"static_wall\" x=\"1337.36\" y=\"2312.2\" width=\"50.25\" height=\"85.5\" rotation=\"316.189\"/>\n  <object id=\"1054\" type=\"static_wall\" x=\"691.82\" y=\"788.318\" width=\"50.25\" height=\"85.5\" rotation=\"97.5273\"/>\n  <object id=\"1062\" type=\"static_wall\" x=\"-50\" y=\"983.333\">\n   <polygon points=\"0,0 220,105.333 352,-143.333 40.6667,-440\"/>\n  </object>\n  <object id=\"1063\" type=\"static_wall\" x=\"229.333\" y=\"844.667\">\n   <polygon points=\"0,0 53.3333,-116.667 -74.6667,-493.333 -248,-303.333\"/>\n  </object>\n  <object id=\"1064\" type=\"static_wall\" x=\"18\" y=\"188.667\" width=\"202.667\" height=\"417.333\"/>\n  <object id=\"1065\" type=\"static_wall\" x=\"215.563\" y=\"31.7969\" width=\"202.667\" height=\"256.584\" rotation=\"45\"/>\n  <object id=\"1066\" type=\"static_wall\" x=\"915.563\" y=\"9.41091\" width=\"202.667\" height=\"642.251\" rotation=\"90\"/>\n  <object id=\"1067\" type=\"static_wall\" x=\"747.339\" y=\"162.636\" width=\"202.667\" height=\"256.584\" rotation=\"138.377\"/>\n  <object id=\"1068\" type=\"static_wall\" x=\"1053.02\" y=\"138.446\" width=\"202.667\" height=\"256.584\" rotation=\"130.874\"/>\n  <object id=\"1069\" type=\"static_wall\" x=\"964\" y=\"217\">\n   <polygon points=\"0,0 67,-5 63,-300 -69,-273\"/>\n  </object>\n  <object id=\"1070\" type=\"static_wall\" x=\"619\" y=\"321\">\n   <polygon points=\"0,0 77,-74 180,-76 266,-6 137,136\"/>\n  </object>\n  <object id=\"1071\" type=\"static_wall\" x=\"3115.48\" y=\"-53.2816\" rotation=\"90\">\n   <polygon points=\"0,0 220,105.333 352,-143.333 40.6667,-440\"/>\n  </object>\n  <object id=\"1072\" type=\"static_wall\" x=\"3254.15\" y=\"226.051\" rotation=\"90\">\n   <polygon points=\"0,0 53.3333,-116.667 -74.6667,-493.333 -248,-303.333\"/>\n  </object>\n  <object id=\"1073\" type=\"static_wall\" x=\"3910.15\" y=\"14.7184\" width=\"202.667\" height=\"417.333\" rotation=\"90\"/>\n  <object id=\"1074\" type=\"static_wall\" x=\"4067.02\" y=\"212.281\" width=\"202.667\" height=\"256.584\" rotation=\"135\"/>\n  <object id=\"1075\" type=\"static_wall\" x=\"4089.41\" y=\"912.281\" width=\"202.667\" height=\"642.251\" rotation=\"180\"/>\n  <object id=\"1076\" type=\"static_wall\" x=\"3936.18\" y=\"744.057\" width=\"202.667\" height=\"256.584\" rotation=\"228.377\"/>\n  <object id=\"1077\" type=\"static_wall\" x=\"3960.37\" y=\"1049.74\" width=\"202.667\" height=\"256.584\" rotation=\"220.874\"/>\n  <object id=\"1078\" type=\"static_wall\" x=\"3881.82\" y=\"960.718\" rotation=\"90\">\n   <polygon points=\"0,0 67,-5 63,-300 -69,-273\"/>\n  </object>\n  <object id=\"1079\" type=\"static_wall\" x=\"3777.82\" y=\"615.718\" rotation=\"90\">\n   <polygon points=\"0,0 77,-74 180,-76 266,-6 137,136\"/>\n  </object>\n  <object id=\"1080\" type=\"static_wall\" x=\"4147.71\" y=\"3111.77\" rotation=\"180\">\n   <polygon points=\"0,0 220,105.333 352,-143.333 40.6667,-440\"/>\n  </object>\n  <object id=\"1081\" type=\"static_wall\" x=\"3868.38\" y=\"3250.44\" rotation=\"180\">\n   <polygon points=\"0,0 53.3333,-116.667 -74.6667,-493.333 -248,-303.333\"/>\n  </object>\n  <object id=\"1082\" type=\"static_wall\" x=\"4079.71\" y=\"3906.44\" width=\"202.667\" height=\"417.333\" rotation=\"180\"/>\n  <object id=\"1083\" type=\"static_wall\" x=\"3882.15\" y=\"4063.31\" width=\"202.667\" height=\"256.584\" rotation=\"225\"/>\n  <object id=\"1084\" type=\"static_wall\" x=\"3182.15\" y=\"4085.7\" width=\"202.667\" height=\"642.251\" rotation=\"270\"/>\n  <object id=\"1085\" type=\"static_wall\" x=\"3350.38\" y=\"3932.47\" width=\"202.667\" height=\"256.584\" rotation=\"318.377\"/>\n  <object id=\"1086\" type=\"static_wall\" x=\"3044.69\" y=\"3956.66\" width=\"202.667\" height=\"256.584\" rotation=\"310.874\"/>\n  <object id=\"1087\" type=\"static_wall\" x=\"3133.71\" y=\"3878.11\" rotation=\"180\">\n   <polygon points=\"0,0 67,-5 63,-300 -69,-273\"/>\n  </object>\n  <object id=\"1088\" type=\"static_wall\" x=\"3478.71\" y=\"3774.11\" rotation=\"180\">\n   <polygon points=\"0,0 77,-74 180,-76 266,-6 137,136\"/>\n  </object>\n  <object id=\"1089\" type=\"static_wall\" x=\"985.17\" y=\"4145.25\" rotation=\"270\">\n   <polygon points=\"0,0 220,105.333 352,-143.333 40.6667,-440\"/>\n  </object>\n  <object id=\"1090\" type=\"static_wall\" x=\"846.5\" y=\"3865.92\" rotation=\"270\">\n   <polygon points=\"0,0 53.3333,-116.667 -74.6667,-493.333 -248,-303.333\"/>\n  </object>\n  <object id=\"1091\" type=\"static_wall\" x=\"190.5\" y=\"4077.25\" width=\"202.667\" height=\"417.333\" rotation=\"270\"/>\n  <object id=\"1092\" type=\"static_wall\" x=\"33.63\" y=\"3879.69\" width=\"202.667\" height=\"256.584\" rotation=\"315\"/>\n  <object id=\"1093\" type=\"static_wall\" x=\"11.24\" y=\"3179.69\" width=\"202.667\" height=\"642.251\"/>\n  <object id=\"1094\" type=\"static_wall\" x=\"164.47\" y=\"3347.92\" width=\"202.667\" height=\"256.584\" rotation=\"48.377\"/>\n  <object id=\"1095\" type=\"static_wall\" x=\"140.28\" y=\"3042.23\" width=\"202.667\" height=\"256.584\" rotation=\"40.874\"/>\n  <object id=\"1096\" type=\"static_wall\" x=\"218.83\" y=\"3131.25\" rotation=\"270\">\n   <polygon points=\"0,0 67,-5 63,-300 -69,-273\"/>\n  </object>\n  <object id=\"1097\" type=\"static_wall\" x=\"322.83\" y=\"3476.25\" rotation=\"270\">\n   <polygon points=\"0,0 77,-74 180,-76 266,-6 137,136\"/>\n  </object>\n  <object id=\"1098\" type=\"static_wall\" x=\"979.333\" y=\"214\">\n   <polygon points=\"0,0 288.667,-4.66667 562,-245.333 32,-276\"/>\n  </object>\n  <object id=\"1099\" type=\"static_wall\" x=\"1384\" y=\"-92\" width=\"315.333\" height=\"165.333\"/>\n  <object id=\"1100\" type=\"static_wall\" x=\"1580\" y=\"-13.3333\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1101\" type=\"static_wall\" x=\"2417.33\" y=\"-93.6665\" width=\"315.333\" height=\"165.333\"/>\n  <object id=\"1102\" type=\"static_wall\" x=\"2605.67\" y=\"-13.3333\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1103\" type=\"static_wall\" x=\"3886.17\" y=\"973.833\" rotation=\"90\">\n   <polygon points=\"0,0 288.667,-4.66667 562,-245.333 32,-276\"/>\n  </object>\n  <object id=\"1104\" type=\"static_wall\" x=\"4192.17\" y=\"1378.5\" width=\"315.333\" height=\"165.333\" rotation=\"90\"/>\n  <object id=\"1105\" type=\"static_wall\" x=\"4113.5\" y=\"1574.5\" rotation=\"90\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1106\" type=\"static_wall\" x=\"4193.83\" y=\"2411.83\" width=\"315.333\" height=\"165.333\" rotation=\"90\"/>\n  <object id=\"1107\" type=\"static_wall\" x=\"4113.5\" y=\"2600.17\" rotation=\"90\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1108\" type=\"static_wall\" x=\"3116.67\" y=\"3879.17\" rotation=\"180\">\n   <polygon points=\"0,0 288.667,-4.66667 562,-245.333 32,-276\"/>\n  </object>\n  <object id=\"1109\" type=\"static_wall\" x=\"2712\" y=\"4185.17\" width=\"315.333\" height=\"165.333\" rotation=\"180\"/>\n  <object id=\"1110\" type=\"static_wall\" x=\"2516\" y=\"4106.5\" rotation=\"180\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1111\" type=\"static_wall\" x=\"1678.67\" y=\"4186.83\" width=\"315.333\" height=\"165.333\" rotation=\"180\"/>\n  <object id=\"1112\" type=\"static_wall\" x=\"1490.33\" y=\"4106.5\" rotation=\"180\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1113\" type=\"static_wall\" x=\"215.83\" y=\"3109.17\" rotation=\"270\">\n   <polygon points=\"0,0 288.667,-4.66667 562,-245.333 32,-276\"/>\n  </object>\n  <object id=\"1114\" type=\"static_wall\" x=\"-90.1698\" y=\"2704.5\" width=\"315.333\" height=\"165.333\" rotation=\"270\"/>\n  <object id=\"1115\" type=\"static_wall\" x=\"-11.4998\" y=\"2508.5\" rotation=\"270\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1116\" type=\"static_wall\" x=\"-91.8298\" y=\"1671.17\" width=\"315.333\" height=\"165.333\" rotation=\"270\"/>\n  <object id=\"1117\" type=\"static_wall\" x=\"-11.4998\" y=\"1482.83\" rotation=\"270\">\n   <polygon points=\"0,0 241.333,213.333 714,215.333 1001.33,-36.6667\"/>\n  </object>\n  <object id=\"1118\" type=\"static_wall\" x=\"1480.5\" y=\"417\">\n   <polygon points=\"0,0 141.5,-4.5 239,173 240,272.5 174,353 -27.5,356 -98.5,294 -101.5,187\"/>\n  </object>\n  <object id=\"1119\" type=\"static_wall\" x=\"3681.48\" y=\"1482.92\" rotation=\"90\">\n   <polygon points=\"0,0 141.5,-4.5 239,173 240,272.5 174,353 -27.5,356 -98.5,294 -101.5,187\"/>\n  </object>\n  <object id=\"1120\" type=\"static_wall\" x=\"2616.68\" y=\"3679.67\" rotation=\"180\">\n   <polygon points=\"0,0 141.5,-4.5 239,173 240,272.5 174,353 -27.5,356 -98.5,294 -101.5,187\"/>\n  </object>\n  <object id=\"1121\" type=\"static_wall\" x=\"1594.67\" y=\"3678\" rotation=\"180\">\n   <polygon points=\"0,0 141.5,-4.5 239,173 240,272.5 174,353 -27.5,356 -98.5,294 -101.5,187\"/>\n  </object>\n  <object id=\"1123\" type=\"static_wall\" x=\"522\" y=\"1380.67\">\n   <polygon points=\"0,0 166.667,67.3333 284.667,182 226,241.333 185.333,224.667 -20.6667,25.3333\"/>\n  </object>\n  <object id=\"1124\" type=\"static_wall\" x=\"520.333\" y=\"2404.67\">\n   <polygon points=\"0,0 166.667,67.3333 284.667,182 226,241.333 185.333,224.667 -20.6667,25.3333\"/>\n  </object>\n  <object id=\"1125\" type=\"static_wall\" x=\"3573.33\" y=\"2714\" rotation=\"180\">\n   <polygon points=\"0,0 166.667,67.3333 284.667,182 226,241.333 185.333,224.667 -20.6667,25.3333\"/>\n  </object>\n  <object id=\"1126\" type=\"static_wall\" x=\"2714.67\" y=\"521.333\" rotation=\"90\">\n   <polygon points=\"0,0 166.667,67.3333 284.667,182 226,241.333 185.333,224.667 -20.6667,25.3333\"/>\n  </object>\n  <object id=\"1127\" type=\"static_wall\" x=\"1950.67\" y=\"1922.67\">\n   <polygon points=\"0,0 -146.667,78 -146,165.333 74.6667,293.333\"/>\n  </object>\n  <object id=\"1128\" type=\"static_wall\" x=\"2170.67\" y=\"1951.33\" rotation=\"90\">\n   <polygon points=\"0,0 -146.667,78 -146,165.333 74.6667,293.333\"/>\n  </object>\n  <object id=\"1129\" type=\"static_wall\" x=\"2143.33\" y=\"2169.33\" rotation=\"180\">\n   <polygon points=\"0,0 -146.667,78 -146,165.333 74.6667,293.333\"/>\n  </object>\n  <object id=\"1130\" type=\"static_wall\" x=\"1925.33\" y=\"2141.33\" rotation=\"270\">\n   <polygon points=\"0,0 -146.667,78 -146,165.333 74.6667,293.333\"/>\n  </object>\n  <object id=\"1151\" type=\"static_wall\" x=\"1736.82\" y=\"1536.81\" width=\"50.25\" height=\"85.5\" rotation=\"192.85\"/>\n  <object id=\"1152\" type=\"static_wall\" x=\"1691.99\" y=\"1491.63\" width=\"50.25\" height=\"85.5\" rotation=\"48.4368\"/>\n  <object id=\"1153\" type=\"static_wall\" x=\"1789.97\" y=\"1589.5\" width=\"50.25\" height=\"85.5\" rotation=\"116.582\"/>\n  <object id=\"1154\" type=\"static_wall\" x=\"1720.41\" y=\"1493.03\" width=\"50.25\" height=\"85.5\" rotation=\"319.386\"/>\n </objectgroup>\n</map>\n";
maps['strangefields_battle'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"16\" nextobjectid=\"487\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffbba3ad\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"1024\" tileheight=\"1024\" tilecount=\"1\" columns=\"1\">\n  <image source=\"strangefields_bg.jpg\" width=\"1024\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"strangefields_edges\" tilewidth=\"256\" tileheight=\"1024\" tilecount=\"2\" columns=\"2\">\n  <image source=\"strangefields_edges.png\" width=\"512\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"strangefields_walls_large\" tilewidth=\"512\" tileheight=\"1024\" tilecount=\"2\" columns=\"2\">\n  <image source=\"strangefields_walls_large.png\" width=\"1024\" height=\"1024\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"strangefields_walls_small\" tilewidth=\"256\" tileheight=\"128\" tilecount=\"4\" columns=\"2\">\n  <image source=\"strangefields_walls_small.png\" width=\"512\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"280\" gid=\"1\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"281\" gid=\"1\" x=\"1024\" y=\"-1.13687e-13\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"282\" gid=\"1\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"283\" gid=\"1\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"284\" gid=\"1\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"285\" gid=\"1\" x=\"3072\" y=\"0\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"286\" gid=\"1\" x=\"3072\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"287\" gid=\"1\" x=\"4096\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"14\" name=\"Edges\" locked=\"1\">\n  <object id=\"288\" gid=\"2\" x=\"0.0104167\" y=\"1024.02\" width=\"256\" height=\"1024\"/>\n  <object id=\"328\" gid=\"2\" x=\"1114.74\" y=\"8.35e-06\" width=\"256\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"329\" gid=\"3\" x=\"1114.74\" y=\"256\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"350\" gid=\"2\" x=\"3162.56\" y=\"-0.367876\" width=\"256\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"351\" gid=\"3\" x=\"3162.56\" y=\"255.632\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"289\" gid=\"3\" x=\"256.01\" y=\"1024.02\" width=\"256\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"369\" gid=\"2\" x=\"4096.45\" y=\"1023.13\" width=\"256\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"370\" gid=\"3\" x=\"3840.45\" y=\"1023.13\" width=\"256\" height=\"1024\"/>\n  <object id=\"371\" gid=\"2\" x=\"2981.72\" y=\"2047.15\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"372\" gid=\"3\" x=\"2981.72\" y=\"1791.15\" width=\"256\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"373\" gid=\"2\" x=\"933.898\" y=\"2047.52\" width=\"256\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"374\" gid=\"3\" x=\"933.898\" y=\"1791.52\" width=\"256\" height=\"1024\" rotation=\"90\"/>\n </objectgroup>\n <objectgroup id=\"15\" name=\"Blockers\">\n  <object id=\"429\" gid=\"4\" x=\"1444.47\" y=\"817.26\" width=\"512\" height=\"1024\" rotation=\"81.7574\"/>\n  <object id=\"430\" type=\"static_wall\" x=\"2104.44\" y=\"1010.14\" rotation=\"81.7574\">\n   <polygon points=\"0,0 -87,22 -173.5,206.5 -82.5,433 37,81\"/>\n  </object>\n  <object id=\"431\" type=\"static_wall\" x=\"2141.72\" y=\"1019.89\" rotation=\"81.7574\">\n   <polygon points=\"0,0 -34.5,-84 37.5,-274.5 123.5,-159 87,-20\"/>\n  </object>\n  <object id=\"432\" type=\"static_wall\" x=\"2237.22\" y=\"1006.06\" rotation=\"81.7574\">\n   <polygon points=\"0,0 -98.5,-224 -74.5,-255.5 8,-229 119,-55.5\"/>\n  </object>\n  <object id=\"433\" type=\"static_wall\" x=\"2025.14\" y=\"910.306\" rotation=\"81.7574\">\n   <polygon points=\"0,0 -136.667,156.667 -20,226\"/>\n  </object>\n  <object id=\"434\" type=\"static_wall\" x=\"1841.88\" y=\"826.379\" rotation=\"81.7574\">\n   <polygon points=\"0,0 112.667,251.333 210.667,-36\"/>\n  </object>\n  <object id=\"435\" type=\"static_wall\" x=\"1734.65\" y=\"904.56\" rotation=\"81.7574\">\n   <polygon points=\"0,0 -35.3333,110.667 92.6667,255.333 158,264 38,-32\"/>\n  </object>\n  <object id=\"445\" gid=\"5\" x=\"3534.15\" y=\"1203.28\" width=\"512\" height=\"1024\" rotation=\"308.81\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"2882.48\" y=\"650.901\" rotation=\"308.81\">\n   <polygon points=\"0,0 64,139 388,216 271,47\"/>\n  </object>\n  <object id=\"447\" type=\"static_wall\" x=\"3123.23\" y=\"598.357\" rotation=\"308.81\">\n   <polygon points=\"0,0 232.667,323.333 269.333,280 248.667,119.333 78.6667,-106.667\"/>\n  </object>\n  <object id=\"448\" type=\"static_wall\" x=\"3298.03\" y=\"603.345\" rotation=\"308.81\">\n   <polygon points=\"0,0 -158.5,140 -94.5,195.5 91,241 160.5,143.5\"/>\n  </object>\n  <object id=\"449\" type=\"static_wall\" x=\"3335.55\" y=\"798.427\" rotation=\"308.81\">\n   <polygon points=\"0,0 8.5,47.5 165.5,86.5 171.5,-1.5\"/>\n  </object>\n  <object id=\"450\" type=\"static_wall\" x=\"3450.47\" y=\"716.972\" rotation=\"308.81\">\n   <polygon points=\"0,0 -128,233.5 -37.5,270.5 153,-47.5\"/>\n  </object>\n  <object id=\"451\" type=\"static_wall\" x=\"3481.58\" y=\"944.756\" rotation=\"308.81\">\n   <polygon points=\"0,0 -52,128.5 120.5,102.5 85,22\"/>\n  </object>\n  <object id=\"452\" gid=\"5\" x=\"536.806\" y=\"965.303\" width=\"512\" height=\"1024\" rotation=\"108.414\"/>\n  <object id=\"453\" type=\"static_wall\" x=\"1340.13\" y=\"1255.95\" rotation=\"108.414\">\n   <polygon points=\"0,0 64,139 388,216 271,47\"/>\n  </object>\n  <object id=\"454\" type=\"static_wall\" x=\"1132.78\" y=\"1389.1\" rotation=\"108.414\">\n   <polygon points=\"0,0 232.667,323.333 269.333,280 248.667,119.333 78.6667,-106.667\"/>\n  </object>\n  <object id=\"455\" type=\"static_wall\" x=\"967.204\" y=\"1445.35\" rotation=\"108.414\">\n   <polygon points=\"0,0 -158.5,140 -94.5,195.5 91,241 160.5,143.5\"/>\n  </object>\n  <object id=\"456\" type=\"static_wall\" x=\"864.059\" y=\"1275.57\" rotation=\"108.414\">\n   <polygon points=\"0,0 8.5,47.5 165.5,86.5 171.5,-1.5\"/>\n  </object>\n  <object id=\"457\" type=\"static_wall\" x=\"784.721\" y=\"1391.97\" rotation=\"108.414\">\n   <polygon points=\"0,0 -128,233.5 -37.5,270.5 153,-47.5\"/>\n  </object>\n  <object id=\"458\" type=\"static_wall\" x=\"676.188\" y=\"1189.3\" rotation=\"108.414\">\n   <polygon points=\"0,0 -52,128.5 120.5,102.5 85,22\"/>\n  </object>\n  <object id=\"459\" gid=\"6\" x=\"2079.22\" y=\"1636.96\" width=\"256\" height=\"128\" rotation=\"324.464\"/>\n  <object id=\"460\" gid=\"8\" x=\"2204.31\" y=\"430.474\" width=\"256\" height=\"128\" rotation=\"181.799\"/>\n  <object id=\"461\" gid=\"7\" x=\"103.443\" y=\"1935.84\" width=\"256\" height=\"128\" rotation=\"323.217\"/>\n  <object id=\"462\" gid=\"9\" x=\"3842.73\" y=\"388.945\" width=\"256\" height=\"128\" rotation=\"321.976\"/>\n  <object id=\"463\" type=\"static_wall\" x=\"3821.41\" y=\"330.296\" rotation=\"321.976\">\n   <polygon points=\"0,0 72,-61.3333 220.667,-36 217.333,4.66667 95.3333,46.6667\"/>\n  </object>\n  <object id=\"464\" type=\"static_wall\" x=\"2187.85\" y=\"508.663\" rotation=\"181.799\">\n   <polygon points=\"0,0 3.33333,41.3333 175.333,28.6667 224.667,8 131.333,-32.6667\"/>\n  </object>\n  <object id=\"465\" type=\"static_wall\" x=\"2074.27\" y=\"480.083\" rotation=\"181.799\">\n   <polygon points=\"0,0 59.3333,42.6667 110,-7.33333 110.667,-17.3333 19.3333,-52\"/>\n  </object>\n  <object id=\"466\" type=\"static_wall\" x=\"2085.56\" y=\"1609.7\" rotation=\"324.464\">\n   <polygon points=\"0,0 138,-99.5 209,-7\"/>\n  </object>\n  <object id=\"467\" type=\"static_wall\" x=\"93.1141\" y=\"1888.63\" rotation=\"323.217\">\n   <polygon points=\"0,0 165,-73 217,-7 205.5,29.5\"/>\n  </object>\n  <object id=\"468\" gid=\"6\" x=\"2441.39\" y=\"273.22\" width=\"234.237\" height=\"117.119\" rotation=\"65.2141\"/>\n  <object id=\"469\" type=\"static_wall\" x=\"2464.82\" y=\"283.568\" rotation=\"65.2141\">\n   <polygon points=\"0,0 126.269,-91.0414 191.233,-6.40492\"/>\n  </object>\n  <object id=\"474\" gid=\"6\" x=\"1381.34\" y=\"1253.85\" width=\"256\" height=\"128\" rotation=\"112.273\"/>\n  <object id=\"475\" type=\"static_wall\" x=\"1390.5\" y=\"1280.29\" rotation=\"112.273\">\n   <polygon points=\"0,0 138,-99.5 209,-7\"/>\n  </object>\n  <object id=\"476\" gid=\"6\" x=\"2599.76\" y=\"1106.35\" width=\"256\" height=\"128\" rotation=\"165.023\"/>\n  <object id=\"477\" type=\"static_wall\" x=\"2584.26\" y=\"1129.64\" rotation=\"165.023\">\n   <polygon points=\"0,0 138,-99.5 209,-7\"/>\n  </object>\n  <object id=\"478\" gid=\"9\" x=\"1147.96\" y=\"726.188\" width=\"256\" height=\"128\" rotation=\"239.129\"/>\n  <object id=\"479\" type=\"static_wall\" x=\"1087.11\" y=\"740.039\" rotation=\"239.129\">\n   <polygon points=\"0,0 72,-61.3333 220.667,-36 217.333,4.66667 95.3333,46.6667\"/>\n  </object>\n  <object id=\"480\" gid=\"9\" x=\"3047.82\" y=\"1388.94\" width=\"256\" height=\"128\" rotation=\"29.129\"/>\n  <object id=\"481\" type=\"static_wall\" x=\"3093.59\" y=\"1346.51\" rotation=\"29.129\">\n   <polygon points=\"0,0 72,-61.3333 220.667,-36 217.333,4.66667 95.3333,46.6667\"/>\n  </object>\n  <object id=\"482\" gid=\"8\" x=\"685.692\" y=\"932.644\" width=\"218.358\" height=\"109.179\" rotation=\"357.825\"/>\n  <object id=\"483\" type=\"static_wall\" x=\"695.076\" y=\"865.139\" rotation=\"357.825\">\n   <polygon points=\"0,0 2.84319,35.2556 149.552,24.4515 191.632,6.82367 112.022,-27.8634\"/>\n  </object>\n  <object id=\"484\" type=\"static_wall\" x=\"793.412\" y=\"882.744\" rotation=\"357.825\">\n   <polygon points=\"0,0 50.6089,36.3929 93.8255,-6.25503 94.3944,-14.7846 16.4905,-44.3539\"/>\n  </object>\n  <object id=\"485\" gid=\"6\" x=\"1492.82\" y=\"353.231\" width=\"234.237\" height=\"117.119\" rotation=\"168.913\"/>\n  <object id=\"486\" type=\"static_wall\" x=\"1477.22\" y=\"373.544\" rotation=\"168.913\">\n   <polygon points=\"0,0 126.269,-91.0414 191.233,-6.40492\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" locked=\"1\">\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"289.67\" y=\"683.997\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"391.363\" y=\"494.417\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3749.06\" y=\"1492.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3390.54\" y=\"1729.51\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3499.99\" y=\"1536.84\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"646.001\" y=\"510.054\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1279\" y=\"655.666\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"2815.67\" y=\"1416.66\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"752.061\" y=\"362.034\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"100\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3750.91\" y=\"1280.34\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"100\" type=\"static_wall\" x=\"86.0501\" y=\"15.8625\" width=\"345.48\" height=\"71.2438\" rotation=\"69.9849\"/>\n  <object id=\"291\" type=\"static_wall\" x=\"-23.965\" y=\"485.66\" width=\"104\" height=\"427.927\" rotation=\"352.152\"/>\n  <object id=\"292\" type=\"static_wall\" x=\"-12.9896\" y=\"-34.9812\" width=\"104\" height=\"102\"/>\n  <object id=\"293\" type=\"static_wall\" x=\"121.067\" y=\"354.07\" width=\"104\" height=\"226.729\" rotation=\"52.152\"/>\n  <object id=\"294\" type=\"static_wall\" x=\"-42.9896\" y=\"330.019\">\n   <polygon points=\"0,0 157,132 272,123 287,40 224,-22\"/>\n  </object>\n  <object id=\"296\" type=\"static_wall\" x=\"-94.9896\" y=\"893.019\">\n   <polygon points=\"0,0 170,134 271,115 335,34 285,-38 186,-77\"/>\n  </object>\n  <object id=\"297\" type=\"static_wall\" x=\"-6.73182\" y=\"1026.97\" width=\"104\" height=\"153\" rotation=\"353.084\"/>\n  <object id=\"298\" type=\"static_wall\" x=\"95.0104\" y=\"1040.52\">\n   <polygon points=\"0,0 119.5,234.5 84.5,280.5 -170,274\"/>\n  </object>\n  <object id=\"300\" type=\"static_wall\" x=\"168.01\" y=\"1311.52\">\n   <polygon points=\"0,0 -135.5,51.5 -185.5,-161.5\"/>\n  </object>\n  <object id=\"301\" type=\"static_wall\" x=\"136.01\" y=\"1316.52\">\n   <polygon points=\"0,0 -74.5,102.5 -178,-81\"/>\n  </object>\n  <object id=\"302\" type=\"static_wall\" x=\"-6.84208\" y=\"1336.76\" width=\"104\" height=\"188.76\" rotation=\"359.229\"/>\n  <object id=\"303\" type=\"static_wall\" x=\"-17.7475\" y=\"1512.09\" width=\"104\" height=\"188.76\" rotation=\"332.193\"/>\n  <object id=\"304\" type=\"static_wall\" x=\"58.0104\" y=\"1560.02\">\n   <polygon points=\"0,0 119.5,9.5 189.5,87.5 155,150 42,182.5\"/>\n  </object>\n  <object id=\"305\" type=\"static_wall\" x=\"48.2628\" y=\"1655.74\" width=\"130.866\" height=\"285.372\" rotation=\"28.3718\"/>\n  <object id=\"306\" type=\"static_wall\" x=\"-7.48958\" y=\"1930.02\">\n   <polygon points=\"0,0 104,93.5 103,147.5 -84.5,123\"/>\n  </object>\n  <object id=\"352\" type=\"static_wall\" x=\"4170.71\" y=\"85.6718\" width=\"345.48\" height=\"71.2438\" rotation=\"159.985\"/>\n  <object id=\"353\" type=\"static_wall\" x=\"3700.92\" y=\"-24.3433\" width=\"104\" height=\"427.927\" rotation=\"82.152\"/>\n  <object id=\"354\" type=\"static_wall\" x=\"4221.56\" y=\"-13.3679\" width=\"104\" height=\"102\" rotation=\"90\"/>\n  <object id=\"355\" type=\"static_wall\" x=\"3832.51\" y=\"120.689\" width=\"104\" height=\"226.729\" rotation=\"142.152\"/>\n  <object id=\"356\" type=\"static_wall\" x=\"3856.56\" y=\"-43.3679\" rotation=\"90\">\n   <polygon points=\"0,0 157,132 272,123 287,40 224,-22\"/>\n  </object>\n  <object id=\"357\" type=\"static_wall\" x=\"3293.56\" y=\"-95.3679\" rotation=\"90\">\n   <polygon points=\"0,0 170,134 271,115 335,34 285,-38 186,-77\"/>\n  </object>\n  <object id=\"358\" type=\"static_wall\" x=\"3159.61\" y=\"-7.11011\" width=\"104\" height=\"153\" rotation=\"83.084\"/>\n  <object id=\"359\" type=\"static_wall\" x=\"3146.06\" y=\"94.6321\" rotation=\"90\">\n   <polygon points=\"0,0 119.5,234.5 84.5,280.5 -170,274\"/>\n  </object>\n  <object id=\"360\" type=\"static_wall\" x=\"2875.06\" y=\"167.632\" rotation=\"90\">\n   <polygon points=\"0,0 -135.5,51.5 -185.5,-161.5\"/>\n  </object>\n  <object id=\"361\" type=\"static_wall\" x=\"2870.06\" y=\"135.632\" rotation=\"90\">\n   <polygon points=\"0,0 -74.5,102.5 -178,-81\"/>\n  </object>\n  <object id=\"362\" type=\"static_wall\" x=\"2849.82\" y=\"-7.22037\" width=\"104\" height=\"188.76\" rotation=\"89.229\"/>\n  <object id=\"363\" type=\"static_wall\" x=\"2674.49\" y=\"-18.1258\" width=\"104\" height=\"188.76\" rotation=\"62.193\"/>\n  <object id=\"364\" type=\"static_wall\" x=\"2626.56\" y=\"57.6321\" rotation=\"90\">\n   <polygon points=\"0,0 119.5,9.5 189.5,87.5 155,150 42,182.5\"/>\n  </object>\n  <object id=\"365\" type=\"static_wall\" x=\"2530.84\" y=\"47.8845\" width=\"130.866\" height=\"285.372\" rotation=\"118.372\"/>\n  <object id=\"366\" type=\"static_wall\" x=\"2256.56\" y=\"-7.86787\" rotation=\"90\">\n   <polygon points=\"0,0 104,93.5 103,147.5 -84.5,123\"/>\n  </object>\n  <object id=\"334\" type=\"static_wall\" x=\"2122.89\" y=\"86.0397\" width=\"345.48\" height=\"71.2438\" rotation=\"159.985\"/>\n  <object id=\"335\" type=\"static_wall\" x=\"1653.1\" y=\"-23.9754\" width=\"104\" height=\"427.927\" rotation=\"82.152\"/>\n  <object id=\"336\" type=\"static_wall\" x=\"2132.24\" y=\"-60.8166\" width=\"154.667\" height=\"102\" rotation=\"83.6722\"/>\n  <object id=\"337\" type=\"static_wall\" x=\"1784.69\" y=\"121.057\" width=\"104\" height=\"226.729\" rotation=\"142.152\"/>\n  <object id=\"338\" type=\"static_wall\" x=\"1808.74\" y=\"-43\" rotation=\"90\">\n   <polygon points=\"0,0 157,132 272,123 287,40 224,-22\"/>\n  </object>\n  <object id=\"339\" type=\"static_wall\" x=\"1245.74\" y=\"-95\" rotation=\"90\">\n   <polygon points=\"0,0 170,134 271,115 335,34 285,-38 186,-77\"/>\n  </object>\n  <object id=\"340\" type=\"static_wall\" x=\"1111.79\" y=\"-6.74223\" width=\"104\" height=\"153\" rotation=\"83.084\"/>\n  <object id=\"341\" type=\"static_wall\" x=\"1098.24\" y=\"95\" rotation=\"90\">\n   <polygon points=\"0,0 119.5,234.5 84.5,280.5 -170,274\"/>\n  </object>\n  <object id=\"342\" type=\"static_wall\" x=\"827.237\" y=\"168\" rotation=\"90\">\n   <polygon points=\"0,0 -135.5,51.5 -185.5,-161.5\"/>\n  </object>\n  <object id=\"343\" type=\"static_wall\" x=\"822.237\" y=\"136\" rotation=\"90\">\n   <polygon points=\"0,0 -74.5,102.5 -178,-81\"/>\n  </object>\n  <object id=\"344\" type=\"static_wall\" x=\"801.997\" y=\"-6.85249\" width=\"104\" height=\"188.76\" rotation=\"89.229\"/>\n  <object id=\"345\" type=\"static_wall\" x=\"626.667\" y=\"-17.7579\" width=\"104\" height=\"188.76\" rotation=\"62.193\"/>\n  <object id=\"346\" type=\"static_wall\" x=\"578.737\" y=\"58\" rotation=\"90\">\n   <polygon points=\"0,0 119.5,9.5 189.5,87.5 155,150 42,182.5\"/>\n  </object>\n  <object id=\"347\" type=\"static_wall\" x=\"483.017\" y=\"48.2524\" width=\"130.866\" height=\"285.372\" rotation=\"118.372\"/>\n  <object id=\"348\" type=\"static_wall\" x=\"208.737\" y=\"-7.49999\" rotation=\"90\">\n   <polygon points=\"0,0 104,93.5 103,147.5 -84.5,123\"/>\n  </object>\n  <object id=\"375\" type=\"static_wall\" x=\"4010.41\" y=\"2031.29\" width=\"345.48\" height=\"71.2438\" rotation=\"249.985\"/>\n  <object id=\"376\" type=\"static_wall\" x=\"4120.42\" y=\"1561.49\" width=\"104\" height=\"427.927\" rotation=\"172.152\"/>\n  <object id=\"377\" type=\"static_wall\" x=\"4109.45\" y=\"2082.13\" width=\"104\" height=\"102\" rotation=\"180\"/>\n  <object id=\"378\" type=\"static_wall\" x=\"3975.39\" y=\"1693.08\" width=\"104\" height=\"226.729\" rotation=\"232.152\"/>\n  <object id=\"379\" type=\"static_wall\" x=\"4139.45\" y=\"1717.13\" rotation=\"180\">\n   <polygon points=\"0,0 157,132 272,123 287,40 224,-22\"/>\n  </object>\n  <object id=\"380\" type=\"static_wall\" x=\"4191.45\" y=\"1154.13\" rotation=\"180\">\n   <polygon points=\"0,0 170,134 271,115 335,34 285,-38 186,-77\"/>\n  </object>\n  <object id=\"381\" type=\"static_wall\" x=\"4103.19\" y=\"1020.18\" width=\"104\" height=\"153\" rotation=\"173.084\"/>\n  <object id=\"382\" type=\"static_wall\" x=\"4001.45\" y=\"1006.63\" rotation=\"180\">\n   <polygon points=\"0,0 119.5,234.5 84.5,280.5 -170,274\"/>\n  </object>\n  <object id=\"383\" type=\"static_wall\" x=\"3928.45\" y=\"735.63\" rotation=\"180\">\n   <polygon points=\"0,0 -135.5,51.5 -185.5,-161.5\"/>\n  </object>\n  <object id=\"384\" type=\"static_wall\" x=\"3960.45\" y=\"730.63\" rotation=\"180\">\n   <polygon points=\"0,0 -74.5,102.5 -178,-81\"/>\n  </object>\n  <object id=\"385\" type=\"static_wall\" x=\"4103.3\" y=\"710.39\" width=\"104\" height=\"188.76\" rotation=\"179.229\"/>\n  <object id=\"386\" type=\"static_wall\" x=\"4114.21\" y=\"535.06\" width=\"104\" height=\"188.76\" rotation=\"152.193\"/>\n  <object id=\"387\" type=\"static_wall\" x=\"4038.45\" y=\"487.13\" rotation=\"180\">\n   <polygon points=\"0,0 119.5,9.5 189.5,87.5 155,150 42,182.5\"/>\n  </object>\n  <object id=\"388\" type=\"static_wall\" x=\"4048.2\" y=\"391.41\" width=\"130.866\" height=\"285.372\" rotation=\"208.372\"/>\n  <object id=\"389\" type=\"static_wall\" x=\"4103.95\" y=\"117.13\" rotation=\"180\">\n   <polygon points=\"0,0 104,93.5 103,147.5 -84.5,123\"/>\n  </object>\n  <object id=\"390\" type=\"static_wall\" x=\"-74.2521\" y=\"1961.48\" width=\"345.48\" height=\"71.2438\" rotation=\"339.985\"/>\n  <object id=\"391\" type=\"static_wall\" x=\"395.538\" y=\"2071.49\" width=\"104\" height=\"427.927\" rotation=\"262.152\"/>\n  <object id=\"392\" type=\"static_wall\" x=\"-125.102\" y=\"2060.52\" width=\"104\" height=\"102\" rotation=\"270\"/>\n  <object id=\"393\" type=\"static_wall\" x=\"263.948\" y=\"1926.46\" width=\"104\" height=\"226.729\" rotation=\"322.152\"/>\n  <object id=\"394\" type=\"static_wall\" x=\"239.898\" y=\"2090.52\" rotation=\"270\">\n   <polygon points=\"0,0 157,132 272,123 287,40 224,-22\"/>\n  </object>\n  <object id=\"395\" type=\"static_wall\" x=\"802.898\" y=\"2142.52\" rotation=\"270\">\n   <polygon points=\"0,0 170,134 271,115 335,34 285,-38 186,-77\"/>\n  </object>\n  <object id=\"396\" type=\"static_wall\" x=\"936.848\" y=\"2054.26\" width=\"104\" height=\"153\" rotation=\"263.084\"/>\n  <object id=\"397\" type=\"static_wall\" x=\"950.398\" y=\"1952.52\" rotation=\"270\">\n   <polygon points=\"0,0 119.5,234.5 84.5,280.5 -170,274\"/>\n  </object>\n  <object id=\"398\" type=\"static_wall\" x=\"1221.4\" y=\"1879.52\" rotation=\"270\">\n   <polygon points=\"0,0 -135.5,51.5 -185.5,-161.5\"/>\n  </object>\n  <object id=\"399\" type=\"static_wall\" x=\"1226.4\" y=\"1911.52\" rotation=\"270\">\n   <polygon points=\"0,0 -74.5,102.5 -178,-81\"/>\n  </object>\n  <object id=\"400\" type=\"static_wall\" x=\"1246.64\" y=\"2054.37\" width=\"104\" height=\"188.76\" rotation=\"269.229\"/>\n  <object id=\"401\" type=\"static_wall\" x=\"1421.97\" y=\"2065.28\" width=\"104\" height=\"188.76\" rotation=\"242.193\"/>\n  <object id=\"402\" type=\"static_wall\" x=\"1469.9\" y=\"1989.52\" rotation=\"270\">\n   <polygon points=\"0,0 119.5,9.5 189.5,87.5 155,150 42,182.5\"/>\n  </object>\n  <object id=\"403\" type=\"static_wall\" x=\"1565.62\" y=\"1999.27\" width=\"130.866\" height=\"285.372\" rotation=\"298.372\"/>\n  <object id=\"404\" type=\"static_wall\" x=\"1839.9\" y=\"2055.02\" rotation=\"270\">\n   <polygon points=\"0,0 104,93.5 103,147.5 -84.5,123\"/>\n  </object>\n  <object id=\"406\" type=\"static_wall\" x=\"1973.57\" y=\"1961.11\" width=\"345.48\" height=\"71.2438\" rotation=\"339.985\"/>\n  <object id=\"407\" type=\"static_wall\" x=\"2443.36\" y=\"2071.13\" width=\"104\" height=\"427.927\" rotation=\"262.152\"/>\n  <object id=\"408\" type=\"static_wall\" x=\"1934.22\" y=\"2117.15\" width=\"166\" height=\"102\" rotation=\"270\"/>\n  <object id=\"409\" type=\"static_wall\" x=\"2311.77\" y=\"1926.09\" width=\"104\" height=\"226.729\" rotation=\"322.152\"/>\n  <object id=\"410\" type=\"static_wall\" x=\"2287.72\" y=\"2090.15\" rotation=\"270\">\n   <polygon points=\"0,0 157,132 272,123 287,40 224,-22\"/>\n  </object>\n  <object id=\"411\" type=\"static_wall\" x=\"2850.72\" y=\"2142.15\" rotation=\"270\">\n   <polygon points=\"0,0 170,134 271,115 335,34 285,-38 186,-77\"/>\n  </object>\n  <object id=\"412\" type=\"static_wall\" x=\"2984.67\" y=\"2053.89\" width=\"104\" height=\"153\" rotation=\"263.084\"/>\n  <object id=\"413\" type=\"static_wall\" x=\"2998.22\" y=\"1952.15\" rotation=\"270\">\n   <polygon points=\"0,0 119.5,234.5 84.5,280.5 -170,274\"/>\n  </object>\n  <object id=\"414\" type=\"static_wall\" x=\"3269.22\" y=\"1879.15\" rotation=\"270\">\n   <polygon points=\"0,0 -135.5,51.5 -185.5,-161.5\"/>\n  </object>\n  <object id=\"415\" type=\"static_wall\" x=\"3274.22\" y=\"1911.15\" rotation=\"270\">\n   <polygon points=\"0,0 -74.5,102.5 -178,-81\"/>\n  </object>\n  <object id=\"416\" type=\"static_wall\" x=\"3294.46\" y=\"2054\" width=\"104\" height=\"188.76\" rotation=\"269.229\"/>\n  <object id=\"417\" type=\"static_wall\" x=\"3469.79\" y=\"2064.91\" width=\"104\" height=\"188.76\" rotation=\"242.193\"/>\n  <object id=\"418\" type=\"static_wall\" x=\"3517.72\" y=\"1989.15\" rotation=\"270\">\n   <polygon points=\"0,0 119.5,9.5 189.5,87.5 155,150 42,182.5\"/>\n  </object>\n  <object id=\"419\" type=\"static_wall\" x=\"3613.44\" y=\"1998.9\" width=\"130.866\" height=\"285.372\" rotation=\"298.372\"/>\n  <object id=\"420\" type=\"static_wall\" x=\"3887.72\" y=\"2054.65\" rotation=\"270\">\n   <polygon points=\"0,0 104,93.5 103,147.5 -84.5,123\"/>\n  </object>\n  <object id=\"437\" type=\"static_wall\" x=\"1970.77\" y=\"1961.04\" width=\"354.368\" height=\"230.667\" rotation=\"340.136\"/>\n </objectgroup>\n</map>\n";
maps['artillery_battle'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"12\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"17\" nextobjectid=\"702\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff97a5b8\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"1024\" tileheight=\"1024\" tilecount=\"4\" columns=\"2\">\n  <image source=\"artillery_bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"5\" name=\"artillery_props_wall\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"2\" columns=\"2\">\n  <image source=\"artillery_props_wall.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"7\" name=\"artillery_props\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"2\" columns=\"2\">\n  <image source=\"artillery_props.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"487\" gid=\"1\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"488\" gid=\"1\" x=\"3072\" y=\"-1.13687e-13\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"491\" gid=\"3\" x=\"1024\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"495\" gid=\"4\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\"/>\n  <object id=\"496\" gid=\"4\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"497\" gid=\"4\" x=\"3072\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"498\" gid=\"4\" x=\"2048\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"499\" gid=\"2\" x=\"1024\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"500\" gid=\"3\" x=\"3072\" y=\"1024\" width=\"1024\" height=\"1024\" rotation=\"90\"/>\n  <object id=\"501\" gid=\"3\" x=\"2048\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"502\" gid=\"1\" x=\"4096\" y=\"2048\" width=\"1024\" height=\"1024\" rotation=\"180\"/>\n  <object id=\"503\" gid=\"1\" x=\"1024\" y=\"3072\" width=\"1024\" height=\"1024\" rotation=\"270\"/>\n  <object id=\"504\" gid=\"5\" x=\"960.876\" y=\"3088.22\" width=\"128\" height=\"256\" rotation=\"358.572\"/>\n  <object id=\"505\" gid=\"5\" x=\"3156.55\" y=\"2847.09\" width=\"128\" height=\"256\" rotation=\"187.453\"/>\n </objectgroup>\n <objectgroup id=\"15\" name=\"Blockers\">\n  <object id=\"507\" gid=\"6\" x=\"1039.5\" y=\"2960.5\" width=\"128\" height=\"256\" rotation=\"90\"/>\n  <object id=\"508\" type=\"static_wall\" x=\"1255.67\" y=\"3005.33\" rotation=\"90\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"509\" gid=\"6\" x=\"1176.45\" y=\"2896.19\" width=\"128\" height=\"256\" rotation=\"88.581\"/>\n  <object id=\"510\" type=\"static_wall\" x=\"1393.67\" y=\"2935.65\" rotation=\"88.581\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"511\" gid=\"6\" x=\"1337.63\" y=\"2946.65\" width=\"128\" height=\"256\" rotation=\"95.1391\"/>\n  <object id=\"512\" type=\"static_wall\" x=\"1548.92\" y=\"3010.66\" rotation=\"95.1391\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"513\" gid=\"6\" x=\"1509.76\" y=\"3003.69\" width=\"128\" height=\"256\" rotation=\"82.8298\"/>\n  <object id=\"514\" type=\"static_wall\" x=\"1729.84\" y=\"3021.19\" rotation=\"82.8298\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"515\" gid=\"6\" x=\"1688.61\" y=\"2942.82\" width=\"128\" height=\"256\" rotation=\"91.6532\"/>\n  <object id=\"516\" type=\"static_wall\" x=\"1903.4\" y=\"2993.87\" rotation=\"91.6532\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"517\" gid=\"6\" x=\"1855.73\" y=\"2996.37\" width=\"128\" height=\"256\" rotation=\"90\"/>\n  <object id=\"518\" type=\"static_wall\" x=\"2071.9\" y=\"3041.2\" rotation=\"90\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"519\" gid=\"6\" x=\"2012.68\" y=\"2938.06\" width=\"128\" height=\"256\" rotation=\"88.581\"/>\n  <object id=\"520\" type=\"static_wall\" x=\"2229.9\" y=\"2977.52\" rotation=\"88.581\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"521\" gid=\"6\" x=\"2183.86\" y=\"2989.52\" width=\"128\" height=\"256\" rotation=\"95.1391\"/>\n  <object id=\"522\" type=\"static_wall\" x=\"2395.15\" y=\"3053.53\" rotation=\"95.1391\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"523\" gid=\"6\" x=\"2382.78\" y=\"2953.94\" width=\"128\" height=\"256\" rotation=\"107.286\"/>\n  <object id=\"524\" type=\"static_wall\" x=\"2575.87\" y=\"3060.98\" rotation=\"107.286\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"525\" gid=\"6\" x=\"2804.39\" y=\"3022.61\" width=\"128\" height=\"256\" rotation=\"83.3484\"/>\n  <object id=\"526\" type=\"static_wall\" x=\"3024.3\" y=\"3042.1\" rotation=\"83.3484\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"527\" gid=\"6\" x=\"2503.42\" y=\"2956.48\" width=\"128\" height=\"256\" rotation=\"87.0521\"/>\n  <object id=\"528\" type=\"static_wall\" x=\"2721.62\" y=\"2990.13\" rotation=\"87.0521\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n  <object id=\"630\" gid=\"7\" x=\"1396.2\" y=\"1142.24\" width=\"128\" height=\"256\" rotation=\"34.2511\"/>\n  <object id=\"631\" type=\"static_wall\" x=\"1519.03\" y=\"1018.39\" width=\"49.3333\" height=\"92.6667\" rotation=\"34.2511\"/>\n  <object id=\"632\" gid=\"7\" x=\"1584.78\" y=\"1149.18\" width=\"128\" height=\"256\" rotation=\"311.761\"/>\n  <object id=\"633\" type=\"static_wall\" x=\"1477.08\" y=\"1010.55\" width=\"49.3333\" height=\"92.6667\" rotation=\"311.761\"/>\n  <object id=\"634\" gid=\"7\" x=\"1298.54\" y=\"977.483\" width=\"128\" height=\"256\" rotation=\"93.5104\"/>\n  <object id=\"635\" type=\"static_wall\" x=\"1468.94\" y=\"1019.67\" width=\"49.3333\" height=\"92.6667\" rotation=\"93.5104\"/>\n  <object id=\"636\" gid=\"7\" x=\"1671.03\" y=\"1166.94\" width=\"128\" height=\"256\" rotation=\"223.428\"/>\n  <object id=\"637\" type=\"static_wall\" x=\"1529.33\" y=\"1270.57\" width=\"49.3333\" height=\"92.6667\" rotation=\"223.428\"/>\n  <object id=\"638\" gid=\"7\" x=\"1894.29\" y=\"2737.26\" width=\"128\" height=\"256\" rotation=\"356.988\"/>\n  <object id=\"639\" type=\"static_wall\" x=\"1917.05\" y=\"2564.31\" width=\"49.3333\" height=\"92.6667\" rotation=\"356.988\"/>\n  <object id=\"640\" gid=\"7\" x=\"2048.57\" y=\"2628.59\" width=\"128\" height=\"256\" rotation=\"274.498\"/>\n  <object id=\"641\" type=\"static_wall\" x=\"1878.92\" y=\"2583.47\" width=\"49.3333\" height=\"92.6667\" rotation=\"274.498\"/>\n  <object id=\"642\" gid=\"7\" x=\"1716.81\" y=\"2665.26\" width=\"128\" height=\"256\" rotation=\"56.2473\"/>\n  <object id=\"643\" type=\"static_wall\" x=\"1877.97\" y=\"2595.67\" width=\"49.3333\" height=\"92.6667\" rotation=\"56.2473\"/>\n  <object id=\"654\" gid=\"7\" x=\"2063.56\" y=\"1516.52\" width=\"128\" height=\"256\" rotation=\"169.143\"/>\n  <object id=\"655\" type=\"static_wall\" x=\"2064.98\" y=\"1692.06\" width=\"49.3333\" height=\"92.6667\" rotation=\"169.143\"/>\n  <object id=\"656\" gid=\"7\" x=\"1988.56\" y=\"1793.46\" width=\"128\" height=\"256\" rotation=\"18.6825\"/>\n  <object id=\"657\" type=\"static_wall\" x=\"2073.88\" y=\"1640.04\" width=\"49.3333\" height=\"92.6667\" rotation=\"18.6825\"/>\n  <object id=\"658\" gid=\"7\" x=\"1924.76\" y=\"1569.89\" width=\"128\" height=\"256\" rotation=\"126.469\"/>\n  <object id=\"659\" type=\"static_wall\" x=\"2044.8\" y=\"1697.98\" width=\"49.3333\" height=\"92.6667\" rotation=\"126.469\"/>\n  <object id=\"660\" gid=\"7\" x=\"1052.18\" y=\"2243.07\" width=\"128\" height=\"256\" rotation=\"211.429\"/>\n  <object id=\"661\" type=\"static_wall\" x=\"935.122\" y=\"2373.89\" width=\"49.3333\" height=\"92.6667\" rotation=\"211.429\"/>\n  <object id=\"662\" gid=\"7\" x=\"810.376\" y=\"2397.48\" width=\"128\" height=\"256\" rotation=\"60.9681\"/>\n  <object id=\"663\" type=\"static_wall\" x=\"976.713\" y=\"2341.38\" width=\"49.3333\" height=\"92.6667\" rotation=\"60.9681\"/>\n  <object id=\"664\" gid=\"7\" x=\"913.6\" y=\"2189.16\" width=\"128\" height=\"256\" rotation=\"168.755\"/>\n  <object id=\"665\" type=\"static_wall\" x=\"916.21\" y=\"2364.69\" width=\"49.3333\" height=\"92.6667\" rotation=\"168.755\"/>\n  <object id=\"668\" gid=\"8\" x=\"3000.88\" y=\"1688.09\" width=\"128\" height=\"256\" rotation=\"358.409\"/>\n  <object id=\"669\" type=\"static_wall\" x=\"3071.57\" y=\"1460.04\" rotation=\"358.409\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"670\" gid=\"8\" x=\"3072.75\" y=\"1688.5\" width=\"128\" height=\"256\" rotation=\"1.29676\"/>\n  <object id=\"671\" type=\"static_wall\" x=\"3154.84\" y=\"1464.3\" rotation=\"1.29676\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"672\" gid=\"8\" x=\"3157.31\" y=\"1691.35\" width=\"128\" height=\"256\" rotation=\"359.303\"/>\n  <object id=\"673\" type=\"static_wall\" x=\"3231.56\" y=\"1464.43\" rotation=\"359.303\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"674\" gid=\"8\" x=\"1018.01\" y=\"1902.32\" width=\"128\" height=\"256\" rotation=\"29.6508\"/>\n  <object id=\"675\" type=\"static_wall\" x=\"1196.74\" y=\"1744.02\" rotation=\"29.6508\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"676\" gid=\"8\" x=\"1147.87\" y=\"1887.95\" width=\"128\" height=\"256\" rotation=\"41.4992\"/>\n  <object id=\"677\" type=\"static_wall\" x=\"1355.28\" y=\"1769.7\" rotation=\"41.4992\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"678\" gid=\"8\" x=\"1230.72\" y=\"1918.89\" width=\"128\" height=\"256\" rotation=\"47.5187\"/>\n  <object id=\"679\" type=\"static_wall\" x=\"1449.4\" y=\"1823.04\" rotation=\"47.5187\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"682\" gid=\"8\" x=\"2725.09\" y=\"915.979\" width=\"128\" height=\"256\" rotation=\"272.842\"/>\n  <object id=\"683\" type=\"static_wall\" x=\"2503.2\" y=\"827.861\" rotation=\"272.842\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"684\" gid=\"8\" x=\"2777.17\" y=\"984.411\" width=\"128\" height=\"256\" rotation=\"264.175\"/>\n  <object id=\"685\" type=\"static_wall\" x=\"2544.52\" y=\"930.738\" rotation=\"264.175\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"686\" gid=\"7\" x=\"2682.11\" y=\"2641.48\" width=\"128\" height=\"256\" rotation=\"341.333\"/>\n  <object id=\"687\" type=\"static_wall\" x=\"2656.85\" y=\"2467.76\" width=\"49.3333\" height=\"92.6667\" rotation=\"341.333\"/>\n  <object id=\"688\" gid=\"7\" x=\"568.95\" y=\"1779.02\" width=\"128\" height=\"256\" rotation=\"2.6081\"/>\n  <object id=\"689\" type=\"static_wall\" x=\"608.444\" y=\"1607.97\" width=\"49.3333\" height=\"92.6667\" rotation=\"2.6081\"/>\n  <object id=\"690\" gid=\"7\" x=\"706.375\" y=\"1527.15\" width=\"128\" height=\"256\" rotation=\"212.148\"/>\n  <object id=\"691\" type=\"static_wall\" x=\"587.676\" y=\"1656.49\" width=\"49.3333\" height=\"92.6667\" rotation=\"212.148\"/>\n  <object id=\"692\" gid=\"7\" x=\"716.362\" y=\"1759.43\" width=\"128\" height=\"256\" rotation=\"319.934\"/>\n  <object id=\"693\" type=\"static_wall\" x=\"629.448\" y=\"1606.91\" width=\"49.3333\" height=\"92.6667\" rotation=\"319.934\"/>\n  <object id=\"694\" gid=\"8\" x=\"2391.6\" y=\"1173.34\" width=\"128\" height=\"256\" rotation=\"232.759\"/>\n  <object id=\"695\" type=\"static_wall\" x=\"2165.09\" y=\"1248.81\" rotation=\"232.759\">\n   <polygon points=\"0,0 -30.3333,53.6667 -27.6667,170.667 26,171.333 25.6667,50\"/>\n  </object>\n  <object id=\"696\" gid=\"7\" x=\"2520.91\" y=\"1264.97\" width=\"128\" height=\"256\" rotation=\"273.957\"/>\n  <object id=\"697\" type=\"static_wall\" x=\"2350.85\" y=\"1221.45\" width=\"49.3333\" height=\"92.6667\" rotation=\"273.957\"/>\n  <object id=\"700\" gid=\"6\" x=\"2636.06\" y=\"2990.93\" width=\"128\" height=\"256\" rotation=\"97.1353\"/>\n  <object id=\"701\" type=\"static_wall\" x=\"2845\" y=\"3062.26\" rotation=\"97.1353\">\n   <polygon points=\"0,0 36,-1 51.3333,80 35.3333,161.667 -4.33333,161 -22,76.6667\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\">\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"469.67\" y=\"841.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"352.696\" y=\"561.084\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3723.06\" y=\"2506.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3460.54\" y=\"2535.51\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3636.66\" y=\"2712.17\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"499.334\" y=\"410.054\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"519\" y=\"2071.67\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"3531.67\" y=\"1028.66\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"646.728\" y=\"632.701\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3588.91\" y=\"2357.01\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"529\" type=\"static_wall\" x=\"313.5\" y=\"2187.5\">\n   <polygon points=\"0,0 -64,87 -64.5,184 13,261 136.5,132\"/>\n  </object>\n  <object id=\"530\" type=\"static_wall\" x=\"119.7\" y=\"1982.97\" width=\"252.667\" height=\"243.333\" rotation=\"45\"/>\n  <object id=\"531\" type=\"static_wall\" x=\"140.514\" y=\"2283.6\" width=\"252.667\" height=\"243.333\" rotation=\"50.9451\"/>\n  <object id=\"532\" type=\"static_wall\" x=\"203.336\" y=\"2045.89\" width=\"778.262\" height=\"183.194\" rotation=\"89.2871\"/>\n  <object id=\"533\" type=\"static_wall\" x=\"589.497\" y=\"3037.45\" width=\"282.317\" height=\"183.194\" rotation=\"179.287\"/>\n  <object id=\"534\" type=\"static_wall\" x=\"239.227\" y=\"3042.44\" width=\"282.317\" height=\"183.194\" rotation=\"226.056\"/>\n  <object id=\"535\" type=\"static_wall\" x=\"794.237\" y=\"2959.71\" width=\"229.391\" height=\"183.194\" rotation=\"160.74\"/>\n  <object id=\"536\" type=\"static_wall\" x=\"766.591\" y=\"2989.62\" width=\"113.051\" height=\"171.586\" rotation=\"204.199\"/>\n  <object id=\"539\" type=\"static_wall\" x=\"775.5\" y=\"2846\">\n   <polygon points=\"0,0 74.5,-83 271.5,34.5 292.5,180 238.5,236\"/>\n  </object>\n  <object id=\"541\" type=\"static_wall\" x=\"3178.5\" y=\"2782.5\">\n   <polygon points=\"0,0 -137,113 -137.5,259.5 -97.5,289.5 139.5,104\"/>\n  </object>\n  <object id=\"542\" type=\"static_wall\" x=\"882.459\" y=\"310.531\" rotation=\"90\">\n   <polygon points=\"0,0 -64,87 -64.5,184 13,261 136.5,132\"/>\n  </object>\n  <object id=\"543\" type=\"static_wall\" x=\"1086.99\" y=\"116.731\" width=\"252.667\" height=\"243.333\" rotation=\"135\"/>\n  <object id=\"544\" type=\"static_wall\" x=\"786.359\" y=\"137.545\" width=\"252.667\" height=\"243.333\" rotation=\"140.945\"/>\n  <object id=\"545\" type=\"static_wall\" x=\"1024.07\" y=\"200.367\" width=\"778.262\" height=\"183.194\" rotation=\"179.287\"/>\n  <object id=\"546\" type=\"static_wall\" x=\"32.5088\" y=\"586.528\" width=\"282.317\" height=\"183.194\" rotation=\"269.287\"/>\n  <object id=\"547\" type=\"static_wall\" x=\"27.5188\" y=\"236.258\" width=\"282.317\" height=\"183.194\" rotation=\"316.056\"/>\n  <object id=\"548\" type=\"static_wall\" x=\"110.249\" y=\"791.268\" width=\"229.391\" height=\"183.194\" rotation=\"250.74\"/>\n  <object id=\"549\" type=\"static_wall\" x=\"80.3388\" y=\"763.622\" width=\"113.051\" height=\"171.586\" rotation=\"294.199\"/>\n  <object id=\"550\" type=\"static_wall\" x=\"250.667\" y=\"778.667\">\n   <polygon points=\"0,0 60,66.6667 -78,320.667 -208.667,228\"/>\n  </object>\n  <object id=\"551\" type=\"static_wall\" x=\"21.5082\" y=\"1254.4\" width=\"282.317\" height=\"183.194\" rotation=\"269.287\"/>\n  <object id=\"552\" type=\"static_wall\" x=\"-119.775\" y=\"1341.6\" width=\"282.317\" height=\"183.194\" rotation=\"311.599\"/>\n  <object id=\"553\" type=\"static_wall\" x=\"-109.159\" y=\"1671.9\" width=\"282.317\" height=\"183.194\" rotation=\"269.287\"/>\n  <object id=\"554\" type=\"static_wall\" x=\"62.8574\" y=\"1909.29\" width=\"282.317\" height=\"183.194\" rotation=\"230.475\"/>\n  <object id=\"555\" type=\"static_wall\" x=\"24.4665\" y=\"2077.34\" width=\"282.317\" height=\"183.194\" rotation=\"269.287\"/>\n  <object id=\"556\" type=\"static_wall\" x=\"1804.33\" y=\"20.5207\" width=\"282.317\" height=\"183.194\" rotation=\"357.732\"/>\n  <object id=\"557\" type=\"static_wall\" x=\"1721.89\" y=\"-120.656\" width=\"282.317\" height=\"183.194\" rotation=\"41.599\"/>\n  <object id=\"558\" type=\"static_wall\" x=\"1391.59\" y=\"-110.04\" width=\"282.317\" height=\"183.194\" rotation=\"359.287\"/>\n  <object id=\"559\" type=\"static_wall\" x=\"1154.2\" y=\"61.9767\" width=\"282.317\" height=\"183.194\" rotation=\"320.475\"/>\n  <object id=\"560\" type=\"static_wall\" x=\"986.145\" y=\"23.5858\" width=\"282.317\" height=\"183.194\" rotation=\"359.287\"/>\n  <object id=\"561\" type=\"static_wall\" x=\"2836.27\" y=\"16.2944\" width=\"282.317\" height=\"183.194\" rotation=\"359.287\"/>\n  <object id=\"562\" type=\"static_wall\" x=\"2749.07\" y=\"-124.989\" width=\"282.317\" height=\"183.194\" rotation=\"41.599\"/>\n  <object id=\"563\" type=\"static_wall\" x=\"2418.77\" y=\"-114.373\" width=\"282.317\" height=\"183.194\" rotation=\"359.287\"/>\n  <object id=\"564\" type=\"static_wall\" x=\"2181.38\" y=\"57.6436\" width=\"282.317\" height=\"183.194\" rotation=\"320.475\"/>\n  <object id=\"565\" type=\"static_wall\" x=\"2019.12\" y=\"10.5273\" width=\"282.317\" height=\"183.194\" rotation=\"1.06488\"/>\n  <object id=\"566\" type=\"static_wall\" x=\"3782.33\" y=\"882.912\" rotation=\"180\">\n   <polygon points=\"0,0 -64,87 -64.5,184 13,261 136.5,132\"/>\n  </object>\n  <object id=\"567\" type=\"static_wall\" x=\"3976.13\" y=\"1087.44\" width=\"252.667\" height=\"243.333\" rotation=\"225\"/>\n  <object id=\"568\" type=\"static_wall\" x=\"3955.31\" y=\"786.812\" width=\"252.667\" height=\"243.333\" rotation=\"230.945\"/>\n  <object id=\"569\" type=\"static_wall\" x=\"3892.49\" y=\"1024.52\" width=\"778.262\" height=\"183.194\" rotation=\"269.287\"/>\n  <object id=\"570\" type=\"static_wall\" x=\"3506.33\" y=\"32.9615\" width=\"282.317\" height=\"183.194\" rotation=\"359.287\"/>\n  <object id=\"571\" type=\"static_wall\" x=\"3856.6\" y=\"27.9715\" width=\"282.317\" height=\"183.194\" rotation=\"46.056\"/>\n  <object id=\"572\" type=\"static_wall\" x=\"3301.59\" y=\"110.702\" width=\"229.391\" height=\"183.194\" rotation=\"340.74\"/>\n  <object id=\"573\" type=\"static_wall\" x=\"3329.23\" y=\"80.7915\" width=\"113.051\" height=\"171.586\" rotation=\"24.199\"/>\n  <object id=\"574\" type=\"static_wall\" x=\"3314.19\" y=\"251.12\" rotation=\"90\">\n   <polygon points=\"0,0 60,66.6667 -78,320.667 -208.667,228\"/>\n  </object>\n  <object id=\"580\" type=\"static_wall\" x=\"4072.34\" y=\"1804.78\" width=\"282.317\" height=\"183.194\" rotation=\"87.732\"/>\n  <object id=\"581\" type=\"static_wall\" x=\"4213.51\" y=\"1722.34\" width=\"282.317\" height=\"183.194\" rotation=\"131.599\"/>\n  <object id=\"582\" type=\"static_wall\" x=\"4202.9\" y=\"1392.04\" width=\"282.317\" height=\"183.194\" rotation=\"89.287\"/>\n  <object id=\"583\" type=\"static_wall\" x=\"4030.88\" y=\"1154.65\" width=\"282.317\" height=\"183.194\" rotation=\"50.475\"/>\n  <object id=\"584\" type=\"static_wall\" x=\"4069.27\" y=\"986.598\" width=\"282.317\" height=\"183.194\" rotation=\"89.287\"/>\n  <object id=\"585\" type=\"static_wall\" x=\"3209.88\" y=\"2759.14\" rotation=\"270\">\n   <polygon points=\"0,0 -64,87 -64.5,184 13,261 136.5,132\"/>\n  </object>\n  <object id=\"587\" type=\"static_wall\" x=\"3305.98\" y=\"2932.12\" width=\"252.667\" height=\"243.333\" rotation=\"320.945\"/>\n  <object id=\"588\" type=\"static_wall\" x=\"3180.31\" y=\"2867.9\" width=\"666.221\" height=\"183.194\" rotation=\"359.287\"/>\n  <object id=\"589\" type=\"static_wall\" x=\"4059.83\" y=\"2483.14\" width=\"282.317\" height=\"183.194\" rotation=\"89.287\"/>\n  <object id=\"590\" type=\"static_wall\" x=\"4052.32\" y=\"2845.41\" width=\"282.317\" height=\"183.194\" rotation=\"136.056\"/>\n  <object id=\"599\" type=\"static_wall\" x=\"3902.67\" y=\"2009.33\">\n   <polygon points=\"0,0 -111.333,223.333 9.33333,351.333 230.667,112.667\"/>\n  </object>\n  <object id=\"600\" type=\"static_wall\" x=\"3867.33\" y=\"2248.67\">\n   <polygon points=\"0,0 -53.3333,93.3333 55.3333,396 330,307.333 318,-10.6667\"/>\n  </object>\n  <object id=\"601\" type=\"static_wall\" x=\"522.667\" y=\"1380.67\">\n   <polygon points=\"0,0 -21.3333,24.6667 219.333,242.667 277.333,182 160,68.6667\"/>\n  </object>\n  <object id=\"602\" type=\"static_wall\" x=\"1994.67\" y=\"1903.33\">\n   <polygon points=\"0,0 -179.333,96 -182.667,186 -62.6667,256 77.3333,281.333 146.667,268 288.667,189.333 288.667,100 94,-2.66667\"/>\n  </object>\n  <object id=\"603\" type=\"static_wall\" x=\"2191.67\" y=\"1996.33\" rotation=\"90\">\n   <polygon points=\"0,0 -179.333,96 -182.667,186 -62.6667,256 77.3333,281.333 146.667,268 288.667,189.333 288.667,100 94,-2.66667\"/>\n  </object>\n  <object id=\"605\" type=\"static_wall\" x=\"1481.33\" y=\"418.667\">\n   <polygon points=\"0,0 139.333,-4.66667 235.333,171.333 237.333,272 172,349.333 -36,352 -100,286.667 -101.333,186.667\"/>\n  </object>\n  <object id=\"607\" type=\"static_wall\" x=\"2503.33\" y=\"420.667\">\n   <polygon points=\"0,0 139.333,-4.66667 235.333,171.333 237.333,272 172,349.333 -36,352 -100,286.667 -101.333,186.667\"/>\n  </object>\n  <object id=\"608\" type=\"static_wall\" x=\"3675\" y=\"1481\" rotation=\"90\">\n   <polygon points=\"0,0 139.333,-4.66667 235.333,171.333 237.333,272 172,349.333 -36,352 -100,286.667 -101.333,186.667\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['light_test'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"80\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"3\" nextobjectid=\"44\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"0\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"Long Map Tileset\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"../../wall.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"2\" name=\"Object Layer 1\">\n  <object id=\"1\" type=\"static_wall\" gid=\"1\" x=\"0\" y=\"2048\" width=\"64\" height=\"2048\"/>\n  <object id=\"2\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"2048\" width=\"4992\" height=\"64\"/>\n  <object id=\"3\" type=\"static_wall\" gid=\"1\" x=\"5056\" y=\"2048\" width=\"64\" height=\"2048\"/>\n  <object id=\"4\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"64\" width=\"4992\" height=\"64\"/>\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"482\" y=\"427\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"7\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4608\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"8\" type=\"static_wall\" gid=\"1\" x=\"960\" y=\"960\" width=\"937.091\" height=\"64\" rotation=\"-90\"/>\n  <object id=\"9\" type=\"static_wall\" gid=\"1\" x=\"4160\" y=\"2048\" width=\"937.091\" height=\"64\" rotation=\"-90\"/>\n  <object id=\"10\" name=\"flag_red\" type=\"entity_flag\" x=\"1344\" y=\"448\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"11\" name=\"flag_blue\" type=\"entity_flag\" x=\"3648\" y=\"1536\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" type=\"static_wall\" gid=\"1\" x=\"1672.27\" y=\"1547.36\" width=\"616.912\" height=\"42.1329\" rotation=\"-64.2778\"/>\n  <object id=\"13\" type=\"static_wall\" gid=\"1\" x=\"2095.83\" y=\"1354.58\" width=\"616.912\" height=\"42.1329\" rotation=\"-154.278\"/>\n  <object id=\"14\" type=\"static_wall\" gid=\"1\" x=\"2081.85\" y=\"656.364\" width=\"616.912\" height=\"42.1329\" rotation=\"-365.441\"/>\n  <object id=\"15\" type=\"static_wall\" gid=\"1\" x=\"2465.99\" y=\"919.041\" width=\"616.912\" height=\"42.1329\" rotation=\"-455.442\"/>\n  <object id=\"16\" type=\"static_wall\" gid=\"1\" x=\"3138.37\" y=\"1677.58\" width=\"616.912\" height=\"42.1329\" rotation=\"-129.618\"/>\n  <object id=\"17\" type=\"static_wall\" gid=\"1\" x=\"3139.89\" y=\"1212.21\" width=\"616.912\" height=\"42.1329\" rotation=\"-219.619\"/>\n  <object id=\"18\" type=\"static_wall\" gid=\"1\" x=\"3237.34\" y=\"790.475\" width=\"616.912\" height=\"42.1329\" rotation=\"-64.2778\"/>\n  <object id=\"19\" type=\"static_wall\" gid=\"1\" x=\"3660.9\" y=\"597.695\" width=\"616.912\" height=\"42.1329\" rotation=\"-154.278\"/>\n  <object id=\"20\" type=\"static_wall\" gid=\"1\" x=\"712.899\" y=\"1287.41\" width=\"616.912\" height=\"42.1329\" rotation=\"-323.959\"/>\n  <object id=\"21\" type=\"static_wall\" gid=\"1\" x=\"826.691\" y=\"1738.65\" width=\"616.912\" height=\"42.1329\" rotation=\"-413.959\"/>\n  <object id=\"22\" type=\"static_wall\" gid=\"1\" x=\"4189.09\" y=\"415.213\" width=\"616.912\" height=\"42.1329\" rotation=\"-326.723\"/>\n  <object id=\"23\" type=\"static_wall\" gid=\"1\" x=\"4324.51\" y=\"860.441\" width=\"616.912\" height=\"42.1329\" rotation=\"-416.724\"/>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"226\" y=\"427\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"738\" y=\"427\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"26\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4352\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"27\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4864\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"481\" y=\"182\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"34\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4609\" y=\"1746\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"37\" name=\"Light\" type=\"light\" x=\"1276\" y=\"1008\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fff7ffcf\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"38\" name=\"Light\" type=\"light\" x=\"2564\" y=\"1000\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fff7ffcf\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"39\" name=\"Light\" type=\"light\" x=\"3992\" y=\"936\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fff7ffcf\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"Light\" type=\"light\" x=\"3524\" y=\"1452\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffacacff\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"Light\" type=\"light\" x=\"1392\" y=\"496\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffff7577\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"Light\" type=\"light\" x=\"532\" y=\"1652\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ff65ff72\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"43\" name=\"Light\" type=\"light\" x=\"4420\" y=\"256\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffa220\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['tankpark_night'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"16\" nextobjectid=\"434\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"0.25\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff8c94ff\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"BG\" tilewidth=\"4096\" tileheight=\"2048\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"4096\" height=\"2048\" source=\"bg.jpg\"/>\n  </tile>\n </tileset>\n <tileset firstgid=\"2\" name=\"car\" tilewidth=\"64\" tileheight=\"128\" tilecount=\"8\" columns=\"4\">\n  <image source=\"car.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"175\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n  <object id=\"176\" gid=\"1\" x=\"4096\" y=\"2048\" width=\"4096\" height=\"2048\" rotation=\"180\"/>\n  <object id=\"205\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\" locked=\"1\">\n  <object id=\"368\" name=\"car\" type=\"dynamic_object\" gid=\"2\" x=\"780.235\" y=\"1082.05\" width=\"64\" height=\"128\" rotation=\"135.166\">\n   <properties>\n    <property name=\"canRunOver\" type=\"bool\" value=\"true\"/>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"1\"/>\n    <property name=\"health\" type=\"int\" value=\"55\"/>\n    <property name=\"mass\" type=\"int\" value=\"15\"/>\n   </properties>\n  </object>\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3359.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3946.65\" y=\"3451.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3428.07\" y=\"3970.16\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3555.62\" y=\"3830.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3698.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3811\" y=\"3575\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"263.67\" y=\"516.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"137\" y=\"651.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"516.334\" y=\"275.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"649.303\" y=\"148.337\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"394\" y=\"402\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"381.67\" y=\"632.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"255\" y=\"767.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"634.334\" y=\"391.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"767.303\" y=\"264.337\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"512\" y=\"518\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3839.49\" y=\"3343.13\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3862.06\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3722\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3590\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3466.9\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3287\" y=\"742.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"808.938\" y=\"3359.36\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"372\" name=\"car\" type=\"dynamic_object\" gid=\"2\" x=\"3303.08\" y=\"2994.96\" width=\"64\" height=\"128\" rotation=\"317.967\">\n   <properties>\n    <property name=\"canRunOver\" type=\"bool\" value=\"true\"/>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"0\"/>\n    <property name=\"health\" type=\"int\" value=\"55\"/>\n    <property name=\"mass\" type=\"int\" value=\"15\"/>\n   </properties>\n  </object>\n  <object id=\"378\" name=\"Turret\" type=\"turret\" x=\"256\" y=\"256\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"379\" name=\"Turret\" type=\"turret\" x=\"3840\" y=\"3840\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"380\" name=\"Turret\" type=\"turret\" x=\"1172\" y=\"110\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"381\" name=\"Turret\" type=\"turret\" x=\"244\" y=\"1119.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"385\" name=\"Turret\" type=\"turret\" x=\"2916\" y=\"4020\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"386\" name=\"Turret\" type=\"turret\" x=\"3851.33\" y=\"2978\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"500\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"15\" name=\"Lights\">\n  <object id=\"389\" name=\"Light\" type=\"light\" x=\"1425\" y=\"1034.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"390\" name=\"Light\" type=\"light\" x=\"2090\" y=\"833\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"391\" name=\"Light\" type=\"light\" x=\"2595\" y=\"956\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"392\" name=\"Light\" type=\"light\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"2\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"393\" name=\"Light\" type=\"light\" x=\"3286.75\" y=\"740\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"2\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"394\" name=\"Light\" type=\"light\" x=\"807\" y=\"3360\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"2\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"395\" name=\"Light\" type=\"light\" x=\"1174.67\" y=\"170.667\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"396\" name=\"Light\" type=\"light\" x=\"305.333\" y=\"1130.67\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"397\" name=\"Light\" type=\"light\" x=\"841.333\" y=\"1125.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"398\" name=\"Light\" type=\"light\" x=\"1576\" y=\"1616\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"399\" name=\"Light\" type=\"light\" x=\"167\" y=\"2015.67\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"400\" name=\"Light\" type=\"light\" x=\"113.333\" y=\"1384\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"401\" name=\"Light\" type=\"light\" x=\"2082\" y=\"186.667\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"402\" name=\"Light\" type=\"light\" x=\"2459\" y=\"329\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"403\" name=\"Light\" type=\"light\" x=\"2843\" y=\"252\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"404\" name=\"Light\" type=\"light\" x=\"3544\" y=\"258\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"405\" name=\"Light\" type=\"light\" x=\"3171\" y=\"173\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"406\" name=\"Light\" type=\"light\" x=\"3835\" y=\"231\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"407\" name=\"Light\" type=\"light\" x=\"3776\" y=\"523\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"408\" name=\"Light\" type=\"light\" x=\"3880\" y=\"834\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"409\" name=\"Light\" type=\"light\" x=\"3793\" y=\"1615\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"410\" name=\"Light\" type=\"light\" x=\"3816\" y=\"1223\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"411\" name=\"Light\" type=\"light\" x=\"2679.61\" y=\"3070.73\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"412\" name=\"Light\" type=\"light\" x=\"2014.61\" y=\"3272.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"413\" name=\"Light\" type=\"light\" x=\"1509.61\" y=\"3149.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"416\" name=\"Light\" type=\"light\" x=\"2929.94\" y=\"3934.39\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"417\" name=\"Light\" type=\"light\" x=\"3799.27\" y=\"2974.39\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"418\" name=\"Light\" type=\"light\" x=\"3263.27\" y=\"2979.73\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"419\" name=\"Light\" type=\"light\" x=\"2528.61\" y=\"2489.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"420\" name=\"Light\" type=\"light\" x=\"3937.61\" y=\"2089.39\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"421\" name=\"Light\" type=\"light\" x=\"3991.27\" y=\"2721.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"422\" name=\"Light\" type=\"light\" x=\"2022.61\" y=\"3918.39\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"423\" name=\"Light\" type=\"light\" x=\"1645.61\" y=\"3776.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"424\" name=\"Light\" type=\"light\" x=\"1261.61\" y=\"3853.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"425\" name=\"Light\" type=\"light\" x=\"560.606\" y=\"3847.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"426\" name=\"Light\" type=\"light\" x=\"933.606\" y=\"3932.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"427\" name=\"Light\" type=\"light\" x=\"269.606\" y=\"3874.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"428\" name=\"Light\" type=\"light\" x=\"328.606\" y=\"3582.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"429\" name=\"Light\" type=\"light\" x=\"224.606\" y=\"3271.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"430\" name=\"Light\" type=\"light\" x=\"311.606\" y=\"2490.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"431\" name=\"Light\" type=\"light\" x=\"288.606\" y=\"2882.06\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"432\" name=\"Light\" type=\"light\" x=\"1216\" y=\"2541.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"433\" name=\"Light\" type=\"light\" x=\"2881.33\" y=\"1558.67\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffaff9b\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"167\" type=\"static_wall\" x=\"31\" y=\"980.652\" width=\"50.5409\" height=\"830.548\" rotation=\"180.018\"/>\n  <object id=\"177\" type=\"static_wall\" x=\"15.3299\" y=\"169.688\" width=\"50.5409\" height=\"158.598\" rotation=\"227.695\"/>\n  <object id=\"178\" type=\"static_wall\" x=\"132.446\" y=\"63.25\" width=\"34.5409\" height=\"42.2575\" rotation=\"180.137\"/>\n  <object id=\"179\" type=\"static_wall\" x=\"1083.09\" y=\"31.9015\" width=\"974.097\" height=\"42.2575\" rotation=\"180.025\"/>\n  <object id=\"183\" type=\"static_wall\" x=\"1278.42\" y=\"8.41235\" width=\"483.959\" height=\"42.2575\" rotation=\"356.226\"/>\n  <object id=\"187\" type=\"static_wall\" x=\"48.9637\" y=\"1627.06\" width=\"470.261\" height=\"38.1692\" rotation=\"281.437\"/>\n  <object id=\"188\" type=\"static_wall\" x=\"145.408\" y=\"1730.96\" width=\"116.946\" height=\"41.5999\" rotation=\"223.09\"/>\n  <object id=\"189\" type=\"static_wall\" x=\"131.145\" y=\"2048\" width=\"347.526\" height=\"41.8874\" rotation=\"270.177\"/>\n  <object id=\"190\" type=\"static_wall\" x=\"1769.83\" y=\"-17.2872\" width=\"373.749\" height=\"39.7232\" rotation=\"26.9842\"/>\n  <object id=\"191\" type=\"static_wall\" x=\"2197.62\" y=\"-3.92117\" width=\"221.809\" height=\"39.7232\" rotation=\"120.422\"/>\n  <object id=\"192\" type=\"static_wall\" x=\"2291.02\" y=\"61.094\" width=\"146.592\" height=\"39.7232\" rotation=\"114.262\"/>\n  <object id=\"193\" type=\"static_wall\" x=\"2260.89\" y=\"34.3981\" width=\"23.0537\" height=\"76.7928\" rotation=\"115.698\"/>\n  <object id=\"194\" type=\"static_wall\" x=\"2469.76\" y=\"314.694\" width=\"24.0541\" height=\"305.384\" rotation=\"120.774\"/>\n  <object id=\"195\" type=\"static_wall\" x=\"2834.68\" y=\"203.185\" width=\"46.8335\" height=\"396.865\" rotation=\"77.3811\"/>\n  <object id=\"196\" type=\"static_wall\" x=\"2844.9\" y=\"249.031\" width=\"46.8335\" height=\"241.237\" rotation=\"191.412\"/>\n  <object id=\"197\" type=\"static_wall\" x=\"3187.18\" y=\"71.0901\" width=\"302.836\" height=\"33.4288\" rotation=\"185.454\"/>\n  <object id=\"198\" type=\"static_wall\" x=\"3210.28\" y=\"187.173\" width=\"41.5001\" height=\"144.839\" rotation=\"187.172\"/>\n  <object id=\"199\" type=\"static_wall\" x=\"3562.21\" y=\"264.232\" width=\"401.506\" height=\"41.791\" rotation=\"191.837\"/>\n  <object id=\"200\" type=\"static_wall\" x=\"3638.36\" y=\"66.5893\" width=\"210.934\" height=\"41.791\" rotation=\"111.07\"/>\n  <object id=\"201\" type=\"static_wall\" x=\"4003.7\" y=\"368.11\" width=\"468.498\" height=\"41.791\" rotation=\"215.999\"/>\n  <object id=\"202\" type=\"static_wall\" x=\"3777.21\" y=\"526.343\" width=\"29.2346\" height=\"301.926\" rotation=\"240.768\"/>\n  <object id=\"203\" type=\"static_wall\" x=\"3762.79\" y=\"500.738\" width=\"29.2346\" height=\"354.246\" rotation=\"341.948\"/>\n  <object id=\"204\" type=\"static_wall\" x=\"4032.68\" y=\"770.243\" width=\"29.2346\" height=\"170.998\" rotation=\"76.8782\"/>\n  <object id=\"206\" type=\"static_wall\" x=\"4033.73\" y=\"795.421\" width=\"29.2346\" height=\"415.593\" rotation=\"357.893\"/>\n  <object id=\"207\" type=\"static_wall\" x=\"3808.74\" y=\"1215.16\" width=\"257.711\" height=\"49.1454\" rotation=\"357.893\"/>\n  <object id=\"208\" type=\"static_wall\" x=\"3807.27\" y=\"1214.92\" width=\"52.7525\" height=\"402.252\" rotation=\"3.04833\"/>\n  <object id=\"209\" type=\"static_wall\" x=\"3788.56\" y=\"1579.29\" width=\"296.466\" height=\"38.03\" rotation=\"3.04833\"/>\n  <object id=\"210\" type=\"static_wall\" x=\"4043\" y=\"1629.99\" width=\"57.6051\" height=\"266.389\" rotation=\"359.952\"/>\n  <object id=\"211\" type=\"static_wall\" x=\"3923.03\" y=\"1924.15\" width=\"84.9328\" height=\"133.362\" rotation=\"359.545\"/>\n  <object id=\"212\" type=\"static_wall\" x=\"3923.08\" y=\"1924.34\" width=\"139.474\" height=\"75.427\" rotation=\"346.513\"/>\n  <object id=\"249\" type=\"static_wall\" x=\"173.929\" y=\"2171.37\" width=\"139.474\" height=\"75.427\" rotation=\"166.513\"/>\n  <object id=\"250\" type=\"static_wall\" x=\"173.981\" y=\"2171.55\" width=\"84.9328\" height=\"133.362\" rotation=\"179.545\"/>\n  <object id=\"251\" type=\"static_wall\" x=\"54.0137\" y=\"2465.71\" width=\"57.6051\" height=\"266.389\" rotation=\"179.952\"/>\n  <object id=\"252\" type=\"static_wall\" x=\"308.445\" y=\"2516.41\" width=\"296.466\" height=\"38.03\" rotation=\"183.048\"/>\n  <object id=\"253\" type=\"static_wall\" x=\"289.743\" y=\"2880.78\" width=\"52.7525\" height=\"402.252\" rotation=\"183.048\"/>\n  <object id=\"254\" type=\"static_wall\" x=\"288.272\" y=\"2880.55\" width=\"257.711\" height=\"49.1454\" rotation=\"177.893\"/>\n  <object id=\"255\" type=\"static_wall\" x=\"63.2835\" y=\"3300.28\" width=\"29.2346\" height=\"415.593\" rotation=\"177.893\"/>\n  <object id=\"256\" type=\"static_wall\" x=\"64.3308\" y=\"3325.46\" width=\"29.2346\" height=\"170.998\" rotation=\"256.878\"/>\n  <object id=\"257\" type=\"static_wall\" x=\"334.215\" y=\"3594.96\" width=\"29.2346\" height=\"354.246\" rotation=\"161.948\"/>\n  <object id=\"258\" type=\"static_wall\" x=\"319.8\" y=\"3569.36\" width=\"29.2346\" height=\"301.926\" rotation=\"60.7675\"/>\n  <object id=\"259\" type=\"static_wall\" x=\"93.3094\" y=\"3727.59\" width=\"468.498\" height=\"41.791\" rotation=\"35.9991\"/>\n  <object id=\"260\" type=\"static_wall\" x=\"458.647\" y=\"4029.11\" width=\"210.934\" height=\"41.791\" rotation=\"291.07\"/>\n  <object id=\"261\" type=\"static_wall\" x=\"534.798\" y=\"3831.47\" width=\"401.506\" height=\"41.791\" rotation=\"11.8368\"/>\n  <object id=\"262\" type=\"static_wall\" x=\"886.731\" y=\"3908.53\" width=\"41.5001\" height=\"144.839\" rotation=\"7.17229\"/>\n  <object id=\"263\" type=\"static_wall\" x=\"909.829\" y=\"4024.61\" width=\"302.836\" height=\"33.4288\" rotation=\"5.45358\"/>\n  <object id=\"264\" type=\"static_wall\" x=\"1252.11\" y=\"3846.67\" width=\"46.8335\" height=\"241.237\" rotation=\"11.4117\"/>\n  <object id=\"265\" type=\"static_wall\" x=\"1262.33\" y=\"3892.52\" width=\"46.8335\" height=\"396.865\" rotation=\"257.381\"/>\n  <object id=\"266\" type=\"static_wall\" x=\"1627.24\" y=\"3781.01\" width=\"24.0541\" height=\"305.384\" rotation=\"300.774\"/>\n  <object id=\"267\" type=\"static_wall\" x=\"1836.12\" y=\"4061.3\" width=\"23.0537\" height=\"76.7928\" rotation=\"295.698\"/>\n  <object id=\"268\" type=\"static_wall\" x=\"1805.99\" y=\"4034.61\" width=\"146.592\" height=\"39.7232\" rotation=\"294.262\"/>\n  <object id=\"269\" type=\"static_wall\" x=\"1899.39\" y=\"4099.62\" width=\"221.809\" height=\"39.7232\" rotation=\"300.422\"/>\n  <object id=\"270\" type=\"static_wall\" x=\"2327.18\" y=\"4112.99\" width=\"373.749\" height=\"39.7232\" rotation=\"206.984\"/>\n  <object id=\"271\" type=\"static_wall\" x=\"3965.86\" y=\"2047.7\" width=\"347.526\" height=\"41.8874\" rotation=\"90.1768\"/>\n  <object id=\"272\" type=\"static_wall\" x=\"3951.6\" y=\"2364.75\" width=\"116.946\" height=\"41.5999\" rotation=\"43.0905\"/>\n  <object id=\"273\" type=\"static_wall\" x=\"4048.05\" y=\"2468.64\" width=\"470.261\" height=\"38.1692\" rotation=\"101.437\"/>\n  <object id=\"277\" type=\"static_wall\" x=\"2818.59\" y=\"4087.29\" width=\"483.959\" height=\"42.2575\" rotation=\"176.226\"/>\n  <object id=\"281\" type=\"static_wall\" x=\"3013.92\" y=\"4063.8\" width=\"974.097\" height=\"42.2575\" rotation=\"0.0248463\"/>\n  <object id=\"282\" type=\"static_wall\" x=\"3964.56\" y=\"4032.45\" width=\"34.5409\" height=\"42.2575\" rotation=\"0.137309\"/>\n  <object id=\"283\" type=\"static_wall\" x=\"4081.68\" y=\"3926.01\" width=\"50.5409\" height=\"158.598\" rotation=\"47.6952\"/>\n  <object id=\"284\" type=\"static_wall\" x=\"4066.01\" y=\"3115.05\" width=\"50.5409\" height=\"830.548\" rotation=\"0.0178714\"/>\n  <object id=\"291\" type=\"static_wall\" x=\"799.5\" y=\"827\">\n   <polygon points=\"0,0 -185,137.5 -141.5,234.5 -48,204.5 109,45\"/>\n  </object>\n  <object id=\"305\" type=\"static_wall\" x=\"751.667\" y=\"1030.33\">\n   <polygon points=\"0,0 156,-159.333 266,126.667 199,193\"/>\n  </object>\n  <object id=\"307\" type=\"static_wall\" x=\"974\" y=\"611.5\">\n   <polygon points=\"0,0 59.5,-194.5 207,-227.5 446.5,-182.5 416.5,98.5 143.5,85\"/>\n  </object>\n  <object id=\"308\" type=\"static_wall\" x=\"1580.5\" y=\"491\">\n   <polygon points=\"0,0 22,-29.5 147,-18 260.5,164 8,225 -12.5,186\"/>\n  </object>\n  <object id=\"309\" type=\"static_wall\" x=\"2000\" y=\"619\">\n   <polygon points=\"0,0 -95,-122 -83,-143.5 7.5,-144.5 141,-36\"/>\n  </object>\n  <object id=\"310\" type=\"static_wall\" x=\"2631\" y=\"602\">\n   <polygon points=\"0,0 216,-47.5 124.5,134.5\"/>\n  </object>\n  <object id=\"311\" type=\"static_wall\" x=\"3224.5\" y=\"1242.5\">\n   <polygon points=\"0,0 319.5,-66.5 323,51 124,304.5 98,284.5\"/>\n  </object>\n  <object id=\"312\" type=\"static_wall\" x=\"3547.5\" y=\"1313\">\n   <polygon points=\"0,0 1,172 -83.5,348.5 -189,246\"/>\n  </object>\n  <object id=\"313\" type=\"static_wall\" x=\"2883\" y=\"1378.5\">\n   <polygon points=\"0,0 130.5,-41 186,138 -6.5,185.5\"/>\n  </object>\n  <object id=\"314\" type=\"static_wall\" x=\"2834.5\" y=\"1027.5\">\n   <polygon points=\"0,0 131,40 130,74 -25,139\"/>\n  </object>\n  <object id=\"315\" type=\"static_wall\" x=\"2116.5\" y=\"819.5\">\n   <polygon points=\"0,0 323.5,91.5 262.125,384.875 -68.5,320.5\"/>\n  </object>\n  <object id=\"316\" type=\"static_wall\" x=\"1952.5\" y=\"866.5\">\n   <polygon points=\"0,0 163,-48 94.5,273 74,280.5\"/>\n  </object>\n  <object id=\"319\" type=\"static_wall\" x=\"1952.5\" y=\"867\">\n   <polygon points=\"0,0 -533.5,156.5 -489.5,378 -403.5,425.5 73,279\"/>\n  </object>\n  <object id=\"320\" type=\"static_wall\" x=\"908.5\" y=\"871.5\">\n   <polygon points=\"0,0 110,285.5 43,351.5 -156.5,159\"/>\n  </object>\n  <object id=\"321\" type=\"static_wall\" x=\"399.333\" y=\"1854.67\">\n   <polygon points=\"0,0 88,-412 323.333,-38 201.333,148\"/>\n  </object>\n  <object id=\"322\" type=\"static_wall\" x=\"866.667\" y=\"1632\">\n   <polygon points=\"0,0 45.3333,-101.333 323.333,-28 327.333,232 195.333,299.333\"/>\n  </object>\n  <object id=\"324\" type=\"static_wall\" x=\"1538\" y=\"1564\">\n   <polygon points=\"0,0 -0.666667,222.667 212,-2\"/>\n  </object>\n  <object id=\"325\" type=\"static_wall\" x=\"1750.67\" y=\"1562.67\">\n   <polygon points=\"0,0 85.3333,81.3333 -3.33333,125.333 -67.3333,70.6667\"/>\n  </object>\n  <object id=\"326\" type=\"static_wall\" x=\"1538.67\" y=\"1786.67\">\n   <polygon points=\"0,0 85.3333,84.6667 127.333,-10.6667 64.6667,-72\"/>\n  </object>\n  <object id=\"327\" type=\"static_wall\" x=\"1665.94\" y=\"1777.16\" width=\"88.2959\" height=\"122.193\" rotation=\"223.083\"/>\n  <object id=\"328\" type=\"static_wall\" x=\"2455.33\" y=\"915.333\">\n   <polygon points=\"0,0 143.333,40 88.6667,323.333 -59.7917,292.958\"/>\n  </object>\n  <object id=\"330\" type=\"static_wall\" x=\"2421.45\" y=\"1630.73\" width=\"100.369\" height=\"59.1316\" rotation=\"125.354\"/>\n  <object id=\"331\" type=\"static_wall\" x=\"2499.94\" y=\"1703.69\" width=\"109.738\" height=\"58.5329\" rotation=\"141.623\"/>\n  <object id=\"332\" type=\"static_wall\" x=\"2463.27\" y=\"1666.11\" width=\"104.625\" height=\"59.1316\" rotation=\"135.45\"/>\n  <object id=\"333\" type=\"static_wall\" x=\"2373.25\" y=\"1596.75\">\n   <polygon points=\"-5.5,6.75 32.75,-43.75 169.5,74.25 111.75,117.5\"/>\n  </object>\n  <object id=\"336\" type=\"static_wall\" x=\"3297.12\" y=\"3268.87\" rotation=\"180\">\n   <polygon points=\"0,0 -185,137.5 -141.5,234.5 -48,204.5 109,45\"/>\n  </object>\n  <object id=\"337\" type=\"static_wall\" x=\"3344.95\" y=\"3065.54\" rotation=\"180\">\n   <polygon points=\"0,0 156,-159.333 266,126.667 199,193\"/>\n  </object>\n  <object id=\"338\" type=\"static_wall\" x=\"3122.62\" y=\"3484.37\" rotation=\"180\">\n   <polygon points=\"0,0 59.5,-194.5 207,-227.5 446.5,-182.5 416.5,98.5 143.5,85\"/>\n  </object>\n  <object id=\"339\" type=\"static_wall\" x=\"2516.12\" y=\"3604.87\" rotation=\"180\">\n   <polygon points=\"0,0 22,-29.5 147,-18 260.5,164 8,225 -12.5,186\"/>\n  </object>\n  <object id=\"340\" type=\"static_wall\" x=\"2096.62\" y=\"3476.87\" rotation=\"180\">\n   <polygon points=\"0,0 -95,-122 -83,-143.5 7.5,-144.5 141,-36\"/>\n  </object>\n  <object id=\"341\" type=\"static_wall\" x=\"1465.62\" y=\"3493.87\" rotation=\"180\">\n   <polygon points=\"0,0 216,-47.5 124.5,134.5\"/>\n  </object>\n  <object id=\"342\" type=\"static_wall\" x=\"872.119\" y=\"2853.37\" rotation=\"180\">\n   <polygon points=\"0,0 319.5,-66.5 323,51 124,304.5 98,284.5\"/>\n  </object>\n  <object id=\"343\" type=\"static_wall\" x=\"549.119\" y=\"2782.87\" rotation=\"180\">\n   <polygon points=\"0,0 1,172 -83.5,348.5 -189,246\"/>\n  </object>\n  <object id=\"344\" type=\"static_wall\" x=\"1213.62\" y=\"2717.37\" rotation=\"180\">\n   <polygon points=\"0,0 130.5,-41 186,138 -6.5,185.5\"/>\n  </object>\n  <object id=\"345\" type=\"static_wall\" x=\"1262.12\" y=\"3068.37\" rotation=\"180\">\n   <polygon points=\"0,0 131,40 130,74 -25,139\"/>\n  </object>\n  <object id=\"346\" type=\"static_wall\" x=\"1980.12\" y=\"3276.37\" rotation=\"180\">\n   <polygon points=\"0,0 323.5,91.5 262.5,384 -68.5,320.5\"/>\n  </object>\n  <object id=\"347\" type=\"static_wall\" x=\"2144.12\" y=\"3229.37\" rotation=\"180\">\n   <polygon points=\"0,0 163,-48 94.5,273 74,280.5\"/>\n  </object>\n  <object id=\"348\" type=\"static_wall\" x=\"2144.12\" y=\"3228.87\" rotation=\"180\">\n   <polygon points=\"0,0 -533.5,156.5 -489.5,378 -403.5,425.5 73,279\"/>\n  </object>\n  <object id=\"349\" type=\"static_wall\" x=\"3188.12\" y=\"3224.37\" rotation=\"180\">\n   <polygon points=\"0,0 110,285.5 43,351.5 -156.5,159\"/>\n  </object>\n  <object id=\"350\" type=\"static_wall\" x=\"3697.29\" y=\"2241.2\" rotation=\"180\">\n   <polygon points=\"0,0 88,-412 323.333,-38 201.333,148\"/>\n  </object>\n  <object id=\"351\" type=\"static_wall\" x=\"3229.95\" y=\"2463.87\" rotation=\"180\">\n   <polygon points=\"0,0 45.3333,-101.333 323.333,-28 327.333,232 195.333,299.333\"/>\n  </object>\n  <object id=\"352\" type=\"static_wall\" x=\"2558.62\" y=\"2531.87\" rotation=\"180\">\n   <polygon points=\"0,0 -0.666667,222.667 212,-2\"/>\n  </object>\n  <object id=\"353\" type=\"static_wall\" x=\"2345.95\" y=\"2533.2\" rotation=\"180\">\n   <polygon points=\"0,0 85.3333,81.3333 -3.33333,125.333 -67.3333,70.6667\"/>\n  </object>\n  <object id=\"354\" type=\"static_wall\" x=\"2557.95\" y=\"2309.2\" rotation=\"180\">\n   <polygon points=\"0,0 85.3333,84.6667 127.333,-10.6667 64.6667,-72\"/>\n  </object>\n  <object id=\"355\" type=\"static_wall\" x=\"2430.68\" y=\"2318.71\" width=\"88.2959\" height=\"122.193\" rotation=\"43.083\"/>\n  <object id=\"356\" type=\"static_wall\" x=\"1641.29\" y=\"3180.54\" rotation=\"180\">\n   <polygon points=\"0,0 143.333,40 88.6667,323.333 -60.1667,293.208\"/>\n  </object>\n  <object id=\"357\" type=\"static_wall\" x=\"1675.17\" y=\"2465.14\" width=\"100.369\" height=\"59.1316\" rotation=\"305.354\"/>\n  <object id=\"358\" type=\"static_wall\" x=\"1596.68\" y=\"2392.18\" width=\"109.738\" height=\"58.5329\" rotation=\"321.623\"/>\n  <object id=\"359\" type=\"static_wall\" x=\"1633.35\" y=\"2429.76\" width=\"104.625\" height=\"59.1316\" rotation=\"315.45\"/>\n  <object id=\"360\" type=\"static_wall\" x=\"1723.37\" y=\"2499.12\" rotation=\"180\">\n   <polygon points=\"-5.5,6.75 32.75,-43.75 169.5,74.25 111.75,117.5\"/>\n  </object>\n  <object id=\"383\" type=\"static_wall\" x=\"329\" y=\"1197.5\">\n   <polygon points=\"0,0 -17,-132.5 -359,-238.5 -357,-44.5\"/>\n  </object>\n  <object id=\"384\" type=\"static_wall\" x=\"1114.5\" y=\"176\">\n   <polygon points=\"0,0 125.5,-11 211.5,-199.5 -68.5,-198.5\"/>\n  </object>\n  <object id=\"388\" type=\"static_wall\" x=\"2980.5\" y=\"3919.5\">\n   <polygon points=\"0,0 -124.5,11.5 -208.5,190.5 68,197\"/>\n  </object>\n  <object id=\"387\" type=\"static_wall\" x=\"3766.5\" y=\"2898.5\">\n   <polygon points=\"0,0 16,132 354.5,234.5 354,43.5\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['training'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"12\" height=\"4\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"13\" nextobjectid=\"237\">\n <properties>\n  <property name=\"backgroundColor\" type=\"color\" value=\"#ff64644a\"/>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc4b4a8\"/>\n  <property name=\"unconstrainCamera\" type=\"bool\" value=\"true\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"MapProps\" tilewidth=\"2048\" tileheight=\"1024\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"1024\" height=\"1024\" source=\"bg_01.jpg\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"2048\" height=\"1024\" source=\"bg_02.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"130\" gid=\"5\" x=\"0\" y=\"1024\" width=\"1024\" height=\"1024\"/>\n  <object id=\"131\" gid=\"6\" x=\"1024\" y=\"1024\" width=\"2048\" height=\"1024\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\">\n  <object id=\"118\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1521.67\" y=\"160\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"180\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"106\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"1765\" y=\"163\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"1706\" y=\"714\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"132\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2003\" y=\"165\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"133\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2293\" y=\"130.5\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"134\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2832\" y=\"791\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"233\" type=\"static_wall\" x=\"2498.97\" y=\"365.772\" width=\"66.0676\" height=\"256.457\" rotation=\"44.926\"/>\n  <object id=\"234\" type=\"static_wall\" x=\"2166.81\" y=\"33.2245\" width=\"18.372\" height=\"185.551\"/>\n  <object id=\"236\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2072\" y=\"730.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-90\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\">\n  <object id=\"31\" type=\"static_wall\" x=\"144.167\" y=\"495.827\" width=\"90.372\" height=\"363.566\" rotation=\"34.7852\"/>\n  <object id=\"139\" type=\"static_wall\" x=\"2470.92\" y=\"229.577\" width=\"112.045\" height=\"163.5\"/>\n  <object id=\"140\" type=\"static_wall\" x=\"-67.186\" y=\"781.55\" width=\"90.372\" height=\"136.233\"/>\n  <object id=\"141\" type=\"static_wall\" x=\"-59.6563\" y=\"911.47\" width=\"90.372\" height=\"136.233\" rotation=\"-32.9903\"/>\n  <object id=\"142\" type=\"static_wall\" x=\"46.814\" y=\"975.217\" width=\"681.705\" height=\"49.5663\"/>\n  <object id=\"143\" type=\"static_wall\" x=\"847.923\" y=\"856.841\" width=\"90.372\" height=\"201.817\" rotation=\"45\"/>\n  <object id=\"152\" type=\"static_wall\" x=\"762.5\" y=\"446.5\">\n   <polygon points=\"0,0 26.5,-6.5 72,44 81,87.5 14.5,100\"/>\n  </object>\n  <object id=\"154\" type=\"static_wall\" x=\"775.5\" y=\"546\">\n   <polygon points=\"0,0 -40.5,160.5 28.5,250.5 123,236.5 68,-13.5\"/>\n  </object>\n  <object id=\"155\" type=\"static_wall\" x=\"802\" y=\"796.5\">\n   <polygon points=\"0,0 -10,29.5 6.5,99 109.5,46.5 95.5,-16.5\"/>\n  </object>\n  <object id=\"156\" type=\"static_wall\" x=\"837.584\" y=\"900.955\" width=\"90.372\" height=\"142.964\" rotation=\"-57.8675\"/>\n  <object id=\"157\" type=\"static_wall\" x=\"1121.46\" y=\"853.742\" width=\"90.372\" height=\"160.979\" rotation=\"-286.386\"/>\n  <object id=\"158\" type=\"static_wall\" x=\"1103\" y=\"858.5\">\n   <polygon points=\"0,0 79.5,-81.5 118.5,-78.5 280,158.5\"/>\n  </object>\n  <object id=\"159\" type=\"static_wall\" x=\"1332.31\" y=\"973.384\" width=\"948.372\" height=\"54.233\"/>\n  <object id=\"161\" type=\"static_wall\" x=\"2367.71\" y=\"820.883\" width=\"56.7844\" height=\"215.429\" rotation=\"45\"/>\n  <object id=\"162\" type=\"static_wall\" x=\"2348.31\" y=\"604.884\" width=\"59.872\" height=\"257.233\"/>\n  <object id=\"163\" type=\"static_wall\" x=\"2274.38\" y=\"589.786\" width=\"90.372\" height=\"148.254\" rotation=\"-45\"/>\n  <object id=\"165\" type=\"static_wall\" x=\"182.5\" y=\"580.5\">\n   <polygon points=\"0,0 109,56 152,32 172,-223\"/>\n  </object>\n  <object id=\"166\" type=\"static_wall\" x=\"377.048\" y=\"206.33\" width=\"73.7972\" height=\"220.423\" rotation=\"28.8958\"/>\n  <object id=\"169\" type=\"static_wall\" x=\"385.5\" y=\"282.5\">\n   <polygon points=\"0,0 221.5,-15 241.5,-32 274,-190.5\"/>\n  </object>\n  <object id=\"170\" type=\"static_wall\" x=\"609.935\" y=\"110.808\" width=\"224.648\" height=\"49.733\" rotation=\"-30\"/>\n  <object id=\"171\" type=\"static_wall\" x=\"766.032\" y=\"41.1199\" width=\"90.372\" height=\"154.95\" rotation=\"-54.6524\"/>\n  <object id=\"172\" type=\"static_wall\" x=\"904.8\" y=\"73.6962\" width=\"179.799\" height=\"58.233\" rotation=\"13.4126\"/>\n  <object id=\"173\" type=\"static_wall\" x=\"1003.93\" y=\"150.697\" width=\"76.9626\" height=\"439.481\" rotation=\"-16.6889\"/>\n  <object id=\"175\" type=\"static_wall\" x=\"1119\" y=\"532.5\">\n   <polygon points=\"0,0 24.5,81 160.5,50 181.5,-91.5\"/>\n  </object>\n  <object id=\"176\" type=\"static_wall\" x=\"461\" y=\"579.5\">\n   <polygon points=\"0,0 40,-118 133,-169.5 169.5,-94 122.5,23\"/>\n  </object>\n  <object id=\"179\" type=\"static_wall\" x=\"462\" y=\"580\">\n   <polygon points=\"0,0 72.5,166.5 90,173 141,131 147.5,122 116,-2\"/>\n  </object>\n  <object id=\"180\" type=\"static_wall\" x=\"1344.07\" y=\"332.244\" width=\"90.372\" height=\"170.673\" rotation=\"50.8889\"/>\n  <object id=\"182\" type=\"static_wall\" x=\"1352.31\" y=\"239.884\" width=\"90.372\" height=\"181.733\"/>\n  <object id=\"183\" type=\"static_wall\" x=\"1596.31\" y=\"241.384\" width=\"90.372\" height=\"182.233\"/>\n  <object id=\"185\" type=\"static_wall\" x=\"1596.5\" y=\"243\">\n   <polygon points=\"0,0 34,-35.5 53.5,-35.5 89,-1\"/>\n  </object>\n  <object id=\"186\" type=\"static_wall\" x=\"1631.81\" y=\"28.3835\" width=\"18.372\" height=\"184.233\"/>\n  <object id=\"187\" type=\"static_wall\" x=\"1598.5\" y=\"42\">\n   <polygon points=\"0,0 34.5,34.5 50.5,34.5 85,1\"/>\n  </object>\n  <object id=\"188\" type=\"static_wall\" x=\"1405.31\" y=\"-10.1165\" width=\"755.372\" height=\"57.733\"/>\n  <object id=\"193\" type=\"static_wall\" x=\"1434.5\" y=\"372\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"194\" type=\"static_wall\" x=\"1679\" y=\"373\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"196\" type=\"static_wall\" x=\"1606.5\" y=\"372.5\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"197\" type=\"static_wall\" x=\"1840.81\" y=\"240.884\" width=\"90.372\" height=\"182.233\"/>\n  <object id=\"198\" type=\"static_wall\" x=\"1841\" y=\"242.5\">\n   <polygon points=\"0,0 34,-35.5 53.5,-35.5 89,-1\"/>\n  </object>\n  <object id=\"199\" type=\"static_wall\" x=\"1876.31\" y=\"27.8833\" width=\"18.372\" height=\"184.233\"/>\n  <object id=\"200\" type=\"static_wall\" x=\"1843\" y=\"41.4998\">\n   <polygon points=\"0,0 34.5,34.5 50.5,34.5 85,1\"/>\n  </object>\n  <object id=\"201\" type=\"static_wall\" x=\"1923.5\" y=\"372.5\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"202\" type=\"static_wall\" x=\"1851\" y=\"372\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"209\" type=\"static_wall\" x=\"2084.81\" y=\"241.384\" width=\"90.372\" height=\"182.233\"/>\n  <object id=\"211\" type=\"static_wall\" x=\"2120.31\" y=\"62.8832\" width=\"18.372\" height=\"149.733\"/>\n  <object id=\"213\" type=\"static_wall\" x=\"2191.66\" y=\"435.566\" rotation=\"-315\">\n   <polygon points=\"0,0 60,0 60.5,24 20,47.5 1.5,47\"/>\n  </object>\n  <object id=\"214\" type=\"static_wall\" x=\"2095\" y=\"372.5\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"215\" type=\"static_wall\" x=\"2316.07\" y=\"560.937\" rotation=\"-315\">\n   <polygon points=\"0,0 -64,1 -64,21 -24,46.5 -1.5,45.5\"/>\n  </object>\n  <object id=\"216\" type=\"static_wall\" x=\"2092.14\" y=\"411.266\" width=\"226.092\" height=\"95.233\" rotation=\"-45\"/>\n  <object id=\"217\" type=\"static_wall\" x=\"2211.81\" y=\"244.384\" width=\"107.872\" height=\"74.733\"/>\n  <object id=\"219\" type=\"static_wall\" x=\"2085\" y=\"242.5\">\n   <polygon points=\"0,0 39.5,-41 94.5,-40 148.5,11\"/>\n  </object>\n  <object id=\"220\" type=\"static_wall\" x=\"2085.94\" y=\"41.2164\" width=\"138.631\" height=\"71.9046\" rotation=\"-45\"/>\n  <object id=\"221\" type=\"static_wall\" x=\"2188.06\" y=\"-57.8665\" width=\"107.872\" height=\"74.733\"/>\n  <object id=\"222\" type=\"static_wall\" x=\"2278.78\" y=\"-65.0606\" width=\"488.295\" height=\"74.733\" rotation=\"-315\"/>\n  <object id=\"223\" type=\"static_wall\" x=\"2385.56\" y=\"560.634\" width=\"665.872\" height=\"74.733\"/>\n  <object id=\"224\" type=\"static_wall\" x=\"2917.23\" y=\"542.472\" width=\"161.271\" height=\"74.733\" rotation=\"30\"/>\n  <object id=\"225\" type=\"static_wall\" x=\"2995.87\" y=\"638.991\" width=\"70.372\" height=\"250.01\" rotation=\"-5.96243\"/>\n  <object id=\"226\" type=\"static_wall\" x=\"2926.64\" y=\"945.084\" width=\"181.794\" height=\"74.733\" rotation=\"-48.0047\"/>\n  <object id=\"227\" type=\"static_wall\" x=\"2543.16\" y=\"952.943\" width=\"426.087\" height=\"74.733\" rotation=\"-3.62624\"/>\n  <object id=\"228\" type=\"static_wall\" x=\"2399.28\" y=\"830.439\" width=\"259.193\" height=\"74.733\" rotation=\"-315\"/>\n  <object id=\"229\" type=\"static_wall\" x=\"2472.03\" y=\"917.319\" width=\"155.312\" height=\"74.733\" rotation=\"16.2573\"/>\n  <object id=\"230\" type=\"static_wall\" x=\"1316.81\" y=\"47.8002\" width=\"90.372\" height=\"181.733\"/>\n  <object id=\"231\" type=\"static_wall\" x=\"1353.86\" y=\"240.801\" width=\"62.372\" height=\"63.3997\" rotation=\"-45.4263\"/>\n  <object id=\"232\" type=\"static_wall\" x=\"1346.75\" y=\"47.654\" width=\"90.372\" height=\"63.0663\" rotation=\"-45\"/>\n </objectgroup>\n</map>\n";
maps['tankball_test'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"80\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"4\" nextobjectid=\"99\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc4b4a8\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"Long Map Tileset\" tilewidth=\"512\" tileheight=\"512\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"128\" height=\"128\" source=\"../../wall.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"512\" height=\"512\" source=\"grass.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"3\" name=\"background\" locked=\"1\">\n  <object id=\"70\" gid=\"2\" x=\"0\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"71\" gid=\"2\" x=\"0\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"72\" gid=\"2\" x=\"0\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"78\" gid=\"2\" x=\"640\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"79\" gid=\"2\" x=\"640\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"80\" gid=\"2\" x=\"640\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"81\" gid=\"2\" x=\"1280\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"82\" gid=\"2\" x=\"1280\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"83\" gid=\"2\" x=\"1280\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"84\" gid=\"2\" x=\"1920\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"85\" gid=\"2\" x=\"1920\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"86\" gid=\"2\" x=\"1920\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"87\" gid=\"2\" x=\"2560\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"88\" gid=\"2\" x=\"2560\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"89\" gid=\"2\" x=\"2560\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"90\" gid=\"2\" x=\"3200\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"91\" gid=\"2\" x=\"3200\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"92\" gid=\"2\" x=\"3200\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"93\" gid=\"2\" x=\"3840\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"94\" gid=\"2\" x=\"3840\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"95\" gid=\"2\" x=\"3840\" y=\"1984\" width=\"640\" height=\"640\"/>\n  <object id=\"96\" gid=\"2\" x=\"4480\" y=\"704\" width=\"640\" height=\"640\"/>\n  <object id=\"97\" gid=\"2\" x=\"4480\" y=\"1344\" width=\"640\" height=\"640\"/>\n  <object id=\"98\" gid=\"2\" x=\"4480\" y=\"1984\" width=\"640\" height=\"640\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Object Layer 1\">\n  <object id=\"1\" type=\"static_wall\" gid=\"1\" x=\"0\" y=\"2048\" width=\"64\" height=\"2048\"/>\n  <object id=\"2\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"2048\" width=\"4992\" height=\"64\"/>\n  <object id=\"3\" type=\"static_wall\" gid=\"1\" x=\"5056\" y=\"2048\" width=\"64\" height=\"2048\"/>\n  <object id=\"4\" type=\"static_wall\" gid=\"1\" x=\"64\" y=\"64\" width=\"4992\" height=\"64\"/>\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"384\" y=\"1344\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"10\" name=\"ball_neutral\" type=\"entity_spawn\" x=\"2560\" y=\"960\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"384\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"384\" y=\"576\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"384\" y=\"384\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"38\" type=\"static_wall\" gid=\"1\" x=\"1648.47\" y=\"960\" width=\"384\" height=\"384\" rotation=\"45\"/>\n  <object id=\"39\" name=\"ball_blue\" type=\"entity_spawn\" x=\"1152\" y=\"960\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"ball_red\" type=\"entity_spawn\" x=\"3968\" y=\"960\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" type=\"static_wall\" gid=\"1\" x=\"320\" y=\"832\" width=\"192\" height=\"64\"/>\n  <object id=\"42\" type=\"static_wall\" gid=\"1\" x=\"320\" y=\"1152\" width=\"192\" height=\"64\"/>\n  <object id=\"44\" type=\"static_wall\" gid=\"1\" x=\"256\" y=\"768\" width=\"384\" height=\"64\" rotation=\"90\"/>\n  <object id=\"45\" type=\"static_wall\" gid=\"1\" x=\"4800\" y=\"1088\" width=\"192\" height=\"64\" rotation=\"180\"/>\n  <object id=\"46\" type=\"static_wall\" gid=\"1\" x=\"4800\" y=\"768\" width=\"192\" height=\"64\" rotation=\"180\"/>\n  <object id=\"47\" type=\"static_wall\" gid=\"1\" x=\"4864\" y=\"1152\" width=\"384\" height=\"64\" rotation=\"270\"/>\n  <object id=\"49\" name=\"goal_red\" type=\"dynamic_object\" x=\"320\" y=\"832\" width=\"64\" height=\"256\">\n   <properties>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"50\" name=\"goal_blue\" type=\"dynamic_object\" x=\"4736\" y=\"832\" width=\"64\" height=\"256\">\n   <properties>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4736\" y=\"1344\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"60\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4736\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"61\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4736\" y=\"576\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"4736\" y=\"384\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"63\" type=\"static_wall\" gid=\"1\" x=\"2928.47\" y=\"960\" width=\"384\" height=\"384\" rotation=\"45\"/>\n  <object id=\"64\" type=\"static_wall\" gid=\"1\" x=\"2368\" y=\"512\" width=\"384\" height=\"128\"/>\n  <object id=\"65\" type=\"static_wall\" gid=\"1\" x=\"896\" y=\"1728\" width=\"384\" height=\"192\"/>\n  <object id=\"66\" type=\"static_wall\" gid=\"1\" x=\"896\" y=\"448\" width=\"384\" height=\"192\"/>\n  <object id=\"67\" type=\"static_wall\" gid=\"1\" x=\"3840\" y=\"448\" width=\"384\" height=\"192\"/>\n  <object id=\"68\" type=\"static_wall\" gid=\"1\" x=\"3840\" y=\"1728\" width=\"384\" height=\"192\"/>\n  <object id=\"69\" type=\"static_wall\" gid=\"1\" x=\"2368\" y=\"1536\" width=\"384\" height=\"128\"/>\n </objectgroup>\n</map>\n";
maps['garrison'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"8\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"16\" nextobjectid=\"506\">\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"castle_z\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"castle_z.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"banners01_z\" tilewidth=\"512\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"banners01_z.png\" width=\"512\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"banners02_z\" tilewidth=\"600\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"banners02_z.png\" width=\"600\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"5\" name=\"guardhouse_z\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"guardhouse_z.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"knights\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"2\" columns=\"2\">\n  <image source=\"knights.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"8\" name=\"tree_z\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"tree_z.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"233\" gid=\"1\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"234\" gid=\"1\" x=\"4096\" y=\"2.27374e-13\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"MapProps\">\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3938.54\" y=\"1903.51\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n    <property name=\"type\" value=\"queen\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"167.637\" y=\"177.504\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n    <property name=\"type\" value=\"queen\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"301.337\" y=\"568.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"527.333\" y=\"319.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3777.55\" y=\"1523.85\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3559.87\" y=\"1746.18\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"348.001\" y=\"355.66\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"1052\" y=\"741.666\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"3047\" y=\"1313.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3730.54\" y=\"1679.19\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"504\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"1536\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"505\" name=\"spawn_red\" type=\"entity_spawn\" x=\"512\" y=\"512\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"13\" name=\"zOffset\">\n  <object id=\"426\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"427\" gid=\"2\" x=\"4096\" y=\"1792\" width=\"256\" height=\"256\" rotation=\"180\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"428\" gid=\"3\" x=\"864.667\" y=\"576.667\" width=\"512\" height=\"128\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"429\" gid=\"4\" x=\"879\" y=\"2018\" width=\"600\" height=\"512\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"430\" gid=\"3\" x=\"3232.17\" y=\"1473.48\" width=\"512\" height=\"128\" rotation=\"180\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"431\" gid=\"4\" x=\"3217.83\" y=\"32.1517\" width=\"600\" height=\"512\" rotation=\"180\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"432\" gid=\"5\" x=\"815.821\" y=\"1064.19\" width=\"256\" height=\"256\" rotation=\"16.9542\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"433\" gid=\"5\" x=\"3281.61\" y=\"982.111\" width=\"256\" height=\"256\" rotation=\"196.954\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"448\" gid=\"6\" x=\"1835.8\" y=\"1149.84\" width=\"128\" height=\"256\" rotation=\"45\"/>\n  <object id=\"449\" gid=\"6\" x=\"1892.86\" y=\"166.49\" width=\"128\" height=\"256\" rotation=\"225\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"450\" gid=\"7\" x=\"2269.1\" y=\"895.412\" width=\"128\" height=\"256\" rotation=\"225\"/>\n  <object id=\"451\" gid=\"7\" x=\"2190.25\" y=\"1908.05\" width=\"128\" height=\"256\" rotation=\"41.5706\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"452\" gid=\"8\" x=\"651\" y=\"318.5\" width=\"256\" height=\"256\" rotation=\"90\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"453\" gid=\"8\" x=\"800.489\" y=\"1125.28\" width=\"226.688\" height=\"224.301\" rotation=\"299.367\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"454\" gid=\"8\" x=\"794.013\" y=\"1261.79\" width=\"256\" height=\"256\" rotation=\"350.276\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"455\" gid=\"8\" x=\"603.229\" y=\"1810.57\" width=\"234.662\" height=\"228.004\" rotation=\"359.991\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"456\" gid=\"8\" x=\"274.064\" y=\"1580.34\" width=\"256\" height=\"256\" rotation=\"188.682\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"457\" gid=\"8\" x=\"175.211\" y=\"1801.53\" width=\"256\" height=\"256\" rotation=\"135.548\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"464\" gid=\"8\" x=\"3440.74\" y=\"1729.37\" width=\"256\" height=\"256\" rotation=\"270\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"465\" gid=\"8\" x=\"3291.25\" y=\"922.59\" width=\"226.688\" height=\"224.301\" rotation=\"119.367\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"466\" gid=\"8\" x=\"3297.73\" y=\"786.08\" width=\"256\" height=\"256\" rotation=\"170.276\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5100\"/>\n   </properties>\n  </object>\n  <object id=\"467\" gid=\"8\" x=\"3488.51\" y=\"237.3\" width=\"234.662\" height=\"228.004\" rotation=\"179.991\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"468\" gid=\"8\" x=\"3817.68\" y=\"467.53\" width=\"256\" height=\"256\" rotation=\"8.682\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"469\" gid=\"8\" x=\"3916.53\" y=\"246.34\" width=\"256\" height=\"256\" rotation=\"315.548\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"280\" type=\"static_wall\" x=\"-14.2012\" y=\"108.793\" width=\"175\" height=\"57.5\" rotation=\"315\"/>\n  <object id=\"281\" type=\"static_wall\" x=\"-56\" y=\"202.917\" width=\"110.653\" height=\"204.932\" rotation=\"315\"/>\n  <object id=\"282\" type=\"static_wall\" x=\"101.173\" y=\"-3.29933\" width=\"110.653\" height=\"240.994\" rotation=\"315\"/>\n  <object id=\"283\" type=\"static_wall\" x=\"301\" y=\"132.75\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"284\" type=\"static_wall\" x=\"601.727\" y=\"133\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"285\" type=\"static_wall\" x=\"401.502\" y=\"140.245\" width=\"110.653\" height=\"440.994\" rotation=\"270\"/>\n  <object id=\"286\" type=\"static_wall\" x=\"842.594\" y=\"140.245\" width=\"110.653\" height=\"166.327\" rotation=\"235.432\"/>\n  <object id=\"287\" type=\"static_wall\" x=\"954.024\" y=\"55.693\" width=\"110.653\" height=\"231.994\" rotation=\"272.515\"/>\n  <object id=\"289\" type=\"static_wall\" x=\"1123\" y=\"31\">\n   <polygon points=\"0,0 40,43.5 264,112 560.5,12 556.5,-159 76.5,-178\"/>\n  </object>\n  <object id=\"290\" type=\"static_wall\" x=\"1590.03\" y=\"53.0038\" width=\"186.214\" height=\"156.602\" rotation=\"301.155\"/>\n  <object id=\"291\" type=\"static_wall\" x=\"1530.67\" y=\"-120.577\" width=\"158.953\" height=\"199.704\" rotation=\"358.908\"/>\n  <object id=\"292\" type=\"static_wall\" x=\"1704\" y=\"116.667\">\n   <polygon points=\"0,0 -42,56.3333 -39.6667,174.333 -26.3333,186.333 98,184.667 300.333,-39.6667 242.667,-109.667\"/>\n  </object>\n  <object id=\"293\" type=\"static_wall\" x=\"1882.44\" y=\"-15.4624\" width=\"214.378\" height=\"203.982\" rotation=\"358.908\"/>\n  <object id=\"294\" type=\"static_wall\" x=\"1954.41\" y=\"42.1204\" width=\"214.378\" height=\"203.982\" rotation=\"314.215\"/>\n  <object id=\"295\" type=\"static_wall\" x=\"2182.73\" y=\"-38.5466\" width=\"214.378\" height=\"103.519\" rotation=\"358.908\"/>\n  <object id=\"296\" type=\"static_wall\" x=\"2306.19\" y=\"5.884\" width=\"214.378\" height=\"203.982\" rotation=\"314.215\"/>\n  <object id=\"297\" type=\"static_wall\" x=\"2452.49\" y=\"44.6262\" width=\"679.389\" height=\"103.519\" rotation=\"0.0591202\"/>\n  <object id=\"298\" type=\"static_wall\" x=\"2985.72\" y=\"6.64536\" width=\"161.418\" height=\"203.982\" rotation=\"314.215\"/>\n  <object id=\"299\" type=\"static_wall\" x=\"3210.64\" y=\"-40.7595\" width=\"726.054\" height=\"103.519\" rotation=\"0.0591202\"/>\n  <object id=\"300\" type=\"static_wall\" x=\"3439.33\" y=\"60.3333\">\n   <polygon points=\"0,0 48,44 186,49.3333 274.667,-38.3333 149.333,-138.333\"/>\n  </object>\n  <object id=\"301\" type=\"static_wall\" x=\"3977.32\" y=\"54.3424\" width=\"278.736\" height=\"103.519\" rotation=\"90.0591\"/>\n  <object id=\"302\" type=\"static_wall\" x=\"3952.81\" y=\"11.5379\" width=\"123.331\" height=\"103.519\" rotation=\"77.3963\"/>\n  <object id=\"303\" type=\"static_wall\" x=\"3959.72\" y=\"275.656\" width=\"238.261\" height=\"103.519\" rotation=\"56.3849\"/>\n  <object id=\"304\" type=\"static_wall\" x=\"4079.51\" y=\"451.027\" width=\"156.809\" height=\"103.519\" rotation=\"70.0499\"/>\n  <object id=\"305\" type=\"static_wall\" x=\"4129.55\" y=\"572.285\" width=\"543.718\" height=\"103.519\" rotation=\"88.9545\"/>\n  <object id=\"306\" type=\"static_wall\" x=\"4028.13\" y=\"677.864\" rotation=\"88.8818\">\n   <polygon points=\"0,0 48,44 186,49.3333 274.667,-38.3333 149.333,-138.333\"/>\n  </object>\n  <object id=\"307\" type=\"static_wall\" x=\"4055.31\" y=\"1207.16\" width=\"543.718\" height=\"103.519\" rotation=\"88.9545\"/>\n  <object id=\"308\" type=\"static_wall\" x=\"4145.67\" y=\"1117.05\" width=\"187.935\" height=\"103.519\" rotation=\"125.766\"/>\n  <object id=\"309\" type=\"static_wall\" x=\"836.182\" y=\"426.909\">\n   <polygon points=\"0,0 1.45455,51.4545 34.7273,71.8182 56,45.4545 47.8182,-5.09091\"/>\n  </object>\n  <object id=\"310\" type=\"static_wall\" x=\"701.25\" y=\"523\">\n   <polygon points=\"0,0 -16.75,45.25 26.5,64.25 59.25,55 52,15\"/>\n  </object>\n  <object id=\"311\" type=\"static_wall\" x=\"815.75\" y=\"500.5\">\n   <polygon points=\"0,0 -34,29.25 -27,68.75 16.75,60.25 39,24.75\"/>\n  </object>\n  <object id=\"312\" type=\"static_wall\" x=\"842.333\" y=\"1039.33\">\n   <polygon points=\"0,0 111.667,40.6667 127.333,30.6667 113,-49.6667 24,-66.3333\"/>\n  </object>\n  <object id=\"316\" type=\"static_wall\" x=\"971\" y=\"1064.5\">\n   <polygon points=\"0,0 0.5,15.75 12.5,25.75 33,22 35.75,0.75 30.75,-15 10.75,-20.25\"/>\n  </object>\n  <object id=\"317\" type=\"static_wall\" x=\"1003.25\" y=\"1070\">\n   <polygon points=\"0,0 0.5,15.75 12.5,25.75 33,22 35.75,0.75 30.75,-15 10.75,-20.25\"/>\n  </object>\n  <object id=\"318\" type=\"static_wall\" x=\"985.561\" y=\"1077.62\" rotation=\"348.494\">\n   <polygon points=\"0,0 0.5,15.75 12.5,25.75 33,22 35.75,0.75 30.75,-15 10.75,-20.25\"/>\n  </object>\n  <object id=\"320\" type=\"static_wall\" x=\"767.279\" y=\"456.585\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"321\" type=\"static_wall\" x=\"618.667\" y=\"1436\">\n   <polygon points=\"0,0 -26.3333,22 -11.3333,64 11.6667,54.6667 28,28.3333\"/>\n  </object>\n  <object id=\"322\" type=\"static_wall\" x=\"665\" y=\"1475\">\n   <polygon points=\"0,0 -16.3333,23.3333 36.3333,65.3333 58.6667,33.3333\"/>\n  </object>\n  <object id=\"323\" type=\"static_wall\" x=\"753.667\" y=\"1529.33\">\n   <polygon points=\"0,0 -20.3333,35.6667 29,65 53,31\"/>\n  </object>\n  <object id=\"324\" type=\"static_wall\" x=\"840\" y=\"1585.33\">\n   <polygon points=\"0,0 -23.3333,31.3333 -12,74.3333 45.3333,66.3333 64,50 41.6667,22.3333\"/>\n  </object>\n  <object id=\"325\" type=\"static_wall\" x=\"783.333\" y=\"1630.33\">\n   <polygon points=\"0,0 -65,9 -63,64.6667 9.66667,41.3333\"/>\n  </object>\n  <object id=\"326\" type=\"static_wall\" x=\"695\" y=\"1594.33\">\n   <polygon points=\"0,0 -30.3333,15.6667 14.3333,94.3333 26,100.667 48.6667,45.6667\"/>\n  </object>\n  <object id=\"327\" type=\"static_wall\" x=\"649\" y=\"1505.67\">\n   <polygon points=\"0,0 -28,15 -30.3333,23.3333 -0.666667,73.3333 30.6667,56.3333\"/>\n  </object>\n  <object id=\"328\" type=\"static_wall\" x=\"1500.67\" y=\"1298.33\">\n   <polygon points=\"0,0 -21.3333,37.3333 16.3333,56 37,20.6667\"/>\n  </object>\n  <object id=\"329\" type=\"static_wall\" x=\"1558.23\" y=\"1335\">\n   <polygon points=\"0,0 -18.8952,33.7777 14.4666,50.6667 32.7714,18.6984\"/>\n  </object>\n  <object id=\"330\" type=\"static_wall\" x=\"1615.35\" y=\"1362.12\" rotation=\"4.4649\">\n   <polygon points=\"0,0 -22.0647,36.8888 16.8933,55.3334 38.2685,20.4206\"/>\n  </object>\n  <object id=\"331\" type=\"static_wall\" x=\"1583.26\" y=\"1423.33\">\n   <polygon points=\"0,0 -16.8228,29.9999 12.8799,45 29.1771,16.6071\"/>\n  </object>\n  <object id=\"332\" type=\"static_wall\" x=\"1465.67\" y=\"1357.67\">\n   <polygon points=\"0,0 -16.8228,29.9999 12.8799,45 29.1771,16.6071\"/>\n  </object>\n  <object id=\"334\" type=\"static_wall\" x=\"1433\" y=\"1404.33\">\n   <polygon points=\"0,0 -19.3333,22.3333 -23,43.6667 -16.3333,58.6667 25,50 32.6667,21\"/>\n  </object>\n  <object id=\"336\" type=\"static_wall\" x=\"1423\" y=\"1481.33\">\n   <polygon points=\"0,0 4.66667,21 35,13.6667 31,-8\"/>\n  </object>\n  <object id=\"337\" type=\"static_wall\" x=\"1469.33\" y=\"1510\">\n   <polygon points=\"0,0 -37.6667,12.3333 -25.6667,52.3333 14.6667,42\"/>\n  </object>\n  <object id=\"338\" type=\"static_wall\" x=\"1513.67\" y=\"1505.33\">\n   <polygon points=\"0,0 -23,5.66667 -13.3333,35.3333 8.33333,29\"/>\n  </object>\n  <object id=\"339\" type=\"static_wall\" x=\"1553\" y=\"1473\">\n   <polygon points=\"0,0 -25,19.3333 -12.6667,54.6667 20.6667,53.3333 32,16\"/>\n  </object>\n  <object id=\"340\" type=\"static_wall\" x=\"1563.67\" y=\"324\">\n   <polygon points=\"0,0 -61,-3.33333 -100.333,33 -73.3333,60.6667 -2.66667,33\"/>\n  </object>\n  <object id=\"341\" type=\"static_wall\" x=\"1596.33\" y=\"325.333\">\n   <polygon points=\"0,0 2.33333,73 44,73.6667 45.6667,1.66667\"/>\n  </object>\n  <object id=\"342\" type=\"static_wall\" x=\"1439.67\" y=\"379.667\">\n   <polygon points=\"0,0 -65.6667,57 -79,73.6667 -80.6667,102.667 -37.3333,107.333 30,30.6667\"/>\n  </object>\n  <object id=\"344\" type=\"static_wall\" x=\"1546.33\" y=\"491.333\">\n   <polygon points=\"0,0 -78.3333,62.3333 -72.3333,96.3333 -27.3333,92 28.3333,28.6667\"/>\n  </object>\n  <object id=\"345\" type=\"static_wall\" x=\"1600.67\" y=\"433\">\n   <polygon points=\"0,0 -16,25.3333 14.3333,52.3333 40.3333,32 40.6667,0.333333\"/>\n  </object>\n  <object id=\"346\" type=\"static_wall\" x=\"1355.67\" y=\"510.333\">\n   <polygon points=\"0,0 38,5.33333 78.3333,45 89,91.6667 59,102.333 -7.33333,40.6667\"/>\n  </object>\n  <object id=\"347\" type=\"static_wall\" x=\"2033\" y=\"1024.33\">\n   <polygon points=\"0,0 -119.333,4.66667 -163.667,47.6667 -196.667,82 -197.667,111.667 11,131.333 12.3333,10.6667\"/>\n  </object>\n  <object id=\"348\" type=\"static_wall\" x=\"1880.33\" y=\"1137\">\n   <polygon points=\"0,0 106,93.3333 164,18.3333 123.333,-39\"/>\n  </object>\n  <object id=\"349\" type=\"static_wall\" x=\"1937.64\" y=\"1186\">\n   <polygon points=\"0,0 10.7273,51.4545 48.5455,44.7273 54.1818,-2.54545\"/>\n  </object>\n  <object id=\"350\" type=\"static_wall\" x=\"1828.67\" y=\"1162.67\">\n   <polygon points=\"0,0 48.3333,4.33333 87.3333,44 91.3333,83 61,100.667 -4,43.6667\"/>\n  </object>\n  <object id=\"351\" type=\"static_wall\" x=\"1447.94\" y=\"482.212\">\n   <polygon points=\"0,0 -23,22.3333 2,52.3333 22.3333,24.6667\"/>\n  </object>\n  <object id=\"352\" type=\"static_wall\" x=\"4109.16\" y=\"1939.1\" width=\"175\" height=\"57.5\" rotation=\"135\"/>\n  <object id=\"353\" type=\"static_wall\" x=\"4150.95\" y=\"1844.97\" width=\"110.653\" height=\"204.932\" rotation=\"135\"/>\n  <object id=\"354\" type=\"static_wall\" x=\"3993.78\" y=\"2051.19\" width=\"110.653\" height=\"240.994\" rotation=\"135\"/>\n  <object id=\"355\" type=\"static_wall\" x=\"3793.95\" y=\"1915.14\" rotation=\"180\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"356\" type=\"static_wall\" x=\"3493.23\" y=\"1914.89\" rotation=\"180\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"357\" type=\"static_wall\" x=\"3693.45\" y=\"1907.64\" width=\"110.653\" height=\"440.994\" rotation=\"90\"/>\n  <object id=\"358\" type=\"static_wall\" x=\"3252.36\" y=\"1907.64\" width=\"110.653\" height=\"166.327\" rotation=\"55.432\"/>\n  <object id=\"359\" type=\"static_wall\" x=\"3140.93\" y=\"1992.2\" width=\"110.653\" height=\"231.994\" rotation=\"92.515\"/>\n  <object id=\"360\" type=\"static_wall\" x=\"2971.95\" y=\"2016.89\" rotation=\"180\">\n   <polygon points=\"0,0 40,43.5 264,112 560.5,12 556.5,-159 76.5,-178\"/>\n  </object>\n  <object id=\"361\" type=\"static_wall\" x=\"2504.92\" y=\"1994.89\" width=\"186.214\" height=\"156.602\" rotation=\"121.155\"/>\n  <object id=\"362\" type=\"static_wall\" x=\"2564.28\" y=\"2168.47\" width=\"158.953\" height=\"199.704\" rotation=\"178.908\"/>\n  <object id=\"363\" type=\"static_wall\" x=\"2390.95\" y=\"1931.22\" rotation=\"180\">\n   <polygon points=\"0,0 -42,56.3333 -39.6667,174.333 -26.3333,186.333 98,184.667 300.333,-39.6667 242.667,-109.667\"/>\n  </object>\n  <object id=\"364\" type=\"static_wall\" x=\"2212.51\" y=\"2063.35\" width=\"214.378\" height=\"203.982\" rotation=\"178.908\"/>\n  <object id=\"365\" type=\"static_wall\" x=\"2140.54\" y=\"2005.77\" width=\"214.378\" height=\"203.982\" rotation=\"134.215\"/>\n  <object id=\"366\" type=\"static_wall\" x=\"1912.22\" y=\"2086.44\" width=\"214.378\" height=\"103.519\" rotation=\"178.908\"/>\n  <object id=\"367\" type=\"static_wall\" x=\"1788.76\" y=\"2042\" width=\"214.378\" height=\"203.982\" rotation=\"134.215\"/>\n  <object id=\"368\" type=\"static_wall\" x=\"1642.46\" y=\"2003.26\" width=\"679.389\" height=\"103.519\" rotation=\"180.059\"/>\n  <object id=\"369\" type=\"static_wall\" x=\"1109.23\" y=\"2041.24\" width=\"161.418\" height=\"203.982\" rotation=\"134.215\"/>\n  <object id=\"370\" type=\"static_wall\" x=\"884.314\" y=\"2088.65\" width=\"726.054\" height=\"103.519\" rotation=\"180.059\"/>\n  <object id=\"371\" type=\"static_wall\" x=\"655.624\" y=\"1987.56\" rotation=\"180\">\n   <polygon points=\"0,0 48,44 186,49.3333 274.667,-38.3333 149.333,-138.333\"/>\n  </object>\n  <object id=\"372\" type=\"static_wall\" x=\"117.634\" y=\"1993.55\" width=\"278.736\" height=\"103.519\" rotation=\"270.059\"/>\n  <object id=\"373\" type=\"static_wall\" x=\"142.144\" y=\"2036.35\" width=\"123.331\" height=\"103.519\" rotation=\"257.396\"/>\n  <object id=\"374\" type=\"static_wall\" x=\"135.234\" y=\"1772.23\" width=\"238.261\" height=\"103.519\" rotation=\"236.385\"/>\n  <object id=\"375\" type=\"static_wall\" x=\"15.4442\" y=\"1596.86\" width=\"156.809\" height=\"103.519\" rotation=\"250.05\"/>\n  <object id=\"376\" type=\"static_wall\" x=\"-34.5958\" y=\"1475.6\" width=\"543.718\" height=\"103.519\" rotation=\"268.954\"/>\n  <object id=\"377\" type=\"static_wall\" x=\"66.8242\" y=\"1370.02\" rotation=\"268.882\">\n   <polygon points=\"0,0 48,44 186,49.3333 274.667,-38.3333 149.333,-138.333\"/>\n  </object>\n  <object id=\"378\" type=\"static_wall\" x=\"39.6442\" y=\"840.729\" width=\"543.718\" height=\"103.519\" rotation=\"268.954\"/>\n  <object id=\"379\" type=\"static_wall\" x=\"-50.7158\" y=\"930.839\" width=\"187.935\" height=\"103.519\" rotation=\"305.766\"/>\n  <object id=\"380\" type=\"static_wall\" x=\"3258.77\" y=\"1620.98\" rotation=\"180\">\n   <polygon points=\"0,0 1.45455,51.4545 34.7273,71.8182 56,45.4545 47.8182,-5.09091\"/>\n  </object>\n  <object id=\"381\" type=\"static_wall\" x=\"3393.7\" y=\"1524.89\" rotation=\"180\">\n   <polygon points=\"0,0 -16.75,45.25 26.5,64.25 59.25,55 52,15\"/>\n  </object>\n  <object id=\"382\" type=\"static_wall\" x=\"3279.2\" y=\"1547.39\" rotation=\"180\">\n   <polygon points=\"0,0 -34,29.25 -27,68.75 16.75,60.25 39,24.75\"/>\n  </object>\n  <object id=\"383\" type=\"static_wall\" x=\"3252.62\" y=\"1008.56\" rotation=\"180\">\n   <polygon points=\"0,0 111.667,40.6667 127.333,30.6667 113,-49.6667 24,-66.3333\"/>\n  </object>\n  <object id=\"386\" type=\"static_wall\" x=\"3123.95\" y=\"983.389\" rotation=\"180\">\n   <polygon points=\"0,0 0.5,15.75 12.5,25.75 33,22 35.75,0.75 30.75,-15 10.75,-20.25\"/>\n  </object>\n  <object id=\"387\" type=\"static_wall\" x=\"3091.7\" y=\"977.889\" rotation=\"180\">\n   <polygon points=\"0,0 0.5,15.75 12.5,25.75 33,22 35.75,0.75 30.75,-15 10.75,-20.25\"/>\n  </object>\n  <object id=\"388\" type=\"static_wall\" x=\"3109.39\" y=\"970.269\" rotation=\"168.494\">\n   <polygon points=\"0,0 0.5,15.75 12.5,25.75 33,22 35.75,0.75 30.75,-15 10.75,-20.25\"/>\n  </object>\n  <object id=\"389\" type=\"static_wall\" x=\"3196.62\" y=\"1074.34\" width=\"140.5\" height=\"58.25\" rotation=\"195.49\"/>\n  <object id=\"391\" type=\"static_wall\" x=\"3476.29\" y=\"611.889\" rotation=\"180\">\n   <polygon points=\"0,0 -26.3333,22 -11.3333,64 11.6667,54.6667 28,28.3333\"/>\n  </object>\n  <object id=\"392\" type=\"static_wall\" x=\"3429.95\" y=\"572.889\" rotation=\"180\">\n   <polygon points=\"0,0 -16.3333,23.3333 36.3333,65.3333 58.6667,33.3333\"/>\n  </object>\n  <object id=\"393\" type=\"static_wall\" x=\"3341.29\" y=\"518.559\" rotation=\"180\">\n   <polygon points=\"0,0 -20.3333,35.6667 29,65 53,31\"/>\n  </object>\n  <object id=\"394\" type=\"static_wall\" x=\"3254.95\" y=\"462.559\" rotation=\"180\">\n   <polygon points=\"0,0 -23.3333,31.3333 -12,74.3333 45.3333,66.3333 64,50 41.6667,22.3333\"/>\n  </object>\n  <object id=\"395\" type=\"static_wall\" x=\"3311.62\" y=\"417.559\" rotation=\"180\">\n   <polygon points=\"0,0 -65,9 -63,64.6667 9.66667,41.3333\"/>\n  </object>\n  <object id=\"396\" type=\"static_wall\" x=\"3399.95\" y=\"453.559\" rotation=\"180\">\n   <polygon points=\"0,0 -30.3333,15.6667 14.3333,94.3333 26,100.667 48.6667,45.6667\"/>\n  </object>\n  <object id=\"397\" type=\"static_wall\" x=\"3445.95\" y=\"542.219\" rotation=\"180\">\n   <polygon points=\"0,0 -28,15 -30.3333,23.3333 -0.666667,73.3333 30.6667,56.3333\"/>\n  </object>\n  <object id=\"398\" type=\"static_wall\" x=\"2594.28\" y=\"749.559\" rotation=\"180\">\n   <polygon points=\"0,0 -21.3333,37.3333 16.3333,56 37,20.6667\"/>\n  </object>\n  <object id=\"399\" type=\"static_wall\" x=\"2536.72\" y=\"712.889\" rotation=\"180\">\n   <polygon points=\"0,0 -18.8952,33.7777 14.4666,50.6667 32.7714,18.6984\"/>\n  </object>\n  <object id=\"400\" type=\"static_wall\" x=\"2479.6\" y=\"685.769\" rotation=\"184.465\">\n   <polygon points=\"0,0 -22.0647,36.8888 16.8933,55.3334 38.2685,20.4206\"/>\n  </object>\n  <object id=\"401\" type=\"static_wall\" x=\"2511.69\" y=\"624.559\" rotation=\"180\">\n   <polygon points=\"0,0 -16.8228,29.9999 12.8799,45 29.1771,16.6071\"/>\n  </object>\n  <object id=\"402\" type=\"static_wall\" x=\"2629.28\" y=\"690.219\" rotation=\"180\">\n   <polygon points=\"0,0 -16.8228,29.9999 12.8799,45 29.1771,16.6071\"/>\n  </object>\n  <object id=\"403\" type=\"static_wall\" x=\"2661.95\" y=\"643.559\" rotation=\"180\">\n   <polygon points=\"0,0 -19.3333,22.3333 -23,43.6667 -16.3333,58.6667 25,50 32.6667,21\"/>\n  </object>\n  <object id=\"404\" type=\"static_wall\" x=\"2671.95\" y=\"566.559\" rotation=\"180\">\n   <polygon points=\"0,0 4.66667,21 35,13.6667 31,-8\"/>\n  </object>\n  <object id=\"405\" type=\"static_wall\" x=\"2625.62\" y=\"537.889\" rotation=\"180\">\n   <polygon points=\"0,0 -37.6667,12.3333 -25.6667,52.3333 14.6667,42\"/>\n  </object>\n  <object id=\"406\" type=\"static_wall\" x=\"2581.28\" y=\"542.559\" rotation=\"180\">\n   <polygon points=\"0,0 -23,5.66667 -13.3333,35.3333 8.33333,29\"/>\n  </object>\n  <object id=\"407\" type=\"static_wall\" x=\"2541.95\" y=\"574.889\" rotation=\"180\">\n   <polygon points=\"0,0 -25,19.3333 -12.6667,54.6667 20.6667,53.3333 32,16\"/>\n  </object>\n  <object id=\"408\" type=\"static_wall\" x=\"2531.28\" y=\"1723.89\" rotation=\"180\">\n   <polygon points=\"0,0 -61,-3.33333 -100.333,33 -73.3333,60.6667 -2.66667,33\"/>\n  </object>\n  <object id=\"409\" type=\"static_wall\" x=\"2498.62\" y=\"1722.56\" rotation=\"180\">\n   <polygon points=\"0,0 2.33333,73 44,73.6667 45.6667,1.66667\"/>\n  </object>\n  <object id=\"410\" type=\"static_wall\" x=\"2655.28\" y=\"1668.22\" rotation=\"180\">\n   <polygon points=\"0,0 -65.6667,57 -79,73.6667 -80.6667,102.667 -37.3333,107.333 30,30.6667\"/>\n  </object>\n  <object id=\"411\" type=\"static_wall\" x=\"2548.62\" y=\"1556.56\" rotation=\"180\">\n   <polygon points=\"0,0 -78.3333,62.3333 -72.3333,96.3333 -27.3333,92 28.3333,28.6667\"/>\n  </object>\n  <object id=\"412\" type=\"static_wall\" x=\"2494.28\" y=\"1614.89\" rotation=\"180\">\n   <polygon points=\"0,0 -16,25.3333 14.3333,52.3333 40.3333,32 40.6667,0.333333\"/>\n  </object>\n  <object id=\"413\" type=\"static_wall\" x=\"2739.28\" y=\"1537.56\" rotation=\"180\">\n   <polygon points=\"0,0 38,5.33333 78.3333,45 89,91.6667 59,102.333 -7.33333,40.6667\"/>\n  </object>\n  <object id=\"414\" type=\"static_wall\" x=\"2061.95\" y=\"1023.56\" rotation=\"180\">\n   <polygon points=\"0,0 -119.333,4.66667 -163.667,47.6667 -196.667,82 -197.667,111.667 11,131.333 12.3333,10.6667\"/>\n  </object>\n  <object id=\"415\" type=\"static_wall\" x=\"2214.62\" y=\"910.889\" rotation=\"180\">\n   <polygon points=\"0,0 106,93.3333 164,18.3333 123.333,-39\"/>\n  </object>\n  <object id=\"416\" type=\"static_wall\" x=\"2157.31\" y=\"861.889\" rotation=\"180\">\n   <polygon points=\"0,0 10.7273,51.4545 48.5455,44.7273 54.1818,-2.54545\"/>\n  </object>\n  <object id=\"417\" type=\"static_wall\" x=\"2266.28\" y=\"885.219\" rotation=\"180\">\n   <polygon points=\"0,0 48.3333,4.33333 87.3333,44 91.3333,83 61,100.667 -4,43.6667\"/>\n  </object>\n  <object id=\"418\" type=\"static_wall\" x=\"2647.01\" y=\"1565.68\" rotation=\"180\">\n   <polygon points=\"0,0 -23,22.3333 2,52.3333 22.3333,24.6667\"/>\n  </object>\n  <object id=\"419\" type=\"static_wall\" x=\"132.875\" y=\"444.625\" rotation=\"270\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"420\" type=\"static_wall\" x=\"133.167\" y=\"744.333\" rotation=\"270\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"421\" type=\"static_wall\" x=\"3963.07\" y=\"1302.21\" rotation=\"90\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"422\" type=\"static_wall\" x=\"3963.5\" y=\"1604.5\" rotation=\"90\">\n   <polygon points=\"0,0 36,42.5 108.5,41 151,-6.5 148.25,-101 3.5,-104.25\"/>\n  </object>\n  <object id=\"423\" type=\"static_wall\" x=\"1955.5\" y=\"1544.25\">\n   <polygon points=\"0,0 -22.25,2 -117.5,108 -113,120.25 79.25,71.25 85,59 73.75,43\"/>\n  </object>\n  <object id=\"424\" type=\"static_wall\" x=\"2139.68\" y=\"504.25\" rotation=\"180\">\n   <polygon points=\"0,0 -22.25,2 -117.5,108 -113,120.25 79.25,71.25 85,59 73.75,43\"/>\n  </object>\n  <object id=\"437\" type=\"static_wall\" x=\"3001.03\" y=\"1108.41\" width=\"59.8181\" height=\"13.8231\" rotation=\"14.9848\"/>\n  <object id=\"438\" type=\"static_wall\" x=\"3040.66\" y=\"1024.32\" width=\"104.979\" height=\"13.8231\" rotation=\"106.513\"/>\n  <object id=\"439\" type=\"static_wall\" x=\"3059\" y=\"980.5\">\n   <polygon points=\"0,0 -31.75,40 2.75,56.5 24.25,4.5\"/>\n  </object>\n  <object id=\"440\" type=\"static_wall\" x=\"3140.84\" y=\"1152.84\" width=\"59.8181\" height=\"13.8231\" rotation=\"14.9848\"/>\n  <object id=\"441\" type=\"static_wall\" x=\"3228.19\" y=\"1071.22\" width=\"115.277\" height=\"13.8231\" rotation=\"106.513\"/>\n  <object id=\"442\" type=\"static_wall\" x=\"1095.09\" y=\"938.798\" width=\"59.8181\" height=\"13.8231\" rotation=\"194.985\"/>\n  <object id=\"443\" type=\"static_wall\" x=\"1055.46\" y=\"1022.89\" width=\"104.979\" height=\"13.8231\" rotation=\"286.513\"/>\n  <object id=\"444\" type=\"static_wall\" x=\"955.283\" y=\"894.368\" width=\"59.8181\" height=\"13.8231\" rotation=\"194.985\"/>\n  <object id=\"445\" type=\"static_wall\" x=\"866.363\" y=\"976.446\" width=\"115.277\" height=\"13.8231\" rotation=\"287.532\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"879.5\" y=\"967\">\n   <polygon points=\"0,0 190.25,56.5 155.25,105.5 -2.5,57.75\"/>\n  </object>\n  <object id=\"473\" type=\"static_wall\" x=\"757.167\" y=\"962.458\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"474\" type=\"static_wall\" x=\"902\" y=\"1114.63\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"475\" type=\"static_wall\" x=\"722.25\" y=\"1697.5\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"476\" type=\"static_wall\" x=\"3174.5\" y=\"930.5\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"477\" type=\"static_wall\" x=\"3317.92\" y=\"1081.17\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"478\" type=\"static_wall\" x=\"3307.71\" y=\"1589.04\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n  <object id=\"479\" type=\"static_wall\" x=\"3352\" y=\"347.5\" rotation=\"356.823\">\n   <polygon points=\"0,0 0.225351,5.56419 5.63379,9.09703 14.8732,7.77222 16.1126,0.264961 13.8591,-5.29921 4.84506,-7.15394\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['nuadic'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"left-up\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"3\" nextobjectid=\"92\">\n <tileset firstgid=\"1\" name=\"controlpoint\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"../snowfall/controlpoint.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <layer id=\"1\" name=\"Tile Layer 1\" width=\"16\" height=\"16\">\n  <data encoding=\"base64\" compression=\"zlib\">\n   eJxjYBgFo2AUjFQAAAQAAAE=\n  </data>\n </layer>\n <objectgroup id=\"2\" name=\"Hitboxes\">\n  <object id=\"1\" type=\"static_wall\" x=\"-21.5033\" y=\"-94.9505\" width=\"1076.18\" height=\"165.548\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"3\" type=\"static_wall\" x=\"-29.1323\" y=\"29.1323\" width=\"82.8691\" height=\"841.169\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"6\" type=\"static_wall\" x=\"916.667\" y=\"408.333\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 608.333,183.333 550,525 258.333,558.333\"/>\n  </object>\n  <object id=\"7\" type=\"static_wall\" x=\"466.667\" y=\"1000\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 316.667,141.667 375,683.333 16.6667,491.667\"/>\n  </object>\n  <object id=\"8\" type=\"static_wall\" x=\"2000\" y=\"508.333\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 700,-158.333 825,-8.33333 391.667,200\"/>\n  </object>\n  <object id=\"9\" type=\"static_wall\" x=\"1275\" y=\"1658.33\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 625,-700 883.333,-666.667 133.333,116.667\"/>\n  </object>\n  <object id=\"10\" type=\"static_wall\" x=\"1066.67\" y=\"1958.33\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -150,391.667 250,383.333\"/>\n  </object>\n  <object id=\"13\" type=\"static_wall\" x=\"36.3636\" y=\"830.303\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"8,-144 103.636,974.424 -36.1212,821.333 -111.152,-47.8788\"/>\n  </object>\n  <object id=\"14\" type=\"static_wall\" x=\"118.732\" y=\"1649.52\" rotation=\"349.677\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"140.216,42.3427 53.4246,739.144 -459.651,706.36 -344.767,-159.41\"/>\n  </object>\n  <object id=\"15\" type=\"static_wall\" x=\"-6.06061\" y=\"2309.09\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-52,-52 218.182,321.212 -21.2121,600\"/>\n  </object>\n  <object id=\"16\" type=\"static_wall\" x=\"-52\" y=\"2780\" width=\"92\" height=\"676\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"18\" type=\"static_wall\" x=\"20\" y=\"3428\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-8,-136 628,696 138,924 -208,550\"/>\n  </object>\n  <object id=\"19\" type=\"static_wall\" x=\"560\" y=\"4072\" width=\"728\" height=\"80\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"20\" type=\"static_wall\" x=\"1260\" y=\"4108\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-92,-24 792,-332 1160,100 -66,168\"/>\n  </object>\n  <object id=\"21\" type=\"static_wall\" x=\"2076\" y=\"3848\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-20,8 1108,300 144,304\"/>\n  </object>\n  <object id=\"22\" type=\"static_wall\" x=\"2592\" y=\"4008\" width=\"1100\" height=\"104\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"24\" type=\"static_wall\" x=\"3980\" y=\"2884\" width=\"128\" height=\"476\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"25\" type=\"static_wall\" x=\"4004\" y=\"2996\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -220,-388 -80,-628 124,-744 132,-76\"/>\n  </object>\n  <object id=\"26\" type=\"static_wall\" x=\"4060\" y=\"1496\" width=\"92\" height=\"852\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"31\" type=\"static_wall\" x=\"4080\" y=\"1536\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -228,-316 -144,-716 108,-708 84,8\"/>\n  </object>\n  <object id=\"32\" type=\"static_wall\" x=\"4056\" y=\"308\" width=\"112\" height=\"560\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"34\" type=\"static_wall\" x=\"4084\" y=\"348\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"44,46 -188,-232 120,-302\"/>\n  </object>\n  <object id=\"35\" type=\"static_wall\" x=\"3774\" y=\"-124\" width=\"484\" height=\"280\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"36\" type=\"static_wall\" x=\"3804\" y=\"44\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -480,52 -616,-120 -12,-116\"/>\n  </object>\n  <object id=\"37\" type=\"static_wall\" x=\"3268\" y=\"-28\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"48,44 -448,100 -656,-20 -114,-136\"/>\n  </object>\n  <object id=\"38\" type=\"static_wall\" x=\"2692\" y=\"-32\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"108,50 -288,128 -244,-48 -24,-60\"/>\n  </object>\n  <object id=\"39\" type=\"static_wall\" x=\"1820\" y=\"-40\" width=\"640\" height=\"140\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"40\" type=\"static_wall\" x=\"1861.54\" y=\"210.547\" rotation=\"352.438\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-80,-24 -820,-208 -746,-648 204,-352\"/>\n  </object>\n  <object id=\"41\" type=\"static_wall\" x=\"2760\" y=\"1664\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -736,584 -800,960 176,184\"/>\n  </object>\n  <object id=\"42\" type=\"static_wall\" x=\"3264\" y=\"912\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -376,184 -88,536\"/>\n  </object>\n  <object id=\"43\" type=\"static_wall\" x=\"3048\" y=\"2712\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-288,0 -312,304 -24,432 368,-200\"/>\n  </object>\n  <object id=\"44\" type=\"static_wall\" x=\"3440\" y=\"1848\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -304,160 136,208\"/>\n  </object>\n  <object id=\"45\" type=\"static_wall\" x=\"984.554\" y=\"2731.87\" rotation=\"56.6345\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 488,-88 752,200 384,392 -176,312\"/>\n  </object>\n  <object id=\"46\" type=\"static_wall\" x=\"2040\" y=\"3016\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-16,-96 -256,144 64,424 328,320\"/>\n  </object>\n  <object id=\"47\" type=\"static_wall\" x=\"352\" y=\"-128\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 216,336 440,-16\"/>\n  </object>\n  <object id=\"52\" name=\"spawn_red\" type=\"entity_spawn\" x=\"396\" y=\"304\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"216\" y=\"416\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_red\" type=\"entity_spawn\" x=\"192\" y=\"678\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"55\" name=\"spawn_red\" type=\"entity_spawn\" x=\"772\" y=\"316\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"56\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3212\" y=\"3828\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"57\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3364\" y=\"3578\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"58\" name=\"Spawn_blue\" type=\"entity_spawn\" x=\"3354\" y=\"3202\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2688\" y=\"3748\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"67\" type=\"static_wall\" x=\"4200.65\" y=\"3091.84\" width=\"627.618\" height=\"1531.4\" rotation=\"42.7742\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"61\" gid=\"1\" x=\"340\" y=\"3468\" width=\"256\" height=\"256\"/>\n  <object id=\"62\" gid=\"1\" x=\"596\" y=\"3212\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"63\" gid=\"1\" x=\"852\" y=\"3468\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"64\" gid=\"1\" x=\"596\" y=\"3724\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"65\" name=\"Point A\" type=\"entity_capture_point\" x=\"595.667\" y=\"3469.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"68\" gid=\"1\" x=\"1804\" y=\"1732\" width=\"256\" height=\"256\"/>\n  <object id=\"69\" gid=\"1\" x=\"2060\" y=\"1476\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"70\" gid=\"1\" x=\"2316\" y=\"1732\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"71\" gid=\"1\" x=\"2060\" y=\"1988\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"72\" name=\"Point B\" type=\"entity_capture_point\" x=\"2059.67\" y=\"1733.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"73\" gid=\"1\" x=\"3280\" y=\"516\" width=\"256\" height=\"256\"/>\n  <object id=\"74\" gid=\"1\" x=\"3536\" y=\"260\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"75\" gid=\"1\" x=\"3792\" y=\"516\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"76\" gid=\"1\" x=\"3536\" y=\"772\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"77\" name=\"Point C\" type=\"entity_capture_point\" x=\"3535.67\" y=\"517.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"78\" name=\"spawn_red\" type=\"entity_spawn\" x=\"632\" y=\"442\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"79\" name=\"spawn_red\" type=\"entity_spawn\" x=\"768\" y=\"590\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"80\" name=\"spawn_red\" type=\"entity_spawn\" x=\"660\" y=\"806\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"81\" name=\"spawn_red\" type=\"entity_spawn\" x=\"416\" y=\"864\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"82\" name=\"spawn_red\" type=\"entity_spawn\" x=\"194\" y=\"988\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"83\" name=\"spawn_red\" type=\"entity_spawn\" x=\"446\" y=\"574\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"84\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2822\" y=\"3366\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"85\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"2976\" y=\"3630\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"86\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3484\" y=\"2920\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"87\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3774\" y=\"3222\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"88\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3720\" y=\"2982\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"89\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3192\" y=\"3404\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"90\" name=\"Turret\" type=\"turret\" x=\"3666\" y=\"3554\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"91\" name=\"Turret\" type=\"turret\" x=\"178\" y=\"234\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['nuadic_long'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"left-up\" width=\"16\" height=\"16\" tilewidth=\"512\" tileheight=\"200\" infinite=\"0\" nextlayerid=\"4\" nextobjectid=\"163\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#fff9ad6f\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"controlpoint\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"../snowfall/controlpoint.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"tiles\" tilewidth=\"1024\" tileheight=\"1024\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"1024\" height=\"1024\" source=\"ground.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"3\" name=\"Background\">\n  <object id=\"100\" gid=\"2\" x=\"0\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"132\" gid=\"2\" x=\"0\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"133\" gid=\"2\" x=\"0\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"134\" gid=\"2\" x=\"0\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"135\" gid=\"2\" x=\"1024\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"136\" gid=\"2\" x=\"1024\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"137\" gid=\"2\" x=\"1024\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"138\" gid=\"2\" x=\"1024\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"139\" gid=\"2\" x=\"2048\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"140\" gid=\"2\" x=\"2048\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"141\" gid=\"2\" x=\"2048\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"142\" gid=\"2\" x=\"2048\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"143\" gid=\"2\" x=\"3072\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"144\" gid=\"2\" x=\"3072\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"145\" gid=\"2\" x=\"3072\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"146\" gid=\"2\" x=\"3072\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"147\" gid=\"2\" x=\"4096\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"148\" gid=\"2\" x=\"4096\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"149\" gid=\"2\" x=\"4096\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"150\" gid=\"2\" x=\"4096\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"151\" gid=\"2\" x=\"5120\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"152\" gid=\"2\" x=\"5120\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"153\" gid=\"2\" x=\"5120\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"154\" gid=\"2\" x=\"5120\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"155\" gid=\"2\" x=\"6144\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"156\" gid=\"2\" x=\"6144\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"157\" gid=\"2\" x=\"6144\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"158\" gid=\"2\" x=\"6144\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"159\" gid=\"2\" x=\"7168\" y=\"1000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"160\" gid=\"2\" x=\"7168\" y=\"2000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"161\" gid=\"2\" x=\"7168\" y=\"3000\" width=\"1024\" height=\"1024\"/>\n  <object id=\"162\" gid=\"2\" x=\"7168\" y=\"4000\" width=\"1024\" height=\"1024\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hitboxes\">\n  <object id=\"1\" type=\"static_wall\" x=\"-21.5033\" y=\"-94.9505\" width=\"1076.18\" height=\"165.548\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"3\" type=\"static_wall\" x=\"-29.1323\" y=\"29.1323\" width=\"82.8691\" height=\"841.169\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"6\" type=\"static_wall\" x=\"916.667\" y=\"408.333\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 608.333,183.333 550,525 258.333,558.333\"/>\n  </object>\n  <object id=\"7\" type=\"static_wall\" x=\"1005.8\" y=\"1144.26\" rotation=\"45.4021\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 316.667,141.667 375,683.333 16.6667,491.667\"/>\n  </object>\n  <object id=\"8\" type=\"static_wall\" x=\"6136\" y=\"468.333\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 700,-158.333 825,-8.33333 391.667,200\"/>\n  </object>\n  <object id=\"9\" type=\"static_wall\" x=\"4659\" y=\"2482.33\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 625,-700 883.333,-666.667 133.333,116.667\"/>\n  </object>\n  <object id=\"10\" type=\"static_wall\" x=\"2722.67\" y=\"334.33\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -150,391.667 250,383.333\"/>\n  </object>\n  <object id=\"13\" type=\"static_wall\" x=\"36.3636\" y=\"830.303\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"8,-144 103.636,974.424 -36.1212,821.333 -111.152,-47.8788\"/>\n  </object>\n  <object id=\"14\" type=\"static_wall\" x=\"118.732\" y=\"1649.52\" rotation=\"349.677\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"140.216,42.3427 53.4246,739.144 -459.651,706.36 -344.767,-159.41\"/>\n  </object>\n  <object id=\"15\" type=\"static_wall\" x=\"2057.94\" y=\"2805.09\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-52,-52 218.182,321.212 -21.2121,600\"/>\n  </object>\n  <object id=\"18\" type=\"static_wall\" x=\"-12\" y=\"2412\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-8,-136 628,696 138,924 -208,550\"/>\n  </object>\n  <object id=\"19\" type=\"static_wall\" x=\"1232\" y=\"3080\" width=\"2816\" height=\"336\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"20\" type=\"static_wall\" x=\"364\" y=\"3124\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-92,-24 792,-332 1160,100 -66,168\"/>\n  </object>\n  <object id=\"21\" type=\"static_wall\" x=\"6228\" y=\"3000\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-20,8 1108,300 144,304\"/>\n  </object>\n  <object id=\"22\" type=\"static_wall\" x=\"6744\" y=\"3160\" width=\"1100\" height=\"104\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"24\" type=\"static_wall\" x=\"8132\" y=\"2036\" width=\"128\" height=\"476\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"25\" type=\"static_wall\" x=\"8156\" y=\"2148\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -220,-388 -80,-628 124,-744 132,-76\"/>\n  </object>\n  <object id=\"31\" type=\"static_wall\" x=\"8184\" y=\"1464\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -228,-316 -144,-716 108,-708 84,8\"/>\n  </object>\n  <object id=\"32\" type=\"static_wall\" x=\"8152\" y=\"276\" width=\"112\" height=\"560\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"34\" type=\"static_wall\" x=\"8150.3\" y=\"323.152\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"44,46 -188,-232 120,-302\"/>\n  </object>\n  <object id=\"35\" type=\"static_wall\" x=\"7906.97\" y=\"-103.394\" width=\"484\" height=\"280\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"36\" type=\"static_wall\" x=\"7936.97\" y=\"64.6061\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -480,52 -616,-120 -12,-116\"/>\n  </object>\n  <object id=\"37\" type=\"static_wall\" x=\"7400.97\" y=\"-7.39394\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"48,44 -448,100 -656,-20 -114,-136\"/>\n  </object>\n  <object id=\"38\" type=\"static_wall\" x=\"6824.97\" y=\"-11.3939\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"108,50 -288,128 -244,-48 -24,-60\"/>\n  </object>\n  <object id=\"40\" type=\"static_wall\" x=\"1861.54\" y=\"210.547\" rotation=\"352.438\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-80,-24 -820,-208 -746,-648 204,-352\"/>\n  </object>\n  <object id=\"41\" type=\"static_wall\" x=\"3936.39\" y=\"475.138\" rotation=\"359.096\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -736,584 -800,960 176,184\"/>\n  </object>\n  <object id=\"42\" type=\"static_wall\" x=\"7400\" y=\"872\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -376,184 -88,536\"/>\n  </object>\n  <object id=\"43\" type=\"static_wall\" x=\"3689\" y=\"2298.55\" rotation=\"31.634\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-288,0 -312,304 -24,432 368,-200\"/>\n  </object>\n  <object id=\"44\" type=\"static_wall\" x=\"5120\" y=\"416\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 -304,160 136,208\"/>\n  </object>\n  <object id=\"45\" type=\"static_wall\" x=\"2216.55\" y=\"1587.87\" rotation=\"56.6345\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 488,-88 752,200 384,392 -176,312\"/>\n  </object>\n  <object id=\"46\" type=\"static_wall\" x=\"5680\" y=\"1208\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-16,-96 -256,144 64,424 328,320\"/>\n  </object>\n  <object id=\"47\" type=\"static_wall\" x=\"352\" y=\"-128\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 216,336 440,-16\"/>\n  </object>\n  <object id=\"52\" name=\"spawn_red\" type=\"entity_spawn\" x=\"462.667\" y=\"343.394\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"188.727\" y=\"473.576\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_red\" type=\"entity_spawn\" x=\"228\" y=\"672\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"55\" name=\"spawn_red\" type=\"entity_spawn\" x=\"708\" y=\"352\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"56\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"7364\" y=\"2980\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"57\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"7805.45\" y=\"2263.15\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"58\" name=\"Spawn_blue\" type=\"entity_spawn\" x=\"7642.55\" y=\"2437.94\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"6840\" y=\"2900\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"67\" type=\"static_wall\" x=\"8352.65\" y=\"2243.84\" width=\"627.618\" height=\"1531.4\" rotation=\"42.7742\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"61\" gid=\"1\" x=\"1020\" y=\"2476\" width=\"256\" height=\"256\"/>\n  <object id=\"62\" gid=\"1\" x=\"1276\" y=\"2220\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"63\" gid=\"1\" x=\"1532\" y=\"2476\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"64\" gid=\"1\" x=\"1276\" y=\"2732\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"65\" name=\"Point A\" type=\"entity_capture_point\" x=\"1275.67\" y=\"2477.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"68\" gid=\"1\" x=\"3844\" y=\"1560\" width=\"256\" height=\"256\"/>\n  <object id=\"69\" gid=\"1\" x=\"4100\" y=\"1304\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"70\" gid=\"1\" x=\"4356\" y=\"1560\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"71\" gid=\"1\" x=\"4100\" y=\"1816\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"72\" name=\"Point B\" type=\"entity_capture_point\" x=\"4099.67\" y=\"1561.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"73\" gid=\"1\" x=\"7416\" y=\"476\" width=\"256\" height=\"256\"/>\n  <object id=\"74\" gid=\"1\" x=\"7672\" y=\"220\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"75\" gid=\"1\" x=\"7928\" y=\"476\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"76\" gid=\"1\" x=\"7672\" y=\"732\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"77\" name=\"Point C\" type=\"entity_capture_point\" x=\"7671.67\" y=\"477.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"79\" type=\"static_wall\" x=\"4000\" y=\"3080\" width=\"2384\" height=\"336\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"80\" type=\"static_wall\" x=\"4014.19\" y=\"2866.3\" width=\"627.618\" height=\"634.456\" rotation=\"42.7742\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"81\" type=\"static_wall\" x=\"1448\" y=\"-279.528\" width=\"2816\" height=\"336\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"82\" type=\"static_wall\" x=\"4303.14\" y=\"-276.437\" width=\"2384\" height=\"336\" rotation=\"3.95215\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"83\" type=\"static_wall\" x=\"4230.19\" y=\"-493.228\" width=\"627.618\" height=\"634.456\" rotation=\"42.7742\">\n   <properties>\n    <property name=\"generateTexture\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"84\" name=\"spawn_red\" type=\"entity_spawn\" x=\"528\" y=\"540\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"85\" name=\"spawn_red\" type=\"entity_spawn\" x=\"448\" y=\"748\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"86\" name=\"spawn_red\" type=\"entity_spawn\" x=\"230\" y=\"912\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"87\" name=\"spawn_red\" type=\"entity_spawn\" x=\"788\" y=\"626\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"88\" name=\"spawn_red\" type=\"entity_spawn\" x=\"758\" y=\"880\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"89\" name=\"spawn_red\" type=\"entity_spawn\" x=\"474\" y=\"1006\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"90\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"7151.27\" y=\"2701.21\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"91\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"7268.48\" y=\"2329.82\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"92\" name=\"Spawn_blue\" type=\"entity_spawn\" x=\"7560.12\" y=\"2113.7\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"93\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"6936.36\" y=\"2306.06\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"94\" name=\"Spawn_blue\" type=\"entity_spawn\" x=\"6678.31\" y=\"2531.88\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"95\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"6360.61\" y=\"2772.73\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"96\" name=\"Turret\" type=\"turret\" x=\"7739.39\" y=\"2772.73\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"99\" name=\"Turret\" type=\"turret\" x=\"218.182\" y=\"260.606\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1200\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['battlements_conquest_water'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" backgroundcolor=\"#574215\" nextlayerid=\"20\" nextobjectid=\"755\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.2\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffb3a197\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"4096\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"4096\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"battlement_gun_z\" tilewidth=\"256\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_gun_z.png\" width=\"256\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"battlement_net_z\" tilewidth=\"512\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_net_z.png\" width=\"512\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"battlement_rangefinder_z\" tilewidth=\"64\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"battlement_rangefinder_z.png\" width=\"64\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"419\" gid=\"1\" x=\"0\" y=\"4096\" width=\"2048\" height=\"4096\"/>\n  <object id=\"420\" gid=\"1\" x=\"4096\" y=\"2.27374e-13\" width=\"2048\" height=\"4096\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"MapObjects\">\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3383.67\" y=\"640.666\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"697.605\" y=\"3469.36\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.49\" y=\"3954.46\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3827.39\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3687.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3555.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3432.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3804.65\" y=\"3804.56\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3904.07\" y=\"3963.49\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3555.62\" y=\"3795.43\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3663.43\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3815\" y=\"3564.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"271.337\" y=\"551.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"381.337\" y=\"639.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"302.667\" y=\"792.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"644.001\" y=\"428.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"370.97\" y=\"209.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"519.667\" y=\"559.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"254.667\" y=\"312.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"536.001\" y=\"312.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"696.97\" y=\"247.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"407.667\" y=\"441.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3359.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"704\" name=\"Turret\" type=\"turret\" x=\"4068\" y=\"3724\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"705\" name=\"Turret\" type=\"turret\" x=\"31.9091\" y=\"393.879\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"19\" name=\"Terrain\">\n  <object id=\"707\" type=\"static_terrain\" x=\"190\" y=\"979\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"19.5,65.5 65,-61.5 113,-122 178,-43 178,33 144.5,89.5 97.5,136.5\"/>\n  </object>\n  <object id=\"709\" type=\"static_terrain\" x=\"1198.97\" y=\"1332.79\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"-1.66667,26.3333 34,-15 106.333,-16 206.667,6.33333 262,27.6667 253.333,77.6667 213.333,110.667 120,114.667 47.3333,66.3333\"/>\n  </object>\n  <object id=\"712\" type=\"static_terrain\" x=\"1857.33\" y=\"918.667\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"6.66666,47.3333 42.5,9.83333 124.833,-6.83333 223.334,29.1667 297.167,54.5 273.166,97.5 187.833,148.667 107,164.167 24.5,108.833\"/>\n  </object>\n  <object id=\"713\" type=\"static_terrain\" x=\"1664.67\" y=\"565.333\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"172,58.5 199.833,49.8334 209.166,90.8337 203.166,140 165,116.167\"/>\n  </object>\n  <object id=\"714\" type=\"static_terrain\" x=\"1781.42\" y=\"-33.3186\" rotation=\"27.6525\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"172,58.5 199.833,49.8334 209.166,90.8337 203.166,140 165,116.167\"/>\n  </object>\n  <object id=\"715\" type=\"static_terrain\" x=\"1453.58\" y=\"3504.73\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"-3,61 46.1667,17.5 148,3.8333 223.833,53.8334 246.166,95.167 184.166,126.334 24.5,98.833\"/>\n  </object>\n  <object id=\"716\" type=\"static_terrain\" x=\"2075.45\" y=\"2795.03\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"151.333,57.8333 207.166,35.8334 223.833,102.167 207.833,139.333 173,125.5\"/>\n  </object>\n  <object id=\"746\" type=\"static_terrain\" x=\"3905.58\" y=\"3113.56\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"19.5,65.5 65,-61.5 113,-122 178,-43 178,33 144.5,89.5 97.5,136.5\"/>\n  </object>\n  <object id=\"747\" type=\"static_terrain\" x=\"2896.61\" y=\"2759.77\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"-1.66667,26.3333 34,-15 106.333,-16 206.667,6.33333 262,27.6667 253.333,77.6667 213.333,110.667 120,114.667 47.3333,66.3333\"/>\n  </object>\n  <object id=\"748\" type=\"static_terrain\" x=\"2238.25\" y=\"3173.89\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"6.66666,47.3333 42.5,9.83333 124.833,-6.83333 223.334,29.1667 297.167,54.5 273.166,97.5 187.833,148.667 107,164.167 24.5,108.833\"/>\n  </object>\n  <object id=\"749\" type=\"static_terrain\" x=\"2430.91\" y=\"3527.22\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"172,58.5 199.833,49.8334 209.166,90.8337 203.166,140 165,116.167\"/>\n  </object>\n  <object id=\"750\" type=\"static_terrain\" x=\"2314.16\" y=\"4125.87\" rotation=\"207.653\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"172,58.5 199.833,49.8334 209.166,90.8337 203.166,140 165,116.167\"/>\n  </object>\n  <object id=\"751\" type=\"static_terrain\" x=\"2642\" y=\"587.826\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"-3,61 46.1667,17.5 148,3.8333 223.833,53.8334 246.166,95.167 184.166,126.334 24.5,98.833\"/>\n  </object>\n  <object id=\"752\" type=\"static_terrain\" x=\"2020.13\" y=\"1297.53\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"151.333,57.8333 207.166,35.8334 223.833,102.167 207.833,139.333 173,125.5\"/>\n  </object>\n  <object id=\"753\" type=\"static_terrain\" x=\"1814.67\" y=\"2238.67\" rotation=\"180\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"172.666,45.1666 200.499,17.8334 208.5,119.5 201.833,174 182.333,142.167\"/>\n  </object>\n  <object id=\"754\" type=\"static_terrain\" x=\"2284.17\" y=\"1856.83\">\n   <properties>\n    <property name=\"terrainType\" value=\"water\"/>\n   </properties>\n   <polygon points=\"172.666,45.1666 200.499,17.8334 208.5,119.5 201.833,174 182.333,142.167\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"18\" name=\"Z_Objects\" locked=\"1\">\n  <object id=\"690\" gid=\"2\" x=\"3067.03\" y=\"264.253\" width=\"256\" height=\"128\" rotation=\"178.007\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"691\" gid=\"2\" x=\"1039.26\" y=\"3839.39\" width=\"256\" height=\"128\" rotation=\"353.113\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"692\" gid=\"3\" x=\"2534.01\" y=\"3698.89\" width=\"512\" height=\"256\" rotation=\"319.752\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"693\" gid=\"3\" x=\"1567.44\" y=\"2433.38\" width=\"512\" height=\"256\" rotation=\"137.389\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"694\" gid=\"3\" x=\"2542.28\" y=\"1647.63\" width=\"512\" height=\"256\" rotation=\"317.836\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"695\" gid=\"3\" x=\"1573.02\" y=\"397.659\" width=\"512\" height=\"256\" rotation=\"139.701\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"696\" gid=\"4\" x=\"827\" y=\"2810.71\" width=\"64\" height=\"256\" rotation=\"314.092\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"697\" gid=\"4\" x=\"969.249\" y=\"1179.19\" width=\"64\" height=\"256\" rotation=\"1.00297\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"698\" gid=\"4\" x=\"3270.64\" y=\"1285.82\" width=\"64\" height=\"256\" rotation=\"134.092\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"699\" gid=\"4\" x=\"3126.39\" y=\"2919.34\" width=\"64\" height=\"256\" rotation=\"181.003\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"435\" type=\"static_wall\" x=\"-13.4318\" y=\"11.397\" width=\"80\" height=\"263.412\" rotation=\"1.19819\"/>\n  <object id=\"436\" type=\"static_wall\" x=\"-11.9357\" y=\"976.275\" width=\"134.479\" height=\"260.293\" rotation=\"352.112\"/>\n  <object id=\"446\" type=\"static_wall\" x=\"486.184\" y=\"3978.51\" width=\"105.054\" height=\"150.889\" rotation=\"90.2996\"/>\n  <object id=\"447\" type=\"static_wall\" x=\"935.099\" y=\"3972.24\" width=\"99.9551\" height=\"107.485\" rotation=\"89.321\"/>\n  <object id=\"550\" type=\"static_wall\" x=\"431.038\" y=\"-28.9889\" width=\"80\" height=\"370.175\" rotation=\"89.0866\"/>\n  <object id=\"551\" type=\"static_wall\" x=\"400\" y=\"10\">\n   <polygon points=\"0,0 74,114 176,113.333 458,66 402.667,-70.6667 45.3333,-76.6667\"/>\n  </object>\n  <object id=\"552\" type=\"static_wall\" x=\"952.024\" y=\"-26.0898\" width=\"116.601\" height=\"198.289\" rotation=\"91.5217\"/>\n  <object id=\"553\" type=\"static_wall\" x=\"916.667\" y=\"-44\">\n   <polygon points=\"0,0 2.66667,81.3333 43.3333,167.333 198,169.333 220.667,0.666667\"/>\n  </object>\n  <object id=\"554\" type=\"static_wall\" x=\"1065\" y=\"109\">\n   <polygon points=\"0,0 224,77 532,-21 527,-142 242,-209 3,-150\"/>\n  </object>\n  <object id=\"555\" type=\"static_wall\" x=\"1850.67\" y=\"26.6667\">\n   <polygon points=\"0,0 -129.333,138.667 -218.667,162 -302.667,11.3333 -302.667,-134 2,-134.667\"/>\n  </object>\n  <object id=\"556\" type=\"static_wall\" x=\"2011.69\" y=\"-77.3297\" width=\"135.559\" height=\"204.397\" rotation=\"89.0866\"/>\n  <object id=\"557\" type=\"static_wall\" x=\"1995.5\" y=\"2.5\">\n   <polygon points=\"0,0 4,124.5 23.5,153 104,147.5 87.5,-72 2,-65.5\"/>\n  </object>\n  <object id=\"558\" type=\"static_wall\" x=\"897.667\" y=\"216\">\n   <polygon points=\"0,0 -25,15.3333 -11.6667,40.6667 47.6667,82 84.6667,64\"/>\n  </object>\n  <object id=\"559\" type=\"static_wall\" x=\"915.993\" y=\"273.673\">\n   <polygon points=\"0,0 -1.66667,79.6667 42.6667,97.3333 66.3333,6.33333\"/>\n  </object>\n  <object id=\"560\" type=\"static_wall\" x=\"1604.35\" y=\"-82.9654\" width=\"205.069\" height=\"139.419\" rotation=\"89.9176\"/>\n  <object id=\"561\" type=\"static_wall\" x=\"52.6667\" y=\"226.667\">\n   <polygon points=\"0,0 110.667,115.333 132.667,201.333 74,238 -131.333,238.667 -128.667,60\"/>\n  </object>\n  <object id=\"562\" type=\"static_wall\" x=\"6.39841\" y=\"448.869\" width=\"121.257\" height=\"138.039\" rotation=\"1.19819\"/>\n  <object id=\"563\" type=\"static_wall\" x=\"118\" y=\"568.667\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"564\" type=\"static_wall\" x=\"108.909\" y=\"2622.89\" rotation=\"359.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"565\" type=\"static_wall\" x=\"455.984\" y=\"3981.53\" rotation=\"269.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"566\" type=\"static_wall\" x=\"886.167\" y=\"3979.5\" rotation=\"269.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"567\" type=\"static_wall\" x=\"1298.27\" y=\"3936.49\" width=\"102.244\" height=\"137.9\" rotation=\"87.0027\"/>\n  <object id=\"568\" type=\"static_wall\" x=\"1269\" y=\"3943\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"569\" type=\"static_wall\" x=\"1102.67\" y=\"3650.67\">\n   <polygon points=\"0,0 -200.667,107.333 -116,243.333 126,138.667 94,71.3333\"/>\n  </object>\n  <object id=\"570\" type=\"static_wall\" x=\"1128.67\" y=\"3722.67\">\n   <polygon points=\"0,0 89.3333,0 127.333,97.3333 54,164 -66.6667,103.333\"/>\n  </object>\n  <object id=\"571\" type=\"static_wall\" x=\"-10.8201\" y=\"3116.93\" rotation=\"58.3653\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"573\" type=\"static_wall\" x=\"141.333\" y=\"1172\">\n   <polygon points=\"0,0 128,91.3333 244,325.333 166.667,402.667 -45.3333,410 -112.667,46\"/>\n  </object>\n  <object id=\"574\" type=\"static_wall\" x=\"323.333\" y=\"1538\">\n   <polygon points=\"0,0 37.3333,159.333 -10.6667,455.333 -278,314.667 -204.667,76.6667\"/>\n  </object>\n  <object id=\"575\" type=\"static_wall\" x=\"311.333\" y=\"1928\">\n   <polygon points=\"0,0 12,75.3333 -58,142.667 -298,200.667 -305.333,-34.6667 -140.667,-79.3333\"/>\n  </object>\n  <object id=\"576\" type=\"static_wall\" x=\"-71.4592\" y=\"2089.25\" width=\"134.479\" height=\"232.985\" rotation=\"0.678364\"/>\n  <object id=\"577\" type=\"static_wall\" x=\"52\" y=\"2275\">\n   <polygon points=\"0,0 113,118 134.5,201.5 43.5,256 -90,159.5\"/>\n  </object>\n  <object id=\"578\" type=\"static_wall\" x=\"8.85853\" y=\"2502.69\" width=\"111.788\" height=\"156.801\" rotation=\"0.678364\"/>\n  <object id=\"579\" type=\"static_wall\" x=\"2.106\" y=\"2946.6\" width=\"111.788\" height=\"156.801\" rotation=\"0.678364\"/>\n  <object id=\"580\" type=\"static_wall\" x=\"1.67542\" y=\"3072.89\" width=\"111.788\" height=\"202.243\" rotation=\"351.065\"/>\n  <object id=\"581\" type=\"static_wall\" x=\"322\" y=\"3585\">\n   <polygon points=\"0,0 39,160 -3,399 -166,400 -249,158 -212,-8\"/>\n  </object>\n  <object id=\"582\" type=\"static_wall\" x=\"404.051\" y=\"4015.46\" width=\"105.054\" height=\"150.889\" rotation=\"131.576\"/>\n  <object id=\"583\" type=\"static_wall\" x=\"1549.5\" y=\"380.5\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"584\" type=\"static_wall\" x=\"1621\" y=\"637.5\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"585\" type=\"static_wall\" x=\"1645\" y=\"636.5\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"586\" type=\"static_wall\" x=\"1257\" y=\"607\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"587\" type=\"static_wall\" x=\"1263.52\" y=\"702.511\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"588\" type=\"static_wall\" x=\"1384.03\" y=\"933.015\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n  <object id=\"589\" type=\"static_wall\" x=\"2547.08\" y=\"1667.35\" rotation=\"180\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"590\" type=\"static_wall\" x=\"2475.58\" y=\"1410.35\" rotation=\"180\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"591\" type=\"static_wall\" x=\"2451.58\" y=\"1411.35\" rotation=\"180\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"592\" type=\"static_wall\" x=\"2839.58\" y=\"1440.85\" rotation=\"180\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"593\" type=\"static_wall\" x=\"2833.06\" y=\"1345.34\" rotation=\"180\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"594\" type=\"static_wall\" x=\"2712.55\" y=\"1114.83\" rotation=\"180\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n  <object id=\"595\" type=\"static_wall\" x=\"1549.62\" y=\"2428.45\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"596\" type=\"static_wall\" x=\"1621.12\" y=\"2685.45\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"597\" type=\"static_wall\" x=\"1645.12\" y=\"2684.45\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"598\" type=\"static_wall\" x=\"1257.12\" y=\"2654.95\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"599\" type=\"static_wall\" x=\"1263.64\" y=\"2750.46\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"600\" type=\"static_wall\" x=\"1384.15\" y=\"2980.97\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n  <object id=\"601\" type=\"static_wall\" x=\"845.333\" y=\"936.667\">\n   <polygon points=\"0,0 96.3333,-20.3333 144.667,58 140,142.667 33.3333,112.333 -11.3333,39.6667\"/>\n  </object>\n  <object id=\"602\" type=\"static_wall\" x=\"978\" y=\"979.667\">\n   <polygon points=\"0,0 85.6667,28 84.6667,112 -21.3333,153.667 -102.333,98.6667 -100.667,18\"/>\n  </object>\n  <object id=\"603\" type=\"static_wall\" x=\"879\" y=\"1061\">\n   <polygon points=\"0,0 -132,204 -119,247.5 -24.5,263.5 84,92.5 90,50.5\"/>\n  </object>\n  <object id=\"604\" type=\"static_wall\" x=\"1493.67\" y=\"1189.33\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"605\" type=\"static_wall\" x=\"1624\" y=\"1327.67\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"606\" type=\"static_wall\" x=\"2602.33\" y=\"857.917\" rotation=\"180\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"607\" type=\"static_wall\" x=\"2472\" y=\"719.577\" rotation=\"180\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"608\" type=\"static_wall\" x=\"2601.53\" y=\"2905.01\" rotation=\"180\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"609\" type=\"static_wall\" x=\"2471.2\" y=\"2766.67\" rotation=\"180\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"610\" type=\"static_wall\" x=\"676.75\" y=\"1768\">\n   <polygon points=\"0,0 25.75,49.25 170.25,-11.25 148,-62.25\"/>\n  </object>\n  <object id=\"612\" type=\"static_wall\" x=\"1450.67\" y=\"1968\">\n   <polygon points=\"0,0 -160,64.6667 -177,106.333 -137.333,121 24,57.3333\"/>\n  </object>\n  <object id=\"613\" type=\"static_wall\" x=\"1036.33\" y=\"2140.33\">\n   <polygon points=\"0,0 23.3333,54.6667 183.667,-8 201.333,-51 154,-68.3333\"/>\n  </object>\n  <object id=\"614\" type=\"static_wall\" x=\"1566\" y=\"1715.67\">\n   <polygon points=\"0,0 -21.6667,40 48.6667,223 140.667,189.333 170.333,44.3333\"/>\n  </object>\n  <object id=\"615\" type=\"static_wall\" x=\"1569\" y=\"1717.67\">\n   <polygon points=\"0,0 214.333,18.6667 204.333,67.3333 100.667,144.333\"/>\n  </object>\n  <object id=\"616\" type=\"static_wall\" x=\"1731.84\" y=\"1755.32\" width=\"43.2232\" height=\"101.985\" rotation=\"37.1057\"/>\n  <object id=\"621\" type=\"static_wall\" x=\"1955.09\" y=\"1624.36\">\n   <polygon points=\"0,0 50.3636,-17.2727 95.8182,-20.7273 148.545,-15.6364 181.818,-3.63636 190.727,11.6364 182.545,44.1818 166.182,50.7273\"/>\n  </object>\n  <object id=\"622\" type=\"static_wall\" x=\"2053.38\" y=\"1604.75\">\n   <polygon points=\"0,0 -49.375,-0.875 -98.5,15.375 -103.625,26.875 -92.5,65.875 -77,72.5 18.375,41.125\"/>\n  </object>\n  <object id=\"623\" type=\"static_wall\" x=\"2084.54\" y=\"1634.71\" width=\"27.6954\" height=\"68.7602\" rotation=\"89.1829\"/>\n  <object id=\"624\" type=\"static_wall\" x=\"3419.11\" y=\"2327.62\" rotation=\"180\">\n   <polygon points=\"0,0 25.75,49.25 170.25,-11.25 148,-62.25\"/>\n  </object>\n  <object id=\"625\" type=\"static_wall\" x=\"2645.19\" y=\"2127.62\" rotation=\"180\">\n   <polygon points=\"0,0 -160,64.6667 -177,106.333 -137.333,121 24,57.3333\"/>\n  </object>\n  <object id=\"626\" type=\"static_wall\" x=\"3059.53\" y=\"1955.29\" rotation=\"180\">\n   <polygon points=\"0,0 23.3333,54.6667 183.667,-8 201.333,-51 154,-68.3333\"/>\n  </object>\n  <object id=\"627\" type=\"static_wall\" x=\"2529.86\" y=\"2379.95\" rotation=\"180\">\n   <polygon points=\"0,0 -21.6667,40 48.6667,223 140.667,189.333 170.333,44.3333\"/>\n  </object>\n  <object id=\"628\" type=\"static_wall\" x=\"2526.86\" y=\"2377.95\" rotation=\"180\">\n   <polygon points=\"0,0 214.333,18.6667 204.333,67.3333 100.667,144.333\"/>\n  </object>\n  <object id=\"629\" type=\"static_wall\" x=\"2364.02\" y=\"2340.3\" width=\"43.2232\" height=\"101.985\" rotation=\"217.106\"/>\n  <object id=\"630\" type=\"static_wall\" x=\"2140.77\" y=\"2471.26\" rotation=\"180\">\n   <polygon points=\"0,0 50.3636,-17.2727 95.8182,-20.7273 148.545,-15.6364 181.818,-3.63636 190.727,11.6364 182.545,44.1818 166.182,50.7273\"/>\n  </object>\n  <object id=\"631\" type=\"static_wall\" x=\"2042.48\" y=\"2490.87\" rotation=\"180\">\n   <polygon points=\"0,0 -49.375,-0.875 -98.5,15.375 -103.625,26.875 -92.5,65.875 -77,72.5 18.375,41.125\"/>\n  </object>\n  <object id=\"632\" type=\"static_wall\" x=\"2011.32\" y=\"2460.91\" width=\"27.6954\" height=\"68.7602\" rotation=\"269.183\"/>\n  <object id=\"633\" type=\"static_wall\" x=\"599\" y=\"2651.33\">\n   <polygon points=\"0,0 163.333,44.6667 128.667,153 -32,119.667 -54,82\"/>\n  </object>\n  <object id=\"634\" type=\"static_wall\" x=\"664.667\" y=\"2785.33\">\n   <polygon points=\"0,0 23.6667,104.667 59.6667,126.333 138.333,71.6667 109.333,-31\"/>\n  </object>\n  <object id=\"635\" type=\"static_wall\" x=\"668.333\" y=\"2678.33\">\n   <polygon points=\"0,0 100.333,-48.3333 158,6.66667 100.667,125.333\"/>\n  </object>\n  <object id=\"636\" type=\"static_wall\" x=\"3494.02\" y=\"1447.44\" rotation=\"180.811\">\n   <polygon points=\"0,0 163.333,44.6667 128.667,153 -32,119.667 -54,82\"/>\n  </object>\n  <object id=\"637\" type=\"static_wall\" x=\"3430.25\" y=\"1312.52\" rotation=\"180.811\">\n   <polygon points=\"0,0 23.6667,104.667 59.6667,126.333 138.333,71.6667 109.333,-31\"/>\n  </object>\n  <object id=\"638\" type=\"static_wall\" x=\"3425.07\" y=\"1419.46\" rotation=\"180.811\">\n   <polygon points=\"0,0 100.333,-48.3333 158,6.66667 100.667,125.333\"/>\n  </object>\n  <object id=\"639\" type=\"static_wall\" x=\"1496.9\" y=\"3237.95\" rotation=\"0.665703\">\n   <polygon points=\"0,0 -47,52.3333 -26.6667,98.3333 102.667,110.667 114.667,61 60.3333,1.33333\"/>\n  </object>\n  <object id=\"640\" type=\"static_wall\" x=\"1625.61\" y=\"3377.8\" rotation=\"0.665703\">\n   <polygon points=\"0,0 9.66667,125 20,139.333 58.6667,151 108.333,101.333 107.333,42 45.3333,-12.3333\"/>\n  </object>\n  <object id=\"641\" type=\"static_wall\" x=\"3251.33\" y=\"3161.67\" rotation=\"180\">\n   <polygon points=\"0,0 96.3333,-20.3333 144.667,58 140,142.667 33.3333,112.333 -11.3333,39.6667\"/>\n  </object>\n  <object id=\"642\" type=\"static_wall\" x=\"3118.67\" y=\"3118.67\" rotation=\"180\">\n   <polygon points=\"0,0 85.6667,28 84.6667,112 -21.3333,153.667 -102.333,98.6667 -100.667,18\"/>\n  </object>\n  <object id=\"643\" type=\"static_wall\" x=\"3217.67\" y=\"3037.33\" rotation=\"180\">\n   <polygon points=\"0,0 -132,204 -119,247.5 -24.5,263.5 84,92.5 90,50.5\"/>\n  </object>\n  <object id=\"644\" type=\"static_wall\" x=\"3199.84\" y=\"3881.88\" rotation=\"180\">\n   <polygon points=\"0,0 -25,15.3333 -11.6667,40.6667 47.6667,82 84.6667,64\"/>\n  </object>\n  <object id=\"645\" type=\"static_wall\" x=\"3181.51\" y=\"3824.21\" rotation=\"180\">\n   <polygon points=\"0,0 -1.66667,79.6667 42.6667,97.3333 66.3333,6.33333\"/>\n  </object>\n  <object id=\"646\" type=\"static_wall\" x=\"2083.73\" y=\"3952.99\" width=\"105.054\" height=\"150.889\" rotation=\"94.6805\"/>\n  <object id=\"647\" type=\"static_wall\" x=\"2018.45\" y=\"3951.94\" width=\"105.054\" height=\"184.114\" rotation=\"105.131\"/>\n  <object id=\"648\" type=\"static_wall\" x=\"4109.65\" y=\"4083.62\" width=\"80\" height=\"263.412\" rotation=\"181.198\"/>\n  <object id=\"649\" type=\"static_wall\" x=\"4108.16\" y=\"3118.74\" width=\"134.479\" height=\"260.293\" rotation=\"172.112\"/>\n  <object id=\"650\" type=\"static_wall\" x=\"3610.04\" y=\"116.504\" width=\"105.054\" height=\"150.889\" rotation=\"270.3\"/>\n  <object id=\"651\" type=\"static_wall\" x=\"3161.12\" y=\"122.774\" width=\"99.9551\" height=\"107.485\" rotation=\"269.321\"/>\n  <object id=\"652\" type=\"static_wall\" x=\"3665.18\" y=\"4124\" width=\"80\" height=\"370.175\" rotation=\"269.087\"/>\n  <object id=\"653\" type=\"static_wall\" x=\"3696.22\" y=\"4085.01\" rotation=\"180\">\n   <polygon points=\"0,0 74,114 176,113.333 458,66 402.667,-70.6667 45.3333,-76.6667\"/>\n  </object>\n  <object id=\"654\" type=\"static_wall\" x=\"3144.2\" y=\"4121.1\" width=\"116.601\" height=\"198.289\" rotation=\"271.522\"/>\n  <object id=\"655\" type=\"static_wall\" x=\"3179.55\" y=\"4139.01\" rotation=\"180\">\n   <polygon points=\"0,0 2.66667,81.3333 43.3333,167.333 198,169.333 220.667,0.666667\"/>\n  </object>\n  <object id=\"656\" type=\"static_wall\" x=\"3031.22\" y=\"3986.01\" rotation=\"180\">\n   <polygon points=\"0,0 224,77 532,-21 527,-142 242,-209 3,-150\"/>\n  </object>\n  <object id=\"657\" type=\"static_wall\" x=\"2245.55\" y=\"4068.35\" rotation=\"180\">\n   <polygon points=\"0,0 -129.333,138.667 -218.667,162 -302.667,11.3333 -302.667,-134 2,-134.667\"/>\n  </object>\n  <object id=\"658\" type=\"static_wall\" x=\"2084.53\" y=\"4172.34\" width=\"135.559\" height=\"204.397\" rotation=\"269.087\"/>\n  <object id=\"659\" type=\"static_wall\" x=\"2100.72\" y=\"4092.51\" rotation=\"180\">\n   <polygon points=\"0,0 4,124.5 23.5,153 104,147.5 87.5,-72 2,-65.5\"/>\n  </object>\n  <object id=\"660\" type=\"static_wall\" x=\"2491.87\" y=\"4177.98\" width=\"205.069\" height=\"139.419\" rotation=\"269.918\"/>\n  <object id=\"661\" type=\"static_wall\" x=\"4043.55\" y=\"3868.35\" rotation=\"180\">\n   <polygon points=\"0,0 110.667,115.333 132.667,201.333 74,238 -131.333,238.667 -128.667,60\"/>\n  </object>\n  <object id=\"662\" type=\"static_wall\" x=\"4089.82\" y=\"3646.14\" width=\"121.257\" height=\"138.039\" rotation=\"181.198\"/>\n  <object id=\"663\" type=\"static_wall\" x=\"3978.22\" y=\"3526.35\" rotation=\"180\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"664\" type=\"static_wall\" x=\"3987.31\" y=\"1472.12\" rotation=\"179.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"665\" type=\"static_wall\" x=\"3640.24\" y=\"113.484\" rotation=\"89.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"666\" type=\"static_wall\" x=\"3210.05\" y=\"115.514\" rotation=\"89.31\">\n   <polygon points=\"0,0 60,202 -4.66667,409.333 -118,410 -135.333,206 -113.333,-8\"/>\n  </object>\n  <object id=\"667\" type=\"static_wall\" x=\"2797.95\" y=\"158.524\" width=\"102.244\" height=\"137.9\" rotation=\"267.003\"/>\n  <object id=\"668\" type=\"static_wall\" x=\"2827.22\" y=\"152.014\" rotation=\"180\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"669\" type=\"static_wall\" x=\"2993.55\" y=\"444.344\" rotation=\"180\">\n   <polygon points=\"0,0 -200.667,107.333 -116,243.333 126,138.667 94,71.3333\"/>\n  </object>\n  <object id=\"670\" type=\"static_wall\" x=\"2967.55\" y=\"372.344\" rotation=\"180\">\n   <polygon points=\"0,0 89.3333,0 127.333,97.3333 54,164 -66.6667,103.333\"/>\n  </object>\n  <object id=\"671\" type=\"static_wall\" x=\"4107.04\" y=\"978.084\" rotation=\"238.365\">\n   <polygon points=\"0,0 324.5,-138 579,-112 593,29 362,134 -4,117\"/>\n  </object>\n  <object id=\"672\" type=\"static_wall\" x=\"3954.89\" y=\"2923.01\" rotation=\"180\">\n   <polygon points=\"0,0 128,91.3333 244,325.333 166.667,402.667 -45.3333,410 -112.667,46\"/>\n  </object>\n  <object id=\"673\" type=\"static_wall\" x=\"3772.89\" y=\"2557.01\" rotation=\"180\">\n   <polygon points=\"0,0 37.3333,159.333 -10.6667,455.333 -278,314.667 -204.667,76.6667\"/>\n  </object>\n  <object id=\"674\" type=\"static_wall\" x=\"3784.89\" y=\"2167.01\" rotation=\"180\">\n   <polygon points=\"0,0 12,75.3333 -58,142.667 -298,200.667 -305.333,-34.6667 -140.667,-79.3333\"/>\n  </object>\n  <object id=\"675\" type=\"static_wall\" x=\"4167.68\" y=\"2005.76\" width=\"134.479\" height=\"232.985\" rotation=\"180.678\"/>\n  <object id=\"676\" type=\"static_wall\" x=\"4044.22\" y=\"1820.01\" rotation=\"180\">\n   <polygon points=\"0,0 113,118 134.5,201.5 43.5,256 -90,159.5\"/>\n  </object>\n  <object id=\"677\" type=\"static_wall\" x=\"4087.36\" y=\"1592.32\" width=\"111.788\" height=\"156.801\" rotation=\"180.678\"/>\n  <object id=\"678\" type=\"static_wall\" x=\"4094.12\" y=\"1148.41\" width=\"111.788\" height=\"156.801\" rotation=\"180.678\"/>\n  <object id=\"679\" type=\"static_wall\" x=\"4094.55\" y=\"1022.12\" width=\"111.788\" height=\"202.243\" rotation=\"171.065\"/>\n  <object id=\"680\" type=\"static_wall\" x=\"3774.22\" y=\"510.014\" rotation=\"180\">\n   <polygon points=\"0,0 39,160 -3,399 -166,400 -249,158 -212,-8\"/>\n  </object>\n  <object id=\"681\" type=\"static_wall\" x=\"3692.17\" y=\"79.5537\" width=\"105.054\" height=\"150.889\" rotation=\"311.576\"/>\n  <object id=\"682\" type=\"static_wall\" x=\"2012.49\" y=\"142.024\" width=\"105.054\" height=\"150.889\" rotation=\"274.68\"/>\n  <object id=\"683\" type=\"static_wall\" x=\"2077.77\" y=\"143.074\" width=\"105.054\" height=\"184.114\" rotation=\"285.131\"/>\n  <object id=\"684\" type=\"static_wall\" x=\"2547.29\" y=\"3715.82\" rotation=\"180\">\n   <polygon points=\"0,0 32.5,30.5 -3,108.5 -83.5,95 -96.5,60.5\"/>\n  </object>\n  <object id=\"685\" type=\"static_wall\" x=\"2475.79\" y=\"3458.82\" rotation=\"180\">\n   <polygon points=\"0,0 48.5,-48.5 95.5,-76 128,-12.5 35.5,65.5\"/>\n  </object>\n  <object id=\"686\" type=\"static_wall\" x=\"2451.79\" y=\"3459.82\" rotation=\"180\">\n   <polygon points=\"0,0 -1,-61 69,-74.5 82.5,-24.5\"/>\n  </object>\n  <object id=\"687\" type=\"static_wall\" x=\"2839.79\" y=\"3489.32\" rotation=\"180\">\n   <polygon points=\"0,0 29.5,8.5 51.5,40.5 -4,116 -62,94\"/>\n  </object>\n  <object id=\"688\" type=\"static_wall\" x=\"2833.27\" y=\"3393.81\" rotation=\"180\">\n   <polygon points=\"0,0 117.5,145.5 120.5,230.5 -12.5,138 -68.5,-1.5\"/>\n  </object>\n  <object id=\"689\" type=\"static_wall\" x=\"2712.76\" y=\"3163.3\" rotation=\"180\">\n   <polygon points=\"0,0 90.1818,-40.9091 91.2727,-89.4545 29.2727,-101.273 -36.9091,-67.2727\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['snowfall_ice'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"16\" height=\"16\" tilewidth=\"256\" tileheight=\"256\" infinite=\"0\" nextlayerid=\"26\" nextobjectid=\"591\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.3\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ff5d91b2\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"controlpoint\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"controlpoint.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"snowmap_block1\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block1.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"snowmap_block2\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block2.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"snowmap_block3\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block3.png\" width=\"128\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"5\" name=\"snowmap_block4\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block4.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"snowmap_block5\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"snowmap_block5.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"7\" name=\"BG\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"2048\" height=\"2048\" source=\"bg.jpg\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"11\" name=\"Background\" locked=\"1\">\n  <object id=\"565\" gid=\"7\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"566\" gid=\"7\" x=\"2048\" y=\"0\" width=\"2048\" height=\"2048\" rotation=\"90\"/>\n  <object id=\"567\" gid=\"7\" x=\"4096\" y=\"2048\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n  <object id=\"568\" gid=\"7\" x=\"2048\" y=\"4096\" width=\"2048\" height=\"2048\" rotation=\"270\"/>\n </objectgroup>\n <objectgroup id=\"23\" name=\"MapObjects\">\n  <object id=\"496\" gid=\"1\" x=\"3032.28\" y=\"739.25\" width=\"256\" height=\"256\"/>\n  <object id=\"497\" gid=\"1\" x=\"3288.28\" y=\"483.25\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"498\" gid=\"1\" x=\"3544.28\" y=\"739.25\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"499\" gid=\"1\" x=\"3288.28\" y=\"995.248\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"500\" gid=\"1\" x=\"552.013\" y=\"3329.58\" width=\"256\" height=\"256\"/>\n  <object id=\"501\" gid=\"1\" x=\"808.013\" y=\"3073.58\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"502\" gid=\"1\" x=\"1064.01\" y=\"3329.58\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"503\" gid=\"1\" x=\"808.013\" y=\"3585.58\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"515\" gid=\"6\" x=\"1452.57\" y=\"2820.27\" width=\"256\" height=\"256\" rotation=\"289.963\"/>\n  <object id=\"510\" gid=\"6\" x=\"575.888\" y=\"2514.45\" width=\"256\" height=\"256\" rotation=\"17.1905\"/>\n  <object id=\"513\" type=\"static_wall\" x=\"768.406\" y=\"2322.17\" rotation=\"17.1905\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"514\" type=\"static_wall\" x=\"1717.32\" y=\"3348.14\" rotation=\"86.1451\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"511\" type=\"static_wall\" x=\"1270.25\" y=\"2615.81\" rotation=\"290.251\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"516\" gid=\"6\" x=\"1467.6\" y=\"3235.65\" width=\"256\" height=\"256\" rotation=\"86.0373\"/>\n  <object id=\"517\" gid=\"6\" x=\"2669.53\" y=\"1284.76\" width=\"256\" height=\"256\" rotation=\"109.963\"/>\n  <object id=\"518\" gid=\"6\" x=\"3518.94\" y=\"1575.42\" width=\"256\" height=\"256\" rotation=\"197.19\"/>\n  <object id=\"519\" type=\"static_wall\" x=\"3326.42\" y=\"1767.7\" rotation=\"197.19\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"520\" type=\"static_wall\" x=\"2377.5\" y=\"741.734\" rotation=\"266.145\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"521\" type=\"static_wall\" x=\"2851.85\" y=\"1489.22\" rotation=\"110.251\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"522\" gid=\"6\" x=\"2627.22\" y=\"854.224\" width=\"256\" height=\"256\" rotation=\"266.037\"/>\n  <object id=\"525\" gid=\"5\" x=\"655.485\" y=\"3719.7\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"526\" type=\"static_wall\" x=\"573.485\" y=\"3709.03\" rotation=\"270\">\n   <polygon points=\"0,0 18.6667,67.3333 43.3333,63.3333 111.333,-50.6667 100,-124.667 62.6667,-106\"/>\n  </object>\n  <object id=\"527\" type=\"static_wall\" x=\"468.155\" y=\"3648.36\" rotation=\"270\">\n   <polygon points=\"0,0 106,-60.6667 168.667,-46 170,-16 48,55.3333 -8,47.3333\"/>\n  </object>\n  <object id=\"528\" gid=\"5\" x=\"3761.51\" y=\"759.174\" width=\"256\" height=\"256\" rotation=\"320.44\"/>\n  <object id=\"529\" type=\"static_wall\" x=\"3717.51\" y=\"689.16\" rotation=\"320.44\">\n   <polygon points=\"0,0 18.6667,67.3333 43.3333,63.3333 111.333,-50.6667 100,-124.667 62.6667,-106\"/>\n  </object>\n  <object id=\"530\" type=\"static_wall\" x=\"3697.2\" y=\"569.315\" rotation=\"320.44\">\n   <polygon points=\"0,0 106,-60.6667 168.667,-46 170,-16 48,55.3333 -8,47.3333\"/>\n  </object>\n  <object id=\"531\" gid=\"5\" x=\"3701\" y=\"284.753\" width=\"256\" height=\"256\" rotation=\"225.76\"/>\n  <object id=\"532\" type=\"static_wall\" x=\"3634.81\" y=\"334.31\" rotation=\"225.76\">\n   <polygon points=\"0,0 18.6667,67.3333 43.3333,63.3333 111.333,-50.6667 100,-124.667 62.6667,-106\"/>\n  </object>\n  <object id=\"533\" type=\"static_wall\" x=\"3517.02\" y=\"364.33\" rotation=\"225.76\">\n   <polygon points=\"0,0 106,-60.6667 168.667,-46 170,-16 48,55.3333 -8,47.3333\"/>\n  </object>\n  <object id=\"538\" gid=\"3\" x=\"611.859\" y=\"960.651\" width=\"256\" height=\"512\" rotation=\"45.3917\"/>\n  <object id=\"539\" type=\"static_wall\" x=\"928.716\" y=\"675.254\" rotation=\"45.3917\">\n   <polygon points=\"0,0 163.333,-82 214,-11.3333 214.667,350 166.667,422.667 -1.33333,338\"/>\n  </object>\n  <object id=\"542\" gid=\"2\" x=\"712.778\" y=\"1680.13\" width=\"256\" height=\"512\" rotation=\"305.521\"/>\n  <object id=\"543\" type=\"static_wall\" x=\"430.569\" y=\"1416.83\" width=\"162\" height=\"276.333\" rotation=\"305.521\"/>\n  <object id=\"544\" gid=\"4\" x=\"1502.1\" y=\"515.79\" width=\"128\" height=\"256\" rotation=\"135.572\"/>\n  <object id=\"545\" type=\"static_wall\" x=\"1495\" y=\"550.667\">\n   <polygon points=\"0,0 -49.6667,47.3333 101.333,202.667 151.667,153.667\"/>\n  </object>\n  <object id=\"552\" gid=\"3\" x=\"3539.78\" y=\"3123.32\" width=\"256\" height=\"512\" rotation=\"228.311\"/>\n  <object id=\"553\" type=\"static_wall\" x=\"3208.8\" y=\"3392.21\" rotation=\"228.311\">\n   <polygon points=\"0,0 163.333,-82 214,-11.3333 214.667,350 166.667,422.667 -1.33333,338\"/>\n  </object>\n  <object id=\"554\" gid=\"2\" x=\"3303.63\" y=\"2323.64\" width=\"256\" height=\"512\" rotation=\"128.44\"/>\n  <object id=\"555\" type=\"static_wall\" x=\"3572.07\" y=\"2600.97\" width=\"162\" height=\"276.333\" rotation=\"128.44\"/>\n  <object id=\"556\" gid=\"4\" x=\"2628.04\" y=\"3522.27\" width=\"128\" height=\"256\" rotation=\"318.491\"/>\n  <object id=\"557\" type=\"static_wall\" x=\"2636.9\" y=\"3487.8\" rotation=\"182.919\">\n   <polygon points=\"0,0 -49.6667,47.3333 101.333,202.667 151.667,153.667\"/>\n  </object>\n  <object id=\"560\" name=\"Autoturret_red\" type=\"turret\" x=\"373.667\" y=\"358\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"range\" type=\"int\" value=\"800\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"561\" name=\"Autoturret_blue\" type=\"turret\" x=\"3837.39\" y=\"3847.73\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"range\" type=\"int\" value=\"800\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"41\" name=\"flag_red\" type=\"entity_flag\" x=\"3287\" y=\"742.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"42\" name=\"flag_blue\" type=\"entity_flag\" x=\"807.938\" y=\"3331.03\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"16\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3839.49\" y=\"3343.13\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"17\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3320.91\" y=\"3862.06\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"54\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3448.46\" y=\"3722\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"586\" gid=\"1\" x=\"1792.33\" y=\"2047.33\" width=\"256\" height=\"256\"/>\n  <object id=\"587\" gid=\"1\" x=\"2048.33\" y=\"1791.33\" width=\"256\" height=\"256\" rotation=\"90\"/>\n  <object id=\"588\" gid=\"1\" x=\"2304.33\" y=\"2047.33\" width=\"256\" height=\"256\" rotation=\"180\"/>\n  <object id=\"589\" gid=\"1\" x=\"2048.33\" y=\"2303.33\" width=\"256\" height=\"256\" rotation=\"270\"/>\n  <object id=\"293\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3584\" y=\"3590\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"18\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3703.84\" y=\"3466.9\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"294\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3901.65\" y=\"3497.23\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"295\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3467.07\" y=\"3943.16\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"296\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3592.62\" y=\"3828.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"297\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3691.16\" y=\"3698.1\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"298\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3836\" y=\"3626\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"-45\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"299\" name=\"spawn_red\" type=\"entity_spawn\" x=\"307.337\" y=\"637.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"12\" name=\"spawn_red\" type=\"entity_spawn\" x=\"425.337\" y=\"753.663\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"15\" name=\"spawn_red\" type=\"entity_spawn\" x=\"298.667\" y=\"888.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"19\" name=\"spawn_red\" type=\"entity_spawn\" x=\"678.001\" y=\"512.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"53\" name=\"spawn_red\" type=\"entity_spawn\" x=\"810.97\" y=\"385.67\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"292\" name=\"spawn_red\" type=\"entity_spawn\" x=\"555.667\" y=\"639.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"300\" name=\"spawn_red\" type=\"entity_spawn\" x=\"229.667\" y=\"747.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"301\" name=\"spawn_red\" type=\"entity_spawn\" x=\"560.001\" y=\"396.993\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"302\" name=\"spawn_red\" type=\"entity_spawn\" x=\"686.303\" y=\"256.337\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"303\" name=\"spawn_red\" type=\"entity_spawn\" x=\"437.667\" y=\"523.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"135\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"578\" gid=\"6\" x=\"1564.1\" y=\"1519.22\" width=\"256\" height=\"256\" rotation=\"123.521\"/>\n  <object id=\"579\" type=\"static_wall\" x=\"1693.41\" y=\"1760.72\" rotation=\"123.809\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"580\" gid=\"6\" x=\"2503.94\" y=\"2533.74\" width=\"256\" height=\"256\" rotation=\"300.715\"/>\n  <object id=\"581\" type=\"static_wall\" x=\"2362.97\" y=\"2298.85\" rotation=\"301.003\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n  <object id=\"584\" gid=\"6\" x=\"2106.44\" y=\"2192.97\" width=\"256\" height=\"256\" rotation=\"286.89\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"1000\"/>\n   </properties>\n  </object>\n  <object id=\"585\" type=\"static_wall\" x=\"1913.43\" y=\"1998.57\" rotation=\"287.178\">\n   <polygon points=\"0,0 -119,222 118,220.5\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"25\" name=\"Terrain\" locked=\"1\">\n  <object id=\"583\" type=\"static_terrain\" x=\"1700\" y=\"3292\">\n   <properties>\n    <property name=\"terrainType\" value=\"ice\"/>\n   </properties>\n   <polygon points=\"24,-28 1280,-328 1572,-932 1256,-2248 680,-2480 -608,-2196 -896,-1664 -600,-304\"/>\n  </object>\n  <object id=\"590\" type=\"static_terrain\" x=\"2052.89\" y=\"2256\">\n   <properties>\n    <property name=\"terrainType\" value=\"default\"/>\n   </properties>\n   <polygon points=\"0,0 144.78,-56.878 210.276,-212 143.057,-372.293 -5.17073,-424 -155.122,-368.846 -218.894,-215.447 -180.976,-84.4553\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"22\" name=\"Controlpoints\" locked=\"1\">\n  <object id=\"362\" name=\"Point A\" type=\"entity_capture_point\" x=\"808\" y=\"3329.95\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"363\" name=\"Point B\" type=\"entity_capture_point\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"364\" name=\"Point C\" type=\"entity_capture_point\" x=\"3288.25\" y=\"739.25\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"17\" name=\"Hitboxes\">\n  <object id=\"373\" type=\"static_wall\" x=\"-448\" y=\"-40\" width=\"532\" height=\"1628\"/>\n  <object id=\"427\" type=\"static_wall\" x=\"1697.39\" y=\"-451.515\" width=\"532\" height=\"1628\" rotation=\"90\"/>\n  <object id=\"428\" type=\"static_wall\" x=\"2767.28\" y=\"-138.718\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"429\" type=\"static_wall\" x=\"2731.46\" y=\"4205.91\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"430\" type=\"static_wall\" x=\"577.096\" y=\"2048.31\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"431\" type=\"static_wall\" x=\"4927.46\" y=\"2014.91\" width=\"1017.08\" height=\"970.176\" rotation=\"135\"/>\n  <object id=\"432\" type=\"static_wall\" x=\"4138.24\" y=\"-455.695\" width=\"532\" height=\"1628\" rotation=\"90\"/>\n  <object id=\"433\" type=\"static_wall\" x=\"4549.76\" y=\"1689.7\" width=\"532\" height=\"1628\" rotation=\"180\"/>\n  <object id=\"434\" type=\"static_wall\" x=\"4549.02\" y=\"4138.83\" width=\"532\" height=\"1628\" rotation=\"180\"/>\n  <object id=\"435\" type=\"static_wall\" x=\"2403.62\" y=\"4550.35\" width=\"532\" height=\"1628\" rotation=\"270\"/>\n  <object id=\"436\" type=\"static_wall\" x=\"-48.24\" y=\"4555.7\" width=\"532\" height=\"1628\" rotation=\"270\"/>\n  <object id=\"437\" type=\"static_wall\" x=\"-459.76\" y=\"2410.3\" width=\"532\" height=\"1628\"/>\n </objectgroup>\n <objectgroup id=\"24\" name=\"Lights\">\n  <object id=\"577\" name=\"Light\" type=\"light\" x=\"2048\" y=\"2048\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffffd8b8\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n</map>\n";
maps['armorden_arena'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"9\" nextobjectid=\"156\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffb9c5d5\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"4096\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"4096\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"goal\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"goal.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <objectgroup id=\"7\" name=\"BG\" locked=\"1\">\n  <object id=\"101\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Map Objects\">\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"496\" y=\"1498\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"10\" name=\"ball_netural\" type=\"entity_spawn\" x=\"2037.67\" y=\"623\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"568\" y=\"1678\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"466\" y=\"779\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"523\" y=\"591\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"39\" name=\"ball_red\" type=\"entity_spawn\" x=\"1273.33\" y=\"1068\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"ball_blue\" type=\"entity_spawn\" x=\"2836\" y=\"965.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"49\" name=\"goal_red\" type=\"dynamic_object\" x=\"94.3517\" y=\"974.544\" width=\"130.69\" height=\"329.99\" rotation=\"356.979\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"50\" name=\"goal_blue\" type=\"dynamic_object\" x=\"3838.8\" y=\"770.719\" width=\"136.01\" height=\"333.818\" rotation=\"357.131\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3623.03\" y=\"1325.53\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"60\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3519.03\" y=\"1473.53\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"61\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3607.03\" y=\"605.535\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3517.03\" y=\"413.535\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"102\" name=\"ball_netural\" type=\"entity_spawn\" x=\"2087.33\" y=\"1488\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"139\" name=\"Light\" type=\"light\" x=\"1681.5\" y=\"323.333\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"140\" name=\"Light\" type=\"light\" x=\"3355\" y=\"248\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"141\" name=\"Light\" type=\"light\" x=\"3778.7\" y=\"1499.09\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"142\" name=\"Light\" type=\"light\" x=\"2578.67\" y=\"1724.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"143\" name=\"Light\" type=\"light\" x=\"1884\" y=\"1745.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"144\" name=\"Light\" type=\"light\" x=\"360\" y=\"1660\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"145\" name=\"Light_red_goal\" type=\"light\" x=\"267\" y=\"1141\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.8\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff3c2\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"148\" name=\"Light_blue_goal\" type=\"light\" x=\"3786.74\" y=\"950.955\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.8\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff3c2\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"147\" name=\"Goalpost-Z\" gid=\"2\" x=\"52.6346\" y=\"1396.4\" width=\"256\" height=\"512\" rotation=\"356.932\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"149\" name=\"Goalpost-Z\" gid=\"2\" x=\"4031.85\" y=\"675.179\" width=\"256\" height=\"512\" rotation=\"177.051\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Hitboxes\">\n  <object id=\"104\" type=\"static_wall\" x=\"-95.0668\" y=\"-33.1219\" width=\"1791.1\" height=\"501.103\" rotation=\"357.077\"/>\n  <object id=\"105\" type=\"static_wall\" x=\"1569.92\" y=\"113.996\">\n   <polygon points=\"0,0 -50.6667,222.667 149.333,262 430,-18 247.333,-94.6667\"/>\n  </object>\n  <object id=\"106\" type=\"static_wall\" x=\"1688.29\" y=\"-107.632\" width=\"1429.28\" height=\"283.775\" rotation=\"357.121\"/>\n  <object id=\"107\" type=\"static_wall\" x=\"-60.5246\" y=\"296.22\" width=\"413.678\" height=\"308.023\" rotation=\"357.077\"/>\n  <object id=\"108\" type=\"static_wall\" x=\"99.6523\" y=\"582.42\">\n   <polygon points=\"-110.167,-6.83333 -168.333,317.334 121,238.833 268.667,0.333333 148.333,-75.6667\"/>\n  </object>\n  <object id=\"109\" type=\"static_wall\" x=\"120.333\" y=\"943.333\">\n   <polygon points=\"-186,10.6667 141.667,-4.66667 158,-29.3333 141,-385.666\"/>\n  </object>\n  <object id=\"112\" type=\"static_wall\" x=\"-86.4615\" y=\"932.361\" width=\"183.364\" height=\"438.452\" rotation=\"357.077\"/>\n  <object id=\"114\" type=\"static_wall\" x=\"197.049\" y=\"1334.85\" width=\"425.703\" height=\"190.856\" rotation=\"116.698\"/>\n  <object id=\"115\" type=\"static_wall\" x=\"118\" y=\"1495.5\">\n   <polygon points=\"-259,350 55,-170.5 162,-177.5 182.5,-155 191,19\"/>\n  </object>\n  <object id=\"116\" type=\"static_wall\" x=\"295.8\" y=\"1463.5\" rotation=\"0.0145977\">\n   <polygon points=\"-12.0037,-14.6636 127,168 139,393 -106,373 -169.5,143\"/>\n  </object>\n  <object id=\"119\" type=\"static_wall\" x=\"368.667\" y=\"1768.67\">\n   <polygon points=\"0,0 225.333,-9.33333 504,224 295.333,362 -58.3333,273.333\"/>\n  </object>\n  <object id=\"120\" type=\"static_wall\" x=\"3965.65\" y=\"1126.75\" rotation=\"180\">\n   <polygon points=\"-203.667,7 141.667,-4.66667 158,-29.3333 136.333,-412.333\"/>\n  </object>\n  <object id=\"121\" type=\"static_wall\" x=\"4181.71\" y=\"1319.11\" width=\"183.364\" height=\"683.704\" rotation=\"177.077\"/>\n  <object id=\"122\" type=\"static_wall\" x=\"4115.13\" y=\"1546.42\" width=\"453.936\" height=\"202.779\" rotation=\"237.091\"/>\n  <object id=\"123\" type=\"static_wall\" x=\"3799.77\" y=\"690.379\" width=\"538.304\" height=\"244.376\" rotation=\"296.698\"/>\n  <object id=\"124\" type=\"static_wall\" x=\"3967.99\" y=\"574.578\" rotation=\"180\">\n   <polygon points=\"-186,134.667 55,-170.5 162,-177.5 182.5,-155 191,19\"/>\n  </object>\n  <object id=\"125\" type=\"static_wall\" x=\"594.409\" y=\"1959.7\" width=\"2812.22\" height=\"324.781\" rotation=\"357.001\"/>\n  <object id=\"126\" type=\"static_wall\" x=\"1843\" y=\"1695.5\">\n   <polygon points=\"0,0 80.5,-4 352.5,222.5 76,380 -208.5,210.5\"/>\n  </object>\n  <object id=\"127\" type=\"static_wall\" x=\"2528.44\" y=\"1659.61\">\n   <polygon points=\"0,0 80.5,-4 352.5,222.5 76,380 -208.5,210.5\"/>\n  </object>\n  <object id=\"128\" type=\"static_wall\" x=\"3315.2\" y=\"1618.38\" rotation=\"359.648\">\n   <polygon points=\"0,0 80.5,-4 352.5,222.5 76,380 -208.5,210.5\"/>\n  </object>\n  <object id=\"129\" type=\"static_wall\" x=\"3393.21\" y=\"1614.05\" width=\"909.347\" height=\"517.196\" rotation=\"357.001\"/>\n  <object id=\"130\" type=\"static_wall\" x=\"3719.33\" y=\"1488\">\n   <polygon points=\"0,0 168.125,-276.333 420.333,-192 405,174.667 2.66667,111.333\"/>\n  </object>\n  <object id=\"131\" type=\"static_wall\" x=\"3110.13\" y=\"100.704\" rotation=\"359.504\">\n   <polygon points=\"0,0 232,191 605,179 605,-104 17,-161\"/>\n  </object>\n  <object id=\"132\" type=\"static_wall\" x=\"3650\" y=\"220\">\n   <polygon points=\"0,0 15,219 172,419 434,50\"/>\n  </object>\n  <object id=\"133\" type=\"static_wall\" x=\"1942.33\" y=\"1001\">\n   <polygon points=\"0,0 87,-83.6667 125.667,-86.3333 225,-19.3333 232.667,16.3333 199,130 53,143.667 -1,36\"/>\n  </object>\n  <object id=\"134\" type=\"static_wall\" x=\"1339.5\" y=\"674.25\">\n   <polygon points=\"0,0 -38.25,65.25 -19,98.25 102.75,127.25 126.5,107.25 40.25,2.5\"/>\n  </object>\n  <object id=\"135\" type=\"static_wall\" x=\"1164.67\" y=\"1426\">\n   <polygon points=\"0,0 179.667,-47.3333 192.333,-4.66667 84.3333,128.667 34,133.667 -27.3333,47\"/>\n  </object>\n  <object id=\"136\" type=\"static_wall\" x=\"2823\" y=\"1191.25\">\n   <polygon points=\"0,0 121.25,28.75 141.5,60.75 102.75,127.25 63.25,125 -23.5,20.75\"/>\n  </object>\n  <object id=\"138\" type=\"static_wall\" x=\"3078.67\" y=\"457.667\">\n   <polygon points=\"0,0 53.3333,-5.33333 112.667,81.6667 85,130.667 -93.3333,178 -105.667,132.667\"/>\n  </object>\n  <object id=\"151\" type=\"static_wall\" x=\"-76.355\" y=\"1598.99\" width=\"446.71\" height=\"469.023\"/>\n  <object id=\"153\" type=\"static_wall\" x=\"3698.56\" y=\"-130.678\" width=\"546.877\" height=\"432.023\"/>\n </objectgroup>\n</map>\n";
maps['vulgrad_outskirts'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"11\" nextobjectid=\"265\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffc5c0d5\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"goal\" tilewidth=\"512\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"goal_z.png\" width=\"512\" height=\"512\"/>\n </tileset>\n <objectgroup id=\"7\" name=\"BG\" locked=\"1\">\n  <object id=\"150\" gid=\"1\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"151\" gid=\"1\" x=\"4096\" y=\"1.13687e-13\" width=\"2048\" height=\"2048\" rotation=\"180\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Terrain\">\n  <object id=\"260\" type=\"static_terrain\" x=\"322.667\" y=\"322.667\">\n   <properties>\n    <property name=\"terrainType\" value=\"ice\"/>\n   </properties>\n   <polygon points=\"0,0 566.667,-209.333 676,-60 373.333,221.333 92,140\"/>\n  </object>\n  <object id=\"261\" type=\"static_terrain\" x=\"690\" y=\"548\">\n   <properties>\n    <property name=\"terrainType\" value=\"ice\"/>\n   </properties>\n   <polygon points=\"0,0 304,-294 874,-480 1718,-522 2080,-430 2372,-178 2046,220 660,620 170,322\"/>\n  </object>\n  <object id=\"262\" type=\"static_terrain\" x=\"1062\" y=\"1662\">\n   <properties>\n    <property name=\"terrainType\" value=\"ice\"/>\n   </properties>\n   <polygon points=\"0,0 294,-350 1918,-630 2284,-366 2314,-158 2024,124 1440,306 656,352 248,266\"/>\n  </object>\n  <object id=\"263\" type=\"static_terrain\" x=\"3092\" y=\"1788\">\n   <properties>\n    <property name=\"terrainType\" value=\"ice\"/>\n   </properties>\n   <polygon points=\"0,0 300,-286 596,-194 666,-68 128,128\"/>\n  </object>\n  <object id=\"264\" type=\"static_terrain\" x=\"1350\" y=\"1170\">\n   <properties>\n    <property name=\"terrainType\" value=\"ice\"/>\n   </properties>\n   <polygon points=\"0,0 1388,-396 1620,-120 -8,144\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"9\" name=\"Goal_z\" locked=\"1\">\n  <object id=\"155\" gid=\"2\" x=\"4169.64\" y=\"-146.683\" width=\"512\" height=\"512\" rotation=\"180.368\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"152\" gid=\"2\" x=\"-80.4623\" y=\"2195.16\" width=\"512\" height=\"512\" rotation=\"1.62911\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Map Objects\">\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"660\" y=\"1789\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"30\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"10\" name=\"ball_netural\" type=\"entity_spawn\" x=\"2049.67\" y=\"1023\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"934\" y=\"1623\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"30\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"275\" y=\"1197\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"30\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"206\" y=\"1474\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"30\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"39\" name=\"ball_red\" type=\"entity_spawn\" x=\"943.5\" y=\"991.5\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"ball_blue\" type=\"entity_spawn\" x=\"3153\" y=\"1084.33\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"49\" name=\"goal_red\" type=\"dynamic_object\" x=\"-85.3711\" y=\"1932.95\" width=\"174.701\" height=\"428.137\" rotation=\"302.696\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"50\" name=\"goal_blue\" type=\"dynamic_object\" x=\"3718.01\" y=\"30.1762\" width=\"236.587\" height=\"443.847\" rotation=\"302.568\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3854.03\" y=\"666.53\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"210\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"60\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3824.03\" y=\"936.53\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"210\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"61\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3263.03\" y=\"398.535\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"210\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3526.03\" y=\"250.535\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"210\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"139\" name=\"Light\" type=\"light\" x=\"1005.5\" y=\"961.333\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.6\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffc2d9ff\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"145\" name=\"Light_red_goal\" type=\"light\" x=\"197.167\" y=\"1917.67\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff3c2\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"148\" name=\"Light_blue_goal\" type=\"light\" x=\"3898.91\" y=\"161.622\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff3c2\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"156\" name=\"Light\" type=\"light\" x=\"2002.06\" y=\"1429.21\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.7\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffdef0ff\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"158\" name=\"Light\" type=\"light\" x=\"3946.3\" y=\"1050.48\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.7\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"159\" name=\"Light\" type=\"light\" x=\"154.485\" y=\"1042.12\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.7\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"160\" name=\"Light\" type=\"light\" x=\"3092\" y=\"1140\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.6\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffc2d9ff\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"161\" name=\"Light\" type=\"light\" x=\"2094\" y=\"640\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.7\"/>\n    <property name=\"color\" type=\"color\" value=\"#ffdef0ff\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Hitboxes\" locked=\"1\">\n  <object id=\"104\" type=\"static_wall\" x=\"-24.2209\" y=\"1893.62\" width=\"315.953\" height=\"295.658\" rotation=\"29.5831\"/>\n  <object id=\"162\" type=\"static_wall\" x=\"-251.659\" y=\"146.709\" width=\"679.407\" height=\"429.669\" rotation=\"331.247\"/>\n  <object id=\"163\" type=\"static_wall\" x=\"243.916\" y=\"-130.232\" width=\"223.014\" height=\"429.669\" rotation=\"338.388\"/>\n  <object id=\"164\" type=\"static_wall\" x=\"426.441\" y=\"-197.933\" width=\"310.3\" height=\"429.669\" rotation=\"346.311\"/>\n  <object id=\"165\" type=\"static_wall\" x=\"829\" y=\"146\">\n   <polygon points=\"0,0 264.333,-153.333 175,-480.667 -164.333,-408.667\"/>\n  </object>\n  <object id=\"167\" type=\"static_wall\" x=\"191\" y=\"331\">\n   <polygon points=\"0,0 38,238 -6,613 -406,620 -389,-88\"/>\n  </object>\n  <object id=\"168\" type=\"static_wall\" x=\"156\" y=\"786\">\n   <polygon points=\"0,0 66,178 -22,394 -379,394 -369,-7\"/>\n  </object>\n  <object id=\"169\" type=\"static_wall\" x=\"131\" y=\"1040\">\n   <polygon points=\"0,0 56,152 -42,326 -349,321 -344,-12\"/>\n  </object>\n  <object id=\"170\" type=\"static_wall\" x=\"139\" y=\"1212\">\n   <polygon points=\"0,0 0,232 -126,331 -366,327 -354,6\"/>\n  </object>\n  <object id=\"172\" type=\"static_wall\" x=\"-127\" y=\"1893.83\">\n   <polygon points=\"0,0 46,-5 177.5,-166.5 201.5,-436.5 -92.5,-455 -214.667,-115.5\"/>\n  </object>\n  <object id=\"173\" type=\"static_wall\" x=\"17.8094\" y=\"1723.73\" width=\"430.181\" height=\"298.338\" rotation=\"90.4865\"/>\n  <object id=\"174\" type=\"static_wall\" x=\"474.813\" y=\"2264.89\" width=\"374.371\" height=\"269.96\" rotation=\"174.035\"/>\n  <object id=\"175\" type=\"static_wall\" x=\"400.5\" y=\"1935\">\n   <polygon points=\"0,0 -102.5,326.5 340,350.5 314.5,-8.5\"/>\n  </object>\n  <object id=\"176\" type=\"static_wall\" x=\"473.902\" y=\"1937.48\" width=\"315.953\" height=\"295.658\" rotation=\"343.461\"/>\n  <object id=\"177\" type=\"static_wall\" x=\"543.379\" y=\"1923.36\" width=\"548.901\" height=\"295.658\" rotation=\"332.525\"/>\n  <object id=\"178\" type=\"static_wall\" x=\"1011.75\" y=\"1630.25\">\n   <polygon points=\"0,0 38.5,-1.25 74,216.5 -118.75,211.75\"/>\n  </object>\n  <object id=\"179\" type=\"static_wall\" x=\"1025.93\" y=\"1677.22\" width=\"306.501\" height=\"295.658\" rotation=\"47.9613\"/>\n  <object id=\"180\" type=\"static_wall\" x=\"1156.12\" y=\"1827.13\" width=\"209.46\" height=\"295.658\" rotation=\"34.345\"/>\n  <object id=\"182\" type=\"static_wall\" x=\"1248.7\" y=\"1914.5\" width=\"500.062\" height=\"295.658\" rotation=\"16.9511\"/>\n  <object id=\"183\" type=\"static_wall\" x=\"1537.44\" y=\"2019.15\" width=\"500.062\" height=\"295.658\" rotation=\"2.04529\"/>\n  <object id=\"184\" type=\"static_wall\" x=\"1719.33\" y=\"2042\">\n   <polygon points=\"0,0 354.667,-50 634,-45.3333 627.333,299.333 143.333,291.333\"/>\n  </object>\n  <object id=\"185\" type=\"static_wall\" x=\"1582.92\" y=\"-234.422\" width=\"447.976\" height=\"295.658\" rotation=\"358.408\"/>\n  <object id=\"186\" type=\"static_wall\" x=\"888.406\" y=\"-225.098\" width=\"447.976\" height=\"295.658\" rotation=\"352.379\"/>\n  <object id=\"187\" type=\"static_wall\" x=\"1118\" y=\"36\">\n   <polygon points=\"0,0 442.667,35.3333 659.333,-4 642.667,-296 22,-309.333\"/>\n  </object>\n  <object id=\"212\" type=\"static_wall\" x=\"4119.63\" y=\"155.274\" width=\"315.953\" height=\"295.658\" rotation=\"209.583\"/>\n  <object id=\"213\" type=\"static_wall\" x=\"4347.07\" y=\"1902.19\" width=\"679.407\" height=\"429.669\" rotation=\"151.247\"/>\n  <object id=\"214\" type=\"static_wall\" x=\"3851.49\" y=\"2179.13\" width=\"223.014\" height=\"429.669\" rotation=\"158.388\"/>\n  <object id=\"215\" type=\"static_wall\" x=\"3668.97\" y=\"2246.83\" width=\"310.3\" height=\"429.669\" rotation=\"166.311\"/>\n  <object id=\"216\" type=\"static_wall\" x=\"3266.41\" y=\"1902.89\" rotation=\"180\">\n   <polygon points=\"0,0 264.333,-153.333 175,-480.667 -164.333,-408.667\"/>\n  </object>\n  <object id=\"217\" type=\"static_wall\" x=\"3904.41\" y=\"1717.89\" rotation=\"180\">\n   <polygon points=\"0,0 38,238 -6,613 -406,620 -389,-88\"/>\n  </object>\n  <object id=\"218\" type=\"static_wall\" x=\"3939.41\" y=\"1262.89\" rotation=\"180\">\n   <polygon points=\"0,0 66,178 -22,394 -379,394 -369,-7\"/>\n  </object>\n  <object id=\"219\" type=\"static_wall\" x=\"3960.29\" y=\"1008.95\" rotation=\"181.523\">\n   <polygon points=\"0,0 56,152 -42,326 -349,321 -344,-12\"/>\n  </object>\n  <object id=\"220\" type=\"static_wall\" x=\"3954.41\" y=\"837.561\" rotation=\"180\">\n   <polygon points=\"0,0 0,232 -126,331 -366,327 -354,6\"/>\n  </object>\n  <object id=\"221\" type=\"static_wall\" x=\"4222.41\" y=\"154.394\" rotation=\"180\">\n   <polygon points=\"0,0 46,-5 177.5,-166.5 201.5,-436.5 -92.5,-455 -214.667,-115.5\"/>\n  </object>\n  <object id=\"222\" type=\"static_wall\" x=\"4077.6\" y=\"325.164\" width=\"430.181\" height=\"298.338\" rotation=\"270.486\"/>\n  <object id=\"223\" type=\"static_wall\" x=\"3620.6\" y=\"-215.996\" width=\"374.371\" height=\"269.96\" rotation=\"354.035\"/>\n  <object id=\"224\" type=\"static_wall\" x=\"3697.41\" y=\"112.394\" rotation=\"180\">\n   <polygon points=\"0,0 -102.5,326.5 340,350.5 314.5,-8.5\"/>\n  </object>\n  <object id=\"225\" type=\"static_wall\" x=\"3621.51\" y=\"111.414\" width=\"315.953\" height=\"295.658\" rotation=\"163.461\"/>\n  <object id=\"226\" type=\"static_wall\" x=\"3552.03\" y=\"125.534\" width=\"548.901\" height=\"295.658\" rotation=\"152.525\"/>\n  <object id=\"227\" type=\"static_wall\" x=\"3083.66\" y=\"418.644\" rotation=\"180\">\n   <polygon points=\"0,0 38.5,-1.25 74,216.5 -118.75,211.75\"/>\n  </object>\n  <object id=\"228\" type=\"static_wall\" x=\"3069.48\" y=\"371.674\" width=\"306.501\" height=\"295.658\" rotation=\"227.961\"/>\n  <object id=\"229\" type=\"static_wall\" x=\"2939.29\" y=\"221.764\" width=\"209.46\" height=\"295.658\" rotation=\"214.345\"/>\n  <object id=\"230\" type=\"static_wall\" x=\"2846.71\" y=\"134.394\" width=\"500.062\" height=\"295.658\" rotation=\"196.951\"/>\n  <object id=\"234\" type=\"static_wall\" x=\"3207\" y=\"2273.99\" width=\"447.976\" height=\"295.658\" rotation=\"172.379\"/>\n  <object id=\"235\" type=\"static_wall\" x=\"2977.41\" y=\"2012.89\" rotation=\"180\">\n   <polygon points=\"0,0 442.667,35.3333 659.333,-4 642.667,-296 22,-309.333\"/>\n  </object>\n  <object id=\"237\" type=\"static_wall\" x=\"1802\" y=\"50.6667\">\n   <polygon points=\"0,0 232,3.33333 560.667,-37.3333 677.333,-355.333 59.3333,-340\"/>\n  </object>\n  <object id=\"238\" type=\"static_wall\" x=\"2276\" y=\"19.3333\">\n   <polygon points=\"0,0 305.333,16 174.667,-297.333\"/>\n  </object>\n  <object id=\"239\" type=\"static_wall\" x=\"2140\" y=\"1994.5\">\n   <polygon points=\"0,0 374,-8 203,304.5\"/>\n  </object>\n  <object id=\"240\" type=\"static_wall\" x=\"536\" y=\"719\">\n   <polygon points=\"0,0 171.333,-99.3333 188,-89.6667 199.667,37.6667 163.333,55 9.33333,23\"/>\n  </object>\n  <object id=\"241\" type=\"static_wall\" x=\"1249.33\" y=\"1103\">\n   <polygon points=\"0,0 -23.6667,10.6667 -34.3333,33.3333 26.3333,160 80.3333,160.333 101.333,142.667 99.3333,64\"/>\n  </object>\n  <object id=\"242\" type=\"static_wall\" x=\"2057.5\" y=\"1327.5\">\n   <polygon points=\"0,0 -191.5,13.5 -222.5,77.5 -18.5,200.5 37.5,201.5 80.5,138.5\"/>\n  </object>\n  <object id=\"243\" type=\"static_wall\" x=\"3558.89\" y=\"1328.55\" rotation=\"180\">\n   <polygon points=\"0,0 171.333,-99.3333 188,-89.6667 199.667,37.6667 163.333,55 9.33333,23\"/>\n  </object>\n  <object id=\"244\" type=\"static_wall\" x=\"2845.56\" y=\"944.552\" rotation=\"180\">\n   <polygon points=\"0,0 -23.6667,10.6667 -34.3333,33.3333 26.3333,160 80.3333,160.333 101.333,142.667 99.3333,64\"/>\n  </object>\n  <object id=\"245\" type=\"static_wall\" x=\"2037.39\" y=\"720.052\" rotation=\"180\">\n   <polygon points=\"0,0 -191.5,13.5 -222.5,77.5 -18.5,200.5 37.5,201.5 80.5,138.5\"/>\n  </object>\n </objectgroup>\n</map>\n";
maps['armorden_arena_test'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"9\" nextobjectid=\"158\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffb9c5d5\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"4096\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"4096\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"goal\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"goal.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"car\" tilewidth=\"64\" tileheight=\"128\" tilecount=\"8\" columns=\"4\">\n  <image source=\"../tankpark/car.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <objectgroup id=\"7\" name=\"BG\" locked=\"1\">\n  <object id=\"101\" gid=\"1\" x=\"0\" y=\"2048\" width=\"4096\" height=\"2048\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Map Objects\">\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"496\" y=\"1498\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"10\" name=\"ball_netural\" type=\"entity_spawn\" x=\"2037.67\" y=\"623\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"568\" y=\"1678\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"466\" y=\"779\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"523\" y=\"591\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"90\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"39\" name=\"ball_red\" type=\"entity_spawn\" x=\"1273.33\" y=\"1068\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"ball_blue\" type=\"entity_spawn\" x=\"2836\" y=\"965.333\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"49\" name=\"goal_red\" type=\"dynamic_object\" x=\"94.3517\" y=\"974.544\" width=\"130.69\" height=\"329.99\" rotation=\"356.979\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"50\" name=\"goal_blue\" type=\"dynamic_object\" x=\"3838.8\" y=\"770.719\" width=\"136.01\" height=\"333.818\" rotation=\"357.131\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3623.03\" y=\"1325.53\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"60\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3519.03\" y=\"1473.53\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"61\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3607.03\" y=\"605.535\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3517.03\" y=\"413.535\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"270\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"102\" name=\"ball_netural\" type=\"entity_spawn\" x=\"2087.33\" y=\"1488\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"139\" name=\"Light\" type=\"light\" x=\"1681.5\" y=\"323.333\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"140\" name=\"Light\" type=\"light\" x=\"3355\" y=\"248\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"141\" name=\"Light\" type=\"light\" x=\"3778.7\" y=\"1499.09\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"142\" name=\"Light\" type=\"light\" x=\"2578.67\" y=\"1724.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"143\" name=\"Light\" type=\"light\" x=\"1884\" y=\"1745.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"144\" name=\"Light\" type=\"light\" x=\"360\" y=\"1660\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"1.1\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff5e4\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"145\" name=\"Light_red_goal\" type=\"light\" x=\"267\" y=\"1141\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.8\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff3c2\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"148\" name=\"Light_blue_goal\" type=\"light\" x=\"3786.74\" y=\"950.955\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.8\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff3c2\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"147\" name=\"Goalpost-Z\" gid=\"2\" x=\"52.6346\" y=\"1396.4\" width=\"256\" height=\"512\" rotation=\"356.932\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"149\" name=\"Goalpost-Z\" gid=\"2\" x=\"4031.85\" y=\"675.179\" width=\"256\" height=\"512\" rotation=\"177.051\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Hitboxes\">\n  <object id=\"104\" type=\"static_wall\" x=\"-95.0668\" y=\"-33.1219\" width=\"1791.1\" height=\"501.103\" rotation=\"357.077\"/>\n  <object id=\"105\" type=\"static_wall\" x=\"1569.92\" y=\"113.996\">\n   <polygon points=\"0,0 -50.6667,222.667 149.333,262 430,-18 247.333,-94.6667\"/>\n  </object>\n  <object id=\"106\" type=\"static_wall\" x=\"1688.29\" y=\"-107.632\" width=\"1429.28\" height=\"283.775\" rotation=\"357.121\"/>\n  <object id=\"107\" type=\"static_wall\" x=\"-60.5246\" y=\"296.22\" width=\"413.678\" height=\"308.023\" rotation=\"357.077\"/>\n  <object id=\"108\" type=\"static_wall\" x=\"99.6523\" y=\"582.42\">\n   <polygon points=\"-110.167,-6.83333 -168.333,317.334 121,238.833 268.667,0.333333 148.333,-75.6667\"/>\n  </object>\n  <object id=\"109\" type=\"static_wall\" x=\"120.333\" y=\"943.333\">\n   <polygon points=\"-186,10.6667 141.667,-4.66667 158,-29.3333 141,-385.666\"/>\n  </object>\n  <object id=\"112\" type=\"static_wall\" x=\"-86.4615\" y=\"932.361\" width=\"183.364\" height=\"438.452\" rotation=\"357.077\"/>\n  <object id=\"114\" type=\"static_wall\" x=\"197.049\" y=\"1334.85\" width=\"425.703\" height=\"190.856\" rotation=\"116.698\"/>\n  <object id=\"115\" type=\"static_wall\" x=\"118\" y=\"1495.5\">\n   <polygon points=\"-259,350 55,-170.5 162,-177.5 182.5,-155 191,19\"/>\n  </object>\n  <object id=\"116\" type=\"static_wall\" x=\"295.8\" y=\"1463.5\" rotation=\"0.0145977\">\n   <polygon points=\"-12.0037,-14.6636 127,168 139,393 -106,373 -169.5,143\"/>\n  </object>\n  <object id=\"119\" type=\"static_wall\" x=\"368.667\" y=\"1768.67\">\n   <polygon points=\"0,0 225.333,-9.33333 504,224 295.333,362 -58.3333,273.333\"/>\n  </object>\n  <object id=\"120\" type=\"static_wall\" x=\"3965.65\" y=\"1126.75\" rotation=\"180\">\n   <polygon points=\"-203.667,7 141.667,-4.66667 158,-29.3333 136.333,-412.333\"/>\n  </object>\n  <object id=\"121\" type=\"static_wall\" x=\"4181.71\" y=\"1319.11\" width=\"183.364\" height=\"683.704\" rotation=\"177.077\"/>\n  <object id=\"122\" type=\"static_wall\" x=\"4115.13\" y=\"1546.42\" width=\"453.936\" height=\"202.779\" rotation=\"237.091\"/>\n  <object id=\"123\" type=\"static_wall\" x=\"3799.77\" y=\"690.379\" width=\"538.304\" height=\"244.376\" rotation=\"296.698\"/>\n  <object id=\"124\" type=\"static_wall\" x=\"3967.99\" y=\"574.578\" rotation=\"180\">\n   <polygon points=\"-186,134.667 55,-170.5 162,-177.5 182.5,-155 191,19\"/>\n  </object>\n  <object id=\"125\" type=\"static_wall\" x=\"594.409\" y=\"1959.7\" width=\"2812.22\" height=\"324.781\" rotation=\"357.001\"/>\n  <object id=\"126\" type=\"static_wall\" x=\"1843\" y=\"1695.5\">\n   <polygon points=\"0,0 80.5,-4 352.5,222.5 76,380 -208.5,210.5\"/>\n  </object>\n  <object id=\"127\" type=\"static_wall\" x=\"2528.44\" y=\"1659.61\">\n   <polygon points=\"0,0 80.5,-4 352.5,222.5 76,380 -208.5,210.5\"/>\n  </object>\n  <object id=\"128\" type=\"static_wall\" x=\"3315.2\" y=\"1618.38\" rotation=\"359.648\">\n   <polygon points=\"0,0 80.5,-4 352.5,222.5 76,380 -208.5,210.5\"/>\n  </object>\n  <object id=\"129\" type=\"static_wall\" x=\"3393.21\" y=\"1614.05\" width=\"909.347\" height=\"517.196\" rotation=\"357.001\"/>\n  <object id=\"130\" type=\"static_wall\" x=\"3719.33\" y=\"1488\">\n   <polygon points=\"0,0 168.125,-276.333 420.333,-192 405,174.667 2.66667,111.333\"/>\n  </object>\n  <object id=\"131\" type=\"static_wall\" x=\"3110.13\" y=\"100.704\" rotation=\"359.504\">\n   <polygon points=\"0,0 232,191 605,179 605,-104 17,-161\"/>\n  </object>\n  <object id=\"132\" type=\"static_wall\" x=\"3650\" y=\"220\">\n   <polygon points=\"0,0 15,219 172,419 434,50\"/>\n  </object>\n  <object id=\"133\" type=\"static_wall\" x=\"1942.33\" y=\"1001\">\n   <polygon points=\"0,0 87,-83.6667 125.667,-86.3333 225,-19.3333 232.667,16.3333 199,130 53,143.667 -1,36\"/>\n  </object>\n  <object id=\"134\" type=\"static_wall\" x=\"1339.5\" y=\"674.25\">\n   <polygon points=\"0,0 -38.25,65.25 -19,98.25 102.75,127.25 126.5,107.25 40.25,2.5\"/>\n  </object>\n  <object id=\"135\" type=\"static_wall\" x=\"1164.67\" y=\"1426\">\n   <polygon points=\"0,0 179.667,-47.3333 192.333,-4.66667 84.3333,128.667 34,133.667 -27.3333,47\"/>\n  </object>\n  <object id=\"136\" type=\"static_wall\" x=\"2823\" y=\"1191.25\">\n   <polygon points=\"0,0 121.25,28.75 141.5,60.75 102.75,127.25 63.25,125 -23.5,20.75\"/>\n  </object>\n  <object id=\"138\" type=\"static_wall\" x=\"3078.67\" y=\"457.667\">\n   <polygon points=\"0,0 53.3333,-5.33333 112.667,81.6667 85,130.667 -93.3333,178 -105.667,132.667\"/>\n  </object>\n  <object id=\"151\" type=\"static_wall\" x=\"-76.355\" y=\"1598.99\" width=\"446.71\" height=\"469.023\"/>\n  <object id=\"153\" type=\"static_wall\" x=\"3698.56\" y=\"-130.678\" width=\"546.877\" height=\"432.023\"/>\n  <object id=\"156\" name=\"car\" type=\"dynamic_object\" gid=\"3\" x=\"223.408\" y=\"1417.96\" width=\"277.322\" height=\"554.643\" rotation=\"357.589\">\n   <properties>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"disableDestructionOnDeath\" type=\"bool\" value=\"true\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"0\"/>\n    <property name=\"health\" type=\"int\" value=\"50\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"157\" name=\"car\" type=\"dynamic_object\" gid=\"3\" x=\"3599.34\" y=\"1230.68\" width=\"277.322\" height=\"554.643\" rotation=\"357.589\">\n   <properties>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"disableDestructionOnDeath\" type=\"bool\" value=\"true\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"0\"/>\n    <property name=\"health\" type=\"int\" value=\"50\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n </objectgroup>\n</map>\n";
maps['betrapt_13'] = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"32\" tilewidth=\"64\" tileheight=\"64\" infinite=\"0\" nextlayerid=\"16\" nextobjectid=\"378\">\n <properties>\n  <property name=\"brightness\" type=\"float\" value=\"1.4\"/>\n  <property name=\"lightColor\" type=\"color\" value=\"#ffa1abc6\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"bg\" tilewidth=\"2048\" tileheight=\"2048\" tilecount=\"1\" columns=\"1\">\n  <image source=\"bg.jpg\" width=\"2048\" height=\"2048\"/>\n </tileset>\n <tileset firstgid=\"2\" name=\"reverse\" tilewidth=\"512\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"reverse.jpg\" width=\"512\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"3\" name=\"prison_bus\" tilewidth=\"512\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prison_bus.png\" width=\"512\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"4\" name=\"prison_blocker\" tilewidth=\"256\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prison_blocker.png\" width=\"256\" height=\"128\"/>\n </tileset>\n <tileset firstgid=\"5\" name=\"prison_goal_z\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prison_goal_z.png\" width=\"256\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"6\" name=\"prison_roof_z\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prison_roof_z.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"7\" name=\"prison_scorch\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prison_scorch.png\" width=\"256\" height=\"256\"/>\n </tileset>\n <tileset firstgid=\"8\" name=\"barrier\" tilewidth=\"256\" tileheight=\"512\" tilecount=\"4\" columns=\"4\">\n  <image source=\"barrier.png\" width=\"1024\" height=\"512\"/>\n </tileset>\n <tileset firstgid=\"12\" name=\"prison_13\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"1\" columns=\"1\">\n  <image source=\"prison_13.png\" width=\"128\" height=\"128\"/>\n </tileset>\n <objectgroup id=\"7\" name=\"BG\" locked=\"1\">\n  <object id=\"260\" gid=\"1\" x=\"0\" y=\"2048\" width=\"2048\" height=\"2048\"/>\n  <object id=\"261\" gid=\"1\" x=\"4096\" y=\"2048\" width=\"-2048\" height=\"2048\"/>\n </objectgroup>\n <objectgroup id=\"12\" name=\"BG_Z\">\n  <object id=\"263\" gid=\"2\" x=\"2048\" y=\"512\" width=\"512\" height=\"512\"/>\n  <object id=\"358\" gid=\"7\" x=\"2828.26\" y=\"1269.6\" width=\"256\" height=\"256\" rotation=\"158.182\"/>\n  <object id=\"359\" gid=\"7\" x=\"2797.57\" y=\"1164.01\" width=\"174.243\" height=\"188.061\" rotation=\"350.912\"/>\n  <object id=\"360\" gid=\"7\" x=\"1679.88\" y=\"741.677\" width=\"376.238\" height=\"348.341\" rotation=\"181.339\"/>\n  <object id=\"361\" gid=\"7\" x=\"2076.49\" y=\"1488.55\" width=\"237.594\" height=\"217.109\" rotation=\"135.614\"/>\n  <object id=\"367\" gid=\"12\" x=\"1059.32\" y=\"315.356\" width=\"128\" height=\"82.4985\" rotation=\"350.745\"/>\n  <object id=\"368\" gid=\"12\" x=\"2910.8\" y=\"293.615\" width=\"128\" height=\"82.4985\" rotation=\"9.00985\"/>\n </objectgroup>\n <objectgroup id=\"13\" name=\"BG_Objects\" locked=\"1\">\n  <object id=\"328\" gid=\"3\" x=\"1252.28\" y=\"783.983\" width=\"512\" height=\"128\" rotation=\"27.3517\"/>\n  <object id=\"329\" type=\"static_wall\" x=\"1331.01\" y=\"809.735\" rotation=\"27.3517\">\n   <polygon points=\"0,0 44.6667,-83.3333 8,-101 -39.6667,-103 -42,-16\"/>\n  </object>\n  <object id=\"330\" type=\"static_wall\" x=\"1436.05\" y=\"865.827\" rotation=\"26.8977\">\n   <polygon points=\"0,0 -38.6667,-102.667 263.667,-104.667 256.667,3.33333\"/>\n  </object>\n  <object id=\"331\" type=\"static_wall\" x=\"1368.54\" y=\"714.685\" width=\"165\" height=\"72.3333\" rotation=\"27.3517\"/>\n  <object id=\"332\" type=\"static_wall\" x=\"1528.4\" y=\"906.968\" rotation=\"27.3517\">\n   <polygon points=\"0,0 39,12.6667 73.3333,3.66667 43,-79.6667\"/>\n  </object>\n  <object id=\"333\" gid=\"3\" x=\"2639.97\" y=\"1482.59\" width=\"512\" height=\"128\" rotation=\"317.118\"/>\n  <object id=\"334\" type=\"static_wall\" x=\"2690.82\" y=\"1417.2\" rotation=\"317.118\">\n   <polygon points=\"0,0 44.6667,-83.3333 8,-101 -39.6667,-103 -42,-16\"/>\n  </object>\n  <object id=\"335\" type=\"static_wall\" x=\"2779.14\" y=\"1337.32\" rotation=\"316.664\">\n   <polygon points=\"0,0 -38.6667,-102.667 263.667,-104.667 256.667,3.33333\"/>\n  </object>\n  <object id=\"336\" type=\"static_wall\" x=\"2614.07\" y=\"1349.73\" width=\"165\" height=\"72.3333\" rotation=\"317.118\"/>\n  <object id=\"337\" type=\"static_wall\" x=\"2849.09\" y=\"1264.32\" rotation=\"317.118\">\n   <polygon points=\"0,0 39,12.6667 73.3333,3.66667 43,-79.6667\"/>\n  </object>\n  <object id=\"338\" gid=\"4\" x=\"1986.67\" y=\"1413.33\" width=\"256\" height=\"128\" rotation=\"90\"/>\n  <object id=\"339\" type=\"static_wall\" x=\"2057.88\" y=\"1451.09\" rotation=\"90\">\n   <polygon points=\"0,0 40.6667,-29.3333 145.333,-30 181.333,-2 181.333,16.6667 140,45.3333 36.6667,46.6667 -0.666667,19.3333\"/>\n  </object>\n  <object id=\"340\" gid=\"4\" x=\"1226.54\" y=\"1294.52\" width=\"256\" height=\"128\" rotation=\"141.834\"/>\n  <object id=\"341\" type=\"static_wall\" x=\"1240.86\" y=\"1373.84\" rotation=\"141.834\">\n   <polygon points=\"0,0 40.6667,-29.3333 145.333,-30 181.333,-2 181.333,16.6667 140,45.3333 36.6667,46.6667 -0.666667,19.3333\"/>\n  </object>\n  <object id=\"342\" gid=\"4\" x=\"2361.84\" y=\"711.324\" width=\"256\" height=\"128\" rotation=\"117.18\"/>\n  <object id=\"343\" type=\"static_wall\" x=\"2407.94\" y=\"777.442\" rotation=\"117.18\">\n   <polygon points=\"0,0 40.6667,-29.3333 145.333,-30 181.333,-2 181.333,16.6667 140,45.3333 36.6667,46.6667 -0.666667,19.3333\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"15\" name=\"GoalBarrier\">\n  <object id=\"362\" name=\"barrier_red\" type=\"dynamic_object\" gid=\"8\" x=\"237.682\" y=\"1522.23\" width=\"256\" height=\"512\" rotation=\"351.092\">\n   <properties>\n    <property name=\"canRunOver\" type=\"bool\" value=\"false\"/>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"deathEffect\" value=\"barrier_destroyed\"/>\n    <property name=\"enableFireOnDamaged\" type=\"bool\" value=\"true\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"0\"/>\n    <property name=\"health\" type=\"int\" value=\"100\"/>\n    <property name=\"hitEffect\" value=\"vehicle\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"polygon\" value=\"25,-50 105,-50 169,-98 169,-410 105,-458 25,-458\"/>\n    <property name=\"polygonScale\" type=\"float\" value=\"1.1\"/>\n    <property name=\"shape\" value=\"polygon\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"365\" name=\"barrier_blue\" type=\"dynamic_object\" gid=\"8\" x=\"3940.24\" y=\"1025.39\" width=\"256\" height=\"512\" rotation=\"188.901\">\n   <properties>\n    <property name=\"canRunOver\" type=\"bool\" value=\"false\"/>\n    <property name=\"damageFrameX\" type=\"int\" value=\"3\"/>\n    <property name=\"deathEffect\" value=\"barrier_destroyed\"/>\n    <property name=\"enableFireOnDamaged\" type=\"bool\" value=\"true\"/>\n    <property name=\"frameX\" type=\"int\" value=\"0\"/>\n    <property name=\"frameY\" type=\"int\" value=\"0\"/>\n    <property name=\"health\" type=\"int\" value=\"100\"/>\n    <property name=\"hitEffect\" value=\"vehicle\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"polygon\" value=\"25,-50 105,-50 169,-98 169,-410 105,-458 25,-458\"/>\n    <property name=\"polygonScale\" type=\"float\" value=\"1.1\"/>\n    <property name=\"shape\" value=\"polygon\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Map Objects\">\n  <object id=\"6\" name=\"spawn_red\" type=\"entity_spawn\" x=\"519.333\" y=\"1589.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"10\" name=\"ball_netural\" type=\"entity_spawn\" x=\"2047.67\" y=\"1074\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"24\" name=\"spawn_red\" type=\"entity_spawn\" x=\"716.667\" y=\"1751.33\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"45\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"25\" name=\"spawn_red\" type=\"entity_spawn\" x=\"495.667\" y=\"626.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"81\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"31\" name=\"spawn_red\" type=\"entity_spawn\" x=\"528.667\" y=\"837.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"81\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"39\" name=\"ball_red\" type=\"entity_spawn\" x=\"894.924\" y=\"1160.68\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"40\" name=\"ball_blue\" type=\"entity_spawn\" x=\"3200\" y=\"1176.66\">\n   <properties>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n    <property name=\"type\" value=\"ball\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"49\" name=\"goal_red\" type=\"dynamic_object\" x=\"64.1933\" y=\"1129.58\" width=\"87.8868\" height=\"320.117\" rotation=\"350.859\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"0\"/>\n   </properties>\n  </object>\n  <object id=\"50\" name=\"goal_blue\" type=\"dynamic_object\" x=\"3942.36\" y=\"1126.52\" width=\"87.7759\" height=\"318.508\" rotation=\"8.60877\">\n   <properties>\n    <property name=\"disableHitboxCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"disablePlayerCollision\" type=\"bool\" value=\"true\"/>\n    <property name=\"isSensor\" type=\"bool\" value=\"true\"/>\n    <property name=\"mass\" type=\"int\" value=\"0\"/>\n    <property name=\"objectType\" value=\"goal\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n  </object>\n  <object id=\"59\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3574\" y=\"1621.47\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"315\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"60\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3381.03\" y=\"1745.71\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"315\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"61\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3602.12\" y=\"623.474\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"279\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"62\" name=\"spawn_blue\" type=\"entity_spawn\" x=\"3568.42\" y=\"816.687\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"279\"/>\n    <property name=\"team\" type=\"int\" value=\"1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"158\" name=\"Light\" type=\"light\" x=\"3864.3\" y=\"1293.48\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.7\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"159\" name=\"Light\" type=\"light\" x=\"225.485\" y=\"1272.12\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.7\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"344\" name=\"Light\" type=\"light\" x=\"265.152\" y=\"304.121\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"347\" name=\"Light\" type=\"light\" x=\"489.333\" y=\"262.667\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"348\" name=\"Light\" type=\"light\" x=\"823.819\" y=\"214.787\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"349\" name=\"Light\" type=\"light\" x=\"1048\" y=\"173.333\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"350\" name=\"Light\" type=\"light\" x=\"1035.52\" y=\"1920.7\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"351\" name=\"Light\" type=\"light\" x=\"1281\" y=\"1916\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"352\" name=\"Light\" type=\"light\" x=\"2811.19\" y=\"1926.03\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"353\" name=\"Light\" type=\"light\" x=\"3056.67\" y=\"1921.33\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"354\" name=\"Light\" type=\"light\" x=\"3053.65\" y=\"153.433\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"355\" name=\"Light\" type=\"light\" x=\"3279.31\" y=\"185.918\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"356\" name=\"Light\" type=\"light\" x=\"3611.52\" y=\"247.622\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"357\" name=\"Light\" type=\"light\" x=\"3837.18\" y=\"280.107\">\n   <properties>\n    <property name=\"brightness\" type=\"float\" value=\"0.9\"/>\n    <property name=\"color\" type=\"color\" value=\"#fffff9f3\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"11\" name=\"Turrets\" locked=\"1\">\n  <object id=\"278\" name=\"Turret\" type=\"turret\" x=\"375\" y=\"236.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"171\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"279\" name=\"Turret\" type=\"turret\" x=\"922.25\" y=\"148.333\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"171\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"280\" name=\"Turret\" type=\"turret\" x=\"3173.92\" y=\"147.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"189\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"282\" name=\"Turret\" type=\"turret\" x=\"3721.83\" y=\"239.167\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"189\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"283\" name=\"Turret\" type=\"turret\" x=\"4020.15\" y=\"658.121\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"216\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"284\" name=\"Turret\" type=\"turret\" x=\"2933.83\" y=\"1946\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"285\" name=\"Turret\" type=\"turret\" x=\"1162.52\" y=\"1945\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"0\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"286\" name=\"Turret\" type=\"turret\" x=\"78.3333\" y=\"659.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"140\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"287\" name=\"Turret\" type=\"turret\" x=\"2005.83\" y=\"303.167\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"210\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n  <object id=\"289\" name=\"Turret\" type=\"turret\" x=\"2090.67\" y=\"302.667\">\n   <properties>\n    <property name=\"angle\" type=\"int\" value=\"150\"/>\n    <property name=\"disableFiring\" type=\"bool\" value=\"true\"/>\n    <property name=\"disableOutlines\" type=\"bool\" value=\"true\"/>\n    <property name=\"range\" type=\"int\" value=\"1000\"/>\n    <property name=\"team\" type=\"int\" value=\"-1\"/>\n   </properties>\n   <point/>\n  </object>\n </objectgroup>\n <objectgroup id=\"9\" name=\"Z_Objects\" locked=\"1\">\n  <object id=\"265\" gid=\"6\" x=\"282.926\" y=\"269.428\" width=\"194\" height=\"194\" rotation=\"350.2\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"272\" gid=\"6\" x=\"831.909\" y=\"173.545\" width=\"194\" height=\"194\" rotation=\"350.2\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"273\" gid=\"6\" x=\"5.57483\" y=\"723.669\" width=\"194\" height=\"194\" rotation=\"324.158\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"274\" gid=\"6\" x=\"1257.61\" y=\"1927.17\" width=\"194\" height=\"194\" rotation=\"178.58\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"275\" gid=\"6\" x=\"3030.31\" y=\"1925.93\" width=\"194\" height=\"194\" rotation=\"179.34\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"276\" gid=\"6\" x=\"3078.72\" y=\"146.118\" width=\"194\" height=\"194\" rotation=\"6.77172\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"277\" gid=\"6\" x=\"3626.41\" y=\"236.463\" width=\"194\" height=\"194\" rotation=\"6.77172\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"288\" gid=\"6\" x=\"1915.03\" y=\"364.575\" width=\"269.434\" height=\"269.434\" rotation=\"359.423\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"290\" gid=\"5\" x=\"38.9716\" y=\"1554.09\" width=\"256\" height=\"512\" rotation=\"351.213\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"291\" gid=\"5\" x=\"4133.83\" y=\"1058.28\" width=\"256\" height=\"512\" rotation=\"188.902\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n  <object id=\"369\" gid=\"6\" x=\"3933.37\" y=\"609.199\" width=\"194\" height=\"194\" rotation=\"39.158\">\n   <properties>\n    <property name=\"zIndex\" type=\"int\" value=\"-5000\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Outer_Hitboxes\" locked=\"1\">\n  <object id=\"162\" type=\"static_wall\" x=\"-129.069\" y=\"7.57558\" width=\"1975.54\" height=\"509.808\" rotation=\"350.544\"/>\n  <object id=\"295\" type=\"static_wall\" x=\"1633.81\" y=\"-263.936\" width=\"778.825\" height=\"407.171\" rotation=\"35.9775\"/>\n  <object id=\"296\" type=\"static_wall\" x=\"2701.04\" y=\"61.3076\" width=\"778.825\" height=\"498.74\" rotation=\"143.327\"/>\n  <object id=\"297\" type=\"static_wall\" x=\"2424.84\" y=\"-275.442\" width=\"1975.54\" height=\"494.354\" rotation=\"9.35229\"/>\n  <object id=\"298\" type=\"static_wall\" x=\"1921.33\" y=\"316.333\">\n   <polygon points=\"-0.666667,-86.6667 1.33333,201.333 127,295.333 250.667,201.333 252.667,-87.6667\"/>\n  </object>\n  <object id=\"299\" type=\"static_wall\" x=\"-301\" y=\"525\">\n   <polygon points=\"0,0 461,-97 523,262 400,452 16,427\"/>\n  </object>\n  <object id=\"300\" type=\"static_wall\" x=\"-280.948\" y=\"767.392\" width=\"413.407\" height=\"409.658\" rotation=\"350.544\"/>\n  <object id=\"301\" type=\"static_wall\" x=\"-361.37\" y=\"1110.5\" width=\"413.407\" height=\"519.915\" rotation=\"350.544\"/>\n  <object id=\"302\" type=\"static_wall\" x=\"-161.037\" y=\"1497.59\" width=\"413.407\" height=\"357.814\" rotation=\"350.544\"/>\n  <object id=\"303\" type=\"static_wall\" x=\"-107.611\" y=\"1918\" width=\"485.413\" height=\"566.65\" rotation=\"318.645\"/>\n  <object id=\"304\" type=\"static_wall\" x=\"4190\" y=\"1906.08\" width=\"413.407\" height=\"409.658\" rotation=\"189.132\"/>\n  <object id=\"305\" type=\"static_wall\" x=\"4377.88\" y=\"1597.58\" width=\"413.407\" height=\"519.915\" rotation=\"189.132\"/>\n  <object id=\"306\" type=\"static_wall\" x=\"4304.53\" y=\"1181.54\" width=\"413.407\" height=\"260.164\" rotation=\"189.132\"/>\n  <object id=\"307\" type=\"static_wall\" x=\"368.954\" y=\"2348.67\" width=\"351.412\" height=\"3197.13\" rotation=\"269.973\"/>\n  <object id=\"308\" type=\"static_wall\" x=\"1881.53\" y=\"2113.58\" width=\"142.428\" height=\"335.227\" rotation=\"269.973\"/>\n  <object id=\"309\" type=\"static_wall\" x=\"706\" y=\"2058\">\n   <polygon points=\"0,0 319,-299 519,-331 895,-54 895,262 449,372\"/>\n  </object>\n  <object id=\"310\" type=\"static_wall\" x=\"1537\" y=\"2402\">\n   <polygon points=\"0,0 -18,-449 354,-444 437,-383 184,15\"/>\n  </object>\n  <object id=\"311\" type=\"static_wall\" x=\"2200\" y=\"1956\">\n   <polygon points=\"0,0 461,2 393,509 57,511 -28,21\"/>\n  </object>\n  <object id=\"312\" type=\"static_wall\" x=\"2869.53\" y=\"1727.05\" rotation=\"359.707\">\n   <polygon points=\"0,0 202.667,34 468,284 68.6667,705.333 -318,232.667\"/>\n  </object>\n  <object id=\"313\" type=\"static_wall\" x=\"3729.99\" y=\"2505.37\" width=\"515.181\" height=\"767.408\" rotation=\"221.227\"/>\n  <object id=\"315\" type=\"static_wall\" x=\"3935\" y=\"432\">\n   <polygon points=\"0,0 -61,356 116,629 472,649 497,41\"/>\n  </object>\n </objectgroup>\n</map>\n";

const mapNodeGraphs = {};
let mapKeys = Object.keys(maps);
for (let i=0; i<mapKeys.length; i++) {
    let mapKey = mapKeys[i];
    try {
        let ain = fs.readFileSync('./public/assets/maps/' + mapKey + '/' + mapKey + '.ain', 'binary');
        mapNodeGraphs[mapKey] = JSON.parse(ain);
    } catch (e) {}
}

function loadVehicle(data) {
    return xmlParser.parse(data, {
        attributeNamePrefix: '',
        ignoreAttributes: false,
        arrayMode: true,
        trimValues: true
    }).map[0];
}

const vehicleData = {
    'bruh': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.2\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"2.1\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"30\"/>\n  <property name=\"name\" value=\"BRUH\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"10000\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.6\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.075\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.05\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.02\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"tank_stug_hull.png\"/>\n  </tile>\n  <tile id=\"7\">\n   <image width=\"128\" height=\"128\" source=\"medium_halftrack_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"9\" name=\"Hitbox\" x=\"80.9341\" y=\"240.043\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 95.0362,0 94.7297,-149.605 -0.306568,-149.299\"/>\n  </object>\n  <object id=\"14\" name=\"Hitbox\" x=\"56.4086\" y=\"90.4377\">\n   <properties>\n    <property name=\"face0\" value=\"front\"/>\n    <property name=\"face1\" value=\"front\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n   </properties>\n   <polygon points=\"0,0 142.861,0.306568 143.474,-48.4378 138.876,-53.6495 4.29196,-53.3429 -0.306568,-48.4378\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"24\">\n  <object id=\"15\" name=\"Gun\" gid=\"8\" x=\"48\" y=\"185\" width=\"160\" height=\"160\"/>\n </objectgroup>\n</map>\n"),
    'light_tank': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.5\" tiledversion=\"1.6.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"8\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"1000\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"350\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"250\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"float\" value=\"18\"/>\n  <property name=\"name\" value=\"LT Mk. VI\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2500\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.08\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tank_light_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"tank_light_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"7\" name=\"Hitbox\" x=\"89.25\" y=\"239.5\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"rear\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"rear\"/>\n   </properties>\n   <polygon points=\"0,0 76.75,0.5 83.75,-9.75 83.75,-170.75 38.75,-200 -5.75,-169.75 -5.25,-9.25\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"52\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"193\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'medium_tank': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"8\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"38\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"800\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"300\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"int\" value=\"20\"/>\n  <property name=\"name\" value=\"Grizzly Mk. I\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"5000\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.75\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.125\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.065\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tank_medium_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"tank_medium_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"7\" name=\"Engine\" type=\"internal\" x=\"100\" y=\"180\" width=\"56\" height=\"56\"/>\n  <object id=\"6\" name=\"Hitbox\" x=\"79.3333\" y=\"242.667\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 97.3333,0 98,-205.333 70.6667,-216.667 27.6667,-216.333 -0.666667,-205\"/>\n  </object>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-16\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"194\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'assault_gun': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"15\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.25\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"45\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.68\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"22\"/>\n  <property name=\"name\" value=\"Sturg III\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"7500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.85\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.08\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.06\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.175\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"128\" source=\"tank_stug_barrel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"tank_stug_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"9\" name=\"Hitbox\" x=\"80.9341\" y=\"240.043\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 95.0362,0 94.7297,-149.605 -0.306568,-149.299\"/>\n  </object>\n  <object id=\"14\" name=\"Hitbox\" x=\"56.4086\" y=\"90.4377\">\n   <properties>\n    <property name=\"face0\" value=\"front\"/>\n    <property name=\"face1\" value=\"front\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n   </properties>\n   <polygon points=\"0,0 142.861,0.306568 143.474,-48.4378 138.876,-53.6495 4.29196,-53.3429 -0.306568,-48.4378\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-60\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"128\" width=\"64\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'super_tank': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.5\" tiledversion=\"1.6.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"128\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"8\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"800\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"300\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"name\" value=\"Super Tank\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.125\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.065\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"32\" height=\"64\" source=\"tank_medium_barrel.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tank_medium_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"128\" source=\"tank_medium_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"280\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"48\" y=\"280\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"7\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"492\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"8\" name=\"Track1\" gid=\"5\" x=\"48\" y=\"492\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"276\" width=\"256\" height=\"256\"/>\n  <object id=\"6\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"496\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"79.25\" y=\"482.25\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 99.75,0.5 99.25,-424.75 71.25,-436.25 27,-436.75 -1.5,-425.5\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-124\">\n  <object id=\"3\" name=\"Barrel\" gid=\"1\" x=\"112\" y=\"216\" width=\"32\" height=\"64\"/>\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"322\" width=\"128\" height=\"128\"/>\n </objectgroup>\n <objectgroup id=\"7\" name=\"Turret\" offsetx=\"0\" offsety=\"96\">\n  <object id=\"13\" name=\"Barrel\" gid=\"1\" x=\"112\" y=\"216\" width=\"32\" height=\"64\"/>\n  <object id=\"14\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"322\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'racecar': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"8\" nextobjectid=\"20\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"500\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"200\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"float\" value=\"15\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.125\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.065\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"64\" height=\"128\" source=\"racecar.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"26\" height=\"52\" source=\"wheel.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"56.3636\" offsety=\"-78.1818\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"116\" y=\"152\" width=\"26\" height=\"52\"/>\n </objectgroup>\n <objectgroup id=\"7\" name=\"Wheels\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"15\" name=\"Wheel\" gid=\"6\" x=\"170.909\" y=\"240\" width=\"26\" height=\"52\"/>\n  <object id=\"17\" name=\"Wheel\" gid=\"6\" x=\"59.6364\" y=\"240\" width=\"26\" height=\"52\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Wheels\" offsetx=\"-59.0909\" offsety=\"-77.4545\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"16\" name=\"Wheel\" gid=\"6\" x=\"117.25\" y=\"152\" width=\"26\" height=\"52\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"18\" name=\"Hitbox\" x=\"82.25\" y=\"232.75\">\n   <properties>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"false\"/>\n   </properties>\n   <polygon points=\"-2.25,7.25 21.75,15.25 69.75,15.25 93.75,7.25 94.5,-193 73.75,-212.75 45.75,-220.75 17.75,-212.75 -1.25,-195.75\"/>\n  </object>\n </objectgroup>\n</map>\n"),
    'sebtank': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.5\" tiledversion=\"1.6.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"7\" nextobjectid=\"11\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.4\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.9\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"800\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"240\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"25\"/>\n  <property name=\"name\" value=\"Sebtank\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4500\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.075\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.05\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tank_mkv_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"64\" height=\"64\" source=\"tank_mkv_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"7\" name=\"Engine\" type=\"internal\" x=\"100\" y=\"180\" width=\"56\" height=\"56\"/>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"8\" name=\"Hitbox\" x=\"50.9521\" y=\"244.134\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 154.219,-0.544942 162.393,-85.5559 162.12,-183.373 155.581,-232.963 -0.544942,-233.508 -8.4466,-189.367 -8.99154,-82.8311\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"167\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"57\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"5\" name=\"Turret\" offsetx=\"-108\" offsety=\"-4\">\n  <object id=\"9\" gid=\"3\" x=\"96\" y=\"148\" width=\"64\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"6\" name=\"Turret\" offsetx=\"108\" offsety=\"-4\">\n  <object id=\"10\" gid=\"3\" x=\"96\" y=\"148\" width=\"64\" height=\"64\"/>\n </objectgroup>\n</map>\n"),
    'light_scout': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"14\" nextobjectid=\"34\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.2\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"26\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.4\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"300\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"150\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"140\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"200\"/>\n  <property name=\"mass\" type=\"float\" value=\"15\"/>\n  <property name=\"name\" value=\"E1 Starhund\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2100\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.5\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.125\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.12\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"light_scout_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"light_scout_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"13\" name=\"Wheels\" locked=\"1\">\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"160.637\" y=\"236.014\" width=\"29.5455\" height=\"64\"/>\n  <object id=\"32\" name=\"Wheel\" gid=\"6\" x=\"65.8835\" y=\"236\" width=\"29.5455\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"48.9091\" offsety=\"-60\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"29.5455\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-44.7273\" offsety=\"-60\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"111.897\" y=\"155.091\" width=\"30.3636\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"25\" name=\"Hitbox\" x=\"109.5\" y=\"227.75\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"rear\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n    <property name=\"face8\" value=\"side\"/>\n    <property name=\"face9\" value=\"rear\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"false\"/>\n   </properties>\n   <polygon points=\"-9.5,0.25 50.5,0.25 62.5,-55.75 62.5,-107.75 58.5,-159.75 46.5,-191.75 -9.5,-191.75 -21.5,-159.75 -25.5,-107.75 -25.5,-55.75\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"16\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"168\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'medium_halftrack': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"12\" nextobjectid=\"32\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.6\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.12\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"300\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"120\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"140\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"250\"/>\n  <property name=\"mass\" type=\"float\" value=\"16\"/>\n  <property name=\"name\" value=\"C3 Half-Track\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"3500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"1\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.125\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.05\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"medium_halftrack_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"medium_halftrack_turret.png\"/>\n  </tile>\n  <tile id=\"7\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"50.5\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"29.4545\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-46.25\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"112.079\" y=\"155.091\" width=\"30.1818\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"11\" name=\"Tracks\" locked=\"1\">\n  <object id=\"28\" name=\"Track2\" gid=\"8\" x=\"164\" y=\"256\" width=\"24\" height=\"146.5\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"26\" name=\"Track1\" gid=\"8\" x=\"68\" y=\"256\" width=\"24\" height=\"146.5\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"31\" name=\"Hitbox\" x=\"92.75\" y=\"253.75\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"rear\"/>\n    <property name=\"face10\" value=\"side\"/>\n    <property name=\"face11\" value=\"side\"/>\n    <property name=\"face12\" value=\"side\"/>\n    <property name=\"face13\" value=\"rear\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"front\"/>\n    <property name=\"face8\" value=\"side\"/>\n    <property name=\"face9\" value=\"side\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"false\"/>\n   </properties>\n   <polygon points=\"0,0 70.25,0.25 89.25,-20 90,-103.25 80.75,-117.5 82,-192.25 68.25,-212.25 67.5,-250.5 4,-250.75 3.5,-213 -11,-192.5 -10,-117.5 -20,-104.75 -19.75,-20\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"64\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"168\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'm5_stout': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"6\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.75\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.8\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"900\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"360\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"250\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"150\"/>\n  <property name=\"mass\" type=\"float\" value=\"19\"/>\n  <property name=\"name\" value=\"M5 Stout\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"3200\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.9\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.13\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.07\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"32\" height=\"64\" source=\"tank_m5stout_barrel.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tank_m5stout_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"128\" source=\"tank_m5stout_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"64\" y=\"244\" width=\"28.4091\" height=\"227.273\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"Track2\" gid=\"5\" x=\"163.636\" y=\"244\" width=\"28.4091\" height=\"227.273\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"16\" name=\"Hitbox\" x=\"72\" y=\"232\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-4,0 112,0 112,-144 92,-184 20,-184 -4,-144\"/>\n  </object>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-4\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"190\" width=\"128\" height=\"128\"/>\n  <object id=\"3\" name=\"Barrel\" gid=\"1\" x=\"112\" y=\"76\" width=\"32\" height=\"64\"/>\n </objectgroup>\n</map>\n"),
    'hefty_mk1': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"18\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.2\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"50\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.45\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"700\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"150\"/>\n  <property name=\"mass\" type=\"int\" value=\"23\"/>\n  <property name=\"name\" value=\"Hefty Mk. I\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.65\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.042\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"hefty_mki_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"hefty_mki_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"17\" name=\"Hitbox\" x=\"72\" y=\"248\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 112,0 114.091,-208.182 75.1818,-241 37.2727,-240.909 -2,-208.182\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-16\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"229\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'pike_spg': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.5\" tiledversion=\"1.6.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.15\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.16\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"Pike SPG\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.88\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.175\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.05\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"16\" height=\"128\" source=\"tank_pike_spg_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"tank_pike_spg_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\" locked=\"1\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"172\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"52\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"68\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 120,0 120,-84 96,-212 24,-212 0,-88\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"3\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"120\" y=\"128\" width=\"16\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'm42_chuffy': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"6\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.8\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"48\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.95\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"850\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"320\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"240\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"150\"/>\n  <property name=\"mass\" type=\"float\" value=\"20\"/>\n  <property name=\"name\" value=\"M42 Chuffy\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4000\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.85\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.13\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.05\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"M42chuffy_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"M42chuffy_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"58\" y=\"243\" width=\"28.4091\" height=\"227.273\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"Track2\" gid=\"5\" x=\"168.636\" y=\"243\" width=\"28.4091\" height=\"227.273\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"16\" name=\"Hitbox\" x=\"72\" y=\"232\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"12,0 96,0 96,-184 88,-208 20,-208 12,-184\"/>\n  </object>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-4\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"220\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'm88_greyman': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"15\" nextobjectid=\"32\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.35\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"42\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.47\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"130\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"120\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"200\"/>\n  <property name=\"mass\" type=\"float\" value=\"17\"/>\n  <property name=\"name\" value=\"M88 Greyman\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2300\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.14\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.13\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"M88greyman_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"256\" source=\"M88greyman_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"14\" name=\"Wheels\" offsetx=\"1.25\" offsety=\"160.25\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"30\" name=\"Wheel\" gid=\"6\" x=\"64\" y=\"80\" width=\"29.8182\" height=\"64\"/>\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"160.268\" y=\"80.2688\" width=\"29.2727\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"13\" name=\"Wheels\" offsetx=\"0.5\" offsety=\"98\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"27\" name=\"Wheel\" gid=\"6\" x=\"63.6403\" y=\"80\" width=\"29.6364\" height=\"64\"/>\n  <object id=\"29\" name=\"Wheel\" gid=\"6\" x=\"162.909\" y=\"80\" width=\"28.7273\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"48.5455\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"114.011\" y=\"155.091\" width=\"26.3636\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-47.6364\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"114.988\" y=\"155.091\" width=\"27.2727\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"25\" name=\"Hitbox\" x=\"109.5\" y=\"227.75\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-25.5,12.25 62.5,12.25 72.9656,-48.0833 73.125,-159.75 50.4091,-212.568 -12.1364,-212.568 -35.7083,-162.083 -34.8043,-47.8804\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" locked=\"1\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"220\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'm61_halftrack': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"12\" nextobjectid=\"32\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.65\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.43\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"300\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"120\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"110\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"250\"/>\n  <property name=\"mass\" type=\"float\" value=\"17\"/>\n  <property name=\"name\" value=\"M61 Half-Track\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"1800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"1\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.14\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.06\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"M61halftrack_hull2.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"M61halftrack_turret.png\"/>\n  </tile>\n  <tile id=\"7\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"52\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-48.25\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"11\" name=\"Tracks\">\n  <object id=\"28\" name=\"Track2\" gid=\"8\" x=\"167.843\" y=\"263.5\" width=\"25.2287\" height=\"154\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"26\" name=\"Track1\" gid=\"8\" x=\"62.9283\" y=\"263.5\" width=\"25.2287\" height=\"154\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"31\" name=\"Hitbox\" x=\"92.75\" y=\"253.75\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"false\"/>\n   </properties>\n   <polygon points=\"-21.4773,-9.56818 92.9375,-9.6875 92.1932,-113.736 59.25,-225.75 11.5227,-225.75 -22.2283,-113.663\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" offsetx=\"0\" offsety=\"64\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"168\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'm108_wolfcat': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"15\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.78\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"52\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.44\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"600\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"240\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"200\"/>\n  <property name=\"mass\" type=\"int\" value=\"21\"/>\n  <property name=\"name\" value=\"M108 Wolfcat\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"5750\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.85\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.14\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.11\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.032\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"M108wolfcat_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"M108wolfcat_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"252\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"252\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"8\" name=\"Hitbox\" x=\"72\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-9,3 120.75,3.25 119.75,-213.5 -8,-213.5\"/>\n  </object>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"255\" width=\"256\" height=\"256\"/>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"12\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"220\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'm70_beast': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"15\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.22\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"30\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.62\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"700\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"21.5\"/>\n  <property name=\"name\" value=\"M70 Beast\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"7300\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.8\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.096\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.08\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.178\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"128\" source=\"M70beast_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"M70beast_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"9\" name=\"Hitbox\" x=\"80.9341\" y=\"240.043\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-24.9341,-4.043 119.066,-4.043 119.066,-212.043 -24.9341,-212.043\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-36\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"167\" width=\"64\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'm4_sherwin': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.5\" tiledversion=\"1.6.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.92\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.95\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"750\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"350\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"310\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"int\" value=\"20\"/>\n  <property name=\"name\" value=\"M4 Sherwin\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4600\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.6\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.17\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.058\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"M4sherwin_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"M4sherwin_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"88\" y=\"232\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 80,0 104,-84 104,-160 80,-196 -4,-196 -24,-160 -24,-84\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"224\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'm4_jumbo': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.23\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.5\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"240\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"220\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"300\"/>\n  <property name=\"mass\" type=\"float\" value=\"23.5\"/>\n  <property name=\"name\" value=\"M4 Jumbo\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6400\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.58\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.09\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.043\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"M4Jumbo_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"M4Jumbo_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"255\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"255\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"88\" y=\"232\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-4.25,-4.25 83,-4 106.75,-80.25 106.5,-179.25 89.75,-195.5 -12.5,-194.75 -28,-180 -28,-80\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"220\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'jagdsherwin': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.15\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"50\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.55\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"Jagdsherwin\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.58\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"128\" source=\"Jagdsherwin_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"Jagdsherwin_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"88\" y=\"232\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 80,0 104,-84 104,-160 80,-196 -4,-196 -24,-160 -24,-84\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-46\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"112\" y=\"128\" width=\"32\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'pt5': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"9\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.45\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.42\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"1000\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"480\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"350\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"float\" value=\"18\"/>\n  <property name=\"name\" value=\"PT-5 Hussar\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2200\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.5\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.21\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.07\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"pt-5_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"pt-5_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"164\" y=\"256\" width=\"24\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"68\" y=\"256\" width=\"24\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"8\" name=\"Hitbox\" x=\"88\" y=\"240\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 80,0 80,-152 48,-204 32,-204 0,-152\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"-14\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"224\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'p70': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"6\" nextobjectid=\"19\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.68\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.8\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"850\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"360\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"300\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"125\"/>\n  <property name=\"mass\" type=\"float\" value=\"20\"/>\n  <property name=\"name\" value=\"P-70 Serf\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"3000\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.88\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.08\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"p-70_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"p-70_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"60\" y=\"248\" width=\"28.4091\" height=\"236\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"Track2\" gid=\"5\" x=\"168\" y=\"248\" width=\"28.4091\" height=\"236\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"18\" name=\"Hitbox\" x=\"88\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"front\"/>\n    <property name=\"face8\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 88,0 88,-56 92,-60 92,-144 88,-152 80,-152 80,-212 0,-212\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"-14\" offsety=\"8\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"228\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'p_34_76': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"15\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.11\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.015\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"700\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"int\" value=\"21\"/>\n  <property name=\"name\" value=\"P-34/76 Cossack\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4600\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.055\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"0\">\n   <image width=\"32\" height=\"64\" source=\"tank_medium_p3476_barrel.png\"/>\n  </tile>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tank_medium_p3476_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"128\" source=\"tank_medium_p3476_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"8\" name=\"Hitbox\" x=\"72\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 112,0 112,-196 0,-196\"/>\n  </object>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-16\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"194\" width=\"128\" height=\"128\"/>\n  <object id=\"3\" name=\"Barrel\" gid=\"1\" x=\"112\" y=\"88\" width=\"32\" height=\"64\"/>\n </objectgroup>\n</map>\n"),
    'p_34_85': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"15\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.19\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"55\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.14\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"700\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"200\"/>\n  <property name=\"mass\" type=\"int\" value=\"22\"/>\n  <property name=\"name\" value=\"P-34/85 Commissar\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"5100\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.048\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"p-34-85_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"p-34-85_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"258\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"8\" name=\"Hitbox\" x=\"72\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 112,0 112,-196 0,-196\"/>\n  </object>\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-2\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"204\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'cy76': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"18\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.2\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"50\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.015\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"320\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"240\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"CY-76 Longbow\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4200\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.84\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.05\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"256\" source=\"cy_76_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"cy_76_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\" locked=\"1\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"172\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"52\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"17\" name=\"Hitbox\" x=\"68\" y=\"232\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face10\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"front\"/>\n    <property name=\"face8\" value=\"side\"/>\n    <property name=\"face9\" value=\"front\"/>\n   </properties>\n   <polygon points=\"0,0 120,0 120,-88 116,-88 116,-152 112,-160 104,-160 104,-216 16,-216 16,-88 0,-88\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"36\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"204\" width=\"64\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'cy122': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"15\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.16\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"35\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.62\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"680\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"280\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"22\"/>\n  <property name=\"name\" value=\"CY-122 Ursa\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.85\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.096\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.08\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.176\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.028\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"128\" source=\"cy_122_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"cy_122_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"9\" name=\"Hitbox\" x=\"80.9341\" y=\"240.043\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-8.9341,-8.043 103.066,-8.043 103.066,-204.043 -8.9341,-204.043\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-76\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"164\" width=\"64\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'tigur1': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.225\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.55\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"650\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"220\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"200\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"350\"/>\n  <property name=\"mass\" type=\"int\" value=\"24\"/>\n  <property name=\"name\" value=\"Tigress I\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.45\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.09\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.07\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"tigur1_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"tigur1_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"248\" width=\"32\" height=\"240\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"248\" width=\"32\" height=\"240\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"268\" width=\"256\" height=\"256\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"56\" y=\"224\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 144,0 144,-188 0,-188\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-12\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"212\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'panthur': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.2\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.05\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.4\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"680\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"270\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"280\"/>\n  <property name=\"mass\" type=\"int\" value=\"23\"/>\n  <property name=\"name\" value=\"Panthera\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"5700\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.52\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.11\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.055\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"panthur_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"panthur_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"248\" width=\"32\" height=\"240\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"248\" width=\"32\" height=\"240\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"268\" width=\"256\" height=\"256\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"56\" y=\"224\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 144,0 144,-188 0,-188\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-4\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"208\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'turret': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"12\" nextobjectid=\"33\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.6\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.4\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"250\"/>\n  <property name=\"mass\" type=\"float\" value=\"0\"/>\n  <property name=\"name\" value=\"Turret\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"1500\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.25\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"128\" tilecount=\"2\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"128\" source=\"autoturret_hull.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"autoturret_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"192\" width=\"128\" height=\"128\"/>\n  <object id=\"32\" name=\"Hitbox\" x=\"92.5455\" y=\"189.818\">\n   <properties>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"15.4545,-17.818 51.4545,-17.818 79.4545,-45.818 79.4545,-73.818 55.4545,-101.818 15.4545,-101.818 -8.5455,-77.818 -8.5455,-45.818\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"168\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'weevil_mkv': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.5\" tiledversion=\"1.6.0\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"19\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.22\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.25\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.15\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"700\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"120\"/>\n  <property name=\"mass\" type=\"int\" value=\"23\"/>\n  <property name=\"name\" value=\"Weevil\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"5700\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.62\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.125\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.045\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"weevil_mkv_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"weevil_mkv_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"18\" name=\"Hitbox\" x=\"64\" y=\"244\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 124,0 136,-32 136,-172 118.364,-231.818 8,-232 -8.90909,-172.091 -9.09091,-36.1818\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-20\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"229\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'vk_1': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.245\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.2\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.12\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"215\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"300\"/>\n  <property name=\"mass\" type=\"float\" value=\"24.5\"/>\n  <property name=\"name\" value=\"VK-1 Bogatyr\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4900\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.62\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.08\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.048\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"VK-1_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"VK-1_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"255\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"255\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"80\" y=\"240\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 96,0 92,-228 0,-228\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-12\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"224\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'vk_2': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.245\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.2\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.58\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"660\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"215\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"25.5\"/>\n  <property name=\"name\" value=\"VK-2 Hammer\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"7300\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.68\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.08\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.06\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.032\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"VK-2_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"VK-2_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"255\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"52\" y=\"255\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"80\" y=\"240\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 96,0 92,-228 0,-228\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-12\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"224\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'si_2': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"22\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.14\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"70\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.45\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"700\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"255\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"230\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"150\"/>\n  <property name=\"mass\" type=\"int\" value=\"22\"/>\n  <property name=\"name\" value=\"SI-2 Tsar\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.65\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.11\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.09\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.039\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"SI-2_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"SI-2_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"264\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"50\" y=\"264\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"21\" name=\"Hitbox\" x=\"66\" y=\"240\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"front\"/>\n    <property name=\"face7\" value=\"front\"/>\n    <property name=\"face8\" value=\"front\"/>\n    <property name=\"face9\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 122,0.75 122,-172.25 98,-204 97.5,-220 74.25,-232 48.25,-232 25.375,-220.5 24.875,-203.875 -1,-173\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-20\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"196\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'ant_57': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"20\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"50\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"855\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"365\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"330\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"125\"/>\n  <property name=\"mass\" type=\"float\" value=\"19\"/>\n  <property name=\"name\" value=\"ANT-57\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"3800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.86\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.13\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.175\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"256\" source=\"ANT-57_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"256\" source=\"ANT-57_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"168\" y=\"228\" width=\"24\" height=\"200\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"64\" y=\"228\" width=\"24\" height=\"200\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"18\" name=\"Hitbox\" x=\"96\" y=\"212\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"rear\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"front\"/>\n    <property name=\"face8\" value=\"side\"/>\n    <property name=\"face9\" value=\"rear\"/>\n   </properties>\n   <polygon points=\"0,0 64,0 88.75,-9 89.75,-88.5 75.75,-102 74.75,-168.75 -11.5,-168.25 -12.25,-102 -26.25,-88.5 -25.5,-10.25\"/>\n  </object>\n  <object id=\"19\" name=\"Terrain Hitbox\" x=\"68\" y=\"216\">\n   <properties>\n    <property name=\"useOnlyAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 120,0 120,-180 0,-180\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"-12\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"224\" width=\"64\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'zag_mm': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"15\" nextobjectid=\"34\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.22\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"35\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.45\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"142\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"110\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"200\"/>\n  <property name=\"mass\" type=\"float\" value=\"16\"/>\n  <property name=\"name\" value=\"ZAG-MM Tachka\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"1800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.6\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.17\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.13\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.1\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"ZAG-MM_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"64\" height=\"256\" source=\"ZAG-MM_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"14\" name=\"Wheels\" locked=\"1\" offsetx=\"1.25\" offsety=\"160.25\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"30\" name=\"Wheel\" gid=\"6\" x=\"60\" y=\"80\" width=\"32\" height=\"64\"/>\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"161.5\" y=\"80\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"48\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-44\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"33\" name=\"Hitbox\" x=\"72\" y=\"248\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"front\"/>\n    <property name=\"face7\" value=\"side\"/>\n    <property name=\"face8\" value=\"front\"/>\n    <property name=\"face9\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 112,0 112,-120 96,-120 96,-172 72,-224 40,-224 16,-172 16,-120 0,-120\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" offsetx=\"0\" offsety=\"48\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"96\" y=\"224\" width=\"64\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'zag_hg': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"15\" nextobjectid=\"34\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.32\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"0.24\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"35\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.18\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"142\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"110\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"400\"/>\n  <property name=\"mass\" type=\"float\" value=\"17\"/>\n  <property name=\"name\" value=\"ZAG-HG Scythe\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"3500\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.8\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.17\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.13\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.35\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.05\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"zag_hg_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"zag_hg_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"14\" name=\"Wheels\" locked=\"1\" offsetx=\"1.25\" offsety=\"160.25\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"30\" name=\"Wheel\" gid=\"6\" x=\"60\" y=\"80\" width=\"32\" height=\"64\"/>\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"162\" y=\"79.5\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"48\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-44\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"33\" name=\"Hitbox\" x=\"72\" y=\"248\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"front\"/>\n    <property name=\"face7\" value=\"side\"/>\n    <property name=\"face8\" value=\"front\"/>\n    <property name=\"face9\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 112,0 112,-120 96,-120 96,-172 72,-224 40,-224 16,-172 16,-120 0,-120\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"48\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"176\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'm61b_butcher': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"12\" nextobjectid=\"35\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"0.67\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.46\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"300\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"120\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"140\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"1200\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"M61B Butcher\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"7400\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.9\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.14\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.32\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.025\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"M61B_butcher_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"256\" source=\"M61B_butcher__turret.png\"/>\n  </tile>\n  <tile id=\"7\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <tileset firstgid=\"9\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"../m61_halftrack/M61halftrack_hull2.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"../m61_halftrack/M61halftrack_turret.png\"/>\n  </tile>\n  <tile id=\"7\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"5\" name=\"Wheels\" offsetx=\"52\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"34\" name=\"Wheel\" gid=\"14\" x=\"110.26\" y=\"155.09\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" offsetx=\"-48.25\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"33\" name=\"Wheel\" gid=\"14\" x=\"110.26\" y=\"155.09\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"11\" name=\"Tracks\">\n  <object id=\"28\" name=\"Track2\" gid=\"8\" x=\"167.843\" y=\"263.5\" width=\"25.2287\" height=\"154\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"26\" name=\"Track1\" gid=\"8\" x=\"62.9283\" y=\"263.5\" width=\"25.2287\" height=\"154\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"31\" name=\"Hitbox\" x=\"92.75\" y=\"253.75\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"false\"/>\n   </properties>\n   <polygon points=\"-21.4773,-9.56818 92.9375,-9.6875 92.1932,-113.736 59.25,-225.75 11.5227,-225.75 -22.2283,-113.663\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" offsetx=\"0\" offsety=\"44\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"212\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'trailer': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"15\" nextobjectid=\"39\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.32\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"0.24\"/>\n  <property name=\"mass\" type=\"float\" value=\"1\"/>\n  <property name=\"name\" value=\"Trailer\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"trailer_A_base.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"8\">\n   <image width=\"128\" height=\"256\" source=\"trailer_A_top.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"14\" name=\"Wheels\" offsetx=\"4\" offsety=\"92\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"30\" name=\"Wheel\" gid=\"6\" x=\"52\" y=\"100\" width=\"32\" height=\"64\"/>\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"160\" y=\"100\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"62.239\" y=\"281.25\" width=\"128\" height=\"256\"/>\n  <object id=\"34\" name=\"Top\" gid=\"9\" x=\"62.239\" y=\"281.25\" width=\"128\" height=\"256\">\n   <properties>\n    <property name=\"disableCosmetics\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"35\" name=\"Hitbox\" x=\"76\" y=\"196\">\n   <properties>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 100,0 100,-88 49.6364,-136.909 0,-84\"/>\n  </object>\n  <object id=\"36\" name=\"Hitbox\" x=\"119.799\" y=\"37.6427\">\n   <properties>\n    <property name=\"isAttachmentPoint\" type=\"bool\" value=\"true\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 0,-11.9501 12.8463,-11.6513 13.4438,0.298751\"/>\n  </object>\n </objectgroup>\n</map>\n"),
    'trailer_gun': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"16\" nextobjectid=\"41\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.32\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"0.24\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"35\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.45\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"200\"/>\n  <property name=\"mass\" type=\"float\" value=\"1\"/>\n  <property name=\"name\" value=\"Trailer\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"1800\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.1\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"trailer_A_base.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"8\">\n   <image width=\"128\" height=\"256\" source=\"trailer_A_top.png\"/>\n  </tile>\n </tileset>\n <tileset firstgid=\"10\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"../zag_mm/ZAG-MM_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"64\" height=\"256\" source=\"../zag_mm/ZAG-MM_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"14\" name=\"Wheels\" offsetx=\"4\" offsety=\"92\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"30\" name=\"Wheel\" gid=\"6\" x=\"52\" y=\"100\" width=\"32\" height=\"64\"/>\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"160\" y=\"100\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"62.239\" y=\"281.25\" width=\"128\" height=\"256\"/>\n  <object id=\"34\" name=\"Top\" gid=\"9\" x=\"62.239\" y=\"281.25\" width=\"128\" height=\"256\">\n   <properties>\n    <property name=\"disableCosmetics\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n  <object id=\"35\" name=\"Hitbox\" x=\"76\" y=\"196\">\n   <properties>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 100,0 100,-88 49.6364,-136.909 0,-84\"/>\n  </object>\n  <object id=\"36\" name=\"Hitbox\" x=\"119.799\" y=\"37.6427\">\n   <properties>\n    <property name=\"isAttachmentPoint\" type=\"bool\" value=\"true\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"0,0 0,-11.9501 12.8463,-11.6513 13.4438,0.298751\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"15\" name=\"Turret\" offsetx=\"-2.33333\" offsety=\"14.3333\">\n  <object id=\"40\" name=\"Turret\" gid=\"16\" x=\"96\" y=\"224\" width=\"64\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'stub_iii': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.21\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"20\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.33\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"650\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"550\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"Stub III\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"5800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.85\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.085\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.065\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.182\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"64\" source=\"stubIII_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"stubIII_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"64\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"front\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 128,0 128,-152 124,-160 124,-204 4,-204 4,-160 0,-152\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-52\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"144\" width=\"64\" height=\"64\"/>\n </objectgroup>\n</map>\n"),
    'stub_iv': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.16\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.13\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"55\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.5\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"650\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"225\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"550\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"Stub IV\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6400\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.85\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.08\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.069\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.188\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.045\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"256\" source=\"stubIV_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"stubIV_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"174\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"50\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"64\" y=\"240\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 128,0 128,-212 0,-212\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-52\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"200\" width=\"64\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'heckler': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"18\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.93\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"0.72\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"50\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.05\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"840\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"340\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"320\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"145\"/>\n  <property name=\"mass\" type=\"float\" value=\"21\"/>\n  <property name=\"name\" value=\"Heckler\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4100\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.86\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.13\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.175\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"128\" source=\"heckler_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"256\" source=\"heckler_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"168\" y=\"244\" width=\"32\" height=\"232\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"56\" y=\"244\" width=\"32\" height=\"232\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"17\" name=\"Hitbox\" x=\"88\" y=\"224\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-4,0 84,0 96,-72 95.4551,-181.82 40,-200 -15.1826,-182.093 -16,-72\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"12\" offsety=\"-64\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"152\" width=\"64\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'jagdpanthera': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"16\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.272\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.1\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"50\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.55\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"655\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"255\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"220\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"500\"/>\n  <property name=\"mass\" type=\"float\" value=\"21.5\"/>\n  <property name=\"name\" value=\"Jagdpanthera\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"6600\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.76\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.085\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.065\"/>\n  <property name=\"turretRotationLimit\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.04\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"64\" height=\"256\" source=\"jagdpanthur_turret.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"256\" height=\"256\" source=\"jagdpanthur_hull.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" type=\"track\" gid=\"5\" x=\"176\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" type=\"track\" gid=\"5\" x=\"48\" y=\"260\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"6\" name=\"Hull\" gid=\"7\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"15\" name=\"Hitbox\" x=\"60\" y=\"240\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 136,0 136,-216 0,-216\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-76\">\n  <object id=\"7\" name=\"Barrel\" gid=\"6\" x=\"96\" y=\"204\" width=\"64\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'pummeler_ii': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"6\" nextobjectid=\"20\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.62\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.66\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"900\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"420\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"330\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"100\"/>\n  <property name=\"mass\" type=\"float\" value=\"19\"/>\n  <property name=\"name\" value=\"Pummeler II\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2900\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.52\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.19\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.065\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"pummelerII_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"pummelerII_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"56\" y=\"248\" width=\"28.4091\" height=\"227.273\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"Track2\" gid=\"5\" x=\"172\" y=\"248\" width=\"28.4091\" height=\"227.273\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"19\" name=\"Hitbox\" x=\"68\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 120,0 120,-120 100,-184 100,-208 20,-208 20,-184 0,-120\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"-16\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"228\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'pummeler_iii': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"6\" nextobjectid=\"20\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.1\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.75\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"680\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"240\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"220\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"120\"/>\n  <property name=\"mass\" type=\"int\" value=\"20\"/>\n  <property name=\"name\" value=\"Pummeler III\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"3100\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.66\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.15\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.062\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"pummelerIII_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"pummelerIII_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"48\" y=\"256\" width=\"32.4091\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"Track2\" gid=\"5\" x=\"176\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"19\" name=\"Hitbox\" x=\"68\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-4,-8 124,-8 124,-136 112,-172 112,-208 8,-208 8,-172 -4,-136\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"4\" offsety=\"8\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"220\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'pummeler_iv': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"6\" nextobjectid=\"20\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.14\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.04\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"680\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"240\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"220\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"150\"/>\n  <property name=\"mass\" type=\"int\" value=\"22\"/>\n  <property name=\"name\" value=\"Pummeler IV\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"4700\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.66\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.12\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.046\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"pummelerIV_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"pummelerIV_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"48\" y=\"256\" width=\"32.4091\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n  <object id=\"10\" name=\"Track2\" gid=\"5\" x=\"176\" y=\"256\" width=\"32\" height=\"256\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"256\" width=\"256\" height=\"256\"/>\n  <object id=\"19\" name=\"Hitbox\" x=\"68\" y=\"236\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"-4,-8 124,-8 124,-136 112,-172 112,-208 8,-208 8,-172 -4,-136\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"4\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"216\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'queen_tigress': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"17\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.28\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"75\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.6\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"650\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"230\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"210\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"550\"/>\n  <property name=\"mass\" type=\"int\" value=\"26\"/>\n  <property name=\"name\" value=\"Queen Tigress\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"7450\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.5\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.1\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.09\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.028\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"kingtigur_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"kingtigur_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"184\" y=\"276\" width=\"32\" height=\"276\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"40\" y=\"276\" width=\"32\" height=\"276\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"268\" width=\"256\" height=\"256\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"56\" y=\"224\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n   </properties>\n   <polygon points=\"4,32 140,32 140,-200 4,-200\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"8\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"204\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'queen_tigress_large': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"18\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.6\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"95\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"1.85\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"650\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"240\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"210\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"550\"/>\n  <property name=\"mass\" type=\"int\" value=\"28\"/>\n  <property name=\"name\" value=\"Queen Tigress\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"7450\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.5\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.085\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.06\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.028\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"kingtigur_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"kingtigur_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"128\" height=\"128\" source=\"queen-crown.png\"/>\n  </tile>\n </tileset>\n <tileset firstgid=\"7\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"256\" source=\"../queen_tigress/kingtigur_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"../queen_tigress/kingtigur_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"128\" height=\"128\" source=\"queen-crown.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"184\" y=\"292\" width=\"48\" height=\"316\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"24\" y=\"292\" width=\"48\" height=\"316\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"-20\" y=\"288\" width=\"296\" height=\"296\"/>\n  <object id=\"16\" name=\"Hitbox\" x=\"56\" y=\"224\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"useAsTerrainHitbox\" type=\"bool\" value=\"true\"/>\n   </properties>\n   <polygon points=\"-16,48 160,48 160,-220 -16,-220\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"16\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"48\" y=\"216\" width=\"160\" height=\"320\"/>\n  <object id=\"17\" name=\"Crown\" gid=\"12\" x=\"48\" y=\"236\" width=\"160\" height=\"160\">\n   <properties>\n    <property name=\"disableCosmetics\" type=\"bool\" value=\"true\"/>\n   </properties>\n  </object>\n </objectgroup>\n</map>\n"),
    'haus': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"5\" nextobjectid=\"18\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"1.6\"/>\n  <property name=\"armorModRear\" type=\"float\" value=\"2.4\"/>\n  <property name=\"armorModSide\" type=\"float\" value=\"1.2\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"85\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"2\"/>\n  <property name=\"engineBoostAngularDamping\" type=\"float\" value=\"0.8\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"900\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"250\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"210\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"1000\"/>\n  <property name=\"mass\" type=\"float\" value=\"35\"/>\n  <property name=\"name\" value=\"Haus\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"9000\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.68\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.0412\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.02\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.013\"/>\n  <property name=\"type\" value=\"heavy\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"384\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"256\" height=\"384\" source=\"haus_hull.png\"/>\n  </tile>\n  <tile id=\"2\">\n   <image width=\"128\" height=\"256\" source=\"haus_turret.png\"/>\n  </tile>\n  <tile id=\"4\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"4\" name=\"Tracks\">\n  <object id=\"4\" name=\"Track2\" gid=\"5\" x=\"180\" y=\"256\" width=\"36\" height=\"280\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"5\" name=\"Track1\" gid=\"5\" x=\"40\" y=\"256\" width=\"36\" height=\"280\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"1\" name=\"Hull\" gid=\"2\" x=\"0\" y=\"312\" width=\"256\" height=\"384\"/>\n  <object id=\"17\" name=\"Hitbox\" x=\"48\" y=\"252\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"front\"/>\n    <property name=\"face3\" value=\"front\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 160,0 160,-248 136,-264 24,-264 0,-248\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"3\" name=\"Turret\" offsetx=\"0\" offsety=\"36\">\n  <object id=\"2\" name=\"Turret\" gid=\"3\" x=\"64\" y=\"196\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
    'hamonag_at': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"12\" nextobjectid=\"34\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.7\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"35\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.65\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"350\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"115\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"110\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"250\"/>\n  <property name=\"mass\" type=\"float\" value=\"18\"/>\n  <property name=\"name\" value=\"Hamonag AT\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2600\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.8\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.18\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.14\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.045\"/>\n  <property name=\"type\" value=\"medium\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"128\" tileheight=\"256\" tilecount=\"4\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"hamonagAT_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"128\" source=\"hamonagAT_turret.png\"/>\n  </tile>\n  <tile id=\"7\">\n   <image width=\"32\" height=\"256\" source=\"../track.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"5\" name=\"Wheels\" locked=\"1\" offsetx=\"48\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" locked=\"1\" offsetx=\"-44.625\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"110.261\" y=\"155.091\" width=\"32\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"11\" name=\"Tracks\">\n  <object id=\"28\" name=\"Track2\" gid=\"8\" x=\"160\" y=\"260\" width=\"28\" height=\"150\">\n   <properties>\n    <property name=\"side\" value=\"right\"/>\n   </properties>\n  </object>\n  <object id=\"26\" name=\"Track1\" gid=\"8\" x=\"68\" y=\"260\" width=\"29.2287\" height=\"150\">\n   <properties>\n    <property name=\"side\" value=\"left\"/>\n   </properties>\n  </object>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\" locked=\"1\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"32\" name=\"Hitbox\" x=\"80\" y=\"248\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"side\"/>\n    <property name=\"face5\" value=\"front\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n    <property name=\"face8\" value=\"side\"/>\n    <property name=\"face9\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 96,0 100,-28 100,-92 96,-136 68,-240 28,-240 0,-136 -4,-92 -4,-28\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"52\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"168\" width=\"128\" height=\"128\"/>\n </objectgroup>\n</map>\n"),
    'cheetah': loadVehicle("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<map version=\"1.8\" tiledversion=\"1.8.1\" orientation=\"orthogonal\" renderorder=\"right-down\" width=\"64\" height=\"64\" tilewidth=\"4\" tileheight=\"4\" infinite=\"0\" nextlayerid=\"15\" nextobjectid=\"33\">\n <properties>\n  <property name=\"armorMod\" type=\"float\" value=\"0.35\"/>\n  <property name=\"barrelLength\" type=\"int\" value=\"42\"/>\n  <property name=\"damageMod\" type=\"float\" value=\"0.55\"/>\n  <property name=\"engineBoostForce\" type=\"float\" value=\"260\"/>\n  <property name=\"engineForce\" type=\"float\" value=\"150\"/>\n  <property name=\"engineForceWithTurn\" type=\"float\" value=\"100\"/>\n  <property name=\"fireForce\" type=\"float\" value=\"250\"/>\n  <property name=\"mass\" type=\"float\" value=\"19\"/>\n  <property name=\"name\" value=\"Cheetah\"/>\n  <property name=\"reloadTime\" type=\"int\" value=\"2800\"/>\n  <property name=\"reverseMod\" type=\"float\" value=\"0.9\"/>\n  <property name=\"turnForce\" type=\"float\" value=\"0.16\"/>\n  <property name=\"turnForceWithEngine\" type=\"float\" value=\"0.11\"/>\n  <property name=\"turretSpeed\" type=\"float\" value=\"0.08\"/>\n  <property name=\"type\" value=\"light\"/>\n </properties>\n <tileset firstgid=\"1\" name=\"parts\" tilewidth=\"256\" tileheight=\"256\" tilecount=\"3\" columns=\"0\">\n  <grid orientation=\"orthogonal\" width=\"1\" height=\"1\"/>\n  <tile id=\"1\">\n   <image width=\"128\" height=\"256\" source=\"cheetah_hull.png\"/>\n  </tile>\n  <tile id=\"5\">\n   <image width=\"32\" height=\"64\" source=\"../wheel.png\"/>\n  </tile>\n  <tile id=\"6\">\n   <image width=\"128\" height=\"256\" source=\"cheetah_turret.png\"/>\n  </tile>\n </tileset>\n <objectgroup id=\"14\" name=\"Wheels\" offsetx=\"0\" offsety=\"168\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"30\" name=\"Wheel\" gid=\"6\" x=\"64.25\" y=\"80\" width=\"29.8182\" height=\"64\"/>\n  <object id=\"31\" name=\"Wheel\" gid=\"6\" x=\"162.91\" y=\"80\" width=\"29.2727\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"13\" name=\"Wheels\" offsetx=\"0\" offsety=\"100\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"false\"/>\n  </properties>\n  <object id=\"27\" name=\"Wheel\" gid=\"6\" x=\"64.25\" y=\"80\" width=\"29.6364\" height=\"64\"/>\n  <object id=\"29\" name=\"Wheel\" gid=\"6\" x=\"162.909\" y=\"80\" width=\"28.7273\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"5\" name=\"Wheels\" locked=\"1\" offsetx=\"52\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"9\" name=\"Wheel\" gid=\"6\" x=\"114.011\" y=\"155.091\" width=\"26.3636\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"10\" name=\"Wheels\" locked=\"1\" offsetx=\"-52\" offsety=\"-76\">\n  <properties>\n   <property name=\"canTurn\" type=\"bool\" value=\"true\"/>\n  </properties>\n  <object id=\"22\" name=\"Wheel\" gid=\"6\" x=\"114.988\" y=\"155.091\" width=\"27.2727\" height=\"64\"/>\n </objectgroup>\n <objectgroup id=\"2\" name=\"Hull\">\n  <object id=\"24\" name=\"Hull\" gid=\"2\" x=\"64\" y=\"256\" width=\"128\" height=\"256\"/>\n  <object id=\"32\" name=\"Hitbox\" x=\"104\" y=\"244\">\n   <properties>\n    <property name=\"face0\" value=\"rear\"/>\n    <property name=\"face1\" value=\"side\"/>\n    <property name=\"face2\" value=\"side\"/>\n    <property name=\"face3\" value=\"side\"/>\n    <property name=\"face4\" value=\"front\"/>\n    <property name=\"face5\" value=\"side\"/>\n    <property name=\"face6\" value=\"side\"/>\n    <property name=\"face7\" value=\"side\"/>\n   </properties>\n   <polygon points=\"0,0 48,0 80,-140 56,-200 56,-228 -8,-228 -8,-200 -32,-140\"/>\n  </object>\n </objectgroup>\n <objectgroup id=\"8\" name=\"Turret\" locked=\"1\" offsetx=\"0\" offsety=\"-24\">\n  <object id=\"21\" name=\"Turret\" gid=\"7\" x=\"64\" y=\"220\" width=\"128\" height=\"256\"/>\n </objectgroup>\n</map>\n"),
};

const vehicleDataKeys = Object.keys(vehicleData);
for (let i=0; i<vehicleDataKeys.length; i++) {
    let vehicle = vehicleData[vehicleDataKeys[i]];
    vehicle.properties = getObjectProperties(vehicle);
}

/*
fs.readdirSync('./public/' + MAP_FOLDER).forEach(file => {
    maps[file] = fs.readFileSync('./public/' + MAP_FOLDER + '/' + file + '/' + file + '.tmx', 'binary');
});
*/

const MAX_AFK_TIME = 2 * 60 * 1000;
const LOBBY_WAIT_TIME_SERVER = 30000;
const LOBBY_WAIT_TIME_SERVER_PRIVATE = 90000;
const LOBBY_WAIT_TIME_MATCHMAKING = 15000;

function Server(gameMaster, serverId, sendMasterMessage, gameData, serverInviteToken, tokenRequestData, config, gamemodeString) {
    const server = this;
    server.MAP_WIDTH = 6000;
    server.MAP_HEIGHT = 6000;
    server.world = null;
    server.averageClientXP = 2000;
    server.mapData = {
        MAP_WIDTH: server.MAP_WIDTH,
        MAP_HEIGHT: server.MAP_HEIGHT,
        properties: {}
    };
    server.mapDataServer = {
        dynamicObjects: {}
    };

    server.vehicleData = vehicleData;

    server.collisionMaterials = {
        standard: new p2.Material(),
        ball: new p2.Material(),
    };

    let fixedTimeStep = 1000/15;
    let snapshotRate = 1000/10;
    let originalFixedTimeStep = fixedTimeStep;
    server.fixedTimeStep = fixedTimeStep;
    server.snapshotRate = snapshotRate;

    server.changeTimestep = (increased) => {
        if (increased) {
            fixedTimeStep = 1000/120;
            snapshotRate = 1000/20;
            let timeMod = originalFixedTimeStep/fixedTimeStep;
            server.getModifiedTime = function() {
                return Date.now() + ((Date.now() - server.roundStartTime) * timeMod);
            };
        } else {
            fixedTimeStep = 1000/15;
            snapshotRate = 1000/10;
            originalFixedTimeStep = fixedTimeStep;
            server.getModifiedTime = function() {
                return Date.now();
            };
        }

        server.fixedTimeStep = fixedTimeStep;
    };
    server.changeTimestep(false);

    server.serverId = serverId;
    if (!tokenRequestData) {
        tokenRequestData = {};
    }
    if (config.isTutorial) {
        if (config.tutorialType === 'tank_ball') {
            server.tutorial = new TutorialTankBall(this);
        } else {
            server.tutorial = new Tutorial(this);
        }
    }

    const gamemodeList = new Gamemodes(server);
    server.gamemodeList = gamemodeList;

    server.enableBots = !config.isSandbox;

    server.recording = new Recording(server);
    server.roundStartTime = Date.now();
    server.gamemode = null;

    let currentBestClip = null;

    server.aiManager = new AIManager(server, config);
    server.lastEntityId = 1;
    server.clients = [];
    server.entities = [];
    server.staticObjects = [];
    let gameEnded = false;
    let roundEnded = false;
    server.teamData = {};
    let teamCount = 0;
    let clientCounter = 0;
    let roundState = {
        type: 'lobby',
        endTime: Date.now() + LOBBY_WAIT_TIME_SERVER
    };
    server.quadtrees = [];
    for (let z=0; z<2; z++) {
        server.quadtrees.push(new Quadtree({
            x: 0,
            y: 0,
            width: server.MAP_WIDTH,
            height: server.MAP_HEIGHT
        }));
    }

    server.createEntity = CreateEntity.bind(this);
    server.createStaticObject = CreateStaticObject.bind(this);
    server.createVehicle = CreateVehicle.bind(this);
    server.createObject = CreateObject.bind(this);
    server.createActor = CreateActor.bind(this);

    server.getClients = () => {
        return server.clients;
    };

    server.getConfig = () => {
        return config;
    };

    server.getMapNodeGraph = (key) => {
        return mapNodeGraphs[key];
    };

    server.getServerInviteToken = () => {
        return serverInviteToken;
    };

    server.updateInviteToken = (newToken) => {
        gameData.inviteToken = newToken;
    };

    server.getMaxPlayersPerTeam = () => {
        if (server.gamemodeList[server.gamemode.type] && server.gamemodeList[server.gamemode.type].maxPlayersPerTeam) {
            return server.gamemodeList[server.gamemode.type].maxPlayersPerTeam;
        }
        return 10;
    };

    server.matchmakingToken = null;
    server.setMatchmakingToken = (token) => {
        server.matchmakingToken = token;
    };

    server.getMatchmakingToken = () => {
        return server.matchmakingToken;
    };

    server.getFullInviteToken = () => {
        if (server.matchmakingToken) {
            return null;
        } else {
            return gameData.inviteToken + '-' + serverInviteToken;
        }
    };

    server.isPrivate = () => {
        return !!tokenRequestData.privateGame;
    };

    server.getPlayerCount = () => {
        let count = server.clients.length - server.aiManager.getBotCount();
        if (count < 0) {
            count = 0;
        }
        return count;
    };

    server.getActualPlayerCount = () => {
        let actualClients = 0;
        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            if (client && !client.isBot) {
                actualClients++;
            }
        }
        return actualClients;
    };

    server.hasOpenSlot = () => {
        if (server.getRoundState().type === 'lobby') {
            return true;
        } else {
            let availableTeams = 0;
            let teamLength = Object.keys(server.teamData).length;
            for (let i = 0; i < teamLength; i++) {
                let team = server.teamData[i];
                if (team && !team.locked && !team.dead) {
                    availableTeams++;
                }
            }
            return availableTeams > 0;
        }
    };

    server.createTeam = () => {
        let newTeam = server.teamData[teamCount] = {
            id: teamCount,
            locked: false,
            dead: false,
            kills: 0,
            score: 0,
            nextSpawnId: 0,
            spawns: [],
            specialSpawns: {},
            clients: []
        };
        teamCount++;
        return newTeam;
    };

    server.addEntity = (entity) => {
        entity.valid = true;
        let sendCreateData = true;
        if (entity.type === 'static_object' && !entity.netData.mapProperties.generateTexture && (!entity.netData.asset || !entity.netData.asset.texture)) {
            sendCreateData = false;
        }

        if (sendCreateData) {
            server.sendMessage('createEntity', entity.getCreateData());
        }
        server.entities.push(entity);
    };

    server.onClientConnected = (socket, isBot, reconnectSocket) => {
        if (!socket) {
            console.error('onClientConnected invalid socket:', socket);
            return;
        }

        socket.clientId = clientCounter++;
        if (isBot) {
            socket.id = socket.clientId;
        }
        socket.selectedSlot = 0;
        if (roundState.type === 'playing') {
            socket.spawns = 1;
        } else {
            socket.spawns = 0;
        }
        socket.team = null;
        socket.isBot = !!isBot;
        socket.stats = {};
        socket.recentMessages = [];
        socket.lastAction = Date.now();
        server.clients.push(socket);
        socket.playStartTime = Date.now();
        socket.connectedServerId = serverId;
        socket.kills = 0;
        socket.unawardedXP = 0;
        if (!server.running) {
            server.startLoop();
        }

        /*
        let skins = [
            'camo_ash',
            'camo_birch',
            'camo_copper',
            'camo_gray',
            'camo_khaki',
            'camo_olive',
            'camo_seafoam',
            'camo_snow'
        ];
        */
        let skins = [
            'camo_olive',
            'camo_gray',
            'camo_copper'
        ];
        socket.cosmetics = {
            skin: {
                texture: 'cosmetics/camo/' + skins[Math.floor(Math.random() * skins.length)] + '.png',
                offset: {x: 0, y: 0},
                scale: 0.5 + Math.random(),
                rotation: Math.random() * Math.PI * 2
            }
        };

        if (reconnectSocket) {
            socket.clientId = reconnectSocket.clientId;
            socket.selectedSlot = reconnectSocket.selectedSlot;
            socket.spawns = reconnectSocket.spawns;
            socket.user.globalState = reconnectSocket.user.globalState;
            server.setClientTeam(socket, reconnectSocket.team, true);
            socket.stats = reconnectSocket.stats;
            socket.recentMessages = reconnectSocket.recentMessages;
            socket.lastAction = Date.now();
            socket.playStartTime = reconnectSocket.playStartTime;
            socket.kills = reconnectSocket.kills;
            socket.ready = reconnectSocket.ready;
            socket.unawardedXP = reconnectSocket.unawardedXP;
            socket.killstreakKills = reconnectSocket.killstreakKills;
            socket.killstreakLevel = reconnectSocket.killstreakLevel;
            socket.killstreakSlots = reconnectSocket.killstreakSlots;
            server.switchPlayer(socket, reconnectSocket.player);
            socket.activatedConsumable = reconnectSocket.activatedConsumable;
            socket.overrideSlotTank = reconnectSocket.overrideSlotTank;
        }

        server.calculateServerAverageXP();

        if (gamemodeList[server.gamemode.type].onClientConnected) {
            gamemodeList[server.gamemode.type].onClientConnected(socket);
        }

        socket.on('keydown', (data) => {
            if (!gameEnded && socket.player && socket.player.valid) {
                socket.lastAction = Date.now();
                if (socket.player.keys) {
                    socket.player.keys[data] = true;
                    if (!(server.tutorial && server.tutorial.tutorialData && server.tutorial.tutorialData.disableAbility) && socket.player.onKeyDown) {
                        socket.player.onKeyDown();
                    }
                }
            }
        });

        socket.on('keyup', (data) => {
            if (!gameEnded && socket.player && socket.player.valid) {
                socket.lastAction = Date.now();
                if (socket.player.keys) {
                    socket.player.keys[data] = false;
                }
            }
        });

        socket.on('ping', (data) => {
            socket.emit('pong', parseInt(data));
        });

        socket.on('scoreboard', () => {
            let data = server.getScoreboardData();
            data.challenges = socket?.user?.settings?.challenges;
            socket.emit('scoreboardData', data);
        });

        socket.on('showEmote', (data) => {
            let slotId = parseInt(data.slot);
            let emote = global.gameServer.emoteListMap[data.key];
            if (data && data.key && slotId !== null && slotId !== undefined && !isNaN(slotId) && emote && socket.player && socket.player.valid && socket.player.netData && socket.player.netData.alive && (!socket.lastEmoteTime || Date.now()-socket.lastEmoteTime > 8000)) {
                socket.lastEmoteTime = Date.now();
                let emoteKey = null;
                if (!emote.price) {
                    emoteKey = emote.key;
                } else if (socket && socket.user && socket.user.settings && socket.user.settings.globalCosmetics) {
                    let slot = socket.user.settings.globalCosmetics;
                    if (slot && slot.emotes && slot.emotes['emote' + slotId]) {
                        emoteKey = slot.emotes['emote' + slotId].emote;
                    }
                }
                if (emoteKey) {
                    socket.player.sendRPC('showEmote', emoteKey);
                }
            }
        });

        socket.reportedPlayers = {};
        socket.on('reportPlayer', (data) => {
            if (!socket.reportedPlayers[data.clientId]) {
                socket.reportedPlayers[data.clientId] = true;

                let reportedPlayer = null;
                for (let i=0; i<server.clients.length; i++) {
                    let client = server.clients[i];
                    if (client.clientId === data.clientId) {
                        reportedPlayer = client;
                        break;
                    }
                }

                if (reportedPlayer === socket) {
                    socket.emit('growl', 'You can not report yourself!');
                    return;
                }

                if (reportedPlayer) {
                    let recentMessages = socket.recentMessages.concat(reportedPlayer.recentMessages);
                    recentMessages.sort((a, b) => a.date - b.date);

                    let reportData = {
                        reporter: {
                            name: socket.name,
                            address: socket.realAddress,
                            user: socket.user
                        },
                        reported: {
                            name: reportedPlayer.name,
                            address: reportedPlayer.realAddress,
                            user: reportedPlayer.user
                        },
                        server: {
                            serverId: serverId,
                            gamemode: server.gamemode ? server.gamemode.type : 'unknown',
                            fullInviteToken: server.getFullInviteToken(),
                            address: gameData.address,
                            region: gameData.region
                        },
                        recentMessages: recentMessages,
                        reason: data.reason
                    };

                    sendMasterMessage('reportPlayer', reportData);
                    socket.emit('growl', 'Player report sent.');
                } else {
                    socket.emit('growl', 'Player not found.');
                }
            } else {
                socket.emit('growl', 'You have already reported this player.');
            }
        });

        socket.on('activateConsumable', (key) => {
            if (!socket.activatedConsumable) {
                socket.activatedConsumable = key;
            }
        });

        socket.on('fire', () => {
            if (!gameEnded && socket.player && socket.player.valid && socket.player.fire && !(server.tutorial && server.tutorial.tutorialData && server.tutorial.tutorialData.disableShooting)) {
                socket.lastAction = Date.now();
                socket.player.fire();
            }
        });

        socket.on('pingLocation', (data) => {
            if (!gameEnded && data && data.x && data.y && socket.player && socket.player.valid) {
                socket.player.pingLocation(data);
            }
        });

        socket.on('targetAngle', (data) => {
            if (!gameEnded && socket.player && socket.player.valid && data) {
                if (isObject(data) && data.targetAngle) {
                    socket.player.turretTargetRotation = parseFloat(data.targetAngle);
                    if (socket.player.turretTargetRotation < 0) {
                        socket.player.turretTargetRotation += Math.PI * 2;
                    }
                    let moveX = parseFloat(data.movementAxisX);
                    if (moveX > 1) {
                        moveX = 1;
                    }
                    if (moveX < -1) {
                        moveX = -1;
                    }
                    socket.player.movementAxisX = moveX;

                    let moveY = parseFloat(data.movementAxisY);
                    if (moveY > 1) {
                        moveY = 1;
                    }
                    if (moveY < -1) {
                        moveY = -1;
                    }
                    socket.player.movementAxisY = moveY;
                } else {
                    socket.player.turretTargetRotation = parseFloat(data);
                    socket.player.movementAxisX = 0;
                    socket.player.movementAxisY = 0;
                    if (socket.player.turretTargetRotation < 0) {
                        socket.player.turretTargetRotation += Math.PI * 2;
                    }
                }
            }
        });

        socket.on('tutorialContinue', () => {
            if (server.tutorial) {
                server.tutorial.continue();
            }
        });

        socket.on('lobbyReady', () => {
            if (!socket.ready && !socket.player) {
                socket.lastAction = Date.now();
                server.readyPlayer(socket);
                server.sendLobbyUpdate();
            }
        });

        if (config.isSandbox) {
            socket.on('sandboxSwitchVehicle', (newVehicle) => {
                server.updateRoundState({
                    type: 'playing'
                });

                socket.team = 0;
                if (socket.player) {
                    socket.player.remove();
                    socket.player = null;
                }
                socket.overrideSlotTank = newVehicle;
                if (!socket.user.settings) {
                    socket.user.settings = {
                        slots: {
                            0: {}
                        }
                    };
                }
                socket.user.settings.slots[socket.selectedSlot].vehicle = newVehicle;

                server.spawnPlayer(socket);
            });
        }

        socket.on('lobbySelectVehicle', (index) => {
            socket.overrideSlotTank = null;
            socket.selectedSlot = parseInt(index);

            server.sendClientEmotes(socket);
        });

        /*
        socket.on('lobbyNewTeam', () => {
            if (Object.keys(server.teamData).length < 8 && server.gamemode.type !== 'coop') {
                let team = server.createTeam();
                server.setClientTeam(socket, team.id);
                server.sendLobbyUpdate();
            }
        });
        */

        socket.on('lobbyJoinTeam', (teamId) => {
            teamId = parseInt(teamId);
            if (teamId !== null && teamId !== undefined && socket.team !== teamId && server.teamData[teamId] && server.teamData[teamId].clients.length < server.getMaxPlayersPerTeam()) {
                server.setClientTeam(socket, teamId, true);
                server.sendLobbyUpdate();
            }
        });

        socket.on('lobbyLockTeam', () => {
            if (socket.team !== null && socket.team !== undefined && server.teamData[socket.team].clients[0] === socket) {
                server.teamData[socket.team].locked = !server.teamData[socket.team].locked;
                server.sendLobbyUpdate();
            }
        });

        socket.on('signIn', (token) => {
            if (token && socket.user && !socket.user.userId && !socket.postRoundLoginToken) {
                socket.postRoundLoginToken = token;
                sendMasterMessage('postRoundLoginToken', {
                    serverId: server.serverId,
                    token: socket.postRoundLoginToken
                });
            }
        });

        function sendChatMessage(socket, message, isLocal) {
            let isDev = socket && socket.user && socket.user.isDev;

            let wasMuted = false;
            if (socket) {
                let strippedMessage = message.replace(' ', '');
                strippedMessage = strippedMessage.replace(/[^a-z0-9]/gi, '');
                if (strippedMessage.indexOf('nigger') !== -1 || strippedMessage.indexOf('niggger') !== -1 || strippedMessage.indexOf('nigggger') !== -1 || strippedMessage.indexOf('niggggger') !== -1 || strippedMessage.indexOf('faggot') !== -1) {
                    console.info('Muting player for message:', message);
                    wasMuted = true;
                    server.updateGlobalClientState(socket, {muted: true}, 'Auto muted for message: ' + message);
                }

                if (!isDev) {
                    try {
                        message = filter.clean(message);
                    } catch (e) {
                        console.error('Failed to filter message')
                    }

                    let lwm = strippedMessage.trim().toLowerCase();
                    if (lwm === 'ez' || lwm === 'gg ez' || lwm === 'ez gg' || lwm === 'ggez') {
                        message = 'I still wear diapers.';
                    }
                    if (lwm === 'noob' || lwm === 'noobs') {
                        message = 'I wish I had friends.';
                    }
                }
            }

            let messageEvent = {
                id: (isLocal && socket.player && socket.player.netData.alive) ? socket.player.id : null,
                userId: (socket && socket.user) ? socket.user.id : null,
                team: socket.team,
                name: socket ? socket.name : null,
                message: message,
                xp: socket && !isDev ? socket.user.xp : 0,
                isDev: isDev,
                date: new Date()
            };

            socket.lastAction = Date.now();

            if (socket.user.globalState?.muted || wasMuted) {
                console.info('MUTED CHAT => ' + socket.name + ': ' + message);
                socket.emit('chat', messageEvent);
                return;
            }

            if (socket.player) {
                if (isLocal) {
                    console.info('LOCAL CHAT => ' + socket.name + ': ' + message);
                } else {
                    console.info('GAME CHAT => ' + socket.name + ': ' + message);
                }
            } else {
                console.info('LOBBY CHAT => ' + socket.name + ': ' + message);
            }

            server.sendMessage('chat', messageEvent);

            socket.recentMessages.push({
                date: new Date(),
                name: socket.name,
                message: message
            });
            if (socket.recentMessages.length > 10) {
                socket.recentMessages.shift();
            }
        }

        /*
        STUG Commands
        =======================================================================================
        /ban {name} - Ban a player.
        /mute {name} - Mute a player.
        /kick {name} - Kick a player.
        /slay {name} - Slay a player.
        /kill - Kill yourself.
        /spectate {name} - Switch a player to a spectator. Leave blank to switch yourself.
        /spawn {} - Spawn one of these.
        /forcestart - Force a game in the lobby to start.
        /forceend - Force a game to end the current round.
        /forceendgame - Force a game to end.
        /forceclose - Force a lobby to close.
        /map {name} - Switch to a specified map.
        /timestep {number 0 - 1} - Set server timestep speed.
        /vehicle {vehicle} {player} - Switch to a vehicle.
        /gamemode {gamemode type} - Switch gamemode.
        /addbot - Adds a bot.
        /removebot - Removes a bot.
        /togglebots - Enables/disables bots.
        /botskill {0.0 - 1.0} - Set all bot skills.
        /killstreaks {player} - Activate all killstreaks for a player.
        /freexp {number} {player} - Gives you free XP if player is empty, or you can specify the player.
        /error - Throws a fake error for testing.
        /dumpstats - Dump stats into server log.
        =======================================================================================
        */
        socket.on('chat', async (data) => {
            let message = data;
            let isLocal = false;
            if (data && typeof data === 'object') {
                message = data.message;
                isLocal = data.local;
            }

            if (message && (typeof message === 'string' || message instanceof String) && message.length && message.length <= 500) {
                if (message.startsWith('/') && socket.user && socket.user.isDev) {
                    if (message.startsWith('/ban')) {
                        let name = message.replace('/ban', '').trim();
                        let client = server.getClientByName(name);
                        if (client) {
                            server.updateGlobalClientState(client, {banned: true}, 'Banned by admin');
                        } else {
                            socket.emit('growl', 'Player with name "' + name + '" not found.');
                        }
                    } else if (message.startsWith('/mute')) {
                        let name = message.replace('/mute', '').trim();
                        let client = server.getClientByName(name);
                        if (client) {
                            server.updateGlobalClientState(client, {muted: true}, 'Muted by admin');
                        } else {
                            socket.emit('growl', 'Player with name "' + name + '" not found.');
                        }
                    }  else if (message.startsWith('/kick')) {
                        let name = message.replace('/kick', '').trim();
                        let client = server.getClientByName(name);
                        if (client) {
                            console.info(socket.realAddress + ': Kicked player:', client.name, client.realAddress);
                            server.sendMessage('growl', 'Player "' + name + '" has been kicked.');
                            server.forceDisconnectClient(client);
                        } else {
                            socket.emit('growl', 'Player with name "' + name + '" not found.');
                        }
                    } else if (message.startsWith('/slay')) {
                        let name = message.replace('/slay', '').trim();
                        let client = server.getClientByName(name);
                        if (client && client.player && client.player.valid && client.player.netData.alive) {
                            console.info(socket.realAddress + ': Slayed player:', client.name, client.realAddress);
                            server.sendMessage('growl', 'Player "' + name + '" has been slain.');
                            client.player.kill();
                        } else {
                            socket.emit('growl', 'Player with name "' + name + '" not found.');
                        }
                    } else if (message.startsWith('/killstreaks')) {
                        let name = message.replace('/killstreaks', '').trim();
                        let client = socket;
                        if (name) {
                            client = server.getClientByName(name);
                            if (!client) {
                                socket.emit('growl', 'Player with name "' + name + '" not found.');
                            }
                        }
                        if (client) {
                            server.resetKillstreakSlots(client, true);
                        }
                    } else if (message === '/kill') {
                        if (socket.player && socket.player.netData.alive) {
                            socket.player.damage(1000);
                        }
                    } else if (message.startsWith('/spectate')) {
                        let name = message.replace('/spectate', '').trim();
                        if (name) {
                            let client = server.getClientByName(name);
                            if (client) {
                                server.setPlayerSpectate(client);
                            } else {
                                socket.emit('growl', 'Player with name "' + name + '" not found.');
                            }
                        } else {
                            server.setPlayerSpectate(socket);
                        }
                    } else if (message.startsWith('/timestep')) {
                        let params = message.replace('/timestep', '').trim().split(' ');
                        if (params && params.length >= 1) {
                            try {
                                server.changeTimestep(params[0] == '1');
                                socket.emit('growl', 'Timestep updated: ' + params[0]);
                            } catch (e) {
                                socket.emit('growl', 'Failed to use timestep command.');
                            }
                        }
                    } else if (message.startsWith('/forcestart')) {
                        if (roundState.type === 'lobby') {
                            server.startRound();
                            server.sendMessage('growl', 'Round force started.');
                        }
                    } else if (message.startsWith('/forceend')) {
                        if (roundState.type === 'playing') {
                            server.endRound();
                        }
                    } else if (message.startsWith('/forcegameend')) {
                        if (roundState.type === 'playing') {
                            server.endGame();
                            server.sendMessage('growl', 'Game force ended.');
                        }
                    } else if (message.startsWith('/forceclose')) {
                        for (let i=0; i<server.clients.length; i++) {
                            let client = server.clients[i];
                            server.forceDisconnectClient(client);
                        }
                    }  else if (message.startsWith('/map')) {
                        let name = message.replace('/map', '').trim();
                        try {
                            server.resetGame();
                            loadMap(name);
                        } catch (e) {
                            socket.emit('growl', '' + e);
                            console.error('Failed to load map:', e);
                        }
                    } else if (message.startsWith('/gamemode')) {
                        let name = message.replace('/gamemode', '').trim();
                        if (gamemodeList[name]) {
                            server.updateGamemode(name);
                            server.resetGame();
                            server.loadMapInRotation(true);
                            server.sendMessage('growl', 'Gamemode updated: ' + gamemodeList[name].title);
                        } else {
                            server.sendMessage('growl', 'Available gamemodes: ' + Object.keys(gamemodeList).join(', '));
                        }
                    } else if (message.startsWith('/getrecording')) {
                        if (server.recording) {
                            try {
                                let clip = await server.recording.getClip(0, 30000);
                                clip.bestClip = {
                                    entityId: socket.player.id,
                                    timeOfInterest: 3000
                                };
                                socket.emit('recording', clip);
                            } catch (e) {
                                console.error('Failed to get recording:', e);
                                socket.emit('growl', 'Failed to get recording.');
                            }
                        } else {
                            socket.emit('growl', 'No recording active.');
                        }
                    } else if (message.startsWith('/vehicle')) {
                        let name = message.replace('/vehicle', '').trim();
                        if (name) {
                            let names = name.split(' ');
                            let vehicle = vehicleData[names[0]];
                            if (vehicle) {
                                if (names[1]) {
                                    let client = server.getClientByName(names[1]);
                                    if (client) {
                                        client.overrideSlotTank = names[0];
                                    } else {
                                        socket.emit('growl', 'Player with name "' + name + '" not found.');
                                    }
                                } else {
                                    socket.overrideSlotTank = names[0];
                                }
                            } else {
                                socket.emit('growl', 'Vehicle with name "' + name + '" not found.');
                            }
                        }
                    } else if (message.startsWith('/addbot')) {
                        let count = parseInt(message.replace('/addbot', '').trim());
                        if (isNaN(count) || count < 1) {
                            count = 1;
                        }
                        if (count > 20) {
                            count = 20
                        }

                        server.aiManager.extraBots += count;

                        for (let i=0; i<count; i++) {
                            server.aiManager.createBot(true);
                        }
                    } else if (message.startsWith('/removebot')) {
                        let count = parseInt(message.replace('/removebot', '').trim());
                        if (isNaN(count) || count < 1) {
                            count = 1;
                        }
                        if (count > 20) {
                            count = 20;
                        }

                        server.aiManager.extraBots -= count;
                        if (server.aiManager.extraBots < 0) {
                            server.aiManager.extraBots = 0;
                        }

                        for (let i=0; i<count; i++) {
                            server.aiManager.destroyBot();
                        }
                    } else if (message.startsWith('/togglebots')) {
                        server.enableBots = !server.enableBots;
                        if (!server.enableBots) {
                            server.aiManager.destroyAllBots();
                        }
                        socket.emit('growl', 'Bots are now ' + (server.enableBots ? 'enabled' : 'disabled') + '.');
                    } else if (message.startsWith('/botskill')) {
                        let skill = parseFloat(message.replace('/botskill', '').trim());
                        if (isNaN(skill) || skill < 1) {
                            skill = 1;
                        }
                        if (skill < 0) {
                            skill = 0;
                        }
                        server.aiManager.setBotSkill(skill);
                    } else if (message.startsWith('/freexp')) {
                        let name = message.replace('/freexp', '').trim();
                        if (name) {
                            let names = name.split(' ');
                            let xp = parseInt(names[0]);
                            if (isNaN(xp) || xp < 1) {
                                xp = 1000;
                            }
                            if (xp < 1) {
                                xp = 1000;
                            }

                            if (names[1]) {
                                let client = server.getClientByName(names[1]);
                                if (client) {
                                    client.unawardedXP += xp;
                                    client.emit('growl', 'You got ' + xp.toLocaleString('en-US') + ' free XP. :)');
                                    socket.emit('growl', 'You gave ' + xp.toLocaleString('en-US') + ' free XP to ' + client.name + '. :)');
                                } else {
                                    socket.emit('growl', 'Player with name "' + name + '" not found.');
                                }
                            } else {
                                socket.unawardedXP += xp;
                                socket.emit('growl', 'You got ' + xp.toLocaleString('en-US') + ' free XP. :)');
                            }
                        }
                    } else if (message.startsWith('/error')) {
                        throw new Error('This is a fake error for testing.');
                    } else if (message.startsWith('/dumpstats')) {
                        sendMasterMessage('dumpStats', null, true);
                        socket.emit('growl', 'Stats now dumped in server log.');
                    }
                } else {
                    sendChatMessage(socket, message, isLocal);
                }
            }
        });

        server.entities.forEach((entity) => {
            let sendCreateData = true;
            if (entity.type === 'static_object' && !entity.netData.mapProperties.generateTexture && (!entity.netData.asset || !entity.netData.asset.texture)) {
                sendCreateData = false;
            }

            if (sendCreateData) {
                socket.emit('createEntity', entity.getCreateData());
            }
        });

        let worldData = server.getWorldData();
        worldData.clientId = socket.clientId;
        socket.emit('worldData', worldData);
        socket.emit('roundState', server.getRoundState());
        socket.emit('scoreboardData', server.getScoreboardData());
        socket.emit('environmentUpdate', server.getEnvironmentUpdate());
        server.sendKillstreakInfo(socket);
        server.sendClientEmotes(socket);

        server.sendLobbyUpdate();

        if (!socket.isBot && !reconnectSocket) {
            server.sendMessage('chat', {
                message: socket.name + ' has joined the game.'
            });

            if (roundState.type !== 'playing') {
                socket.hasAlreadySpawned = true;
            }
        }

        if (reconnectSocket) {
            socket.reconnectCount = reconnectSocket.reconnectCount;
            if (!socket.reconnectCount) {
                socket.reconnectCount = 0;
            }
            socket.reconnectCount++;
            console.info('Client reconnected:', socket.name, socket.realAddress, socket.reconnectCount);
            reconnectSocket.reconnected = true;
            reconnectSocket.player = null;
            server.onClientDisconnected(reconnectSocket, true);
            reconnectSocket = null;

            if (socket.reconnectCount >= 15) {
                console.warn('Disconnecting client for too many reconnects:', socket.name, socket.realAddress, socket.reconnectCount);
                server.forceDisconnectClient(socket);
            }
        }
    };

    server.readyPlayer = (socket) => {
        socket.ready = true;

        if (!socket.isBot && roundState.type !== 'lobby') {
            if (socket.team === null || socket.team === undefined) {
                server.joinSmallestTeam(socket, true, true);
            }
        }
    };

    server.sendClientEmotes = (socket) => {
        if (socket && socket.user && socket.user.settings && socket.user.settings.globalCosmetics) {
            let slot = socket.user.settings.globalCosmetics;
            if (slot && slot.emotes) {
                let keys = Object.keys(slot.emotes);
                if (keys && keys.length) {
                    let emoteList = [];
                    for (let i=0; i<keys.length; i++) {
                        let key = keys[i];
                        emoteList.push(slot.emotes[key].emote);
                    }
                    socket.emit('emotes', emoteList);
                }
            }
        }
    };

    server.sendKillstreakInfo = (socket) => {
        if (gamemodeList[server.gamemode.type].disableKillstreaks) {
            socket.emit('killstreaks', {
                disabled: true
            });
        } else {
            socket.emit('killstreaks', {
                killstreakKills: socket.killstreakKills,
                killstreakLevel: socket.killstreakLevel,
                slots: socket.killstreakSlots
            });
        }
    };

    server.resetKillstreakSlots = (client, forceEnableAll) => {
        client.killstreakKills = 0;
        client.killstreakLevel = 0;
        client.killstreakCurrentVehicle = 'medium_tank';
        client.killstreakSlots = [
            {
                type: 'wall',
                active: false
            },
            {
                type: 'grenade',
                active: false
            },
            {
                type: 'artillery',
                active: false
            }
        ];

        if (client.user && client.user.settings && client.user.settings.slots) {
            let slot = client.user.settings.slots[client.selectedSlot];
            if (slot) {
                let vehicleData = server.vehicleData[slot.vehicle];
                client.killstreakCurrentVehicle = slot.vehicle;
                if (vehicleData && vehicleData.properties && vehicleData.properties.type) {
                    if (vehicleData.properties.type === 'heavy') {
                        client.killstreakSlots = [
                            {
                                type: 'landmine',
                                active: false
                            },
                            {
                                type: 'colossus',
                                active: false
                            },
                            {
                                type: 'airstrike',
                                active: false
                            }
                        ];
                    } else if (vehicleData.properties.type === 'light') {
                        client.killstreakSlots = [
                            {
                                type: 'wall',
                                active: false
                            },
                            {
                                type: 'grenade',
                                active: false
                            },
                            {
                                type: 'airstrike',
                                active: false
                            }
                        ];
                    }
                }
            }
        }

        if (forceEnableAll || (config.isSingleplayer && (!config.isTutorial || (server.tutorial && server.tutorial.tutorialData && !server.tutorial.tutorialData.disableAbility)))) {
            client.killstreakKills = 5;
            for (let i=0; i<client.killstreakSlots.length; i++) {
                let kslot = client.killstreakSlots[i];
                kslot.active = true;
            }
        }

        server.sendKillstreakInfo(client);
    };

    server.setPlayerSpectate = (client) => {
        client.hasSpawned = true;
        client.spectating = true;
        if (client.player) {
            client.player.remove();
        }
        server.switchPlayer(client, null);
        server.setClientTeam(client, null);
        client.emit('setPlayer', {
            spectator: true
        });
        server.aiManager.balanceTeamsWithBots();
    };

    server.getTeamString = (team) => {
        return 'Team ' + (team+1);
    };

    server.onGlobalClientStateUpdated = (client, state) => {
        console.info('Client state updated:', client.name, client.realAddress, state);
        if (client.user) {
            client.user.globalState = state;

            if (client.user.globalState.banned) {
                server.sendMessage('growl', 'Player "' + client.name + '" has been banned.');
                server.forceDisconnectClient(client);
            }
        }
    }

    server.updateGlobalClientState = (client, state, reason) => {
        sendMasterMessage('updateClientState', {
            name: client.name,
            realAddress: client.realAddress,
            userId: client.user.userId,
            reason: reason,
            state: state
        });
    };

    server.setClientTeam = (socket, team, disableBalanceCalculation) => {
        if (socket.team !== null && socket.team !== undefined && server.teamData[socket.team]) {
            for (let i=0; i<server.teamData[socket.team].clients.length; i++) {
                let client = server.teamData[socket.team].clients[i];
                if (client === socket) {
                    server.teamData[socket.team].clients.splice(i, 1);
                    break;
                }
            }

            if (!socket.isBot && !disableBalanceCalculation) {
                server.calculateTeamAverageXP(socket.team);
            }

            if (server.teamData[socket.team].clients.length <= 0) {
                server.teamData[socket.team].locked = false;
            }
        }

        socket.team = team;

        if (socket.team !== null && socket.team !== undefined && server.teamData[socket.team]) {
            server.teamData[socket.team].clients.push(socket);

            if (!socket.isBot && !disableBalanceCalculation) {
                server.calculateTeamAverageXP(socket.team);
            }
        }
    };

    server.getLargestTeam = () => {
        let teamLength = Object.keys(server.teamData).length;
        let largestTeam = null;
        let mostPlayers = 0;
        for (let i=0; i<teamLength; i++) {
            let team = server.teamData[i];
            if (team.clients.length > mostPlayers) {
                largestTeam = team.id;
                mostPlayers = team.clients.length;
            }
        }
        return largestTeam;
    };

    const minXpForBalancing = 1000;
    const minKDForBalancing = 0.5;
    const maxKDForBalancing = 3;
    const maxTeamPlayerDifference = 1;
    server.calculateServerAverageXP = () => {
        let xpSum = 0;
        let clientCount = 0;
        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            if (!client.isBot && !(client && client.user && client.user.isDev)) {
                let xp = (client && client.user && client.user.xp) ? client && client.user && client.user.xp : 0;
                if (xp < minXpForBalancing) {
                    xp = minXpForBalancing + Math.round(Math.random() * 1000);
                }
                xpSum += xp;
                clientCount++;
            }
        }
        if (!clientCount || clientCount < 1) {
            clientCount = 1;
        }
        server.averageClientXP = Math.round(xpSum/clientCount);
    };

    server.calculateTeamAverageXP = (teamId) => {
        let team = server.teamData[teamId];
        if (team) {
            team.xpSum = 0;
            let clientCount = 0;
            for (let i=0; i<team.clients.length; i++) {
                let client = team.clients[i];
                if (!client.isBot) {
                    clientCount++;
                    team.xpSum += server.calculateClientBalanceValue(client);
                }
            }
            team.xpAverage = 0;
            if (team.xpSum) {
                team.xpAverage = team.xpSum / clientCount;
            }
        }
    };

    server.joinSmallestTeam = (socket, atRoundStart, joinSmallestByAverageXP) => {
        let teams = Object.keys(server.teamData);
        if (teams.length) {
            let teamLength = Object.keys(server.teamData).length;
            let teamToJoin = null;
            let lowestPlayers = 1000;
            let lowestPlayersTeam = null;
            for (let i=0; i<teamLength; i++) {
                let team = server.teamData[i];

                let playerCount = 0;
                for (let j=0; j<team.clients.length; j++) {
                    let client = team.clients[j];
                    if (!client.isBot || socket.isBot || client.manuallyAddedBot) {
                        playerCount++;
                    }
                }

                if (joinSmallestByAverageXP) {
                    if (team.clients.length < server.getMaxPlayersPerTeam()) {
                        if (!teamToJoin || team.xpAverage < teamToJoin.xpAverage) {
                            teamToJoin = team;
                        }

                        if (!lowestPlayersTeam || playerCount < lowestPlayers) {
                            lowestPlayersTeam = team;
                            lowestPlayers = playerCount;
                        }
                    }
                } else {
                    if (!team.locked && !team.dead && playerCount < lowestPlayers && atRoundStart) {
                        teamToJoin = team;
                        lowestPlayers = playerCount;
                    }
                }
            }

            if (teamToJoin) {
                let teamToJoinPlayerCount = 0;
                for (let j=0; j<teamToJoin.clients.length; j++) {
                    let client = teamToJoin.clients[j];
                    if (!client.isBot) {
                        teamToJoinPlayerCount++;
                    }
                }

                if (lowestPlayersTeam && lowestPlayersTeam !== teamToJoin && teamToJoinPlayerCount-lowestPlayers >= maxTeamPlayerDifference) {
                    teamToJoin = lowestPlayersTeam;
                }

                server.setClientTeam(socket, teamToJoin.id, true);
            } else if (joinSmallestByAverageXP) {//Check if this is true to avoid an overflow from recursion.
                server.joinSmallestTeam(socket, atRoundStart, false);
            }
        }
    };

    server.calculateClientBalanceValue = (client) => {
        let value = minKDForBalancing;
        if (client.user && client.user.xp > 250000 && client.user.settings && client.user.settings.stats) {
            if (client.user.settings.stats['Kill'] && client.user.settings.stats['Death']) {
                value = client.user.settings.stats['Kill']/client.user.settings.stats['Death'];

                if (client.user.xp < 560000) {
                    value -= 0.5;
                }

                //Add players current rank to balance value. 6,000,000 is around level 60
                let rankWeight = client.user.xp/6000000;
                if (rankWeight > 1) {
                    rankWeight = 1;
                }
                value += rankWeight;
            }
        }
        if (value < minKDForBalancing) {
            value = minKDForBalancing;
        }
        if (value > maxKDForBalancing) {
            value = maxKDForBalancing;
        }
        return value;
    };

    server.autoBalancePlayers = () => {
        let teamKeys = Object.keys(server.teamData);
        if (teamKeys && teamKeys.length) {
            for (let i = 0; i < teamKeys.length; i++) {
                let teamKey = teamKeys[i];
                let team = server.teamData[teamKey];
                team.xpSum = 0;
                for (let j = 0; j < team.clients.length; j++) {
                    let client = team.clients[j];
                    team.xpSum += server.calculateClientBalanceValue(client);
                }
                team.xpAverage = 0;
                if (team.xpSum && team.clients.length) {
                    team.xpAverage = team.xpSum / team.clients.length;
                }
            }

            server.clients.sort((a, b) => {
                let axp = server.calculateClientBalanceValue(a);
                let bxp = server.calculateClientBalanceValue(b);
                return bxp - axp;
            });

            for (let i = 0; i < server.clients.length; i++) {
                let client = server.clients[i];
                if (!client.spectating && (client.team === null || client.team === undefined)) {
                    let lowestXPTeam = null;
                    let lowestPlayersTeam = null;
                    for (let j = 0; j < teamKeys.length; j++) {
                        let teamKey = teamKeys[j];
                        let team = server.teamData[teamKey];
                        if (team.clients.length < server.getMaxPlayersPerTeam()) {
                            if (!lowestXPTeam || team.xpAverage < lowestXPTeam.xpAverage) {
                                lowestXPTeam = team;
                            }
                            if (!lowestPlayersTeam || team.clients.length < lowestPlayersTeam.clients.length) {
                                lowestPlayersTeam = team;
                            }
                        }
                    }

                    if (lowestXPTeam) {
                        let teamToJoin = lowestXPTeam;
                        if (lowestPlayersTeam && lowestPlayersTeam !== teamToJoin && teamToJoin.clients.length-lowestPlayersTeam.clients.length >= maxTeamPlayerDifference) {
                            teamToJoin = lowestPlayersTeam;
                        }

                        if (teamToJoin) {
                            server.setClientTeam(client, teamToJoin.id, true);
                            teamToJoin.xpSum += server.calculateClientBalanceValue(client);
                            teamToJoin.xpAverage = 0;
                            if (teamToJoin.xpSum) {
                                teamToJoin.xpAverage = teamToJoin.xpSum / teamToJoin.clients.length;
                            }
                        }
                    }
                }
            }
        }

        //If there are somehow players left over, just put them in the team with the least players.
        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            if (!client.spectating && (client.team === null || client.team === undefined)) {
                server.joinSmallestTeam(client, true);
            }
        }
    };

    server.startRound = (continuingRound) => {
        if (roundState.type === 'playing') {
            return;
        }
        server.updateRoundState({
            type: 'playing',
            endTime: Date.now() + gamemodeList[server.gamemode.type].roundLength
        });

        roundEnded = false;
        spawnCheckTick = 0;

        server.aiManager.destroyAllBots();

        if (server.gamemode.rounds === 0) {
            if (gamemodeList[server.gamemode.type].onGameStarted) {
                gamemodeList[server.gamemode.type].onGameStarted();
            }
        }

        if (gamemodeList[server.gamemode.type].onRoundStarted) {
            gamemodeList[server.gamemode.type].onRoundStarted();
        }

        server.autoBalancePlayers();
        server.aiManager.balanceTeamsWithBots();

        if (server?.mapData?.ambientSound) {
            server.sendMessage('updateAmbientSound', {
                sound: server.mapData.ambientSound
            });
        }

        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            client.player = null;
            client.spawns = 0;
        }

        server.roundStartTime = Date.now();

        server.sendLobbyUpdate();

        server.aiManager.onRoundStarted();

        if (server.gamemode.rounds === 0) {
            setTimeout(() => {
                server.aiManager.onGameStarted();
            }, 1);
        }

        if (continuingRound) {
            if (!config.isSandbox && !config.isTutorial) {
                server.sendMessage('setAnnouncement', {
                    title: 'Round ' + (server.gamemode.rounds + 1) + ' Start',
                    sound: 'round_start',
                    time: 7500
                });
            }
        } else {
            let gamemodeInfo = gamemodeList[server.gamemode.type];
            if (gamemodeInfo) {
                if (!config.isSandbox && !config.isTutorial) {
                    server.sendMessage('setAnnouncement', server.getGamemodeAnnouncement());
                }

                if (gamemodeInfo.init) {
                    gamemodeInfo.init();
                }
            } else {
                server.sendMessage('setAnnouncement', {
                    title: 'Unknown Gamemode',
                    time: 5000
                });
            }
        }

        if (server.gamemode.rounds === 0) {
            server.sendMessage('scoreboardData', server.getScoreboardData());
        }

        server.gamemode.lastRoundWinner = null;
    };

    server.getGamemodeAnnouncement = () => {
        let gamemodeInfo = gamemodeList[server.gamemode.type];
        if (gamemodeInfo) {
            return {
                title: gamemodeInfo.title,
                sound: config.isSandbox ? null : 'round_start',
                text: gamemodeInfo.text,
                time: 7500
            };
        } else {
            return {
                title: 'Unknown Gamemode',
                time: 5000
            };
        }
    };

    server.getWorldData = () => {
        server.mapData.gamemodeTitle = null;
        let gamemodeInfo = gamemodeList[server.gamemode.type];
        if (gamemodeInfo) {
            server.mapData.gamemodeTitle = gamemodeInfo.title;
        }
        return server.mapData;
    };

    server.getRoundState = () => {
        return roundState;
    };

    server.updateRoundState = (newRoundState) => {
        roundState = newRoundState;
        server.sendMessage('roundState', server.getRoundState());
    };

    server.sendLobbyUpdate = () => {
        if (config.isSandbox) {
            return;
        }

        let lobbyData = server.getLobbyData();
        if (!config.skipGameLobby) {
            for (let i = 0; i < server.clients.length; i++) {
                let client = server.clients[i];
                let newLobbyData = null;
                if (!gameEnded && (!client.ready || roundState.type === 'lobby')) {
                    if (client.user && client.user.consumables) {
                        lobbyData.consumables = Object.values(client.user.consumables);
                    }
                    if (client.user && client.user.settings && client.user.settings.slots) {
                        let formattedSlots = [];
                        for (let i=0; i<client.user.settings.slots.length; i++) {
                            let slot = client.user.settings.slots[i];
                            let vehicleData = server.vehicleData[slot.vehicle];
                            if (vehicleData) {
                                let formattedSlot = {
                                    name: vehicleData.properties.name,
                                    key: slot.vehicle,
                                    requiredRank: 0
                                };
                                if (i === 1) {
                                    formattedSlot.requiredRank = 2;
                                }
                                if (i === 2) {
                                    formattedSlot.requiredRank = 2;
                                }
                                formattedSlots.push(formattedSlot);
                            }
                        }
                        lobbyData.slots = formattedSlots;
                    }
                    newLobbyData = lobbyData;
                } else {
                    newLobbyData = (gameEnded || (roundEnded && !client.hasSpawned && (!client.player || !client.player.netData || !client.player.netData.alive))) ? {menu: 'roundEnd'} : null;
                }

                if (newLobbyData !== client.lastLobbyData) {
                    if (newLobbyData) {
                        newLobbyData.clientId = client.clientId;
                        newLobbyData.challenges = client?.user?.settings?.challenges;
                    }

                    client.lastLobbyData = newLobbyData;
                    client.emit('showMenu', newLobbyData);
                }
            }
        }
    };

    server.getScoreboardData = () => {
        let data = {
            menu: 'scoreboard',
            teams: [],
            players: [],
            gamemode: server.gamemode.type,
            shareLinkToken: server.getFullInviteToken(),
            privateGame: server.isPrivate()
        };
        if (gamemodeList[server.gamemode.type] && gamemodeList[server.gamemode.type].maxScore) {
            data.maxScore = gamemodeList[server.gamemode.type].maxScore;
            data.disableVehicleSelection = gamemodeList[server.gamemode.type].disableVehicleSelection;
            data.forceAllowVehicleSelection = gamemodeList[server.gamemode.type].forceAllowVehicleSelection;
        }

        let teams = Object.keys(server.teamData);
        for (let i=0; i<teams.length; i++) {
            let team = server.teamData[i];
            data.teams.push({
                id: team.id,
                name: server.getTeamString(team.id),
                players: team.clients.length,
                score: team.score,
                maxPlayers: server.getMaxPlayersPerTeam(),
                locked: team.locked || team.dead,
                dead: team.dead
            });
        }

        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            data.players.push({
                clientId: client.clientId,
                name: client.name,
                score: client.kills,
                team: client.team,
                isBot: client.isBot,
                //isTeamLeader: client.team !== null && client.team !== undefined && server.teamData[client.team] && server.teamData[client.team].clients && server.teamData[client.team].clients[0] === client,
                xp: client.user ? client.user.xp : 0
            });
        }

        return data;
    };

    let minPlayersForRoundStart = 1;
    if (process.env.NODE_ENV === 'local') {
        minPlayersForRoundStart = 1;
    }
    server.getLobbyData = () => {
        let data = {
            menu: 'lobby',
            gamemode: 'Unknown Gamemode',
            privateGame: server.isPrivate(),
            isMatchmaking: !!server.matchmakingToken,
            roundStateType: roundState.type,
            startTimer: roundState.endTime - Date.now(),
            shareLinkToken: server.getFullInviteToken(),
            teams: [],
            players: [],
            enableTeamJoining: true
        };

        if (gamemodeList[server.gamemode.type] && gamemodeList[server.gamemode.type].maxScore) {
            data.maxScore = gamemodeList[server.gamemode.type].maxScore;
        }

        if (gamemodeList[server.gamemode.type]) {
            data.gamemodeTitle = gamemodeList[server.gamemode.type].title;
            data.gamemodeText = gamemodeList[server.gamemode.type].text;
            data.xpMultiplier = gamemodeList[server.gamemode.type].xpMultiplier;
            data.disableVehicleSelection = gamemodeList[server.gamemode.type].disableVehicleSelection;
            data.forceAllowVehicleSelection = gamemodeList[server.gamemode.type].forceAllowVehicleSelection;

            data.enableTeamJoining = server.isPrivate() || !gamemodeList[server.gamemode.type].disableTeamJoining;
        }

        let teams = Object.keys(server.teamData);
        for (let i=0; i<teams.length; i++) {
            let team = server.teamData[i];
            data.teams.push({
                id: team.id,
                name: server.getTeamString(team.id),
                players: team.clients.length,
                maxPlayers: server.getMaxPlayersPerTeam(),
                locked: team.locked || team.dead,
                dead: team.dead
            });
        }

        let allClientsReady = true;
        let clientCount = 0;
        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            if (client.isBot || data.isMatchmaking || (!client.user || (client.user.xp < 1000 && !data.forceAllowVehicleSelection))) {
                server.readyPlayer(client);
            } else {
                clientCount++;
            }

            let playerData = {
                clientId: client.clientId,
                name: client.name,
                team: client.team,
                ready: client.ready,
                xp: client.user ? client.user.xp : 0,
                isBot: client.isBot,
                //isTeamLeader: client.team !== null && client.team !== undefined && server.teamData[client.team] && server.teamData[client.team].clients && server.teamData[client.team].clients[0] === client,
                canLock: false
            };
            if (playerData.isTeamLeader) {
                //playerData.canLock = client.team >= 2;
                playerData.canLock = true;
            }
            data.players.push(playerData);

            if (!client.ready) {
                allClientsReady = false;
            }
        }

        if (data.isMatchmaking) {
            allClientsReady = false;
            /*
            if (clientCount >= tokenRequestData.expectedPlayers) {
                allClientsReady = true;
            }
            */
        }

        if (roundState.type === 'lobby' && server.clients.length >= minPlayersForRoundStart && allClientsReady) {
            server.startRound();
        }

        return data;
    };

    server.updateAmbientSound = (newSound) => {
        if (server.mapData.ambientSound !== newSound) {
            server.mapData.ambientSound = newSound;
            server.sendMessage('updateAmbientSound', {
                sound: newSound
            });
        }
    };

    server.getClientByName = (name) => {
        for (let i=0; i<server.clients.length; i++) {
            let client = server.clients[i];
            if (client.name === name) {
                return client;
            }
        }

        return null;
    };

    server.spawnPlayer = (socket, posXOverride, posYOverride, angleOverride) => {
        let playerNetData = {
            clientId: socket.id
        };
        if (gamemodeList[server.gamemode.type].onSpawnPlayer) {
            gamemodeList[server.gamemode.type].onSpawnPlayer(socket, playerNetData);
        }

        let spawn = {
            x: server.MAP_WIDTH/2,
            y: server.MAP_HEIGHT/2,
            properties: {
                angle: 0
            }
        };

        let team = server.teamData[socket.team];
        let spawns = [];
        if (team && team.spawns) {
            if (socket.spawnType && team.specialSpawns[socket.spawnType] && team.specialSpawns[socket.spawnType].length) {
                spawns = team.specialSpawns[socket.spawnType];
            } else {
                spawns = team.spawns;
            }
        } else if (server.mapData && server.mapData.randomSpawns) {
            spawns = server.mapData.randomSpawns;
        }

        if (server.gamemode.rounds >= 1) {
            let teamCount = Object.keys(server.teamData).length;
            let nextTeamId = socket.team + server.gamemode.rounds;
            if (nextTeamId >= teamCount) {
                nextTeamId = nextTeamId%teamCount;
            }

            if (gamemodeList[server.gamemode.type].disableSpawnFlipping) {
                nextTeamId = socket.team;
            }

            let nextTeam = server.teamData[nextTeamId];
            if (nextTeam) {
                if (socket.spawnType && nextTeam.specialSpawns[socket.spawnType] && nextTeam.specialSpawns[socket.spawnType].length) {
                    spawns = nextTeam.specialSpawns[socket.spawnType];
                } else {
                    spawns = nextTeam.spawns;
                }
            }
        }

        let nextSpawnIdObject = {};
        if (gamemodeList[server.gamemode.type].useRandomSpawns) {
            nextSpawnIdObject = server;
        } else if (team) {
            nextSpawnIdObject = team;
            if (socket.spawnType) {
                if (!team['nextSpawnIdObject_' + socket.spawnType]) {
                    team['nextSpawnIdObject_' + socket.spawnType] = {};
                }
                nextSpawnIdObject = team['nextSpawnIdObject_' + socket.spawnType];
            }
        }

        if (!nextSpawnIdObject.nextSpawnId) {
            nextSpawnIdObject.nextSpawnId = 0;
        }
        if (spawns && spawns.length && spawns[nextSpawnIdObject.nextSpawnId]) {
            if (gamemodeList[server.gamemode.type].useRandomSpawns) {
                let maxCheckDist = 2000;
                for (let i=0; i<spawns.length; i++) {
                    let spawn = spawns[i];
                    spawn.spawnScore = 0;

                    for (let j=0; j<server.clients.length; j++) {
                        let client = server.clients[j];
                        if (client && client.player && client.player.valid && client.player.netData && client.player.netData.alive) {
                            let dist = Math.distanceBetween(spawn, client.player);
                            if (dist <= maxCheckDist) {
                                spawn.spawnScore += Math.round(maxCheckDist-dist);
                            }
                        }
                    }
                }
                nextSpawnIdObject.nextSpawnId = 0;
                spawns.sort((a, b) => {
                    return a.spawnScore - b.spawnScore;
                });
            }

            spawn = spawns[nextSpawnIdObject.nextSpawnId];

            if (!spawn.properties.angle) {
                spawn.properties.angle = 0;
            }
            if (socket.spawnType) {
                delete socket.spawnType;
            } else {
                nextSpawnIdObject.nextSpawnId++;
                if (nextSpawnIdObject.nextSpawnId >= spawns.length) {
                    nextSpawnIdObject.nextSpawnId -= spawns.length;
                }
                if (nextSpawnIdObject.nextSpawnId < 0) {
                    nextSpawnIdObject.nextSpawnId = 0;
                }
                if (nextSpawnIdObject.nextSpawnId >= spawns.length) {
                    nextSpawnIdObject.nextSpawnId = 0;
                }
            }
        }

        if (posXOverride && posYOverride && angleOverride) {
            spawn = {
                x: posXOverride,
                y: posYOverride,
                properties: {
                    angle: angleOverride
                }
            };
        }

        if (!socket.hasAlreadySpawned && roundState.type === 'playing') {
            socket.hasAlreadySpawned = true;
            if (Date.now() - server.roundStartTime > 100) {
                socket.emit('setAnnouncement', server.getGamemodeAnnouncement());
            }

            if (!socket.isBot) {
                server.aiManager.balanceTeamsWithBots();
            }
        }

        let selectedSlot = socket.selectedSlot;
        let selectedSlotCosmetics = null;
        let currentVehicle = 'medium_tank';
        if (socket.user && socket.user.settings) {
            let slot = socket.user.settings.slots[selectedSlot];
            if (slot && slot.vehicle) {
                currentVehicle = slot.vehicle;
            }

            if (slot && slot.skin && global.gameServer.skinListMap[slot.skin]) {
                selectedSlotCosmetics = {};
                selectedSlotCosmetics.skin = {
                    texture: global.gameServer.skinListMap[slot.skin].texture,
                    offset: slot.skinData.offset,
                    scale: slot.skinData.scale,
                    rotation: slot.skinData.rotation
                };
            }

            if (slot && slot.decals) {
                if (!selectedSlotCosmetics) {
                    selectedSlotCosmetics = {};
                }

                for (let i=0; i<2; i++) {
                    let decalKey = 'decal' + i;
                    let decalSlot = slot.decals[decalKey];
                    if (decalSlot && decalSlot.decal) {
                        let decalItem = global.gameServer.decalListMap[decalSlot.decal];
                        if (decalItem) {
                            selectedSlotCosmetics[decalKey] = {
                                texture: decalItem.texture,
                                section: decalSlot.decalData.section,
                                offset: {
                                    x: decalSlot.decalData.offset.x,
                                    y: decalSlot.decalData.offset.y
                                },
                                scale: decalSlot.decalData.scale,
                                rotation: decalSlot.decalData.rotation
                            };
                        }
                    }
                }
            }
        }

        if (!socket.killstreakSlots || currentVehicle !== socket.killstreakCurrentVehicle) {
            server.resetKillstreakSlots(socket);
        }

        if (socket.overrideSlotTank) {
            currentVehicle = socket.overrideSlotTank;
        }

        socket.spawns++;
        playerNetData.tankType = currentVehicle;
        playerNetData.cosmetics = socket.cosmetics ? socket.cosmetics : {};
        if (selectedSlotCosmetics) {
            playerNetData.cosmetics = selectedSlotCosmetics;
        }
        if (socket.lastRoundEndData) {
            playerNetData.lastRoundEndData = socket.lastRoundEndData;
            delete socket.lastRoundEndData;
        }

        let offset = {
            x: Math.random()*5,
            y: Math.random()*5
        };
        if (config.isSandbox || roundEnded) {
            offset = {x: 0, y: 0};
        }

        let player;
        if (currentVehicle === 'colossus') {
            player = server.createVehicle('colossus', spawn.x + offset.x, spawn.y + offset.y, 0, Math.radians(spawn.properties.angle), 64, 64, socket.team, playerNetData);
            player.owner = player;
        } else {
            player = server.createVehicle('tank', spawn.x + offset.x, spawn.y + offset.y, 0, Math.radians(spawn.properties.angle), 128, 128, socket.team, playerNetData);
            //player = server.createActor('human', spawn.x + offset.x, spawn.y + offset.y, 0, Math.radians(spawn.properties.angle), 80, 64, socket.team, playerNetData);
        }
        if (gamemodeList[server.gamemode.type].onPlayerVehicleCreated) {
            gamemodeList[server.gamemode.type].onPlayerVehicleCreated(socket, player);
        }
        server.switchPlayer(socket, player);
        socket.hasSpawned = true;
        if (!gameEnded) {
            socket.emit('showMenu', null);
        }

        if (player.team === null || player.team === undefined) {
            console.error('Removed player for null team:', socket.realAddress, socket.name, player.isBot);
            player.remove();
        }
        return player;
    };

    server.switchPlayer = (socket, entity) => {
        if (socket.player) {
            socket.player.netData.name = null;
            socket.player.netData.isDev = false;
            socket.player.currentPlayer = null;
        }

        if (entity && entity.team !== socket.team) {
            server.setClientTeam(socket, entity.team);
        }

        socket.player = entity;
        if (socket.player) {
            socket.player.griefCount = 0;
            socket.player.netData.isDev = socket.user && socket.user.isDev;
            socket.player.netData.name = socket.name;
            socket.player.currentPlayer = socket;
            socket.emit('setPlayer', {
                id: socket.player.id,
                canControl: true
            });
        }
    };

    server.evaluateClientChallenges = function(client, type) {
        if (!client?.user?.settings?.challenges?.completed && client?.user?.settings?.challenges?.list) {
            let evalArgs = Array.prototype.slice.call(arguments, 2);
            evalArgs.unshift(client);

            for (let i=0; i<client.user.settings.challenges.list.length; i++) {
                let challengeData = client.user.settings.challenges.list[i];
                if (!challengeData.completed && challengeList[challengeData.key]) {
                    let challenge = challengeList[challengeData.key];
                    if ((!challenge.gamemode || challenge.gamemode === server.gamemode.type || (challenge.gamemode === 'random' && server.gamemode.type !== 'conquest' && server.gamemode.type !== 'battle'))
                        && challengeData.value < challengeData.req && typeof challenge[type] === 'function') {
                        try {
                            let result = challenge[type].apply(challengeData, evalArgs);
                            if (result) {
                                challengeData.value += result;
                                if (challengeData.value >= challengeData.req) {
                                    challengeData.value = challengeData.req;
                                }
                            }
                        } catch (e) {
                            console.error('Failed to process challenge:', challengeData.key, type, e);
                        }
                    }
                }
            }
        }
    };

    server.recordKill = (attacker, victim, hitData) => {
        if (attacker && victim && attacker.team !== null && victim.team !== null && server.teamData[attacker.team]) {
            server.teamData[attacker.team].kills++;

            if (attacker.currentPlayer && victim.currentPlayer) {
                attacker.currentPlayer.kills++;

                server.evaluateClientChallenges(attacker.currentPlayer, 'onKill', attacker, victim, hitData);

                if (attacker.valid && attacker.netData && attacker.netData.alive && !gamemodeList[server.gamemode.type].disableKillstreaks) {
                    attacker.currentPlayer.killstreakKills++;
                    if (attacker.currentPlayer.killstreakKills > 5) {
                        attacker.currentPlayer.killstreakKills = 1;
                        attacker.currentPlayer.killstreakLevel++;
                        if (attacker.currentPlayer.killstreakLevel > 3) {
                            attacker.currentPlayer.killstreakLevel = 0;
                        }
                    }

                    if (attacker.currentPlayer.killstreakKills === 1) {
                        attacker.currentPlayer.killstreakSlots[0].active = true;
                        attacker.currentPlayer.emit('setAnnouncement', {
                            title: 'Ability Ready: ' + attacker.currentPlayer.killstreakSlots[0].type.toUpperCase(),
                            text: '',
                            sound: 'powerup_reload',
                            time: 2000
                        });
                    } else if (attacker.currentPlayer.killstreakKills === 3) {
                        attacker.currentPlayer.killstreakSlots[1].active = true;
                        attacker.currentPlayer.emit('setAnnouncement', {
                            title: 'Ability Ready: ' + attacker.currentPlayer.killstreakSlots[1].type.toUpperCase(),
                            text: '',
                            sound: 'powerup_reload',
                            time: 2000
                        });
                    } else if (attacker.currentPlayer.killstreakKills === 5) {
                        attacker.currentPlayer.killstreakSlots[2].active = true;
                        attacker.currentPlayer.emit('setAnnouncement', {
                            title: 'Ability Ready: ' + attacker.currentPlayer.killstreakSlots[2].type.toUpperCase(),
                            text: '',
                            sound: 'powerup_reload',
                            time: 2000
                        });
                    }

                    server.sendKillstreakInfo(attacker.currentPlayer);
                }
            }
        }

        if (gamemodeList[server.gamemode.type].onPlayerKilled) {
            gamemodeList[server.gamemode.type].onPlayerKilled(attacker, victim);
        }

        if (attacker && victim && attacker.netData && victim.netData && attacker.currentPlayer && victim.currentPlayer) {
            server.sendMessage('killfeed', {
                attacker: {
                    id: attacker.currentPlayer.clientId,
                    name: attacker.netData.name,
                    team: attacker.team
                },
                victim: {
                    id: victim.currentPlayer.clientId,
                    name: victim.netData.name,
                    team: victim.team
                },
            });
        }
    };

    server.recordPotentialBestClip = (potentialClip) => {
        if (!currentBestClip || ((!potentialClip.attackerIsBot || currentBestClip.attackerIsBot) && potentialClip.score >= currentBestClip.score)) {
            currentBestClip = potentialClip;
            if (!currentBestClip.timeOfInterest) {
                currentBestClip.timeOfInterest = server.recording.getCurrentTime();
            }
            currentBestClip.time = currentBestClip.timeOfInterest - 8000;
        }
    };

    server.recordScore = (team, amount) => {
        if (server.teamData[team]) {
            server.teamData[team].score += amount;

            if (gamemodeList[server.gamemode.type] && gamemodeList[server.gamemode.type].maxScore) {
                if (server.teamData[team].score >= gamemodeList[server.gamemode.type].maxScore) {
                    server.endRound();
                }
            }

            let winningTeam = server.getWinningTeam(Object.keys(server.teamData));
            if (winningTeam !== null) {
                let teamLength = Object.keys(server.teamData).length;
                for (let i = 0; i < teamLength; i++) {
                    let team = server.teamData[i];
                    if (team && team === server.teamData[winningTeam]) {
                        team.performance = 'winning';
                    } else {
                        team.performance = 'losing';
                    }

                    if (winningTeam && server.teamData[winningTeam]) {
                        team.performanceAmount = team.score - server.teamData[winningTeam].score;
                    } else {
                        team.performanceAmount = 0;
                    }
                }
            }

            server.sendMessage('scoreboardData', server.getScoreboardData());
        }
    };

    server.recordStat = (client, category, type, amount) => {
        if (client && client.stats && category && type && amount) {
            if (!client.stats[category]) {
                client.stats[category] = {};
            }
            if (!client.stats[category][type]) {
                client.stats[category][type] = 0;
            }
            client.stats[category][type] += amount;

            if (client.statChangesTemp) {
                if (!client.statChangesTemp[category]) {
                    client.statChangesTemp[category] = {};
                }
                if (!client.statChangesTemp[category][type]) {
                    client.statChangesTemp[category][type] = 0;
                }
                client.statChangesTemp[category][type] += amount;
            }
        }
    };

    server.recordStatTotalIncludeVehicle = (client, type, amount) => {
        server.recordStat(client, 'totals', type, amount);

        let vehicle = 'medium_tank';
        if (client.user && client.user.settings && client.user.settings.slots) {
            let slot = client.user.settings.slots[client.selectedSlot];
            if (slot && slot.vehicle) {
                vehicle = slot.vehicle;
            }
        }
        server.recordStat(client, 'vehicle-' + vehicle, type, amount);
    };

    server.recordXP = (client, gains, damage) => {
        let xpMultiplier = 1;
        if (server.gamemodeList[server.gamemode.type] && server.gamemodeList[server.gamemode.type].xpMultiplier) {
            xpMultiplier = server.gamemodeList[server.gamemode.type].xpMultiplier;
        }

        let total = 0;
        if (client && gains && gains.length > 0) {
            //Temporary variable used to get total changes for challenge updates.
            client.statChangesTemp = {};

            let text = '';
            let sound = null;
            let isKill = false;
            for (let i=0; i<gains.length; i++) {
                let gain = gains[i];
                if (gain.xp && gain.reason) {
                    gain.xp = Math.round(gain.xp * xpMultiplier);
                    total += gain.xp;
                    text += gain.xp + ' XP - ' + gain.reason + (gain.extraReason  ? gain.extraReason : '') + '\n';
                    server.recordStatTotalIncludeVehicle(client, gain.reason, 1);

                    if (gain.reason === 'Kill') {
                        sound = 'kill';
                        isKill = true;
                    } else if (gain.reason === 'Assist') {
                        sound = 'assist';
                    } else if (isKill) {
                        if (gain.reason.indexOf('Kill') === -1) {
                            server.recordStatTotalIncludeVehicle(client, gain.reason + ' Kill', 1);
                        }
            